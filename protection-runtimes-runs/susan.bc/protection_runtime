Running input dependency analysis pass
Processing function usage0
Processing function usage
Processing function getint0
Processing function getint1
Processing function getint2
Processing function getint
Processing function get_image0
Processing function get_image1
Processing function get_image2
Processing function get_image
Processing function put_image0
Processing function put_image1
Processing function put_image
Processing function int_to_uchar0
Processing function int_to_uchar1
Processing function int_to_uchar2
Processing function int_to_uchar3
Processing function int_to_uchar4
Processing function int_to_uchar5
Processing function int_to_uchar6
Processing function int_to_uchar
Processing function setup_brightness_lut0
Processing function setup_brightness_lut
Processing function susan_principle0
Processing function susan_principle1
Processing function susan_principle2
Processing function susan_principle
Processing function susan_principle_small0
Processing function susan_principle_small1
Processing function susan_principle_small2
Processing function susan_principle_small
Processing function median
Processing function enlarge0
Processing function enlarge1
Processing function enlarge2
Processing function enlarge3
Processing function enlarge4
Processing function enlarge
Processing function susan_smoothing0
Processing function susan_smoothing1
Processing function susan_smoothing2
Processing function susan_smoothing3
Processing function susan_smoothing4
Processing function susan_smoothing5
Processing function susan_smoothing6
Processing function susan_smoothing7
Processing function susan_smoothing8
Processing function susan_smoothing9
Processing function susan_smoothing10
Processing function susan_smoothing11
Processing function susan_smoothing12
Processing function susan_smoothing13
Processing function susan_smoothing14
Processing function susan_smoothing15
Processing function susan_smoothing16
Processing function susan_smoothing17
Processing function susan_smoothing18
Processing function susan_smoothing19
Processing function susan_smoothing20
Processing function susan_smoothing21
Processing function susan_smoothing22
Processing function susan_smoothing23
Processing function susan_smoothing
Processing function edge_draw0
Processing function edge_draw1
Processing function edge_draw2
Processing function edge_draw3
Processing function edge_draw4
Processing function edge_draw5
Processing function edge_draw6
Processing function edge_draw7
Processing function edge_draw
Processing function susan_thin0
Processing function susan_thin1
Processing function susan_thin2
Processing function susan_thin3
Processing function susan_thin4
Processing function susan_thin5
Processing function susan_thin6
Processing function susan_thin7
Processing function susan_thin8
Processing function susan_thin9
Processing function susan_thin10
Processing function susan_thin
Processing function susan_edges0
Processing function susan_edges1
Processing function susan_edges2
Processing function susan_edges3
Processing function susan_edges4
Processing function susan_edges5
Processing function susan_edges6
Processing function susan_edges7
Processing function susan_edges8
Processing function susan_edges9
Processing function susan_edges10
Processing function susan_edges11
Processing function susan_edges12
Processing function susan_edges13
Processing function susan_edges14
Processing function susan_edges15
Processing function susan_edges16
Processing function susan_edges17
Processing function susan_edges
Processing function susan_edges_small0
Processing function susan_edges_small1
Processing function susan_edges_small2
Processing function susan_edges_small3
Processing function susan_edges_small4
Processing function susan_edges_small5
Processing function susan_edges_small6
Processing function susan_edges_small7
Processing function susan_edges_small8
Processing function susan_edges_small9
Processing function susan_edges_small10
Processing function susan_edges_small11
Processing function susan_edges_small12
Processing function susan_edges_small13
Processing function susan_edges_small14
Processing function susan_edges_small15
Processing function susan_edges_small16
Processing function susan_edges_small17
Processing function susan_edges_small
Processing function corner_draw
Processing function susan_corners0
Processing function susan_corners1
Processing function susan_corners2
Processing function susan_corners3
Processing function susan_corners4
Processing function susan_corners5
Processing function susan_corners6
Processing function susan_corners
Processing function susan_corners_quick0
Processing function susan_corners_quick1
Processing function susan_corners_quick2
Processing function susan_corners_quick3
Processing function susan_corners_quick4
Processing function susan_corners_quick5
Processing function susan_corners_quick
Processing function main0
Processing function main1
Processing function main2
Processing function main3
Processing function main4
Processing function main5
Processing function main6
Processing function main7
Processing function main8
Processing function main9
Processing function main10
Processing function main11
Processing function main
Finalizing main
Finalizing main11
Mark Input dependent function main11
Finalizing main10
Mark Input dependent function main10
Finalizing main9
Mark Input dependent function main9
Finalizing main8
Mark Input dependent function main8
Finalizing main7
Mark Input dependent function main7
Finalizing main6
Mark Input dependent function main6
Finalizing main5
Mark Input dependent function main5
Finalizing main4
Mark Input dependent function main4
Finalizing main3
Mark Input dependent function main3
Finalizing main2
Mark Input dependent function main2
Finalizing main1
Mark Input dependent function main1
Finalizing main0
Mark Input dependent function main0
Finalizing susan_corners_quick
Mark Input dependent function susan_corners_quick
Finalizing susan_corners_quick5
Mark Input dependent function susan_corners_quick5
Finalizing susan_corners_quick4
Mark Input dependent function susan_corners_quick4
Finalizing susan_corners_quick3
Mark Input dependent function susan_corners_quick3
Finalizing susan_corners_quick2
Mark Input dependent function susan_corners_quick2
Finalizing susan_corners_quick1
Mark Input dependent function susan_corners_quick1
Finalizing susan_corners_quick0
Mark Input dependent function susan_corners_quick0
Finalizing susan_corners
Mark Input dependent function susan_corners
Finalizing susan_corners6
Mark Input dependent function susan_corners6
Finalizing susan_corners5
Mark Input dependent function susan_corners5
Finalizing susan_corners4
Mark Input dependent function susan_corners4
Finalizing susan_corners3
Mark Input dependent function susan_corners3
Finalizing susan_corners2
Mark Input dependent function susan_corners2
Finalizing susan_corners1
Mark Input dependent function susan_corners1
Finalizing susan_corners0
Mark Input dependent function susan_corners0
Finalizing corner_draw
Mark Input dependent function corner_draw
Finalizing susan_edges_small
Mark Input dependent function susan_edges_small
Finalizing susan_edges_small17
Mark Input dependent function susan_edges_small17
Finalizing susan_edges_small16
Mark Input dependent function susan_edges_small16
Finalizing susan_edges_small15
Mark Input dependent function susan_edges_small15
Finalizing susan_edges_small14
Mark Input dependent function susan_edges_small14
Finalizing susan_edges_small13
Mark Input dependent function susan_edges_small13
Finalizing susan_edges_small12
Mark Input dependent function susan_edges_small12
Finalizing susan_edges_small11
Mark Input dependent function susan_edges_small11
Finalizing susan_edges_small10
Mark Input dependent function susan_edges_small10
Finalizing susan_edges_small9
Mark Input dependent function susan_edges_small9
Finalizing susan_edges_small8
Mark Input dependent function susan_edges_small8
Finalizing susan_edges_small7
Mark Input dependent function susan_edges_small7
Finalizing susan_edges_small6
Mark Input dependent function susan_edges_small6
Finalizing susan_edges_small5
Mark Input dependent function susan_edges_small5
Finalizing susan_edges_small4
Mark Input dependent function susan_edges_small4
Finalizing susan_edges_small3
Mark Input dependent function susan_edges_small3
Finalizing susan_edges_small2
Mark Input dependent function susan_edges_small2
Finalizing susan_edges_small1
Mark Input dependent function susan_edges_small1
Finalizing susan_edges_small0
Mark Input dependent function susan_edges_small0
Finalizing susan_edges
Mark Input dependent function susan_edges
Finalizing susan_edges17
Mark Input dependent function susan_edges17
Finalizing susan_edges16
Mark Input dependent function susan_edges16
Finalizing susan_edges15
Mark Input dependent function susan_edges15
Finalizing susan_edges14
Mark Input dependent function susan_edges14
Finalizing susan_edges13
Mark Input dependent function susan_edges13
Finalizing susan_edges12
Mark Input dependent function susan_edges12
Finalizing susan_edges11
Mark Input dependent function susan_edges11
Finalizing susan_edges10
Mark Input dependent function susan_edges10
Finalizing susan_edges9
Mark Input dependent function susan_edges9
Finalizing susan_edges8
Mark Input dependent function susan_edges8
Finalizing susan_edges7
Mark Input dependent function susan_edges7
Finalizing susan_edges6
Mark Input dependent function susan_edges6
Finalizing susan_edges5
Mark Input dependent function susan_edges5
Finalizing susan_edges4
Mark Input dependent function susan_edges4
Finalizing susan_edges3
Mark Input dependent function susan_edges3
Finalizing susan_edges2
Mark Input dependent function susan_edges2
Finalizing susan_edges1
Mark Input dependent function susan_edges1
Finalizing susan_edges0
Mark Input dependent function susan_edges0
Finalizing susan_thin
Mark Input dependent function susan_thin
Finalizing susan_thin10
Mark Input dependent function susan_thin10
Finalizing susan_thin9
Mark Input dependent function susan_thin9
Finalizing susan_thin8
Mark Input dependent function susan_thin8
Finalizing susan_thin7
Mark Input dependent function susan_thin7
Finalizing susan_thin6
Mark Input dependent function susan_thin6
Finalizing susan_thin5
Mark Input dependent function susan_thin5
Finalizing susan_thin4
Mark Input dependent function susan_thin4
Finalizing susan_thin3
Mark Input dependent function susan_thin3
Finalizing susan_thin2
Mark Input dependent function susan_thin2
Finalizing susan_thin1
Mark Input dependent function susan_thin1
Finalizing susan_thin0
Mark Input dependent function susan_thin0
Finalizing edge_draw
Mark Input dependent function edge_draw
Finalizing edge_draw7
Mark Input dependent function edge_draw7
Finalizing edge_draw6
Mark Input dependent function edge_draw6
Finalizing edge_draw5
Mark Input dependent function edge_draw5
Finalizing edge_draw4
Mark Input dependent function edge_draw4
Finalizing edge_draw3
Mark Input dependent function edge_draw3
Finalizing edge_draw2
Mark Input dependent function edge_draw2
Finalizing edge_draw1
Mark Input dependent function edge_draw1
Finalizing edge_draw0
Mark Input dependent function edge_draw0
Finalizing susan_smoothing
Mark Input dependent function susan_smoothing
Finalizing susan_smoothing23
Mark Input dependent function susan_smoothing23
Finalizing susan_smoothing22
Mark Input dependent function susan_smoothing22
Finalizing susan_smoothing21
Mark Input dependent function susan_smoothing21
Finalizing susan_smoothing20
Mark Input dependent function susan_smoothing20
Finalizing susan_smoothing19
Mark Input dependent function susan_smoothing19
Finalizing susan_smoothing18
Mark Input dependent function susan_smoothing18
Finalizing susan_smoothing17
Mark Input dependent function susan_smoothing17
Finalizing susan_smoothing16
Mark Input dependent function susan_smoothing16
Finalizing susan_smoothing15
Mark Input dependent function susan_smoothing15
Finalizing susan_smoothing14
Mark Input dependent function susan_smoothing14
Finalizing susan_smoothing13
Mark Input dependent function susan_smoothing13
Finalizing susan_smoothing12
Mark Input dependent function susan_smoothing12
Finalizing susan_smoothing11
Mark Input dependent function susan_smoothing11
Finalizing susan_smoothing10
Mark Input dependent function susan_smoothing10
Finalizing susan_smoothing9
Mark Input dependent function susan_smoothing9
Finalizing susan_smoothing8
Mark Input dependent function susan_smoothing8
Finalizing susan_smoothing7
Mark Input dependent function susan_smoothing7
Finalizing susan_smoothing6
Mark Input dependent function susan_smoothing6
Finalizing susan_smoothing5
Mark Input dependent function susan_smoothing5
Finalizing susan_smoothing4
Mark Input dependent function susan_smoothing4
Finalizing susan_smoothing3
Mark Input dependent function susan_smoothing3
Finalizing susan_smoothing2
Mark Input dependent function susan_smoothing2
Finalizing susan_smoothing1
Mark Input dependent function susan_smoothing1
Finalizing susan_smoothing0
Mark Input dependent function susan_smoothing0
Finalizing enlarge
Mark Input dependent function enlarge
Finalizing enlarge4
Mark Input dependent function enlarge4
Finalizing enlarge3
Mark Input dependent function enlarge3
Finalizing enlarge2
Mark Input dependent function enlarge2
Finalizing enlarge1
Mark Input dependent function enlarge1
Finalizing enlarge0
Mark Input dependent function enlarge0
Finalizing median
Mark Input dependent function median
Finalizing susan_principle_small
Mark Input dependent function susan_principle_small
Finalizing susan_principle_small2
Mark Input dependent function susan_principle_small2
Finalizing susan_principle_small1
Mark Input dependent function susan_principle_small1
Finalizing susan_principle_small0
Mark Input dependent function susan_principle_small0
Finalizing susan_principle
Mark Input dependent function susan_principle
Finalizing susan_principle2
Mark Input dependent function susan_principle2
Finalizing susan_principle1
Mark Input dependent function susan_principle1
Finalizing susan_principle0
Mark Input dependent function susan_principle0
Finalizing setup_brightness_lut
Mark Input dependent function setup_brightness_lut
Finalizing setup_brightness_lut0
Mark Input dependent function setup_brightness_lut0
Finalizing int_to_uchar
Mark Input dependent function int_to_uchar
Finalizing int_to_uchar6
Mark Input dependent function int_to_uchar6
Finalizing int_to_uchar5
Mark Input dependent function int_to_uchar5
Finalizing int_to_uchar4
Mark Input dependent function int_to_uchar4
Finalizing int_to_uchar3
Mark Input dependent function int_to_uchar3
Finalizing int_to_uchar2
Mark Input dependent function int_to_uchar2
Finalizing int_to_uchar1
Mark Input dependent function int_to_uchar1
Finalizing int_to_uchar0
Mark Input dependent function int_to_uchar0
Finalizing put_image
Mark Input dependent function put_image
Finalizing put_image1
Mark Input dependent function put_image1
Finalizing put_image0
Mark Input dependent function put_image0
Finalizing get_image
Finalizing get_image2
Mark Input dependent function get_image2
Finalizing get_image1
Mark Input dependent function get_image1
Finalizing get_image0
Mark Input dependent function get_image0
Finalizing getint
Mark Input dependent function getint
Finalizing getint2
Mark Input dependent function getint2
Finalizing getint1
Mark Input dependent function getint1
Finalizing getint0
Mark Input dependent function getint0
Finalizing usage
Mark Input dependent function usage
Finalizing usage0
Mark Input dependent function usage0
Finished input dependency analysis

In  mark function pass 
In  filter function pass 
Filter file:/home/anahitik/SIP/sip-eval/combination/susan.bc/10/0
here!:susan_corners_quick0
here!:susan_smoothing18
here!:susan_edges_small9
here!:susan_smoothing7
here!:susan_smoothing8
here!:edge_draw2
here!:susan_smoothing12
here!:susan_smoothing3
here!:put_image
here!:put_image0
here!:get_image2
here!:susan_edges_small1
here!:susan_edges_small0
here!:susan_smoothing13
here!:susan_edges_small7
here!:susan_edges_small7
got filter function names
did not find usage demangled to usage
did not find printf demangled to printf
did not find exit demangled to exit
did not find getint demangled to getint
did not find _IO_getc demangled to _IO_getc
did not find fgets demangled to fgets
did not find fprintf demangled to fprintf
did not find get_image demangled to get_image
did not find fopen demangled to fopen
did not find fgetc demangled to fgetc
did not find malloc demangled to malloc
did not find fread demangled to fread
did not find fclose demangled to fclose
Add filter function put_image
FunctionInfo. Adding function:put_image
did not find fwrite demangled to fwrite
did not find int_to_uchar demangled to int_to_uchar
did not find setup_brightness_lut demangled to setup_brightness_lut
did not find exp demangled to exp
did not find susan_principle demangled to susan_principle
did not find llvm.memset.p0i8.i64 demangled to llvm.memset.p0i8.i64
did not find susan_principle_small demangled to susan_principle_small
did not find median demangled to median
did not find enlarge demangled to enlarge
did not find llvm.memcpy.p0i8.p0i8.i64 demangled to llvm.memcpy.p0i8.p0i8.i64
did not find susan_smoothing demangled to susan_smoothing
did not find edge_draw demangled to edge_draw
did not find susan_thin demangled to susan_thin
did not find susan_edges demangled to susan_edges
did not find sqrt demangled to sqrt
did not find susan_edges_small demangled to susan_edges_small
did not find corner_draw demangled to corner_draw
did not find susan_corners demangled to susan_corners
did not find abs demangled to abs
did not find free demangled to free
did not find susan_corners_quick demangled to susan_corners_quick
did not find main demangled to main
did not find atof demangled to atof
did not find atoi demangled to atoi
did not find usage0 demangled to usage0
did not find getint0 demangled to getint0
did not find getint1 demangled to getint1
did not find getint2 demangled to getint2
did not find get_image0 demangled to get_image0
did not find get_image1 demangled to get_image1
Add filter function get_image2
FunctionInfo. Adding function:get_image2
Add filter function put_image0
FunctionInfo. Adding function:put_image0
did not find put_image1 demangled to put_image1
did not find int_to_uchar0 demangled to int_to_uchar0
did not find int_to_uchar1 demangled to int_to_uchar1
did not find int_to_uchar2 demangled to int_to_uchar2
did not find int_to_uchar3 demangled to int_to_uchar3
did not find int_to_uchar4 demangled to int_to_uchar4
did not find int_to_uchar5 demangled to int_to_uchar5
did not find int_to_uchar6 demangled to int_to_uchar6
did not find setup_brightness_lut0 demangled to setup_brightness_lut0
did not find susan_principle0 demangled to susan_principle0
did not find susan_principle1 demangled to susan_principle1
did not find susan_principle2 demangled to susan_principle2
did not find susan_principle_small0 demangled to susan_principle_small0
did not find susan_principle_small1 demangled to susan_principle_small1
did not find susan_principle_small2 demangled to susan_principle_small2
did not find enlarge0 demangled to enlarge0
did not find enlarge1 demangled to enlarge1
did not find enlarge2 demangled to enlarge2
did not find enlarge3 demangled to enlarge3
did not find enlarge4 demangled to enlarge4
did not find susan_smoothing0 demangled to susan_smoothing0
did not find susan_smoothing1 demangled to susan_smoothing1
did not find susan_smoothing2 demangled to susan_smoothing2
Add filter function susan_smoothing3
FunctionInfo. Adding function:susan_smoothing3
did not find susan_smoothing4 demangled to susan_smoothing4
did not find susan_smoothing5 demangled to susan_smoothing5
did not find susan_smoothing6 demangled to susan_smoothing6
Add filter function susan_smoothing7
FunctionInfo. Adding function:susan_smoothing7
Add filter function susan_smoothing8
FunctionInfo. Adding function:susan_smoothing8
did not find susan_smoothing9 demangled to susan_smoothing9
did not find susan_smoothing10 demangled to susan_smoothing10
did not find susan_smoothing11 demangled to susan_smoothing11
Add filter function susan_smoothing12
FunctionInfo. Adding function:susan_smoothing12
Add filter function susan_smoothing13
FunctionInfo. Adding function:susan_smoothing13
did not find susan_smoothing14 demangled to susan_smoothing14
did not find susan_smoothing15 demangled to susan_smoothing15
did not find susan_smoothing16 demangled to susan_smoothing16
did not find susan_smoothing17 demangled to susan_smoothing17
Add filter function susan_smoothing18
FunctionInfo. Adding function:susan_smoothing18
did not find susan_smoothing19 demangled to susan_smoothing19
did not find susan_smoothing20 demangled to susan_smoothing20
did not find susan_smoothing21 demangled to susan_smoothing21
did not find susan_smoothing22 demangled to susan_smoothing22
did not find susan_smoothing23 demangled to susan_smoothing23
did not find edge_draw0 demangled to edge_draw0
did not find edge_draw1 demangled to edge_draw1
Add filter function edge_draw2
FunctionInfo. Adding function:edge_draw2
did not find edge_draw3 demangled to edge_draw3
did not find edge_draw4 demangled to edge_draw4
did not find edge_draw5 demangled to edge_draw5
did not find edge_draw6 demangled to edge_draw6
did not find edge_draw7 demangled to edge_draw7
did not find susan_thin0 demangled to susan_thin0
did not find susan_thin1 demangled to susan_thin1
did not find susan_thin2 demangled to susan_thin2
did not find susan_thin3 demangled to susan_thin3
did not find susan_thin4 demangled to susan_thin4
did not find susan_thin5 demangled to susan_thin5
did not find susan_thin6 demangled to susan_thin6
did not find susan_thin7 demangled to susan_thin7
did not find susan_thin8 demangled to susan_thin8
did not find susan_thin9 demangled to susan_thin9
did not find susan_thin10 demangled to susan_thin10
did not find susan_edges0 demangled to susan_edges0
did not find susan_edges1 demangled to susan_edges1
did not find susan_edges2 demangled to susan_edges2
did not find susan_edges3 demangled to susan_edges3
did not find susan_edges4 demangled to susan_edges4
did not find susan_edges5 demangled to susan_edges5
did not find susan_edges6 demangled to susan_edges6
did not find susan_edges7 demangled to susan_edges7
did not find susan_edges8 demangled to susan_edges8
did not find susan_edges9 demangled to susan_edges9
did not find susan_edges10 demangled to susan_edges10
did not find susan_edges11 demangled to susan_edges11
did not find susan_edges12 demangled to susan_edges12
did not find susan_edges13 demangled to susan_edges13
did not find susan_edges14 demangled to susan_edges14
did not find susan_edges15 demangled to susan_edges15
did not find susan_edges16 demangled to susan_edges16
did not find susan_edges17 demangled to susan_edges17
Add filter function susan_edges_small0
FunctionInfo. Adding function:susan_edges_small0
Add filter function susan_edges_small1
FunctionInfo. Adding function:susan_edges_small1
did not find susan_edges_small2 demangled to susan_edges_small2
did not find susan_edges_small3 demangled to susan_edges_small3
did not find susan_edges_small4 demangled to susan_edges_small4
did not find susan_edges_small5 demangled to susan_edges_small5
did not find susan_edges_small6 demangled to susan_edges_small6
Add filter function susan_edges_small7
FunctionInfo. Adding function:susan_edges_small7
did not find susan_edges_small8 demangled to susan_edges_small8
Add filter function susan_edges_small9
FunctionInfo. Adding function:susan_edges_small9
did not find susan_edges_small10 demangled to susan_edges_small10
did not find susan_edges_small11 demangled to susan_edges_small11
did not find susan_edges_small12 demangled to susan_edges_small12
did not find susan_edges_small13 demangled to susan_edges_small13
did not find susan_edges_small14 demangled to susan_edges_small14
did not find susan_edges_small15 demangled to susan_edges_small15
did not find susan_edges_small16 demangled to susan_edges_small16
did not find susan_edges_small17 demangled to susan_edges_small17
did not find susan_corners0 demangled to susan_corners0
did not find susan_corners1 demangled to susan_corners1
did not find susan_corners2 demangled to susan_corners2
did not find susan_corners3 demangled to susan_corners3
did not find susan_corners4 demangled to susan_corners4
did not find susan_corners5 demangled to susan_corners5
did not find susan_corners6 demangled to susan_corners6
Add filter function susan_corners_quick0
FunctionInfo. Adding function:susan_corners_quick0
did not find susan_corners_quick1 demangled to susan_corners_quick1
did not find susan_corners_quick2 demangled to susan_corners_quick2
did not find susan_corners_quick3 demangled to susan_corners_quick3
did not find susan_corners_quick4 demangled to susan_corners_quick4
did not find susan_corners_quick5 demangled to susan_corners_quick5
did not find main0 demangled to main0
did not find main1 demangled to main1
did not find main2 demangled to main2
did not find main3 demangled to main3
did not find main4 demangled to main4
did not find main5 demangled to main5
did not find main6 demangled to main6
did not find main7 demangled to main7
did not find main8 demangled to main8
did not find main9 demangled to main9
did not find main10 demangled to main10
did not find main11 demangled to main11
Adding usage other functions, ExtractedOnly mode uses other functions
Adding getint other functions, ExtractedOnly mode uses other functions
Adding get_image other functions, ExtractedOnly mode uses other functions
Adding put_image other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar other functions, ExtractedOnly mode uses other functions
Adding setup_brightness_lut other functions, ExtractedOnly mode uses other functions
Adding susan_principle other functions, ExtractedOnly mode uses other functions
Adding susan_principle_small other functions, ExtractedOnly mode uses other functions
Adding median other functions, ExtractedOnly mode uses other functions
Adding enlarge other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing other functions, ExtractedOnly mode uses other functions
Adding edge_draw other functions, ExtractedOnly mode uses other functions
Adding susan_thin other functions, ExtractedOnly mode uses other functions
Adding susan_edges other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small other functions, ExtractedOnly mode uses other functions
Adding corner_draw other functions, ExtractedOnly mode uses other functions
Adding susan_corners other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick other functions, ExtractedOnly mode uses other functions
Adding main other functions, ExtractedOnly mode uses other functions
Adding usage0 other functions, ExtractedOnly mode uses other functions
Adding getint0 other functions, ExtractedOnly mode uses other functions
Adding getint1 other functions, ExtractedOnly mode uses other functions
Adding getint2 other functions, ExtractedOnly mode uses other functions
Adding get_image0 other functions, ExtractedOnly mode uses other functions
Adding get_image1 other functions, ExtractedOnly mode uses other functions
Adding get_image2 other functions, ExtractedOnly mode uses other functions
Adding put_image0 other functions, ExtractedOnly mode uses other functions
Adding put_image1 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar0 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar1 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar2 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar3 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar4 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar5 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar6 other functions, ExtractedOnly mode uses other functions
Adding setup_brightness_lut0 other functions, ExtractedOnly mode uses other functions
Adding susan_principle0 other functions, ExtractedOnly mode uses other functions
Adding susan_principle1 other functions, ExtractedOnly mode uses other functions
Adding susan_principle2 other functions, ExtractedOnly mode uses other functions
Adding susan_principle_small0 other functions, ExtractedOnly mode uses other functions
Adding susan_principle_small1 other functions, ExtractedOnly mode uses other functions
Adding susan_principle_small2 other functions, ExtractedOnly mode uses other functions
Adding enlarge0 other functions, ExtractedOnly mode uses other functions
Adding enlarge1 other functions, ExtractedOnly mode uses other functions
Adding enlarge2 other functions, ExtractedOnly mode uses other functions
Adding enlarge3 other functions, ExtractedOnly mode uses other functions
Adding enlarge4 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing0 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing1 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing2 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing3 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing4 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing5 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing6 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing7 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing8 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing9 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing10 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing11 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing12 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing13 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing14 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing15 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing16 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing17 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing18 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing19 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing20 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing21 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing22 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing23 other functions, ExtractedOnly mode uses other functions
Adding edge_draw0 other functions, ExtractedOnly mode uses other functions
Adding edge_draw1 other functions, ExtractedOnly mode uses other functions
Adding edge_draw2 other functions, ExtractedOnly mode uses other functions
Adding edge_draw3 other functions, ExtractedOnly mode uses other functions
Adding edge_draw4 other functions, ExtractedOnly mode uses other functions
Adding edge_draw5 other functions, ExtractedOnly mode uses other functions
Adding edge_draw6 other functions, ExtractedOnly mode uses other functions
Adding edge_draw7 other functions, ExtractedOnly mode uses other functions
Adding susan_thin0 other functions, ExtractedOnly mode uses other functions
Adding susan_thin1 other functions, ExtractedOnly mode uses other functions
Adding susan_thin2 other functions, ExtractedOnly mode uses other functions
Adding susan_thin3 other functions, ExtractedOnly mode uses other functions
Adding susan_thin4 other functions, ExtractedOnly mode uses other functions
Adding susan_thin5 other functions, ExtractedOnly mode uses other functions
Adding susan_thin6 other functions, ExtractedOnly mode uses other functions
Adding susan_thin7 other functions, ExtractedOnly mode uses other functions
Adding susan_thin8 other functions, ExtractedOnly mode uses other functions
Adding susan_thin9 other functions, ExtractedOnly mode uses other functions
Adding susan_thin10 other functions, ExtractedOnly mode uses other functions
Adding susan_edges0 other functions, ExtractedOnly mode uses other functions
Adding susan_edges1 other functions, ExtractedOnly mode uses other functions
Adding susan_edges2 other functions, ExtractedOnly mode uses other functions
Adding susan_edges3 other functions, ExtractedOnly mode uses other functions
Adding susan_edges4 other functions, ExtractedOnly mode uses other functions
Adding susan_edges5 other functions, ExtractedOnly mode uses other functions
Adding susan_edges6 other functions, ExtractedOnly mode uses other functions
Adding susan_edges7 other functions, ExtractedOnly mode uses other functions
Adding susan_edges8 other functions, ExtractedOnly mode uses other functions
Adding susan_edges9 other functions, ExtractedOnly mode uses other functions
Adding susan_edges10 other functions, ExtractedOnly mode uses other functions
Adding susan_edges11 other functions, ExtractedOnly mode uses other functions
Adding susan_edges12 other functions, ExtractedOnly mode uses other functions
Adding susan_edges13 other functions, ExtractedOnly mode uses other functions
Adding susan_edges14 other functions, ExtractedOnly mode uses other functions
Adding susan_edges15 other functions, ExtractedOnly mode uses other functions
Adding susan_edges16 other functions, ExtractedOnly mode uses other functions
Adding susan_edges17 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small0 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small1 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small2 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small3 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small4 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small5 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small6 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small7 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small8 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small9 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small10 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small11 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small12 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small13 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small14 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small15 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small16 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small17 other functions, ExtractedOnly mode uses other functions
Adding susan_corners0 other functions, ExtractedOnly mode uses other functions
Adding susan_corners1 other functions, ExtractedOnly mode uses other functions
Adding susan_corners2 other functions, ExtractedOnly mode uses other functions
Adding susan_corners3 other functions, ExtractedOnly mode uses other functions
Adding susan_corners4 other functions, ExtractedOnly mode uses other functions
Adding susan_corners5 other functions, ExtractedOnly mode uses other functions
Adding susan_corners6 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick0 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick1 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick2 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick3 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick4 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick5 other functions, ExtractedOnly mode uses other functions
Adding main0 other functions, ExtractedOnly mode uses other functions
Adding main1 other functions, ExtractedOnly mode uses other functions
Adding main2 other functions, ExtractedOnly mode uses other functions
Adding main3 other functions, ExtractedOnly mode uses other functions
Adding main4 other functions, ExtractedOnly mode uses other functions
Adding main5 other functions, ExtractedOnly mode uses other functions
Adding main6 other functions, ExtractedOnly mode uses other functions
Adding main7 other functions, ExtractedOnly mode uses other functions
Adding main8 other functions, ExtractedOnly mode uses other functions
Adding main9 other functions, ExtractedOnly mode uses other functions
Adding main10 other functions, ExtractedOnly mode uses other functions
Adding main11 other functions, ExtractedOnly mode uses other functions
Sensitive functions:0 other functions:151
DesiredConnectivity is :1
Other functions to be fed to the network of checkers
susan_edges_small15
susan_thin4
put_image1
susan_edges_small17
edge_draw
susan_smoothing23
susan_smoothing21
usage0
int_to_uchar5
susan_smoothing9
susan_thin3
susan_edges_small13
susan_smoothing6
susan_smoothing2
susan_principle_small1
susan_edges_small12
susan_edges15
enlarge
susan_edges_small9
get_image
main8
main5
susan_smoothing3
susan_corners3
susan_principle1
susan_edges_small10
susan_edges9
int_to_uchar
susan_edges2
susan_edges13
susan_corners2
susan_smoothing15
susan_edges3
susan_edges_small14
getint0
edge_draw5
edge_draw0
main10
int_to_uchar3
susan_smoothing4
susan_edges7
susan_corners4
enlarge0
susan_smoothing1
usage
susan_principle2
setup_brightness_lut
susan_corners
susan_edges12
getint
get_image2
susan_edges_small16
susan_corners_quick2
susan_corners_quick3
susan_edges11
susan_edges_small2
susan_edges5
corner_draw
susan_edges_small1
getint2
main7
susan_edges16
susan_thin1
susan_edges_small5
susan_thin9
susan_smoothing18
susan_smoothing22
susan_thin2
susan_corners_quick4
susan_smoothing16
put_image
int_to_uchar1
susan_edges_small7
main11
susan_thin6
put_image0
get_image0
susan_smoothing17
susan_smoothing13
enlarge4
main4
int_to_uchar0
main0
main2
main9
susan_edges_small11
susan_corners6
susan_smoothing8
susan_thin8
susan_thin10
susan_corners0
susan_corners_quick1
edge_draw1
susan_edges_small
susan_corners_quick
susan_smoothing14
susan_principle_small2
edge_draw4
susan_edges_small8
setup_brightness_lut0
susan_smoothing
susan_thin7
susan_edges_small6
enlarge3
susan_smoothing20
median
getint1
susan_edges_small3
edge_draw7
susan_thin5
susan_principle
susan_smoothing12
int_to_uchar4
enlarge2
susan_edges4
susan_smoothing10
int_to_uchar6
susan_corners5
susan_smoothing5
main1
susan_corners1
susan_edges
susan_smoothing19
main
susan_principle_small0
susan_edges_small0
enlarge1
susan_smoothing7
susan_smoothing0
get_image1
susan_edges10
susan_edges14
susan_edges17
edge_draw2
int_to_uchar2
susan_smoothing11
main3
edge_draw3
susan_corners_quick0
susan_edges6
susan_thin
susan_edges8
susan_principle0
main6
susan_edges1
susan_edges0
susan_thin0
susan_corners_quick5
susan_edges_small4
susan_principle_small
edge_draw6
***
Sensitive functions to be fed to the network of checkers
***
Sensitive functions only checked:0
DAGCheckersNetwork::getReverseTopologicalSort freed visited
Constructed the network of checkers!
Sensitive functions are never checkers as SensitiveOnlyChecked is set to:0
Dumping checkers network info
{
    "allCheckees": [],
    "topologicalsort": []
}
SC stats is requested, dumping stat file...
{
    "avgConnectivity": -nan.0,
    "desiredConnectivity": 1,
    "numberOfGuardInstructions": 0,
    "numberOfGuards": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveInstructions": 0,
    "stdConnectivity": -nan.0
}
Recieved marked functions 0
ERR. processed 151 function, while filter count is 15
Functions called in loop
Function call numbers
get_image -- 1
main -- 0
Insert hash computation
WARNING: Non-0 memset:   call void @llvm.memset.p0i8.i64(i8* %34, i8 100, i64 %conv67, i32 1, i1 false), !control_dep_instr !9, !argument_dep_instr !8, !data_indep_instr !7
Warning: Empty PHI
PSNodeType::PHI with ID 36
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 37
  - operands: []
No reaching definition for:   %bp = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 in:   %bp.el = alloca i8*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %i.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %temp = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %temp.el = alloca float, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %dpt.el = alloca i8*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %dp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %dp.el = alloca i8*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %increment = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %increment.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   store i8* %63, i8** %64, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7 off: 0
No reaching definition for:   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %mask_size.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %max_r = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %max_r.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %min_r = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %min_r.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   call void @free(i8* %950) #8, !control_dep_instr !5, !data_indep_instr !9 off: 0
No reaching definition for: @stderr = external global %struct._IO_FILE*, align 8 off: 0
No reaching definition for:   %cgy = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %cgy.el = alloca i32*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %cgx = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %cgx.el = alloca i32*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   store i32 7, i32* %info1328, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %i.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %midp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %midp.el = alloca i8*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %call11 = call i32 @fclose(%struct._IO_FILE* %10), !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %retval.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No tags were supplied to be skipped! 
'guard' metadata was found in the input bitcode
Recieved marked functions 0
Recieved filter functions 15
 Skipping function per FilterFunctionPass:usage
 Skipping function per FilterFunctionPass:getint
 Skipping function per FilterFunctionPass:get_image
Collecting defining blocks for put_image
 Skipping function per FilterFunctionPass:int_to_uchar
 Skipping function per FilterFunctionPass:setup_brightness_lut
 Skipping function per FilterFunctionPass:susan_principle
 Skipping function per FilterFunctionPass:susan_principle_small
 Skipping function per FilterFunctionPass:median
 Skipping function per FilterFunctionPass:enlarge
 Skipping function per FilterFunctionPass:susan_smoothing
 Skipping function per FilterFunctionPass:edge_draw
 Skipping function per FilterFunctionPass:susan_thin
 Skipping function per FilterFunctionPass:susan_edges
 Skipping function per FilterFunctionPass:susan_edges_small
 Skipping function per FilterFunctionPass:corner_draw
 Skipping function per FilterFunctionPass:susan_corners
 Skipping function per FilterFunctionPass:susan_corners_quick
 Skipping function per FilterFunctionPass:main
 Skipping function per FilterFunctionPass:usage
 Skipping function per FilterFunctionPass:getint
 Skipping function per FilterFunctionPass:get_image
 Processing function:put_image
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @put_image0(i8** %filename.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.then8  
After path modifications process path
entry  if.end  if.then8  
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @put_image1(i8** %filename.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end10  
After path modifications process path
entry  if.end  if.end10  
 Skipping function per FilterFunctionPass:int_to_uchar
 Skipping function per FilterFunctionPass:setup_brightness_lut
 Skipping function per FilterFunctionPass:susan_principle
 Skipping function per FilterFunctionPass:susan_principle_small
 Skipping function per FilterFunctionPass:median
 Skipping function per FilterFunctionPass:enlarge
 Skipping function per FilterFunctionPass:susan_smoothing
 Skipping function per FilterFunctionPass:edge_draw
 Skipping function per FilterFunctionPass:susan_thin
 Skipping function per FilterFunctionPass:susan_edges
 Skipping function per FilterFunctionPass:susan_edges_small
 Skipping function per FilterFunctionPass:corner_draw
 Skipping function per FilterFunctionPass:susan_corners
 Skipping function per FilterFunctionPass:susan_corners_quick
 Skipping function per FilterFunctionPass:main
Extract path function for assertion assert_put_image_path_0
Extract path function for assertion assert_put_image_path_1
Extract path function for assertion assert_put_image_path_2
OH stats is requested, dumping stat file...
Processed instructions number 11880
{
    "numberOfAssertCalls": 0,
    "numberOfBlocksInFunctionsWithNoDG": 0,
    "numberOfDataDependentInstructions": 32,
    "numberOfHashVariables": 1,
    "numberOfImplicitlyProtectedInstructions": 0,
    "numberOfInstructionsInFilteredFunctions": 11840,
    "numberOfInstructionsInFunctionsWithNoDG": 0,
    "numberOfNonHashableBlocks": 0,
    "numberOfNonHashableInstructions": 4,
    "numberOfOHProcessedInstr": 40,
    "numberOfOtherUnprotectedInstructions": 0,
    "numberOfOtherUnprotectedLoopVariantInstructions": 0,
    "numberOfProtectedArguments": 0,
    "numberOfProtectedBlocks": 0,
    "numberOfProtectedFunctions": 1,
    "numberOfProtectedGuardArguments": 0,
    "numberOfProtectedGuardInstructions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveBlocks": 5,
    "numberOfSensitiveFunctions": 1,
    "numberOfShortRangeAssertCalls": 3,
    "numberOfShortRangeImplicitlyProtectedInstructions": 0,
    "numberOfShortRangeProtectedArguments": 0,
    "numberOfShortRangeProtectedBlocks": 5,
    "numberOfShortRangeProtectedGuardArguments": 0,
    "numberOfShortRangeProtectedGuardInstructions": 0,
    "numberOfShortRangeProtectedInstructions": 4,
    "numberOfUnprotectedArgumentReachableInstructions": 0,
    "numberOfUnprotectedArgumentReachableLoopBlocks": 0,
    "numberOfUnprotectedDataDependentBlocks": 0,
    "numberOfUnprotectedDataDependentLoopBlocks": 0,
    "numberOfUnprotectedGlobalReachableInstructions": 0,
    "numberOfUnprotectedGlobalReachableLoopBlocks": 0,
    "numberOfUnprotectedInputDependentInstructions": 0,
    "numberOfUnprotectedLoopInstructions": 0
}
ERR. processed 1 function, while filter count is 15
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 160.6674 seconds (160.6728 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
  156.4484 ( 97.7%)   0.5241 ( 99.2%)  156.9725 ( 97.7%)  156.9778 ( 97.7%)  runs input dependency analysis
   3.6470 (  2.3%)   0.0040 (  0.8%)   3.6510 (  2.3%)   3.6510 (  2.3%)  Instruments bitcode with hashing and logging functions
   0.0213 (  0.0%)   0.0000 (  0.0%)   0.0213 (  0.0%)   0.0213 (  0.0%)  Bitcode Writer
   0.0067 (  0.0%)   0.0000 (  0.0%)   0.0067 (  0.0%)   0.0067 (  0.0%)  Module Verifier
   0.0032 (  0.0%)   0.0000 (  0.0%)   0.0032 (  0.0%)   0.0032 (  0.0%)  Instruments bitcode with guards
   0.0026 (  0.0%)   0.0001 (  0.0%)   0.0027 (  0.0%)   0.0027 (  0.0%)  Dominator Tree Construction
   0.0027 (  0.0%)   0.0000 (  0.0%)   0.0027 (  0.0%)   0.0027 (  0.0%)  Include functions in a given file in any transformation
   0.0026 (  0.0%)   0.0001 (  0.0%)   0.0027 (  0.0%)   0.0027 (  0.0%)  Post-Dominator Tree Construction
   0.0017 (  0.0%)   0.0001 (  0.0%)   0.0018 (  0.0%)   0.0018 (  0.0%)  Natural Loop Information
   0.0009 (  0.0%)   0.0000 (  0.0%)   0.0009 (  0.0%)   0.0009 (  0.0%)  Call site information
   0.0005 (  0.0%)   0.0000 (  0.0%)   0.0005 (  0.0%)   0.0005 (  0.0%)  Memory SSA
   0.0003 (  0.0%)   0.0000 (  0.0%)   0.0003 (  0.0%)   0.0003 (  0.0%)  runs indirect and virtual calls analysis
   0.0003 (  0.0%)   0.0000 (  0.0%)   0.0003 (  0.0%)   0.0003 (  0.0%)  CallGraph Construction
   0.0003 (  0.0%)   0.0000 (  0.0%)   0.0003 (  0.0%)   0.0003 (  0.0%)  Remove unreachable blocks from the CFG
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Dominator Tree Construction
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Dead Global Elimination
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Dominator Tree Construction
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Basic Alias Analysis (stateless AA impl)
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Natural Loop Information
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Natural Loop Information
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Marks functions in a given file as assert functions
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Function Alias Analysis Results
  160.1389 (100.0%)   0.5285 (100.0%)  160.6674 (100.0%)  160.6728 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0238 seconds (0.0238 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.0235 (100.0%)   0.0003 (100.0%)   0.0238 (100.0%)   0.0238 (100.0%)  Parse IR
   0.0235 (100.0%)   0.0003 (100.0%)   0.0238 (100.0%)   0.0238 (100.0%)  Total

Running input dependency analysis pass
Processing function usage0
Processing function usage
Processing function getint0
Processing function getint1
Processing function getint2
Processing function getint
Processing function get_image0
Processing function get_image1
Processing function get_image2
Processing function get_image
Processing function put_image0
Processing function put_image1
Processing function put_image
Processing function int_to_uchar0
Processing function int_to_uchar1
Processing function int_to_uchar2
Processing function int_to_uchar3
Processing function int_to_uchar4
Processing function int_to_uchar5
Processing function int_to_uchar6
Processing function int_to_uchar
Processing function setup_brightness_lut0
Processing function setup_brightness_lut
Processing function susan_principle0
Processing function susan_principle1
Processing function susan_principle2
Processing function susan_principle
Processing function susan_principle_small0
Processing function susan_principle_small1
Processing function susan_principle_small2
Processing function susan_principle_small
Processing function median
Processing function enlarge0
Processing function enlarge1
Processing function enlarge2
Processing function enlarge3
Processing function enlarge4
Processing function enlarge
Processing function susan_smoothing0
Processing function susan_smoothing1
Processing function susan_smoothing2
Processing function susan_smoothing3
Processing function susan_smoothing4
Processing function susan_smoothing5
Processing function susan_smoothing6
Processing function susan_smoothing7
Processing function susan_smoothing8
Processing function susan_smoothing9
Processing function susan_smoothing10
Processing function susan_smoothing11
Processing function susan_smoothing12
Processing function susan_smoothing13
Processing function susan_smoothing14
Processing function susan_smoothing15
Processing function susan_smoothing16
Processing function susan_smoothing17
Processing function susan_smoothing18
Processing function susan_smoothing19
Processing function susan_smoothing20
Processing function susan_smoothing21
Processing function susan_smoothing22
Processing function susan_smoothing23
Processing function susan_smoothing
Processing function edge_draw0
Processing function edge_draw1
Processing function edge_draw2
Processing function edge_draw3
Processing function edge_draw4
Processing function edge_draw5
Processing function edge_draw6
Processing function edge_draw7
Processing function edge_draw
Processing function susan_thin0
Processing function susan_thin1
Processing function susan_thin2
Processing function susan_thin3
Processing function susan_thin4
Processing function susan_thin5
Processing function susan_thin6
Processing function susan_thin7
Processing function susan_thin8
Processing function susan_thin9
Processing function susan_thin10
Processing function susan_thin
Processing function susan_edges0
Processing function susan_edges1
Processing function susan_edges2
Processing function susan_edges3
Processing function susan_edges4
Processing function susan_edges5
Processing function susan_edges6
Processing function susan_edges7
Processing function susan_edges8
Processing function susan_edges9
Processing function susan_edges10
Processing function susan_edges11
Processing function susan_edges12
Processing function susan_edges13
Processing function susan_edges14
Processing function susan_edges15
Processing function susan_edges16
Processing function susan_edges17
Processing function susan_edges
Processing function susan_edges_small0
Processing function susan_edges_small1
Processing function susan_edges_small2
Processing function susan_edges_small3
Processing function susan_edges_small4
Processing function susan_edges_small5
Processing function susan_edges_small6
Processing function susan_edges_small7
Processing function susan_edges_small8
Processing function susan_edges_small9
Processing function susan_edges_small10
Processing function susan_edges_small11
Processing function susan_edges_small12
Processing function susan_edges_small13
Processing function susan_edges_small14
Processing function susan_edges_small15
Processing function susan_edges_small16
Processing function susan_edges_small17
Processing function susan_edges_small
Processing function corner_draw
Processing function susan_corners0
Processing function susan_corners1
Processing function susan_corners2
Processing function susan_corners3
Processing function susan_corners4
Processing function susan_corners5
Processing function susan_corners6
Processing function susan_corners
Processing function susan_corners_quick0
Processing function susan_corners_quick1
Processing function susan_corners_quick2
Processing function susan_corners_quick3
Processing function susan_corners_quick4
Processing function susan_corners_quick5
Processing function susan_corners_quick
Processing function main0
Processing function main1
Processing function main2
Processing function main3
Processing function main4
Processing function main5
Processing function main6
Processing function main7
Processing function main8
Processing function main9
Processing function main10
Processing function main11
Processing function main
Finalizing main
Finalizing main11
Mark Input dependent function main11
Finalizing main10
Mark Input dependent function main10
Finalizing main9
Mark Input dependent function main9
Finalizing main8
Mark Input dependent function main8
Finalizing main7
Mark Input dependent function main7
Finalizing main6
Mark Input dependent function main6
Finalizing main5
Mark Input dependent function main5
Finalizing main4
Mark Input dependent function main4
Finalizing main3
Mark Input dependent function main3
Finalizing main2
Mark Input dependent function main2
Finalizing main1
Mark Input dependent function main1
Finalizing main0
Mark Input dependent function main0
Finalizing susan_corners_quick
Mark Input dependent function susan_corners_quick
Finalizing susan_corners_quick5
Mark Input dependent function susan_corners_quick5
Finalizing susan_corners_quick4
Mark Input dependent function susan_corners_quick4
Finalizing susan_corners_quick3
Mark Input dependent function susan_corners_quick3
Finalizing susan_corners_quick2
Mark Input dependent function susan_corners_quick2
Finalizing susan_corners_quick1
Mark Input dependent function susan_corners_quick1
Finalizing susan_corners_quick0
Mark Input dependent function susan_corners_quick0
Finalizing susan_corners
Mark Input dependent function susan_corners
Finalizing susan_corners6
Mark Input dependent function susan_corners6
Finalizing susan_corners5
Mark Input dependent function susan_corners5
Finalizing susan_corners4
Mark Input dependent function susan_corners4
Finalizing susan_corners3
Mark Input dependent function susan_corners3
Finalizing susan_corners2
Mark Input dependent function susan_corners2
Finalizing susan_corners1
Mark Input dependent function susan_corners1
Finalizing susan_corners0
Mark Input dependent function susan_corners0
Finalizing corner_draw
Mark Input dependent function corner_draw
Finalizing susan_edges_small
Mark Input dependent function susan_edges_small
Finalizing susan_edges_small17
Mark Input dependent function susan_edges_small17
Finalizing susan_edges_small16
Mark Input dependent function susan_edges_small16
Finalizing susan_edges_small15
Mark Input dependent function susan_edges_small15
Finalizing susan_edges_small14
Mark Input dependent function susan_edges_small14
Finalizing susan_edges_small13
Mark Input dependent function susan_edges_small13
Finalizing susan_edges_small12
Mark Input dependent function susan_edges_small12
Finalizing susan_edges_small11
Mark Input dependent function susan_edges_small11
Finalizing susan_edges_small10
Mark Input dependent function susan_edges_small10
Finalizing susan_edges_small9
Mark Input dependent function susan_edges_small9
Finalizing susan_edges_small8
Mark Input dependent function susan_edges_small8
Finalizing susan_edges_small7
Mark Input dependent function susan_edges_small7
Finalizing susan_edges_small6
Mark Input dependent function susan_edges_small6
Finalizing susan_edges_small5
Mark Input dependent function susan_edges_small5
Finalizing susan_edges_small4
Mark Input dependent function susan_edges_small4
Finalizing susan_edges_small3
Mark Input dependent function susan_edges_small3
Finalizing susan_edges_small2
Mark Input dependent function susan_edges_small2
Finalizing susan_edges_small1
Mark Input dependent function susan_edges_small1
Finalizing susan_edges_small0
Mark Input dependent function susan_edges_small0
Finalizing susan_edges
Mark Input dependent function susan_edges
Finalizing susan_edges17
Mark Input dependent function susan_edges17
Finalizing susan_edges16
Mark Input dependent function susan_edges16
Finalizing susan_edges15
Mark Input dependent function susan_edges15
Finalizing susan_edges14
Mark Input dependent function susan_edges14
Finalizing susan_edges13
Mark Input dependent function susan_edges13
Finalizing susan_edges12
Mark Input dependent function susan_edges12
Finalizing susan_edges11
Mark Input dependent function susan_edges11
Finalizing susan_edges10
Mark Input dependent function susan_edges10
Finalizing susan_edges9
Mark Input dependent function susan_edges9
Finalizing susan_edges8
Mark Input dependent function susan_edges8
Finalizing susan_edges7
Mark Input dependent function susan_edges7
Finalizing susan_edges6
Mark Input dependent function susan_edges6
Finalizing susan_edges5
Mark Input dependent function susan_edges5
Finalizing susan_edges4
Mark Input dependent function susan_edges4
Finalizing susan_edges3
Mark Input dependent function susan_edges3
Finalizing susan_edges2
Mark Input dependent function susan_edges2
Finalizing susan_edges1
Mark Input dependent function susan_edges1
Finalizing susan_edges0
Mark Input dependent function susan_edges0
Finalizing susan_thin
Mark Input dependent function susan_thin
Finalizing susan_thin10
Mark Input dependent function susan_thin10
Finalizing susan_thin9
Mark Input dependent function susan_thin9
Finalizing susan_thin8
Mark Input dependent function susan_thin8
Finalizing susan_thin7
Mark Input dependent function susan_thin7
Finalizing susan_thin6
Mark Input dependent function susan_thin6
Finalizing susan_thin5
Mark Input dependent function susan_thin5
Finalizing susan_thin4
Mark Input dependent function susan_thin4
Finalizing susan_thin3
Mark Input dependent function susan_thin3
Finalizing susan_thin2
Mark Input dependent function susan_thin2
Finalizing susan_thin1
Mark Input dependent function susan_thin1
Finalizing susan_thin0
Mark Input dependent function susan_thin0
Finalizing edge_draw
Mark Input dependent function edge_draw
Finalizing edge_draw7
Mark Input dependent function edge_draw7
Finalizing edge_draw6
Mark Input dependent function edge_draw6
Finalizing edge_draw5
Mark Input dependent function edge_draw5
Finalizing edge_draw4
Mark Input dependent function edge_draw4
Finalizing edge_draw3
Mark Input dependent function edge_draw3
Finalizing edge_draw2
Mark Input dependent function edge_draw2
Finalizing edge_draw1
Mark Input dependent function edge_draw1
Finalizing edge_draw0
Mark Input dependent function edge_draw0
Finalizing susan_smoothing
Mark Input dependent function susan_smoothing
Finalizing susan_smoothing23
Mark Input dependent function susan_smoothing23
Finalizing susan_smoothing22
Mark Input dependent function susan_smoothing22
Finalizing susan_smoothing21
Mark Input dependent function susan_smoothing21
Finalizing susan_smoothing20
Mark Input dependent function susan_smoothing20
Finalizing susan_smoothing19
Mark Input dependent function susan_smoothing19
Finalizing susan_smoothing18
Mark Input dependent function susan_smoothing18
Finalizing susan_smoothing17
Mark Input dependent function susan_smoothing17
Finalizing susan_smoothing16
Mark Input dependent function susan_smoothing16
Finalizing susan_smoothing15
Mark Input dependent function susan_smoothing15
Finalizing susan_smoothing14
Mark Input dependent function susan_smoothing14
Finalizing susan_smoothing13
Mark Input dependent function susan_smoothing13
Finalizing susan_smoothing12
Mark Input dependent function susan_smoothing12
Finalizing susan_smoothing11
Mark Input dependent function susan_smoothing11
Finalizing susan_smoothing10
Mark Input dependent function susan_smoothing10
Finalizing susan_smoothing9
Mark Input dependent function susan_smoothing9
Finalizing susan_smoothing8
Mark Input dependent function susan_smoothing8
Finalizing susan_smoothing7
Mark Input dependent function susan_smoothing7
Finalizing susan_smoothing6
Mark Input dependent function susan_smoothing6
Finalizing susan_smoothing5
Mark Input dependent function susan_smoothing5
Finalizing susan_smoothing4
Mark Input dependent function susan_smoothing4
Finalizing susan_smoothing3
Mark Input dependent function susan_smoothing3
Finalizing susan_smoothing2
Mark Input dependent function susan_smoothing2
Finalizing susan_smoothing1
Mark Input dependent function susan_smoothing1
Finalizing susan_smoothing0
Mark Input dependent function susan_smoothing0
Finalizing enlarge
Mark Input dependent function enlarge
Finalizing enlarge4
Mark Input dependent function enlarge4
Finalizing enlarge3
Mark Input dependent function enlarge3
Finalizing enlarge2
Mark Input dependent function enlarge2
Finalizing enlarge1
Mark Input dependent function enlarge1
Finalizing enlarge0
Mark Input dependent function enlarge0
Finalizing median
Mark Input dependent function median
Finalizing susan_principle_small
Mark Input dependent function susan_principle_small
Finalizing susan_principle_small2
Mark Input dependent function susan_principle_small2
Finalizing susan_principle_small1
Mark Input dependent function susan_principle_small1
Finalizing susan_principle_small0
Mark Input dependent function susan_principle_small0
Finalizing susan_principle
Mark Input dependent function susan_principle
Finalizing susan_principle2
Mark Input dependent function susan_principle2
Finalizing susan_principle1
Mark Input dependent function susan_principle1
Finalizing susan_principle0
Mark Input dependent function susan_principle0
Finalizing setup_brightness_lut
Mark Input dependent function setup_brightness_lut
Finalizing setup_brightness_lut0
Mark Input dependent function setup_brightness_lut0
Finalizing int_to_uchar
Mark Input dependent function int_to_uchar
Finalizing int_to_uchar6
Mark Input dependent function int_to_uchar6
Finalizing int_to_uchar5
Mark Input dependent function int_to_uchar5
Finalizing int_to_uchar4
Mark Input dependent function int_to_uchar4
Finalizing int_to_uchar3
Mark Input dependent function int_to_uchar3
Finalizing int_to_uchar2
Mark Input dependent function int_to_uchar2
Finalizing int_to_uchar1
Mark Input dependent function int_to_uchar1
Finalizing int_to_uchar0
Mark Input dependent function int_to_uchar0
Finalizing put_image
Mark Input dependent function put_image
Finalizing put_image1
Mark Input dependent function put_image1
Finalizing put_image0
Mark Input dependent function put_image0
Finalizing get_image
Finalizing get_image2
Mark Input dependent function get_image2
Finalizing get_image1
Mark Input dependent function get_image1
Finalizing get_image0
Mark Input dependent function get_image0
Finalizing getint
Mark Input dependent function getint
Finalizing getint2
Mark Input dependent function getint2
Finalizing getint1
Mark Input dependent function getint1
Finalizing getint0
Mark Input dependent function getint0
Finalizing usage
Mark Input dependent function usage
Finalizing usage0
Mark Input dependent function usage0
Finished input dependency analysis

In  mark function pass 
In  filter function pass 
Filter file:/home/anahitik/SIP/sip-eval/combination/susan.bc/100/0
here!:usage
here!:getint
here!:get_image
here!:put_image
here!:int_to_uchar
here!:setup_brightness_lut
here!:susan_principle
here!:susan_principle_small
here!:median
here!:enlarge
here!:susan_smoothing
here!:edge_draw
here!:susan_thin
here!:susan_edges
here!:susan_edges_small
here!:corner_draw
here!:susan_corners
here!:susan_corners_quick
here!:main
here!:usage0
here!:getint0
here!:getint1
here!:getint2
here!:get_image0
here!:get_image1
here!:get_image2
here!:put_image0
here!:put_image1
here!:int_to_uchar0
here!:int_to_uchar1
here!:int_to_uchar2
here!:int_to_uchar3
here!:int_to_uchar4
here!:int_to_uchar5
here!:int_to_uchar6
here!:setup_brightness_lut0
here!:susan_principle0
here!:susan_principle1
here!:susan_principle2
here!:susan_principle_small0
here!:susan_principle_small1
here!:susan_principle_small2
here!:enlarge0
here!:enlarge1
here!:enlarge2
here!:enlarge3
here!:enlarge4
here!:susan_smoothing0
here!:susan_smoothing1
here!:susan_smoothing2
here!:susan_smoothing3
here!:susan_smoothing4
here!:susan_smoothing5
here!:susan_smoothing6
here!:susan_smoothing7
here!:susan_smoothing8
here!:susan_smoothing9
here!:susan_smoothing10
here!:susan_smoothing11
here!:susan_smoothing12
here!:susan_smoothing13
here!:susan_smoothing14
here!:susan_smoothing15
here!:susan_smoothing16
here!:susan_smoothing17
here!:susan_smoothing18
here!:susan_smoothing19
here!:susan_smoothing20
here!:susan_smoothing21
here!:susan_smoothing22
here!:susan_smoothing23
here!:edge_draw0
here!:edge_draw1
here!:edge_draw2
here!:edge_draw3
here!:edge_draw4
here!:edge_draw5
here!:edge_draw6
here!:edge_draw7
here!:susan_thin0
here!:susan_thin1
here!:susan_thin2
here!:susan_thin3
here!:susan_thin4
here!:susan_thin5
here!:susan_thin6
here!:susan_thin7
here!:susan_thin8
here!:susan_thin9
here!:susan_thin10
here!:susan_edges0
here!:susan_edges1
here!:susan_edges2
here!:susan_edges3
here!:susan_edges4
here!:susan_edges5
here!:susan_edges6
here!:susan_edges7
here!:susan_edges8
here!:susan_edges9
here!:susan_edges10
here!:susan_edges11
here!:susan_edges12
here!:susan_edges13
here!:susan_edges14
here!:susan_edges15
here!:susan_edges16
here!:susan_edges17
here!:susan_edges_small0
here!:susan_edges_small1
here!:susan_edges_small2
here!:susan_edges_small3
here!:susan_edges_small4
here!:susan_edges_small5
here!:susan_edges_small6
here!:susan_edges_small7
here!:susan_edges_small8
here!:susan_edges_small9
here!:susan_edges_small10
here!:susan_edges_small11
here!:susan_edges_small12
here!:susan_edges_small13
here!:susan_edges_small14
here!:susan_edges_small15
here!:susan_edges_small16
here!:susan_edges_small17
here!:susan_corners0
here!:susan_corners1
here!:susan_corners2
here!:susan_corners3
here!:susan_corners4
here!:susan_corners5
here!:susan_corners6
here!:susan_corners_quick0
here!:susan_corners_quick1
here!:susan_corners_quick2
here!:susan_corners_quick3
here!:susan_corners_quick4
here!:susan_corners_quick5
here!:main0
here!:main1
here!:main2
here!:main3
here!:main4
here!:main5
here!:main6
here!:main7
here!:main8
here!:main9
here!:main10
here!:main11
here!:main11
got filter function names
Add filter function usage
FunctionInfo. Adding function:usage
did not find printf demangled to printf
did not find exit demangled to exit
Add filter function getint
FunctionInfo. Adding function:getint
did not find _IO_getc demangled to _IO_getc
did not find fgets demangled to fgets
did not find fprintf demangled to fprintf
Add filter function get_image
FunctionInfo. Adding function:get_image
did not find fopen demangled to fopen
did not find fgetc demangled to fgetc
did not find malloc demangled to malloc
did not find fread demangled to fread
did not find fclose demangled to fclose
Add filter function put_image
FunctionInfo. Adding function:put_image
did not find fwrite demangled to fwrite
Add filter function int_to_uchar
FunctionInfo. Adding function:int_to_uchar
Add filter function setup_brightness_lut
FunctionInfo. Adding function:setup_brightness_lut
did not find exp demangled to exp
Add filter function susan_principle
FunctionInfo. Adding function:susan_principle
did not find llvm.memset.p0i8.i64 demangled to llvm.memset.p0i8.i64
Add filter function susan_principle_small
FunctionInfo. Adding function:susan_principle_small
Add filter function median
FunctionInfo. Adding function:median
Add filter function enlarge
FunctionInfo. Adding function:enlarge
did not find llvm.memcpy.p0i8.p0i8.i64 demangled to llvm.memcpy.p0i8.p0i8.i64
Add filter function susan_smoothing
FunctionInfo. Adding function:susan_smoothing
Add filter function edge_draw
FunctionInfo. Adding function:edge_draw
Add filter function susan_thin
FunctionInfo. Adding function:susan_thin
Add filter function susan_edges
FunctionInfo. Adding function:susan_edges
did not find sqrt demangled to sqrt
Add filter function susan_edges_small
FunctionInfo. Adding function:susan_edges_small
Add filter function corner_draw
FunctionInfo. Adding function:corner_draw
Add filter function susan_corners
FunctionInfo. Adding function:susan_corners
did not find abs demangled to abs
did not find free demangled to free
Add filter function susan_corners_quick
FunctionInfo. Adding function:susan_corners_quick
Add filter function main
FunctionInfo. Adding function:main
did not find atof demangled to atof
did not find atoi demangled to atoi
Add filter function usage0
FunctionInfo. Adding function:usage0
Add filter function getint0
FunctionInfo. Adding function:getint0
Add filter function getint1
FunctionInfo. Adding function:getint1
Add filter function getint2
FunctionInfo. Adding function:getint2
Add filter function get_image0
FunctionInfo. Adding function:get_image0
Add filter function get_image1
FunctionInfo. Adding function:get_image1
Add filter function get_image2
FunctionInfo. Adding function:get_image2
Add filter function put_image0
FunctionInfo. Adding function:put_image0
Add filter function put_image1
FunctionInfo. Adding function:put_image1
Add filter function int_to_uchar0
FunctionInfo. Adding function:int_to_uchar0
Add filter function int_to_uchar1
FunctionInfo. Adding function:int_to_uchar1
Add filter function int_to_uchar2
FunctionInfo. Adding function:int_to_uchar2
Add filter function int_to_uchar3
FunctionInfo. Adding function:int_to_uchar3
Add filter function int_to_uchar4
FunctionInfo. Adding function:int_to_uchar4
Add filter function int_to_uchar5
FunctionInfo. Adding function:int_to_uchar5
Add filter function int_to_uchar6
FunctionInfo. Adding function:int_to_uchar6
Add filter function setup_brightness_lut0
FunctionInfo. Adding function:setup_brightness_lut0
Add filter function susan_principle0
FunctionInfo. Adding function:susan_principle0
Add filter function susan_principle1
FunctionInfo. Adding function:susan_principle1
Add filter function susan_principle2
FunctionInfo. Adding function:susan_principle2
Add filter function susan_principle_small0
FunctionInfo. Adding function:susan_principle_small0
Add filter function susan_principle_small1
FunctionInfo. Adding function:susan_principle_small1
Add filter function susan_principle_small2
FunctionInfo. Adding function:susan_principle_small2
Add filter function enlarge0
FunctionInfo. Adding function:enlarge0
Add filter function enlarge1
FunctionInfo. Adding function:enlarge1
Add filter function enlarge2
FunctionInfo. Adding function:enlarge2
Add filter function enlarge3
FunctionInfo. Adding function:enlarge3
Add filter function enlarge4
FunctionInfo. Adding function:enlarge4
Add filter function susan_smoothing0
FunctionInfo. Adding function:susan_smoothing0
Add filter function susan_smoothing1
FunctionInfo. Adding function:susan_smoothing1
Add filter function susan_smoothing2
FunctionInfo. Adding function:susan_smoothing2
Add filter function susan_smoothing3
FunctionInfo. Adding function:susan_smoothing3
Add filter function susan_smoothing4
FunctionInfo. Adding function:susan_smoothing4
Add filter function susan_smoothing5
FunctionInfo. Adding function:susan_smoothing5
Add filter function susan_smoothing6
FunctionInfo. Adding function:susan_smoothing6
Add filter function susan_smoothing7
FunctionInfo. Adding function:susan_smoothing7
Add filter function susan_smoothing8
FunctionInfo. Adding function:susan_smoothing8
Add filter function susan_smoothing9
FunctionInfo. Adding function:susan_smoothing9
Add filter function susan_smoothing10
FunctionInfo. Adding function:susan_smoothing10
Add filter function susan_smoothing11
FunctionInfo. Adding function:susan_smoothing11
Add filter function susan_smoothing12
FunctionInfo. Adding function:susan_smoothing12
Add filter function susan_smoothing13
FunctionInfo. Adding function:susan_smoothing13
Add filter function susan_smoothing14
FunctionInfo. Adding function:susan_smoothing14
Add filter function susan_smoothing15
FunctionInfo. Adding function:susan_smoothing15
Add filter function susan_smoothing16
FunctionInfo. Adding function:susan_smoothing16
Add filter function susan_smoothing17
FunctionInfo. Adding function:susan_smoothing17
Add filter function susan_smoothing18
FunctionInfo. Adding function:susan_smoothing18
Add filter function susan_smoothing19
FunctionInfo. Adding function:susan_smoothing19
Add filter function susan_smoothing20
FunctionInfo. Adding function:susan_smoothing20
Add filter function susan_smoothing21
FunctionInfo. Adding function:susan_smoothing21
Add filter function susan_smoothing22
FunctionInfo. Adding function:susan_smoothing22
Add filter function susan_smoothing23
FunctionInfo. Adding function:susan_smoothing23
Add filter function edge_draw0
FunctionInfo. Adding function:edge_draw0
Add filter function edge_draw1
FunctionInfo. Adding function:edge_draw1
Add filter function edge_draw2
FunctionInfo. Adding function:edge_draw2
Add filter function edge_draw3
FunctionInfo. Adding function:edge_draw3
Add filter function edge_draw4
FunctionInfo. Adding function:edge_draw4
Add filter function edge_draw5
FunctionInfo. Adding function:edge_draw5
Add filter function edge_draw6
FunctionInfo. Adding function:edge_draw6
Add filter function edge_draw7
FunctionInfo. Adding function:edge_draw7
Add filter function susan_thin0
FunctionInfo. Adding function:susan_thin0
Add filter function susan_thin1
FunctionInfo. Adding function:susan_thin1
Add filter function susan_thin2
FunctionInfo. Adding function:susan_thin2
Add filter function susan_thin3
FunctionInfo. Adding function:susan_thin3
Add filter function susan_thin4
FunctionInfo. Adding function:susan_thin4
Add filter function susan_thin5
FunctionInfo. Adding function:susan_thin5
Add filter function susan_thin6
FunctionInfo. Adding function:susan_thin6
Add filter function susan_thin7
FunctionInfo. Adding function:susan_thin7
Add filter function susan_thin8
FunctionInfo. Adding function:susan_thin8
Add filter function susan_thin9
FunctionInfo. Adding function:susan_thin9
Add filter function susan_thin10
FunctionInfo. Adding function:susan_thin10
Add filter function susan_edges0
FunctionInfo. Adding function:susan_edges0
Add filter function susan_edges1
FunctionInfo. Adding function:susan_edges1
Add filter function susan_edges2
FunctionInfo. Adding function:susan_edges2
Add filter function susan_edges3
FunctionInfo. Adding function:susan_edges3
Add filter function susan_edges4
FunctionInfo. Adding function:susan_edges4
Add filter function susan_edges5
FunctionInfo. Adding function:susan_edges5
Add filter function susan_edges6
FunctionInfo. Adding function:susan_edges6
Add filter function susan_edges7
FunctionInfo. Adding function:susan_edges7
Add filter function susan_edges8
FunctionInfo. Adding function:susan_edges8
Add filter function susan_edges9
FunctionInfo. Adding function:susan_edges9
Add filter function susan_edges10
FunctionInfo. Adding function:susan_edges10
Add filter function susan_edges11
FunctionInfo. Adding function:susan_edges11
Add filter function susan_edges12
FunctionInfo. Adding function:susan_edges12
Add filter function susan_edges13
FunctionInfo. Adding function:susan_edges13
Add filter function susan_edges14
FunctionInfo. Adding function:susan_edges14
Add filter function susan_edges15
FunctionInfo. Adding function:susan_edges15
Add filter function susan_edges16
FunctionInfo. Adding function:susan_edges16
Add filter function susan_edges17
FunctionInfo. Adding function:susan_edges17
Add filter function susan_edges_small0
FunctionInfo. Adding function:susan_edges_small0
Add filter function susan_edges_small1
FunctionInfo. Adding function:susan_edges_small1
Add filter function susan_edges_small2
FunctionInfo. Adding function:susan_edges_small2
Add filter function susan_edges_small3
FunctionInfo. Adding function:susan_edges_small3
Add filter function susan_edges_small4
FunctionInfo. Adding function:susan_edges_small4
Add filter function susan_edges_small5
FunctionInfo. Adding function:susan_edges_small5
Add filter function susan_edges_small6
FunctionInfo. Adding function:susan_edges_small6
Add filter function susan_edges_small7
FunctionInfo. Adding function:susan_edges_small7
Add filter function susan_edges_small8
FunctionInfo. Adding function:susan_edges_small8
Add filter function susan_edges_small9
FunctionInfo. Adding function:susan_edges_small9
Add filter function susan_edges_small10
FunctionInfo. Adding function:susan_edges_small10
Add filter function susan_edges_small11
FunctionInfo. Adding function:susan_edges_small11
Add filter function susan_edges_small12
FunctionInfo. Adding function:susan_edges_small12
Add filter function susan_edges_small13
FunctionInfo. Adding function:susan_edges_small13
Add filter function susan_edges_small14
FunctionInfo. Adding function:susan_edges_small14
Add filter function susan_edges_small15
FunctionInfo. Adding function:susan_edges_small15
Add filter function susan_edges_small16
FunctionInfo. Adding function:susan_edges_small16
Add filter function susan_edges_small17
FunctionInfo. Adding function:susan_edges_small17
Add filter function susan_corners0
FunctionInfo. Adding function:susan_corners0
Add filter function susan_corners1
FunctionInfo. Adding function:susan_corners1
Add filter function susan_corners2
FunctionInfo. Adding function:susan_corners2
Add filter function susan_corners3
FunctionInfo. Adding function:susan_corners3
Add filter function susan_corners4
FunctionInfo. Adding function:susan_corners4
Add filter function susan_corners5
FunctionInfo. Adding function:susan_corners5
Add filter function susan_corners6
FunctionInfo. Adding function:susan_corners6
Add filter function susan_corners_quick0
FunctionInfo. Adding function:susan_corners_quick0
Add filter function susan_corners_quick1
FunctionInfo. Adding function:susan_corners_quick1
Add filter function susan_corners_quick2
FunctionInfo. Adding function:susan_corners_quick2
Add filter function susan_corners_quick3
FunctionInfo. Adding function:susan_corners_quick3
Add filter function susan_corners_quick4
FunctionInfo. Adding function:susan_corners_quick4
Add filter function susan_corners_quick5
FunctionInfo. Adding function:susan_corners_quick5
Add filter function main0
FunctionInfo. Adding function:main0
Add filter function main1
FunctionInfo. Adding function:main1
Add filter function main2
FunctionInfo. Adding function:main2
Add filter function main3
FunctionInfo. Adding function:main3
Add filter function main4
FunctionInfo. Adding function:main4
Add filter function main5
FunctionInfo. Adding function:main5
Add filter function main6
FunctionInfo. Adding function:main6
Add filter function main7
FunctionInfo. Adding function:main7
Add filter function main8
FunctionInfo. Adding function:main8
Add filter function main9
FunctionInfo. Adding function:main9
Add filter function main10
FunctionInfo. Adding function:main10
Add filter function main11
FunctionInfo. Adding function:main11
Adding usage other functions, ExtractedOnly mode uses other functions
Adding getint other functions, ExtractedOnly mode uses other functions
Adding get_image other functions, ExtractedOnly mode uses other functions
Adding put_image other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar other functions, ExtractedOnly mode uses other functions
Adding setup_brightness_lut other functions, ExtractedOnly mode uses other functions
Adding susan_principle other functions, ExtractedOnly mode uses other functions
Adding susan_principle_small other functions, ExtractedOnly mode uses other functions
Adding median other functions, ExtractedOnly mode uses other functions
Adding enlarge other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing other functions, ExtractedOnly mode uses other functions
Adding edge_draw other functions, ExtractedOnly mode uses other functions
Adding susan_thin other functions, ExtractedOnly mode uses other functions
Adding susan_edges other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small other functions, ExtractedOnly mode uses other functions
Adding corner_draw other functions, ExtractedOnly mode uses other functions
Adding susan_corners other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick other functions, ExtractedOnly mode uses other functions
Adding main other functions, ExtractedOnly mode uses other functions
Adding usage0 other functions, ExtractedOnly mode uses other functions
Adding getint0 other functions, ExtractedOnly mode uses other functions
Adding getint1 other functions, ExtractedOnly mode uses other functions
Adding getint2 other functions, ExtractedOnly mode uses other functions
Adding get_image0 other functions, ExtractedOnly mode uses other functions
Adding get_image1 other functions, ExtractedOnly mode uses other functions
Adding get_image2 other functions, ExtractedOnly mode uses other functions
Adding put_image0 other functions, ExtractedOnly mode uses other functions
Adding put_image1 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar0 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar1 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar2 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar3 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar4 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar5 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar6 other functions, ExtractedOnly mode uses other functions
Adding setup_brightness_lut0 other functions, ExtractedOnly mode uses other functions
Adding susan_principle0 other functions, ExtractedOnly mode uses other functions
Adding susan_principle1 other functions, ExtractedOnly mode uses other functions
Adding susan_principle2 other functions, ExtractedOnly mode uses other functions
Adding susan_principle_small0 other functions, ExtractedOnly mode uses other functions
Adding susan_principle_small1 other functions, ExtractedOnly mode uses other functions
Adding susan_principle_small2 other functions, ExtractedOnly mode uses other functions
Adding enlarge0 other functions, ExtractedOnly mode uses other functions
Adding enlarge1 other functions, ExtractedOnly mode uses other functions
Adding enlarge2 other functions, ExtractedOnly mode uses other functions
Adding enlarge3 other functions, ExtractedOnly mode uses other functions
Adding enlarge4 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing0 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing1 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing2 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing3 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing4 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing5 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing6 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing7 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing8 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing9 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing10 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing11 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing12 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing13 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing14 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing15 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing16 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing17 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing18 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing19 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing20 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing21 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing22 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing23 other functions, ExtractedOnly mode uses other functions
Adding edge_draw0 other functions, ExtractedOnly mode uses other functions
Adding edge_draw1 other functions, ExtractedOnly mode uses other functions
Adding edge_draw2 other functions, ExtractedOnly mode uses other functions
Adding edge_draw3 other functions, ExtractedOnly mode uses other functions
Adding edge_draw4 other functions, ExtractedOnly mode uses other functions
Adding edge_draw5 other functions, ExtractedOnly mode uses other functions
Adding edge_draw6 other functions, ExtractedOnly mode uses other functions
Adding edge_draw7 other functions, ExtractedOnly mode uses other functions
Adding susan_thin0 other functions, ExtractedOnly mode uses other functions
Adding susan_thin1 other functions, ExtractedOnly mode uses other functions
Adding susan_thin2 other functions, ExtractedOnly mode uses other functions
Adding susan_thin3 other functions, ExtractedOnly mode uses other functions
Adding susan_thin4 other functions, ExtractedOnly mode uses other functions
Adding susan_thin5 other functions, ExtractedOnly mode uses other functions
Adding susan_thin6 other functions, ExtractedOnly mode uses other functions
Adding susan_thin7 other functions, ExtractedOnly mode uses other functions
Adding susan_thin8 other functions, ExtractedOnly mode uses other functions
Adding susan_thin9 other functions, ExtractedOnly mode uses other functions
Adding susan_thin10 other functions, ExtractedOnly mode uses other functions
Adding susan_edges0 other functions, ExtractedOnly mode uses other functions
Adding susan_edges1 other functions, ExtractedOnly mode uses other functions
Adding susan_edges2 other functions, ExtractedOnly mode uses other functions
Adding susan_edges3 other functions, ExtractedOnly mode uses other functions
Adding susan_edges4 other functions, ExtractedOnly mode uses other functions
Adding susan_edges5 other functions, ExtractedOnly mode uses other functions
Adding susan_edges6 other functions, ExtractedOnly mode uses other functions
Adding susan_edges7 other functions, ExtractedOnly mode uses other functions
Adding susan_edges8 other functions, ExtractedOnly mode uses other functions
Adding susan_edges9 other functions, ExtractedOnly mode uses other functions
Adding susan_edges10 other functions, ExtractedOnly mode uses other functions
Adding susan_edges11 other functions, ExtractedOnly mode uses other functions
Adding susan_edges12 other functions, ExtractedOnly mode uses other functions
Adding susan_edges13 other functions, ExtractedOnly mode uses other functions
Adding susan_edges14 other functions, ExtractedOnly mode uses other functions
Adding susan_edges15 other functions, ExtractedOnly mode uses other functions
Adding susan_edges16 other functions, ExtractedOnly mode uses other functions
Adding susan_edges17 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small0 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small1 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small2 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small3 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small4 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small5 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small6 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small7 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small8 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small9 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small10 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small11 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small12 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small13 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small14 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small15 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small16 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small17 other functions, ExtractedOnly mode uses other functions
Adding susan_corners0 other functions, ExtractedOnly mode uses other functions
Adding susan_corners1 other functions, ExtractedOnly mode uses other functions
Adding susan_corners2 other functions, ExtractedOnly mode uses other functions
Adding susan_corners3 other functions, ExtractedOnly mode uses other functions
Adding susan_corners4 other functions, ExtractedOnly mode uses other functions
Adding susan_corners5 other functions, ExtractedOnly mode uses other functions
Adding susan_corners6 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick0 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick1 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick2 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick3 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick4 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick5 other functions, ExtractedOnly mode uses other functions
Adding main0 other functions, ExtractedOnly mode uses other functions
Adding main1 other functions, ExtractedOnly mode uses other functions
Adding main2 other functions, ExtractedOnly mode uses other functions
Adding main3 other functions, ExtractedOnly mode uses other functions
Adding main4 other functions, ExtractedOnly mode uses other functions
Adding main5 other functions, ExtractedOnly mode uses other functions
Adding main6 other functions, ExtractedOnly mode uses other functions
Adding main7 other functions, ExtractedOnly mode uses other functions
Adding main8 other functions, ExtractedOnly mode uses other functions
Adding main9 other functions, ExtractedOnly mode uses other functions
Adding main10 other functions, ExtractedOnly mode uses other functions
Adding main11 other functions, ExtractedOnly mode uses other functions
Sensitive functions:0 other functions:151
DesiredConnectivity is :1
Other functions to be fed to the network of checkers
susan_edges_small15
susan_thin4
put_image1
susan_edges_small17
edge_draw
susan_smoothing23
susan_smoothing21
usage0
int_to_uchar5
susan_smoothing9
susan_thin3
susan_edges_small13
susan_smoothing6
susan_smoothing2
susan_principle_small1
susan_edges_small12
susan_edges15
enlarge
susan_edges_small9
get_image
main8
main5
susan_smoothing3
susan_corners3
susan_principle1
susan_edges_small10
susan_edges9
int_to_uchar
susan_edges2
susan_edges13
susan_corners2
susan_smoothing15
susan_edges3
susan_edges_small14
getint0
edge_draw5
edge_draw0
main10
int_to_uchar3
susan_smoothing4
susan_edges7
susan_corners4
enlarge0
susan_smoothing1
usage
susan_principle2
setup_brightness_lut
susan_corners
susan_edges12
getint
get_image2
susan_edges_small16
susan_corners_quick2
susan_corners_quick3
susan_edges11
susan_edges_small2
susan_edges5
corner_draw
susan_edges_small1
getint2
main7
susan_edges16
susan_thin1
susan_edges_small5
susan_thin9
susan_smoothing18
susan_smoothing22
susan_thin2
susan_corners_quick4
susan_smoothing16
put_image
int_to_uchar1
susan_edges_small7
main11
susan_thin6
put_image0
get_image0
susan_smoothing17
susan_smoothing13
enlarge4
main4
int_to_uchar0
main0
main2
main9
susan_edges_small11
susan_corners6
susan_smoothing8
susan_thin8
susan_thin10
susan_corners0
susan_corners_quick1
edge_draw1
susan_edges_small
susan_corners_quick
susan_smoothing14
susan_principle_small2
edge_draw4
susan_edges_small8
setup_brightness_lut0
susan_smoothing
susan_thin7
susan_edges_small6
enlarge3
susan_smoothing20
median
getint1
susan_edges_small3
edge_draw7
susan_thin5
susan_principle
susan_smoothing12
int_to_uchar4
enlarge2
susan_edges4
susan_smoothing10
int_to_uchar6
susan_corners5
susan_smoothing5
main1
susan_corners1
susan_edges
susan_smoothing19
main
susan_principle_small0
susan_edges_small0
enlarge1
susan_smoothing7
susan_smoothing0
get_image1
susan_edges10
susan_edges14
susan_edges17
edge_draw2
int_to_uchar2
susan_smoothing11
main3
edge_draw3
susan_corners_quick0
susan_edges6
susan_thin
susan_edges8
susan_principle0
main6
susan_edges1
susan_edges0
susan_thin0
susan_corners_quick5
susan_edges_small4
susan_principle_small
edge_draw6
***
Sensitive functions to be fed to the network of checkers
***
Sensitive functions only checked:0
DAGCheckersNetwork::getReverseTopologicalSort freed visited
Constructed the network of checkers!
Sensitive functions are never checkers as SensitiveOnlyChecked is set to:0
Dumping checkers network info
{
    "allCheckees": [],
    "topologicalsort": []
}
SC stats is requested, dumping stat file...
{
    "avgConnectivity": -nan.0,
    "desiredConnectivity": 1,
    "numberOfGuardInstructions": 0,
    "numberOfGuards": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveInstructions": 0,
    "stdConnectivity": -nan.0
}
Recieved marked functions 0
Functions called in loop
Function call numbers
get_image -- 1
main -- 0
Insert hash computation
WARNING: Non-0 memset:   call void @llvm.memset.p0i8.i64(i8* %34, i8 100, i64 %conv67, i32 1, i1 false), !control_dep_instr !9, !argument_dep_instr !8, !data_indep_instr !7
Warning: Empty PHI
PSNodeType::PHI with ID 36
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 37
  - operands: []
No reaching definition for:   %bp = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 in:   %bp.el = alloca i8*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %i.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %temp = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %temp.el = alloca float, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %dpt.el = alloca i8*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %dp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %dp.el = alloca i8*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %increment = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %increment.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   store i8* %63, i8** %64, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7 off: 0
No reaching definition for:   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %mask_size.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for: @stderr = external global %struct._IO_FILE*, align 8 in:   store i8* %1, i8** %filename.addr.el, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7, !argument_dep_instr !8 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %call11 = call i32 @fclose(%struct._IO_FILE* %10), !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %i.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %midp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %midp.el = alloca i8*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %max_r = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %max_r.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %min_r = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %min_r.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   call void @free(i8* %950) #8, !control_dep_instr !5, !data_indep_instr !9 off: 0
No reaching definition for:   %cgy = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %cgy.el = alloca i32*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %cgx = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %cgx.el = alloca i32*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   store i32 7, i32* %info1328, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %retval.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No tags were supplied to be skipped! 
'guard' metadata was found in the input bitcode
Recieved marked functions 0
Recieved filter functions 151
Collecting defining blocks for usage
Collecting defining blocks for getint
Collecting defining blocks for get_image
Collecting defining blocks for put_image
Collecting defining blocks for int_to_uchar
Collecting defining blocks for setup_brightness_lut
Collecting defining blocks for susan_principle
Collecting defining blocks for susan_principle_small
Collecting defining blocks for median
Collecting defining blocks for enlarge
Collecting defining blocks for susan_smoothing
Collecting defining blocks for edge_draw
Collecting defining blocks for susan_thin
Collecting defining blocks for susan_edges
Collecting defining blocks for susan_edges_small
Collecting defining blocks for corner_draw
Collecting defining blocks for susan_corners
Collecting defining blocks for susan_corners_quick
Collecting defining blocks for main
 Processing function:usage
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
No oh has been applied in the path
 Processing function:getint
Short range hashing enabled.
Processing path: entry  while.body  if.then  
After path modifications process path
if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !data_indep_instr !9
  %arraydecay = getelementptr inbounds [10000 x i8], [10000 x i8]* %dummy, i32 0, i32 0, !control_dep_instr !5, !data_dep_instr !6, !input_dep_block !10
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.body  if.end  if.then3  
After path modifications process path is empty
Processing path: entry  if.then3  
After path modifications process path
entry  if.then3  
Processing call instruction..
No oh has been applied in the path
Processing path: entry  while.body  if.end  if.end5  land.lhs.true  if.then8  while.end  if.then14  
After path modifications process path
if.end5  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.then8  while.end  while.body11  if.then14  
After path modifications process path is empty
Processing path: entry  if.then8  while.end  if.then14  
After path modifications process path
entry  if.then8  while.end  if.then14  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @getint1(i32* %retval, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @getint1(i32* %retval, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  while.body  if.end  if.end5  land.lhs.true  if.then8  while.end  return  
After path modifications process path
if.end5  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.then8  while.end  while.body11  return  
After path modifications process path is empty
Processing path: entry  if.then8  while.end  return  
After path modifications process path
entry  if.then8  while.end  return  
Processing path: entry  while.body  if.end  if.end5  land.lhs.true  if.then8  while.end  if.then18  while.end20  
After path modifications process path
if.end5  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.then8  while.end  while.body11  if.end15  if.then18  while.end20  
After path modifications process path is empty
Processing path: entry  if.then8  while.end  if.then18  while.end20  
After path modifications process path
entry  if.then8  while.end  if.then18  while.end20  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @getint2(i32* %retval, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @getint2(i32* %retval, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  while.body  if.end  if.end5  land.lhs.true  if.then8  while.end  
After path modifications process path
if.end5  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.then8  while.end  while.body11  if.end15  lor.lhs.false  if.end19  
After path modifications process path is empty
Processing path: entry  if.then8  while.end  
After path modifications process path
entry  if.then8  while.end  
Processing path: entry  while.body  if.end  if.end5  if.end9  
After path modifications process path
if.end5  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
 Processing function:get_image
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Insert assertion evaluating function:get_image callsites detected =1
Insert assertion included function:get_image because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_indep_block !3, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @get_image0(i8** %filename.addr), !control_dep_instr !7, !data_indep_instr !8, !input_dep_block !9
No oh has been applied in the path
Processing path: entry  if.end  land.lhs.true  if.end16  if.then27  
After path modifications process path
entry  if.end  land.lhs.true  if.end16  if.then27  
Insert assertion evaluating function:get_image callsites detected =1
Insert assertion included function:get_image because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_indep_block !3, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @get_image2(i8** %filename.addr), !control_dep_instr !7, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  land.lhs.true  if.end16  if.end29  
After path modifications process path
entry  if.end  land.lhs.true  if.end16  if.end29  
Insert assertion evaluating function:get_image callsites detected =1
Insert assertion included function:get_image because it is not in the skip  assert list!
Processing path: entry  if.end  if.then14  
After path modifications process path
entry  if.end  if.then14  
Insert assertion evaluating function:get_image callsites detected =1
Insert assertion included function:get_image because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_indep_block !3, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @get_image1(i8** %filename.addr), !control_dep_instr !7, !data_indep_instr !8, !input_dep_block !9
 Processing function:put_image
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @put_image0(i8** %filename.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.then8  
After path modifications process path
entry  if.end  if.then8  
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @put_image1(i8** %filename.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end10  
After path modifications process path
entry  if.end  if.end10  
 Processing function:int_to_uchar
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  
After path modifications process path
for.body  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !data_indep_instr !9
  call void @int_to_uchar1(i32* %max_r, i32** %r.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %max_r = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @int_to_uchar1(i32* %max_r, i32** %r.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @int_to_uchar1(i32* %max_r, i32** %r.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @int_to_uchar1(i32* %max_r, i32** %r.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %max_r = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @int_to_uchar0(i32* %max_r, i32* %min_r, i32** %r.addr), !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Can't handle this operand   %min_r = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @int_to_uchar0(i32* %max_r, i32* %min_r, i32** %r.addr), !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @int_to_uchar0(i32* %max_r, i32* %min_r, i32** %r.addr), !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Processing path: entry  for.cond  for.body  if.end  if.then9  
After path modifications process path
for.body  if.end  if.then9  
Hash path invariants only
Invariants are
  br label %if.end12, !control_dep_instr !5, !data_indep_instr !9
  call void @int_to_uchar2(i32* %min_r, i32** %r.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %min_r = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @int_to_uchar2(i32* %min_r, i32** %r.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @int_to_uchar2(i32* %min_r, i32** %r.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @int_to_uchar2(i32* %min_r, i32** %r.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  for.inc  
After path modifications process path
for.body  if.end  if.end12  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  for.cond13  for.body15  for.inc21  
After path modifications process path
for.body15  
Hash path invariants only
Invariants are
  br label %for.inc21, !control_dep_instr !5, !data_indep_instr !9
  call void @int_to_uchar5(i8** %in.addr, i32* %i, i32** %r.addr, i32* %min_r, i32* %max_r), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @int_to_uchar5(i8** %in.addr, i32* %i, i32** %r.addr, i32* %min_r, i32* %max_r), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @int_to_uchar5(i8** %in.addr, i32* %i, i32** %r.addr, i32* %min_r, i32* %max_r), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @int_to_uchar5(i8** %in.addr, i32* %i, i32** %r.addr, i32* %min_r, i32* %max_r), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %min_r = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @int_to_uchar5(i8** %in.addr, i32* %i, i32** %r.addr, i32* %min_r, i32* %max_r), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %max_r = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @int_to_uchar5(i8** %in.addr, i32* %i, i32** %r.addr, i32* %min_r, i32* %max_r), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
No oh has been applied in the path
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing call instruction..
Can't handle this operand   %max_r = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @int_to_uchar4(i32* %max_r, i32* %min_r), !input_indep_block !3, !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Can't handle this operand   %min_r = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @int_to_uchar4(i32* %max_r, i32* %min_r), !input_indep_block !3, !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Processing path: entry  for.cond  for.end  for.end23  
After path modifications process path is empty
Processing path: entry  for.end  for.cond13  for.end23  
After path modifications process path is empty
Processing path: entry  for.end  for.end23  
After path modifications process path
entry  for.end  for.end23  
 Processing function:setup_brightness_lut
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  
After path modifications process path
for.body  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !input_indep_instr !8, !data_indep_instr !9
  call void @setup_brightness_lut0(float* %temp), !input_indep_block !3, !control_dep_instr !5, !argument_dep_instr !7, !input_indep_instr !8, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %temp = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @setup_brightness_lut0(float* %temp), !input_indep_block !3, !control_dep_instr !5, !argument_dep_instr !7, !input_indep_instr !8, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  for.inc  
After path modifications process path
for.body  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  
Extended path is 
entry  for.cond  for.body  if.then  if.end  for.inc  for.end  
After path modifications process path
entry  for.cond  for.body  if.then  if.end  for.inc  for.end  
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
 Processing function:susan_principle
Short range hashing enabled.
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 3, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  for.cond3  for.body7  if.then  
After path modifications process path
for.body7  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  call void @susan_principle0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
  %26 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %max_no.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %n = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 3, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.end  for.inc  
After path modifications process path
for.body7  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %36 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  for.end  for.inc285  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc285, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 3, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
 Processing function:susan_principle_small
Short range hashing enabled.
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  for.cond3  for.body7  if.then  
After path modifications process path
for.body7  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  call void @susan_principle_small0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
  %26 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle_small0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle_small0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %max_no.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle_small0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %n = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle_small0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle_small0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle_small0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.end  for.inc  
After path modifications process path
for.body7  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %38 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  for.end  for.inc81  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc81, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
 Processing function:median
Short range hashing enabled.
Processing path: entry  for.cond  for.body  
Extended path is 
entry  for.cond  for.body  for.cond56  for.end  for.inc78  for.body60  if.end  for.inc  for.end80  
After path modifications process path
entry  for.cond  for.body  for.cond56  for.end  for.inc78  for.body60  if.end  for.inc  for.end80  
Processing path: entry  for.cond56  for.body60  if.then  
After path modifications process path
for.body60  if.then  
Hash path invariants only
Invariants are
  call void @oh_hash1(i64* %local_hash, i64 %65)
  %65 = zext i32 %add63 to i64
  %61 = zext i32 %60 to i64
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  call void @oh_hash2(i64* %local_hash, i64 %64)
  call void @oh_hash2(i64* %local_hash, i64 %61)
  %64 = zext i32 %63 to i64
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
Extended path is 
entry  for.cond  for.body  for.cond56  for.end  for.inc78  for.body60  if.end  for.inc  for.end80  
After path modifications process path
entry  for.cond  for.body  for.cond56  for.end  for.inc78  for.body60  if.end  for.inc  for.end80  
Processing path: entry  for.cond56  for.body60  if.end  for.inc  
After path modifications process path
for.body60  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !input_indep_block !3, !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
  call void @oh_hash1(i64* %local_hash, i64 %89)
  %89 = zext i32 %add63 to i64
  %83 = zext i32 %81 to i64
  call void @oh_hash2(i64* %local_hash, i64 %87)
  %87 = zext i32 %85 to i64
  call void @oh_hash2(i64* %local_hash, i64 %83)
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  for.end  for.inc78  
Extended path is 
entry  for.cond  for.body  for.cond56  for.end  for.inc78  for.body60  if.end  for.inc  for.end80  
After path modifications process path
entry  for.cond  for.body  for.cond56  for.end  for.inc78  for.body60  if.end  for.inc  for.end80  
Processing path: entry  for.cond56  
Extended path is 
entry  for.cond56  for.body60  if.end  for.inc  for.end  
After path modifications process path
entry  for.cond56  for.body60  if.end  for.inc  for.end  
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end80  
Extended path is 
entry  for.cond  for.body  for.cond56  for.end  for.inc78  for.body60  if.end  for.inc  for.end80  
After path modifications process path
entry  for.cond  for.body  for.cond56  for.end  for.inc78  for.body60  if.end  for.inc  for.end80  
Processing path: entry  for.end80  
After path modifications process path
entry  for.end80  
 Processing function:enlarge
Short range hashing enabled.
Processing path: entry  for.cond  for.body  for.inc  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.end  for.cond8  for.body11  for.inc39  
After path modifications process path
for.body11  
Hash path invariants only
Invariants are
  br label %for.inc39, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
No oh has been applied in the path
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing path: entry  for.end  for.end41  for.cond46  for.body51  for.inc82  
After path modifications process path
for.body51  
Hash path invariants only
Invariants are
  br label %for.inc82, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  call void @enlarge2(i8** %tmp_image.addr, i32* %j, i32** %x_size.addr, i32* %border.addr, i32* %i), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %tmp_image.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @enlarge2(i8** %tmp_image.addr, i32* %j, i32** %x_size.addr, i32* %border.addr, i32* %i), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @enlarge2(i8** %tmp_image.addr, i32* %j, i32** %x_size.addr, i32* %border.addr, i32* %i), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @enlarge2(i8** %tmp_image.addr, i32* %j, i32** %x_size.addr, i32* %border.addr, i32* %i), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %border.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @enlarge2(i8** %tmp_image.addr, i32* %j, i32** %x_size.addr, i32* %border.addr, i32* %i), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @enlarge2(i8** %tmp_image.addr, i32* %j, i32** %x_size.addr, i32* %border.addr, i32* %i), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
No oh has been applied in the path
Processing path: entry  for.end  for.end41  
After path modifications process path
entry  for.end  for.end41  
Processing path: entry  for.cond  for.end  for.end41  
After path modifications process path is empty
Processing path: entry  for.end  for.cond8  for.end41  
After path modifications process path is empty
Processing path: entry  for.end  for.end41  for.cond42  for.body45  
After path modifications process path
for.body45  
Hash path invariants only
Invariants are
  br label %for.cond46, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end  for.end41  for.cond46  
After path modifications process path is empty
Processing path: entry  for.end  for.end41  
After path modifications process path
entry  for.end  for.end41  
Processing path: entry  for.cond  for.end  for.end41  
After path modifications process path is empty
Processing path: entry  for.end  for.cond8  for.end41  
After path modifications process path is empty
Processing path: entry  for.end  for.end41  for.cond42  for.body45  for.end84  for.inc85  
After path modifications process path
for.body45  for.end84  
Hash path invariants only
Invariants are
  br label %for.inc85, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond46, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end  for.end41  for.cond42  for.end87  
After path modifications process path is empty
Processing path: entry  for.end  for.cond8  for.end41  for.end87  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  for.end41  for.end87  
After path modifications process path is empty
Processing path: entry  for.end  for.end41  for.end87  
After path modifications process path
entry  for.end  for.end41  for.end87  
 Processing function:susan_smoothing
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  land.lhs.true  if.then14  
After path modifications process path
entry  if.end  land.lhs.true  if.then14  
Processing path: entry  if.end  if.end18  if.then27  
After path modifications process path
entry  if.end  if.end18  if.then27  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond52  for.body55  for.inc  
After path modifications process path
for.body55  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing5(i8** %dpt, i32* %i, i32* %j, float* %temp, i32* %x), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing5(i8** %dpt, i32* %i, i32* %j, float* %temp, i32* %x), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing5(i8** %dpt, i32* %i, i32* %j, float* %temp, i32* %x), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing5(i8** %dpt, i32* %i, i32* %j, float* %temp, i32* %x), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %temp = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing5(i8** %dpt, i32* %i, i32* %j, float* %temp, i32* %x), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing5(i8** %dpt, i32* %i, i32* %j, float* %temp, i32* %x), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond52, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing4(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing4(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing4(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.body  for.end  for.inc65  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc65, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond52, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing4(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing4(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing4(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond95  for.body98  for.inc111  
After path modifications process path
for.body98  
Hash path invariants only
Invariants are
  br label %for.inc111, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing12(i32* %total, i32* %area, i32* %tmp, i8** %ip, i32* %brightness, i8** %dpt, i8** %cp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %total = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing12(i32* %total, i32* %area, i32* %tmp, i8** %ip, i32* %brightness, i8** %dpt, i8** %cp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %area = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing12(i32* %total, i32* %area, i32* %tmp, i8** %ip, i32* %brightness, i8** %dpt, i8** %cp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %tmp = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing12(i32* %total, i32* %area, i32* %tmp, i8** %ip, i32* %brightness, i8** %dpt, i8** %cp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %ip = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing12(i32* %total, i32* %area, i32* %tmp, i8** %ip, i32* %brightness, i8** %dpt, i8** %cp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %brightness = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing12(i32* %total, i32* %area, i32* %tmp, i8** %ip, i32* %brightness, i8** %dpt, i8** %cp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing12(i32* %total, i32* %area, i32* %tmp, i8** %ip, i32* %brightness, i8** %dpt, i8** %cp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing12(i32* %total, i32* %area, i32* %tmp, i8** %ip, i32* %brightness, i8** %dpt, i8** %cp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond90  for.body93  
After path modifications process path
for.body93  
Hash path invariants only
Invariants are
  br label %for.cond95, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing11(i32* %x, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing11(i32* %x, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing11(i32* %x, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing8(i32* %i, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing8(i32* %i, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.end67  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond68  for.body72  
After path modifications process path
for.body72  
Hash path invariants only
Invariants are
  br label %for.cond73, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond73  for.body77  
After path modifications process path
for.body77  
Hash path invariants only
Invariants are
  br label %for.cond90, !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %total, align 4, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %area, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %ip = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %centre = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %bp.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond95  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond90  for.body93  for.end113  for.inc116  
After path modifications process path
for.body93  for.end113  
Hash path invariants only
Invariants are
  br label %for.inc116, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing14(i8** %ip, i32* %increment), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond95, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing11(i32* %x, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing11(i32* %x, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing11(i32* %x, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %ip = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing14(i8** %ip, i32* %increment), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %increment = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing14(i8** %ip, i32* %increment), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.end67  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond68  for.body72  
After path modifications process path
for.body72  
Hash path invariants only
Invariants are
  call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond73, !control_dep_instr !5, !data_indep_instr !8
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond73  for.body77  
After path modifications process path
for.body77  
Hash path invariants only
Invariants are
  store i32 0, i32* %area, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %total, align 4, !control_dep_instr !5, !data_indep_instr !8
  br label %for.cond90, !control_dep_instr !5, !data_indep_instr !8
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %ip = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %centre = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %bp.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond90  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.end67  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond68  for.body72  
After path modifications process path
for.body72  
Hash path invariants only
Invariants are
  call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond73, !control_dep_instr !5, !data_indep_instr !8
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond73  for.body77  for.end118  if.then122  
After path modifications process path
for.body77  for.end118  if.then122  
Hash path invariants only
Invariants are
  call void @susan_smoothing16(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond90, !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %total, align 4, !control_dep_instr !5, !data_indep_instr !8
  br label %if.end131, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %area, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %ip = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %centre = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %bp.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Processing call instruction..
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing16(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %out = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing16(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing16(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing16(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing16(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond90  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.end67  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond68  for.body72  
After path modifications process path
for.body72  
Hash path invariants only
Invariants are
  call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond73, !control_dep_instr !5, !data_indep_instr !8
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond73  for.body77  for.end118  if.end131  for.inc132  
After path modifications process path
for.body77  for.end118  if.end131  
Hash path invariants only
Invariants are
  br label %for.cond90, !control_dep_instr !5, !data_indep_instr !8
  br label %for.inc132, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  store i32 0, i32* %total, align 4, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %area, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %ip = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %centre = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %bp.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond90  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.end67  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond68  for.body72  
After path modifications process path
for.body72  
Hash path invariants only
Invariants are
  call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond73, !control_dep_instr !5, !data_indep_instr !8
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond73  for.body77  for.end118  if.else125  
After path modifications process path
for.body77  for.end118  if.else125  
Hash path invariants only
Invariants are
  br label %if.end131, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing17(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond90, !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %total, align 4, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %area, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %ip = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %centre = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %bp.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Processing call instruction..
Can't handle this operand   %tmp = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing17(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %out = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing17(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %centre = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing17(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %total = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing17(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond73  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond68  for.body72  for.end134  for.inc135  
After path modifications process path
for.body72  for.end134  
Hash path invariants only
Invariants are
  br label %for.inc135, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond73, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.end67  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond68  for.end137  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.end67  for.end137  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.end137  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.end137  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.end266  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.end266  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond144  for.body148  if.then250  
After path modifications process path
for.body148  if.then250  
Hash path invariants only
Invariants are
  call void @susan_smoothing20(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  store i32 0, i32* %area, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  %232 = load i32, i32* %area, align 4, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end259, !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %total, align 4, !control_dep_instr !5, !data_indep_instr !8
  %235 = load i32, i32* %total, align 4, !control_dep_instr !5, !data_dep_instr !6
Processing call instruction..
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing20(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %out = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing20(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing20(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing20(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing20(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond139  for.body143  
After path modifications process path
for.body143  
Hash path invariants only
Invariants are
  br label %for.cond144, !control_dep_instr !5, !data_indep_instr !8
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond144  for.body148  if.end259  for.inc260  
After path modifications process path
for.body148  if.end259  
Hash path invariants only
Invariants are
  %251 = load i32, i32* %area, align 4, !control_dep_instr !5, !data_dep_instr !6
  %254 = load i32, i32* %total, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %total, align 4, !control_dep_instr !5, !data_indep_instr !8
  br label %for.inc260, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  store i32 0, i32* %area, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond139  for.body143  
After path modifications process path
for.body143  
Hash path invariants only
Invariants are
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond144, !control_dep_instr !5, !data_indep_instr !8
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond144  for.body148  if.else253  
After path modifications process path
for.body148  if.else253  
Hash path invariants only
Invariants are
  br label %if.end259, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing21(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  %270 = load i32, i32* %area, align 4, !control_dep_instr !5, !data_dep_instr !6
  %273 = load i32, i32* %total, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %total, align 4, !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %area, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %tmp = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing21(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %out = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing21(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %centre = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing21(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %total = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing21(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond139  for.body143  
After path modifications process path
for.body143  
Hash path invariants only
Invariants are
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond144, !control_dep_instr !5, !data_indep_instr !8
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond144  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond139  for.body143  for.end262  for.inc263  
After path modifications process path
for.body143  for.end262  
Hash path invariants only
Invariants are
  br label %for.inc263, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond144, !control_dep_instr !5, !data_indep_instr !8
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond139  for.end265  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.end265  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.end265  
Processing path: entry  if.else  
After path modifications process path
entry  if.else  
 Processing function:edge_draw
Short range hashing enabled.
Processing path: entry  if.then  for.cond  for.body  if.then4  
After path modifications process path
for.body  if.then4  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !data_indep_instr !8
  call void @edge_draw1(i8** %in.addr, i8** %midp, i32* %x_size.addr, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw1(i8** %in.addr, i8** %midp, i32* %x_size.addr, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %midp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw1(i8** %in.addr, i8** %midp, i32* %x_size.addr, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw1(i8** %in.addr, i8** %midp, i32* %x_size.addr, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw1(i8** %in.addr, i8** %midp, i32* %x_size.addr, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.then  for.cond  for.body  if.end  for.inc  
After path modifications process path
for.body  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !data_indep_instr !8
  call void @edge_draw2(i8** %midp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %midp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw2(i8** %midp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.then  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.then  for.end  
After path modifications process path
entry  if.then  for.end  
Processing path: entry  if.end18  for.cond19  for.body23  if.then27  
After path modifications process path
for.body23  if.then27  
Hash path invariants only
Invariants are
  br label %if.end32, !control_dep_instr !5, !data_indep_instr !8
  call void @edge_draw5(i8** %mid.addr, i8** %midp, i8** %in.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw5(i8** %mid.addr, i8** %midp, i8** %in.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %midp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw5(i8** %mid.addr, i8** %midp, i8** %in.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw5(i8** %mid.addr, i8** %midp, i8** %in.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end18  
After path modifications process path
entry  if.end18  
Processing call instruction..
Can't handle this operand   %midp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw4(i8** %midp, i8** %mid.addr), !input_indep_block !3, !control_dep_instr !5, !input_indep_instr !11, !data_indep_instr !8
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw4(i8** %midp, i8** %mid.addr), !input_indep_block !3, !control_dep_instr !5, !input_indep_instr !11, !data_indep_instr !8
Processing path: entry  if.end18  for.cond19  for.body23  if.end32  for.inc34  
After path modifications process path
for.body23  if.end32  
Hash path invariants only
Invariants are
  br label %for.inc34, !control_dep_instr !5, !data_indep_instr !8
  call void @edge_draw6(i8** %midp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %midp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw6(i8** %midp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end18  
After path modifications process path
entry  if.end18  
Processing path: entry  if.end18  for.cond19  for.end36  
After path modifications process path is empty
Processing path: entry  if.end18  for.end36  
After path modifications process path
entry  if.end18  for.end36  
 Processing function:susan_thin
Short range hashing enabled.
Processing path: entry  for.cond1  for.body4  if.then  if.then70  
After path modifications process path
for.body4  if.then  if.then70  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_thin0(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin0(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin0(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin0(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin0(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.then147  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.then147  
Hash path invariants only
Invariants are
  %arrayidx159 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx157 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx155 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx151 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx150, align 4, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx150 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx149, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %arrayidx148, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx148 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6, !input_dep_block !11
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx149 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end331, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx153 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond336  for.body339  if.then347  
After path modifications process path
for.body339  if.then347  
Hash path invariants only
Invariants are
  br label %if.end353, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  
Hash path invariants only
Invariants are
  call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  br label %for.cond332, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %m = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond332  for.body335  
After path modifications process path
for.body335  
Hash path invariants only
Invariants are
  br label %for.cond336, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond336  for.body339  if.end353  for.inc  
After path modifications process path
for.body339  if.end353  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  
Hash path invariants only
Invariants are
  call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  br label %for.cond332, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %m = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond332  for.body335  
After path modifications process path
for.body335  
Hash path invariants only
Invariants are
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond336, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond336  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  
Hash path invariants only
Invariants are
  call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  br label %for.cond332, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %m = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond332  for.body335  for.end  for.inc354  
After path modifications process path
for.body335  for.end  
Hash path invariants only
Invariants are
  br label %for.inc354, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond336, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond332  
After path modifications process path is empty
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  for.end356  if.then359  if.then367  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  for.end356  if.then359  if.then367  
Hash path invariants only
Invariants are
  call void @susan_thin2(i8** %mid.addr, i32* %b, i32* %i, i32* %a, i32* %x_size.addr, i32* %j), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end392, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  br label %for.cond332, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %m = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin2(i8** %mid.addr, i32* %b, i32* %i, i32* %a, i32* %x_size.addr, i32* %j), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin2(i8** %mid.addr, i32* %b, i32* %i, i32* %a, i32* %x_size.addr, i32* %j), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin2(i8** %mid.addr, i32* %b, i32* %i, i32* %a, i32* %x_size.addr, i32* %j), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin2(i8** %mid.addr, i32* %b, i32* %i, i32* %a, i32* %x_size.addr, i32* %j), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin2(i8** %mid.addr, i32* %b, i32* %i, i32* %a, i32* %x_size.addr, i32* %j), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin2(i8** %mid.addr, i32* %b, i32* %i, i32* %a, i32* %x_size.addr, i32* %j), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond332  
After path modifications process path is empty
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  for.end356  if.then359  if.end392  if.then397  if.then404  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  for.end356  if.then359  if.end392  if.then397  if.then404  
Hash path invariants only
Invariants are
  br label %if.end405, !control_dep_instr !5, !data_indep_instr !9
  store i32 4, i32* %i, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  br label %for.cond332, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %m = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond332  
After path modifications process path is empty
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  for.end356  if.then359  if.end392  if.then397  if.end405  if.then408  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  for.end356  if.then359  if.end392  if.then397  if.end405  if.then408  
Hash path invariants only
Invariants are
  br label %if.end409, !control_dep_instr !5, !data_indep_instr !9
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  br label %for.cond332, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %m = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond332  
After path modifications process path is empty
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  for.end356  if.then359  if.end392  if.then397  if.end405  if.end409  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  for.end356  if.then359  if.end392  if.then397  if.end405  if.end409  
Hash path invariants only
Invariants are
  call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end410, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  br label %for.cond332, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %m = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond332  
After path modifications process path is empty
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  for.end356  if.then359  if.end392  if.end410  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  for.end356  if.then359  if.end392  if.end410  
Hash path invariants only
Invariants are
  br label %if.end411, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  br label %for.cond332, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %m = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond332  
After path modifications process path is empty
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  for.end356  if.then359  if.else376  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  for.end356  if.then359  if.else376  
Hash path invariants only
Invariants are
  br label %if.end392, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_thin3(i32* %b, i32* %a, i32* %i, i32* %x_size.addr, i32* %j, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  br label %for.cond332, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %m = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin3(i32* %b, i32* %a, i32* %i, i32* %x_size.addr, i32* %j, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin3(i32* %b, i32* %a, i32* %i, i32* %x_size.addr, i32* %j, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin3(i32* %b, i32* %a, i32* %i, i32* %x_size.addr, i32* %j, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin3(i32* %b, i32* %a, i32* %i, i32* %x_size.addr, i32* %j, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin3(i32* %b, i32* %a, i32* %i, i32* %x_size.addr, i32* %j, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin3(i32* %b, i32* %a, i32* %i, i32* %x_size.addr, i32* %j, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond332  
After path modifications process path is empty
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  for.end356  if.end411  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.end331  for.end356  if.end411  
Hash path invariants only
Invariants are
  call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end412, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  br label %for.cond332, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %m = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin1(i32* %y, i32* %m), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.then169  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.then169  
Hash path invariants only
Invariants are
  %arrayidx181 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx179 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx175 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx173 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx172, align 8, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx171 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx170, align 4, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx170 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end330, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx177 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx171, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx172 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.end330  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.end330  
Hash path invariants only
Invariants are
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end331, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.then193  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.then193  
Hash path invariants only
Invariants are
  br label %if.end329, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx199 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx197 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx196, align 4, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx195 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx194, align 8, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx194 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6, !input_dep_block !11
  %arrayidx196 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx201 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx195, align 4, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx203 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx205 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.end329  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.end329  
Hash path invariants only
Invariants are
  br label %if.end330, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.then216  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.then216  
Hash path invariants only
Invariants are
  br label %if.end328, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx228 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx224 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx222 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx220 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx219 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx218, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx218 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx217, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %arrayidx219, align 8, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx226 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx217 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6, !input_dep_block !11
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.end328  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.end328  
Hash path invariants only
Invariants are
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end329, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.else230  if.then239  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.else230  if.then239  
Hash path invariants only
Invariants are
  %arrayidx251 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx247 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx245 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx242, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx242 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx241, align 8, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx240 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx241 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx249 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx243 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end327, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx240, align 4, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.else230  if.end327  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.else230  if.end327  
Hash path invariants only
Invariants are
  br label %if.end328, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.else230  if.else253  if.then263  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.else230  if.else253  if.then263  
Hash path invariants only
Invariants are
  %arrayidx275 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx273 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx266 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx265, align 4, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx265 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx264 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6, !input_dep_block !11
  store i32 0, i32* %arrayidx264, align 8, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx267 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end326, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx269 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx266, align 4, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx271 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.else230  if.else253  if.end326  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.else230  if.else253  if.end326  
Hash path invariants only
Invariants are
  br label %if.end327, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.else230  if.else253  if.else277  if.then286  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.else230  if.else253  if.else277  if.then286  
Hash path invariants only
Invariants are
  br label %if.end325, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx294 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx290 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx289, align 16, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %arrayidx288, align 8, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %arrayidx287, align 4, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx287 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6, !input_dep_block !11
  %arrayidx298 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx289 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx292 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx288 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx296 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.else230  if.else253  if.else277  if.end325  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.else230  if.else253  if.else277  if.end325  
Hash path invariants only
Invariants are
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end326, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.else230  if.else253  if.else277  if.else300  if.then310  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.else230  if.else253  if.else277  if.else300  if.then310  
Hash path invariants only
Invariants are
  %arrayidx322 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx318 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx316 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx313, align 4, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx313 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx312, align 4, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx311 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx312 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx320 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx314 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end324, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx311, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.else230  if.else253  if.else277  if.else300  if.end324  
After path modifications process path
for.body4  if.then  if.end  land.lhs.true  if.then84  if.else  if.else183  if.else207  if.else230  if.else253  if.else277  if.else300  if.end324  
Hash path invariants only
Invariants are
  br label %if.end325, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %arrayidx137 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 8, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx124 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 6, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx130 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 7, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %arrayidx111, align 16, !control_dep_instr !5, !data_indep_instr !9
  %arrayidx111 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 4, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx91 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 0, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx97 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 1, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx117 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 5, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx104 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 2, !control_dep_instr !5, !data_dep_instr !6
  %arrayidx110 = getelementptr inbounds [9 x i32], [9 x i32]* %l, i64 0, i64 3, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.then461  if.then463  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.then461  if.then463  
Hash path invariants only
Invariants are
  br label %if.end465, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_thin4(i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin4(i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin4(i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.then461  if.end465  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.then461  if.end465  
Hash path invariants only
Invariants are
  br label %if.end471, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.then461  if.else464  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.then461  if.else464  
Hash path invariants only
Invariants are
  br label %if.end465, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_thin5(i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin5(i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin5(i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.end471  if.then483  land.lhs.true486  land.lhs.true496  land.lhs.true507  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.end471  if.then483  land.lhs.true486  land.lhs.true496  land.lhs.true507  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.end471  if.then483  if.then552  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.end471  if.then483  if.then552  
Hash path invariants only
Invariants are
  br label %if.end563, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_thin8(i32* %i, i32* %y, i32* %x_size.addr, i32* %j, i32* %x, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin8(i32* %i, i32* %y, i32* %x_size.addr, i32* %j, i32* %x, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin8(i32* %i, i32* %y, i32* %x_size.addr, i32* %j, i32* %x, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin8(i32* %i, i32* %y, i32* %x_size.addr, i32* %j, i32* %x, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin8(i32* %i, i32* %y, i32* %x_size.addr, i32* %j, i32* %x, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin8(i32* %i, i32* %y, i32* %x_size.addr, i32* %j, i32* %x, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin8(i32* %i, i32* %y, i32* %x_size.addr, i32* %j, i32* %x, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.end471  if.then483  if.end563  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.end471  if.then483  if.end563  
Hash path invariants only
Invariants are
  br label %if.end564, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.end471  if.then483  lor.lhs.false  land.lhs.true520  land.lhs.true530  land.lhs.true541  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.end471  if.then483  lor.lhs.false  land.lhs.true520  land.lhs.true530  land.lhs.true541  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.end471  if.end564  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.end471  if.end564  
Hash path invariants only
Invariants are
  br label %if.end708, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.else466  if.then468  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.else466  if.then468  
Hash path invariants only
Invariants are
  br label %if.end470, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_thin6(i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin6(i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin6(i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.else466  if.end470  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.else466  if.end470  
Hash path invariants only
Invariants are
  br label %if.end471, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.else466  if.else469  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.then415  land.lhs.true457  if.then459  if.else466  if.else469  
Hash path invariants only
Invariants are
  br label %if.end470, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_thin7(i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin7(i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_thin7(i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.then415  if.end708  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.then415  if.end708  
Hash path invariants only
Invariants are
  br label %if.end709, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.then415  if.else565  land.lhs.true603  land.lhs.true608  if.then693  if.then701  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.then415  if.else565  land.lhs.true603  land.lhs.true608  if.then693  if.then701  
Hash path invariants only
Invariants are
  br label %if.end702, !control_dep_instr !5, !data_indep_instr !9
  store i32 4, i32* %i, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.then415  if.else565  land.lhs.true603  land.lhs.true608  if.then693  if.end702  if.then705  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.then415  if.else565  land.lhs.true603  land.lhs.true608  if.then693  if.end702  if.then705  
Hash path invariants only
Invariants are
  br label %if.end706, !control_dep_instr !5, !data_indep_instr !9
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.then415  if.else565  land.lhs.true603  land.lhs.true608  if.then693  if.end702  if.end706  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.then415  if.else565  land.lhs.true603  land.lhs.true608  if.then693  if.end702  if.end706  
Hash path invariants only
Invariants are
  br label %if.end707, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.then415  if.else565  if.end707  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.then415  if.else565  if.end707  
Hash path invariants only
Invariants are
  br label %if.end708, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.end709  if.then712  if.then750  if.then804  if.then813  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.end709  if.then712  if.then750  if.then804  if.then813  
Hash path invariants only
Invariants are
  br label %if.end814, !control_dep_instr !5, !data_indep_instr !9
  store i32 4, i32* %i, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.end709  if.then712  if.then750  if.then804  if.end814  if.then817  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.end709  if.then712  if.then750  if.then804  if.end814  if.then817  
Hash path invariants only
Invariants are
  br label %if.end818, !control_dep_instr !5, !data_indep_instr !9
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.end709  if.then712  if.then750  if.then804  if.end814  if.end818  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.end709  if.then712  if.then750  if.then804  if.end814  if.end818  
Hash path invariants only
Invariants are
  br label %if.end819, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.end709  if.then712  if.then750  if.end819  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.end709  if.then712  if.then750  if.end819  
Hash path invariants only
Invariants are
  br label %if.end820, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.end709  if.then712  if.end820  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.end709  if.then712  if.end820  
Hash path invariants only
Invariants are
  br label %if.end821, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.then  if.end  if.end412  if.end709  if.end821  
After path modifications process path
for.body4  if.then  if.end  if.end412  if.end709  if.end821  
Hash path invariants only
Invariants are
  br label %if.end822, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  for.body4  if.end822  for.inc823  
After path modifications process path
for.body4  if.end822  
Hash path invariants only
Invariants are
  br label %for.inc823, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond1  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  for.end825  for.inc826  
After path modifications process path
for.body  for.end825  
Hash path invariants only
Invariants are
  br label %for.inc826, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond1, !control_dep_instr !5, !data_indep_instr !9
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end828  
After path modifications process path is empty
Processing path: entry  for.end828  
After path modifications process path
entry  for.end828  
 Processing function:susan_edges
Short range hashing enabled.
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 3, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  for.cond3  for.body7  if.then  
After path modifications process path
for.body7  if.then  
Hash path invariants only
Invariants are
  call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
  %26 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %max_no.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %n = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 3, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.end  for.inc  
After path modifications process path
for.body7  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %36 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  for.end  for.inc285  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  br label %for.inc285, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 3, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.then685  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.then685  
Hash path invariants only
Invariants are
  br label %if.end688, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store float 1.000000e+06, float* %z, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %279 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  %281 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.then691  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.then691  
Hash path invariants only
Invariants are
  br label %if.end694, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges4(i32* %w, float* %z), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %297 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %295 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %w = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges4(i32* %w, float* %z), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %z = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges4(i32* %w, float* %z), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.then698  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.then698  
Hash path invariants only
Invariants are
  br label %if.end711, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges5(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %313 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %311 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges5(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges5(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.end711  land.lhs.true  land.lhs.true728  land.lhs.true739  if.then750  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.end711  land.lhs.true  land.lhs.true728  land.lhs.true739  if.then750  
Hash path invariants only
Invariants are
  br label %if.end755, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %329 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %327 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.end711  if.end755  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.end711  if.end755  
Hash path invariants only
Invariants are
  br label %if.end757, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %345 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %343 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.then703  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.then703  
Hash path invariants only
Invariants are
  br label %if.end710, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges6(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %361 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %359 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges6(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges6(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.end710  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.end710  
Hash path invariants only
Invariants are
  br label %if.end711, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %377 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %375 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.then707  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.then707  
Hash path invariants only
Invariants are
  br label %if.end709, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges7(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %393 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %391 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges7(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges7(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.end709  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.end709  
Hash path invariants only
Invariants are
  br label %if.end710, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %409 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %407 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.else708  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.else708  
Hash path invariants only
Invariants are
  call void @susan_edges8(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %425 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %423 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end709, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges8(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges8(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.else693  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.else693  
Hash path invariants only
Invariants are
  br label %if.end694, !control_dep_instr !5, !data_indep_instr !9
  %441 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %439 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 1, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.else  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.else  
Hash path invariants only
Invariants are
  call void @susan_edges3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %if.end688, !control_dep_instr !5, !data_indep_instr !9
  %457 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %455 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %z = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.end757  
After path modifications process path
for.body297  if.then304  if.then319  if.end757  
Hash path invariants only
Invariants are
  br label %if.end759, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %473 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %471 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.else756  
After path modifications process path
for.body297  if.then304  if.then319  if.else756  
Hash path invariants only
Invariants are
  store i32 1, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %489 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end757, !control_dep_instr !5, !data_indep_instr !9
  %487 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.then1183  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.then1183  
Hash path invariants only
Invariants are
  br label %if.end1188, !control_dep_instr !5, !data_indep_instr !9
  store float 1.000000e+06, float* %z, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %945 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %947 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
  %943 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.then1192  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.then1192  
Hash path invariants only
Invariants are
  br label %if.end1205, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges11(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %964 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %966 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %962 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges11(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges11(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.end1205  land.lhs.true1214  land.lhs.true1223  land.lhs.true1234  if.then1245  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.end1205  land.lhs.true1214  land.lhs.true1223  land.lhs.true1234  if.then1245  
Hash path invariants only
Invariants are
  br label %if.end1250, !control_dep_instr !5, !data_indep_instr !9
  %983 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  call void @susan_edges15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %985 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %981 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.end1205  if.end1250  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.end1205  if.end1250  
Hash path invariants only
Invariants are
  br label %if.end1251, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1002 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1004 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1000 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.then1197  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.then1197  
Hash path invariants only
Invariants are
  br label %if.end1204, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges12(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1021 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1023 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1019 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges12(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges12(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.end1204  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.end1204  
Hash path invariants only
Invariants are
  br label %if.end1205, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1040 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1042 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1038 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.then1201  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.then1201  
Hash path invariants only
Invariants are
  br label %if.end1203, !control_dep_instr !5, !data_indep_instr !9
  %1059 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges13(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1061 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1057 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges13(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges13(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.end1203  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.end1203  
Hash path invariants only
Invariants are
  br label %if.end1204, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1078 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1080 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1076 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.else1202  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.else1202  
Hash path invariants only
Invariants are
  call void @susan_edges14(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1097 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end1203, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1099 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1095 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges14(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges14(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.else1184  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.else1184  
Hash path invariants only
Invariants are
  call void @susan_edges10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1116 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end1188, !control_dep_instr !5, !data_indep_instr !9
  %1118 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1114 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %z = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.end1251  
After path modifications process path
for.body297  if.then304  if.end759  if.end1251  
Hash path invariants only
Invariants are
  br label %if.end1252, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.else758  
After path modifications process path
for.body297  if.then304  if.else758  
Hash path invariants only
Invariants are
  br label %if.end759, !control_dep_instr !5, !data_indep_instr !9
  store i32 1, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.end1252  for.inc1253  
After path modifications process path
for.body297  if.end1252  
Hash path invariants only
Invariants are
  br label %for.inc1253, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  for.end1255  for.inc1256  
After path modifications process path
for.body292  for.end1255  
Hash path invariants only
Invariants are
  br label %for.inc1256, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond288  for.end1258  
After path modifications process path is empty
Processing path: entry  for.cond  for.end287  for.end1258  
After path modifications process path is empty
Processing path: entry  for.end287  for.end1258  
After path modifications process path
entry  for.end287  for.end1258  
 Processing function:susan_edges_small
Short range hashing enabled.
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  for.cond3  for.body7  if.then  
After path modifications process path
for.body7  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  call void @susan_edges_small0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
  %26 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %max_no.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %n = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.end  for.inc  
After path modifications process path
for.body7  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %38 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  for.end  for.inc81  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc81, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.then205  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.then205  
Hash path invariants only
Invariants are
  br label %if.end208, !control_dep_instr !5, !data_indep_instr !9
  store float 1.000000e+06, float* %z, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %137 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  %139 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.then211  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.then211  
Hash path invariants only
Invariants are
  br label %if.end214, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges_small4(i32* %w, float* %z), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %157 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %155 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %w = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small4(i32* %w, float* %z), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %z = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small4(i32* %w, float* %z), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.then218  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.then218  
Hash path invariants only
Invariants are
  call void @susan_edges_small5(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %if.end231, !control_dep_instr !5, !data_indep_instr !9
  %175 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %173 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small5(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small5(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.end231  land.lhs.true  if.then248  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.end231  land.lhs.true  if.then248  
Hash path invariants only
Invariants are
  call void @susan_edges_small9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %if.end253, !control_dep_instr !5, !data_indep_instr !9
  %193 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %191 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.end231  if.end253  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.end231  if.end253  
Hash path invariants only
Invariants are
  br label %if.end255, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %211 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %209 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.then223  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.then223  
Hash path invariants only
Invariants are
  call void @susan_edges_small6(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %if.end230, !control_dep_instr !5, !data_indep_instr !9
  %229 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %227 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small6(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small6(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.end230  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.end230  
Hash path invariants only
Invariants are
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %if.end231, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %247 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %245 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.else224  if.then227  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.else224  if.then227  
Hash path invariants only
Invariants are
  br label %if.end229, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges_small7(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %265 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %263 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small7(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small7(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.else224  if.end229  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.else224  if.end229  
Hash path invariants only
Invariants are
  br label %if.end230, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %283 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %281 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.else224  if.else228  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.else224  if.else228  
Hash path invariants only
Invariants are
  br label %if.end229, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %301 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %299 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges_small8(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small8(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small8(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.else213  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.else213  
Hash path invariants only
Invariants are
  store i32 1, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %if.end214, !control_dep_instr !5, !data_indep_instr !9
  %319 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %317 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.else  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.else  
Hash path invariants only
Invariants are
  call void @susan_edges_small3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %337 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %335 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end208, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %z = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.end255  
After path modifications process path
for.body93  if.then100  if.then115  if.end255  
Hash path invariants only
Invariants are
  br label %if.end257, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %355 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %353 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.else254  
After path modifications process path
for.body93  if.then100  if.then115  if.else254  
Hash path invariants only
Invariants are
  br label %if.end255, !control_dep_instr !5, !data_indep_instr !9
  store i32 1, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %373 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %371 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.then345  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.then345  
Hash path invariants only
Invariants are
  store float 1.000000e+06, float* %z, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end350, !control_dep_instr !5, !data_indep_instr !9
  %599 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %597 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
  %595 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.end350  if.then354  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.end350  if.then354  
Hash path invariants only
Invariants are
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges_small11(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %620 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end367, !control_dep_instr !5, !data_indep_instr !9
  %618 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %616 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small11(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small11(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.end350  if.end367  land.lhs.true376  if.then385  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.end350  if.end367  land.lhs.true376  if.then385  
Hash path invariants only
Invariants are
  call void @susan_edges_small15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %641 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %639 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end390, !control_dep_instr !5, !data_indep_instr !9
  %637 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.end350  if.end367  if.end390  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.end350  if.end367  if.end390  
Hash path invariants only
Invariants are
  br label %if.end391, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %662 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %660 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %658 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.then359  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.then359  
Hash path invariants only
Invariants are
  call void @susan_edges_small12(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end366, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %683 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %681 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %679 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small12(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small12(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.end366  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.end366  
Hash path invariants only
Invariants are
  br label %if.end367, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %704 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %702 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %700 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.else360  if.then363  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.else360  if.then363  
Hash path invariants only
Invariants are
  br label %if.end365, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges_small13(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %725 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %723 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %721 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small13(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small13(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.else360  if.end365  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.else360  if.end365  
Hash path invariants only
Invariants are
  br label %if.end366, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %746 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %744 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %742 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.else360  if.else364  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.else360  if.else364  
Hash path invariants only
Invariants are
  br label %if.end365, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges_small14(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %767 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %765 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %763 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small14(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small14(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.else346  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.else346  
Hash path invariants only
Invariants are
  br label %if.end350, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges_small10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %788 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %786 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %784 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %z = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.end391  
After path modifications process path
for.body93  if.then100  if.end257  if.end391  
Hash path invariants only
Invariants are
  br label %if.end392, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.else256  
After path modifications process path
for.body93  if.then100  if.else256  
Hash path invariants only
Invariants are
  br label %if.end257, !control_dep_instr !5, !data_indep_instr !9
  store i32 1, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.end392  for.inc393  
After path modifications process path
for.body93  if.end392  
Hash path invariants only
Invariants are
  br label %for.inc393, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  for.end395  for.inc396  
After path modifications process path
for.body88  for.end395  
Hash path invariants only
Invariants are
  br label %for.inc396, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond84  for.end398  
After path modifications process path is empty
Processing path: entry  for.cond  for.end83  for.end398  
After path modifications process path is empty
Processing path: entry  for.end83  for.end398  
After path modifications process path
entry  for.end83  for.end398  
 Processing function:corner_draw
Short range hashing enabled.
Processing path: entry  while.cond  while.body  if.then  
After path modifications process path
while.body  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  while.cond  while.body  if.end  
After path modifications process path
while.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  while.cond  while.body  if.else  
After path modifications process path
while.body  if.else  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
 Processing function:susan_corners
Short range hashing enabled.
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.true  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.true  
Hash path invariants only
Invariants are
  br label %cond.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  %264 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %262 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %26 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %cgy = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners0(i32** %cgy, i32** %cgx, i32* %y_size.addr, i32* %x_size.addr), !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Can't handle this operand   %cgx = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners0(i32** %cgy, i32** %cgx, i32* %y_size.addr, i32* %x_size.addr), !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Can't handle this operand   %y_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners0(i32** %cgy, i32** %cgx, i32* %y_size.addr, i32* %x_size.addr), !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners0(i32** %cgy, i32** %cgx, i32* %y_size.addr, i32* %x_size.addr), !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.true729  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.true729  
Hash path invariants only
Invariants are
  br label %cond.end739, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %36 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %297 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %295 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.true757  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.true757  
Hash path invariants only
Invariants are
  br label %cond.end767, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %46 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %330 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %328 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.end767  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.end767  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %56 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %363 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %361 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.false762  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.false762  
Hash path invariants only
Invariants are
  br label %cond.end767, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %66 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %396 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %394 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.false734  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.false734  
Hash path invariants only
Invariants are
  br label %cond.end739, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %76 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %429 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %427 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.false  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.false  
Hash path invariants only
Invariants are
  br label %cond.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %86 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %462 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %460 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.end  if.then869  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.end  if.then869  
Hash path invariants only
Invariants are
  br label %if.end887, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %96 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %495 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %493 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %cgy = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %cgx = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %max_no.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %n = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.end  if.end887  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.end  if.end887  
Hash path invariants only
Invariants are
  br label %if.end888, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %106 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %528 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %526 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.true793  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.true793  
Hash path invariants only
Invariants are
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %116 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %561 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %559 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %cond.end801, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.true818  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.true818  
Hash path invariants only
Invariants are
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %126 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %594 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %592 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %cond.end828, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.true846  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.true846  
Hash path invariants only
Invariants are
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %136 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %627 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %cond.end856, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  %625 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.end856  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.end856  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %146 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %660 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %658 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.false851  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.false851  
Hash path invariants only
Invariants are
  br label %cond.end856, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %156 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %693 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %691 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.false823  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.false823  
Hash path invariants only
Invariants are
  br label %cond.end828, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %166 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %726 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %724 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.false797  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.false797  
Hash path invariants only
Invariants are
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %176 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %759 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %cond.end801, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  %757 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.end888  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.end888  
Hash path invariants only
Invariants are
  br label %if.end889, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %186 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %792 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %790 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.end889  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.end889  
Hash path invariants only
Invariants are
  br label %if.end890, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %196 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.end890  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.end890  
Hash path invariants only
Invariants are
  br label %if.end891, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %206 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.end891  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.end891  
Hash path invariants only
Invariants are
  %216 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end892, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.end892  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.end892  
Hash path invariants only
Invariants are
  br label %if.end893, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %226 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.end893  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.end893  
Hash path invariants only
Invariants are
  br label %if.end894, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %236 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.end894  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.end894  
Hash path invariants only
Invariants are
  br label %if.end895, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %246 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.end895  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.end895  
Hash path invariants only
Invariants are
  br label %if.end896, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %256 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.end896  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.end896  
Hash path invariants only
Invariants are
  br label %if.end897, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %266 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.end897  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.end897  
Hash path invariants only
Invariants are
  br label %if.end898, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %276 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.end898  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.end898  
Hash path invariants only
Invariants are
  %286 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end899, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.end899  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.end899  
Hash path invariants only
Invariants are
  br label %if.end900, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %296 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.end900  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.end900  
Hash path invariants only
Invariants are
  br label %if.end901, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %306 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.end901  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.end901  
Hash path invariants only
Invariants are
  br label %if.end902, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %316 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.end902  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.end902  
Hash path invariants only
Invariants are
  br label %if.end903, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %326 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.end903  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.end903  
Hash path invariants only
Invariants are
  br label %if.end904, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %336 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.end904  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.end904  
Hash path invariants only
Invariants are
  br label %if.end905, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %346 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.end905  
After path modifications process path
for.body14  if.then  if.then165  if.end905  
Hash path invariants only
Invariants are
  %356 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end906, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.end906  
After path modifications process path
for.body14  if.then  if.end906  
Hash path invariants only
Invariants are
  br label %if.end907, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %366 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.end907  for.inc  
After path modifications process path
for.body14  if.end907  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %376 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  for.end  for.inc908  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc908, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond10  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.end910  for.cond916  for.body920  if.then927  land.lhs.true  land.lhs.true944  land.lhs.true953  land.lhs.true961  land.lhs.true970  land.lhs.true979  land.lhs.true988  land.lhs.true997  land.lhs.true1006  land.lhs.true1015  land.lhs.true1023  land.lhs.true1032  land.lhs.true1041  land.lhs.true1050  land.lhs.true1059  land.lhs.true1068  land.lhs.true1077  land.lhs.true1085  land.lhs.true1094  land.lhs.true1103  land.lhs.true1112  land.lhs.true1120  land.lhs.true1128  land.lhs.true1136  land.lhs.true1144  land.lhs.true1152  land.lhs.true1160  land.lhs.true1169  land.lhs.true1178  land.lhs.true1187  land.lhs.true1195  land.lhs.true1204  land.lhs.true1213  land.lhs.true1222  land.lhs.true1231  land.lhs.true1240  land.lhs.true1249  land.lhs.true1257  land.lhs.true1266  land.lhs.true1275  land.lhs.true1284  land.lhs.true1293  land.lhs.true1302  land.lhs.true1311  land.lhs.true1319  land.lhs.true1328  land.lhs.true1337  if.then1346  if.then1377  
After path modifications process path
for.body920  if.then927  land.lhs.true  land.lhs.true944  land.lhs.true953  land.lhs.true961  land.lhs.true970  land.lhs.true979  land.lhs.true988  land.lhs.true997  land.lhs.true1006  land.lhs.true1015  land.lhs.true1023  land.lhs.true1032  land.lhs.true1041  land.lhs.true1050  land.lhs.true1059  land.lhs.true1068  land.lhs.true1077  land.lhs.true1085  land.lhs.true1094  land.lhs.true1103  land.lhs.true1112  land.lhs.true1120  land.lhs.true1128  land.lhs.true1136  land.lhs.true1144  land.lhs.true1152  land.lhs.true1160  land.lhs.true1169  land.lhs.true1178  land.lhs.true1187  land.lhs.true1195  land.lhs.true1204  land.lhs.true1213  land.lhs.true1222  land.lhs.true1231  land.lhs.true1240  land.lhs.true1249  land.lhs.true1257  land.lhs.true1266  land.lhs.true1275  land.lhs.true1284  land.lhs.true1293  land.lhs.true1302  land.lhs.true1311  land.lhs.true1319  land.lhs.true1328  land.lhs.true1337  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.end910  for.cond911  for.body915  if.then1377  
After path modifications process path
for.body915  
Hash path invariants only
Invariants are
  br label %for.cond916, !control_dep_instr !5, !data_indep_instr !9
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end910  if.then1377  
After path modifications process path is empty
Processing path: entry  for.end910  if.then1377  
After path modifications process path
entry  for.end910  if.then1377  
Processing call instruction..
Processing path: entry  for.end910  for.cond916  for.body920  if.then927  land.lhs.true  land.lhs.true944  land.lhs.true953  land.lhs.true961  land.lhs.true970  land.lhs.true979  land.lhs.true988  land.lhs.true997  land.lhs.true1006  land.lhs.true1015  land.lhs.true1023  land.lhs.true1032  land.lhs.true1041  land.lhs.true1050  land.lhs.true1059  land.lhs.true1068  land.lhs.true1077  land.lhs.true1085  land.lhs.true1094  land.lhs.true1103  land.lhs.true1112  land.lhs.true1120  land.lhs.true1128  land.lhs.true1136  land.lhs.true1144  land.lhs.true1152  land.lhs.true1160  land.lhs.true1169  land.lhs.true1178  land.lhs.true1187  land.lhs.true1195  land.lhs.true1204  land.lhs.true1213  land.lhs.true1222  land.lhs.true1231  land.lhs.true1240  land.lhs.true1249  land.lhs.true1257  land.lhs.true1266  land.lhs.true1275  land.lhs.true1284  land.lhs.true1293  land.lhs.true1302  land.lhs.true1311  land.lhs.true1319  land.lhs.true1328  land.lhs.true1337  if.then1346  if.end1379  
After path modifications process path
for.body920  if.then927  land.lhs.true  land.lhs.true944  land.lhs.true953  land.lhs.true961  land.lhs.true970  land.lhs.true979  land.lhs.true988  land.lhs.true997  land.lhs.true1006  land.lhs.true1015  land.lhs.true1023  land.lhs.true1032  land.lhs.true1041  land.lhs.true1050  land.lhs.true1059  land.lhs.true1068  land.lhs.true1077  land.lhs.true1085  land.lhs.true1094  land.lhs.true1103  land.lhs.true1112  land.lhs.true1120  land.lhs.true1128  land.lhs.true1136  land.lhs.true1144  land.lhs.true1152  land.lhs.true1160  land.lhs.true1169  land.lhs.true1178  land.lhs.true1187  land.lhs.true1195  land.lhs.true1204  land.lhs.true1213  land.lhs.true1222  land.lhs.true1231  land.lhs.true1240  land.lhs.true1249  land.lhs.true1257  land.lhs.true1266  land.lhs.true1275  land.lhs.true1284  land.lhs.true1293  land.lhs.true1302  land.lhs.true1311  land.lhs.true1319  land.lhs.true1328  land.lhs.true1337  if.end1379  
Hash path invariants only
Invariants are
  br label %if.end1380, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end910  for.cond911  for.body915  
After path modifications process path
for.body915  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond916, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end910  
After path modifications process path is empty
Processing path: entry  for.end910  
After path modifications process path
entry  for.end910  
Processing path: entry  for.end910  for.cond916  for.body920  if.then927  if.end1380  
After path modifications process path
for.body920  if.then927  if.end1380  
Hash path invariants only
Invariants are
  br label %if.end1381, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end910  for.cond911  for.body915  
After path modifications process path
for.body915  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond916, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end910  
After path modifications process path is empty
Processing path: entry  for.end910  
After path modifications process path
entry  for.end910  
Processing path: entry  for.end910  for.cond916  for.body920  if.end1381  for.inc1382  
After path modifications process path
for.body920  if.end1381  
Hash path invariants only
Invariants are
  br label %for.inc1382, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end910  for.cond911  for.body915  
After path modifications process path
for.body915  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond916, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end910  
After path modifications process path is empty
Processing path: entry  for.end910  
After path modifications process path
entry  for.end910  
Processing path: entry  for.end910  for.cond916  
After path modifications process path is empty
Processing path: entry  for.end910  for.cond911  for.body915  for.end1384  for.inc1385  
After path modifications process path
for.body915  for.end1384  
Hash path invariants only
Invariants are
  br label %for.inc1385, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond916, !control_dep_instr !5, !data_indep_instr !9
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end910  
After path modifications process path is empty
Processing path: entry  for.end910  
After path modifications process path
entry  for.end910  
Processing path: entry  for.end910  for.cond911  for.end1387  
After path modifications process path is empty
Processing path: entry  for.cond  for.end910  for.end1387  
After path modifications process path is empty
Processing path: entry  for.end910  for.end1387  
After path modifications process path
entry  for.end910  for.end1387  
 Processing function:susan_corners_quick
Short range hashing enabled.
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.then324  if.then333  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.then324  if.then333  
Hash path invariants only
Invariants are
  call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
  %26 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %max_no.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %n = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.then324  if.end  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.then324  if.end  
Hash path invariants only
Invariants are
  br label %if.end339, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %36 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.end339  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.end339  
Hash path invariants only
Invariants are
  br label %if.end340, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %46 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.end340  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.end340  
Hash path invariants only
Invariants are
  br label %if.end341, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %56 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.end341  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.end341  
Hash path invariants only
Invariants are
  br label %if.end342, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %66 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.end342  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.end342  
Hash path invariants only
Invariants are
  br label %if.end343, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %76 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.end343  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.end343  
Hash path invariants only
Invariants are
  br label %if.end344, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %86 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.end344  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.end344  
Hash path invariants only
Invariants are
  %96 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end345, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.end345  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.end345  
Hash path invariants only
Invariants are
  br label %if.end346, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %106 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.end346  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.end346  
Hash path invariants only
Invariants are
  br label %if.end347, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %116 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.end347  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.end347  
Hash path invariants only
Invariants are
  br label %if.end348, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %126 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.end348  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.end348  
Hash path invariants only
Invariants are
  br label %if.end349, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %136 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.end349  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.end349  
Hash path invariants only
Invariants are
  br label %if.end350, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %146 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.end350  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.end350  
Hash path invariants only
Invariants are
  br label %if.end351, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %156 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.end351  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.end351  
Hash path invariants only
Invariants are
  %166 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end352, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.end352  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.end352  
Hash path invariants only
Invariants are
  br label %if.end353, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %176 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.end353  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.end353  
Hash path invariants only
Invariants are
  br label %if.end354, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %186 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.end354  
After path modifications process path
for.body7  if.then  if.then158  if.end354  
Hash path invariants only
Invariants are
  br label %if.end355, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %196 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.then  if.end355  
After path modifications process path
for.body7  if.then  if.end355  
Hash path invariants only
Invariants are
  br label %if.end356, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %206 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond3  for.body7  if.end356  for.inc  
After path modifications process path
for.body7  if.end356  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %216 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  for.end  for.inc357  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc357, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.end359  for.cond365  for.body369  if.then376  land.lhs.true  land.lhs.true393  land.lhs.true402  land.lhs.true410  land.lhs.true419  land.lhs.true428  land.lhs.true437  land.lhs.true446  land.lhs.true455  land.lhs.true464  land.lhs.true472  land.lhs.true481  land.lhs.true490  land.lhs.true499  land.lhs.true508  land.lhs.true517  land.lhs.true526  land.lhs.true534  land.lhs.true543  land.lhs.true552  land.lhs.true561  land.lhs.true569  land.lhs.true577  land.lhs.true585  land.lhs.true593  land.lhs.true601  land.lhs.true609  land.lhs.true618  land.lhs.true627  land.lhs.true636  land.lhs.true644  land.lhs.true653  land.lhs.true662  land.lhs.true671  land.lhs.true680  land.lhs.true689  land.lhs.true698  land.lhs.true706  land.lhs.true715  land.lhs.true724  land.lhs.true733  land.lhs.true742  land.lhs.true751  land.lhs.true760  land.lhs.true768  land.lhs.true777  land.lhs.true786  if.then795  if.then1316  
After path modifications process path
for.body369  if.then376  land.lhs.true  land.lhs.true393  land.lhs.true402  land.lhs.true410  land.lhs.true419  land.lhs.true428  land.lhs.true437  land.lhs.true446  land.lhs.true455  land.lhs.true464  land.lhs.true472  land.lhs.true481  land.lhs.true490  land.lhs.true499  land.lhs.true508  land.lhs.true517  land.lhs.true526  land.lhs.true534  land.lhs.true543  land.lhs.true552  land.lhs.true561  land.lhs.true569  land.lhs.true577  land.lhs.true585  land.lhs.true593  land.lhs.true601  land.lhs.true609  land.lhs.true618  land.lhs.true627  land.lhs.true636  land.lhs.true644  land.lhs.true653  land.lhs.true662  land.lhs.true671  land.lhs.true680  land.lhs.true689  land.lhs.true698  land.lhs.true706  land.lhs.true715  land.lhs.true724  land.lhs.true733  land.lhs.true742  land.lhs.true751  land.lhs.true760  land.lhs.true768  land.lhs.true777  land.lhs.true786  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.end359  for.cond360  for.body364  if.then1316  
After path modifications process path
for.body364  
Hash path invariants only
Invariants are
  br label %for.cond365, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end359  if.then1316  
After path modifications process path is empty
Processing path: entry  for.end359  if.then1316  
After path modifications process path
entry  for.end359  if.then1316  
Processing path: entry  for.end359  for.cond365  for.body369  if.then376  land.lhs.true  land.lhs.true393  land.lhs.true402  land.lhs.true410  land.lhs.true419  land.lhs.true428  land.lhs.true437  land.lhs.true446  land.lhs.true455  land.lhs.true464  land.lhs.true472  land.lhs.true481  land.lhs.true490  land.lhs.true499  land.lhs.true508  land.lhs.true517  land.lhs.true526  land.lhs.true534  land.lhs.true543  land.lhs.true552  land.lhs.true561  land.lhs.true569  land.lhs.true577  land.lhs.true585  land.lhs.true593  land.lhs.true601  land.lhs.true609  land.lhs.true618  land.lhs.true627  land.lhs.true636  land.lhs.true644  land.lhs.true653  land.lhs.true662  land.lhs.true671  land.lhs.true680  land.lhs.true689  land.lhs.true698  land.lhs.true706  land.lhs.true715  land.lhs.true724  land.lhs.true733  land.lhs.true742  land.lhs.true751  land.lhs.true760  land.lhs.true768  land.lhs.true777  land.lhs.true786  if.then795  if.end1317  
After path modifications process path
for.body369  if.then376  land.lhs.true  land.lhs.true393  land.lhs.true402  land.lhs.true410  land.lhs.true419  land.lhs.true428  land.lhs.true437  land.lhs.true446  land.lhs.true455  land.lhs.true464  land.lhs.true472  land.lhs.true481  land.lhs.true490  land.lhs.true499  land.lhs.true508  land.lhs.true517  land.lhs.true526  land.lhs.true534  land.lhs.true543  land.lhs.true552  land.lhs.true561  land.lhs.true569  land.lhs.true577  land.lhs.true585  land.lhs.true593  land.lhs.true601  land.lhs.true609  land.lhs.true618  land.lhs.true627  land.lhs.true636  land.lhs.true644  land.lhs.true653  land.lhs.true662  land.lhs.true671  land.lhs.true680  land.lhs.true689  land.lhs.true698  land.lhs.true706  land.lhs.true715  land.lhs.true724  land.lhs.true733  land.lhs.true742  land.lhs.true751  land.lhs.true760  land.lhs.true768  land.lhs.true777  land.lhs.true786  if.end1317  
Hash path invariants only
Invariants are
  br label %if.end1318, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end359  for.cond360  for.body364  
After path modifications process path
for.body364  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond365, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond  for.end359  
After path modifications process path is empty
Processing path: entry  for.end359  
After path modifications process path
entry  for.end359  
Processing path: entry  for.end359  for.cond365  for.body369  if.then376  if.end1318  
After path modifications process path
for.body369  if.then376  if.end1318  
Hash path invariants only
Invariants are
  br label %if.end1319, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end359  for.cond360  for.body364  
After path modifications process path
for.body364  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond365, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond  for.end359  
After path modifications process path is empty
Processing path: entry  for.end359  
After path modifications process path
entry  for.end359  
Processing path: entry  for.end359  for.cond365  for.body369  if.end1319  for.inc1320  
After path modifications process path
for.body369  if.end1319  
Hash path invariants only
Invariants are
  br label %for.inc1320, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end359  for.cond360  for.body364  
After path modifications process path
for.body364  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond365, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond  for.end359  
After path modifications process path is empty
Processing path: entry  for.end359  
After path modifications process path
entry  for.end359  
Processing path: entry  for.end359  for.cond365  
After path modifications process path is empty
Processing path: entry  for.end359  for.cond360  for.body364  for.end1322  for.inc1323  
After path modifications process path
for.body364  for.end1322  
Hash path invariants only
Invariants are
  br label %for.cond365, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  br label %for.inc1323, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end359  
After path modifications process path is empty
Processing path: entry  for.end359  
After path modifications process path
entry  for.end359  
Processing path: entry  for.end359  for.cond360  for.end1325  
After path modifications process path is empty
Processing path: entry  for.cond  for.end359  for.end1325  
After path modifications process path is empty
Processing path: entry  for.end359  for.end1325  
After path modifications process path
entry  for.end359  for.end1325  
 Processing function:main
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.epilog  
After path modifications process path
while.body  if.then5  sw.epilog  
Hash path invariants only
Invariants are
  br label %if.end39, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle input dependent load operand Can't handle this operand   %in = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @get_image(i8* %26, i8** %in, i32* %x_size, i32* %y_size), !input_indep_instr !7, !data_indep_instr !8
Can't handle this operand   %x_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @get_image(i8* %26, i8** %in, i32* %x_size, i32* %y_size), !input_indep_instr !7, !data_indep_instr !8
Can't handle this operand   %y_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @get_image(i8* %26, i8** %in, i32* %x_size, i32* %y_size), !input_indep_instr !7, !data_indep_instr !8
Insert assertion skipped because there was no hash update in between!
Insert assertion skipped because there was no hash update in between!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb  
After path modifications process path
while.body  if.then5  sw.bb  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8
  store i32 0, i32* %mode, align 4, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb7  
After path modifications process path
while.body  if.then5  sw.bb7  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8
  store i32 1, i32* %mode, align 4, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb8  
After path modifications process path
while.body  if.then5  sw.bb8  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8
  store i32 2, i32* %mode, align 4, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb9  
After path modifications process path
while.body  if.then5  sw.bb9  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8
  store i32 1, i32* %principle, align 4, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb10  
After path modifications process path
while.body  if.then5  sw.bb10  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8
  store i32 0, i32* %thin_post_proc, align 4, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb11  
After path modifications process path
while.body  if.then5  sw.bb11  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8
  store i32 1, i32* %drawing_mode, align 4, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb12  
After path modifications process path
while.body  if.then5  sw.bb12  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8
  store i32 1, i32* %three_by_three, align 4, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb13  
After path modifications process path
while.body  if.then5  sw.bb13  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8
  store i32 1, i32* %susan_quick, align 4, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb14  if.then17  
After path modifications process path
while.body  if.then5  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.then17  
After path modifications process path
entry  if.end  if.then17  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb14  if.end19  if.then26  
After path modifications process path
while.body  if.then5  if.end19  if.then26  
Hash path invariants only
Invariants are
  br label %if.end27, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8
  store i32 1, i32* %three_by_three, align 4, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb14  if.end19  if.end27  
After path modifications process path
while.body  if.then5  if.end19  if.end27  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb28  if.then32  
After path modifications process path
while.body  if.then5  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.then32  
After path modifications process path
entry  if.end  if.then32  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb28  if.end34  
After path modifications process path
while.body  if.then5  if.end34  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.end39  
After path modifications process path
while.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.else  
After path modifications process path
while.body  if.else  
Hash path invariants only
Invariants are
  br label %if.end39, !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8
  %call38 = call i32 @usage(), !control_dep_instr !10, !argument_dep_instr !9, !data_indep_instr !8, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.end  land.lhs.true  if.then45  
After path modifications process path is empty
Processing path: entry  if.end  while.end  land.lhs.true  if.then45  
After path modifications process path
entry  if.end  while.end  land.lhs.true  if.then45  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.epilog101  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.epilog101  
After path modifications process path
entry  if.end  while.end  if.end46  sw.epilog101  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb47  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb47  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb47  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb49  if.then53  if.then55  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb49  if.then53  if.then55  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb49  if.then53  if.then55  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %y_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main4(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %x_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main4(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %in = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main4(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %r = alloca i32*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main4(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %bp = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main4(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %max_no_edges = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main4(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb49  if.then53  if.end59  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb49  if.then53  if.end59  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb49  if.then53  if.end59  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %y_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main6(i32* %y_size, i32* %x_size, i8** %in, i32** %r), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %x_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main6(i32* %y_size, i32* %x_size, i8** %in, i32** %r), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %in = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main6(i32* %y_size, i32* %x_size, i8** %in, i32** %r), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %r = alloca i32*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main6(i32* %y_size, i32* %x_size, i8** %in, i32** %r), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb49  if.then53  if.else57  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb49  if.then53  if.else57  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb49  if.then53  if.else57  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %y_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main5(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %x_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main5(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %in = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main5(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %r = alloca i32*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main5(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %bp = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main5(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %max_no_edges = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main5(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb49  if.end79  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb49  if.end79  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb49  if.end79  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb49  if.else62  if.then69  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb49  if.else62  if.then69  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb49  if.else62  if.then69  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %y_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main7(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %x_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main7(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %in = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main7(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %r = alloca i32*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main7(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %max_no_edges = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main7(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %mid = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main7(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %bp = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main7(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb49  if.else62  if.end73  if.then75  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb49  if.else62  if.end73  if.then75  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb49  if.else62  if.end73  if.then75  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %x_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main9(i32* %x_size, i32* %y_size, i8** %mid, i32** %r), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %y_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main9(i32* %x_size, i32* %y_size, i8** %mid, i32** %r), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %mid = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main9(i32* %x_size, i32* %y_size, i8** %mid, i32** %r), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %r = alloca i32*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main9(i32* %x_size, i32* %y_size, i8** %mid, i32** %r), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb49  if.else62  if.end73  if.end77  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb49  if.else62  if.end73  if.end77  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb49  if.else62  if.end73  if.end77  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %drawing_mode = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main10(i32* %drawing_mode, i8** %in, i8** %mid, i32* %y_size, i32* %x_size), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %in = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main10(i32* %drawing_mode, i8** %in, i8** %mid, i32* %y_size, i32* %x_size), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %mid = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main10(i32* %drawing_mode, i8** %in, i8** %mid, i32* %y_size, i32* %x_size), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %y_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main10(i32* %drawing_mode, i8** %in, i8** %mid, i32* %y_size, i32* %x_size), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %x_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main10(i32* %drawing_mode, i8** %in, i8** %mid, i32* %y_size, i32* %x_size), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb49  if.else62  if.else71  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb49  if.else62  if.else71  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb49  if.else62  if.else71  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %y_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main8(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %x_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main8(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %in = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main8(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %r = alloca i32*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main8(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %max_no_edges = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main8(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %mid = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main8(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Can't handle this operand   %bp = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main8(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !8, !input_dep_block !11
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb80  if.then86  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb80  if.then86  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb80  if.then86  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb80  if.end100  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb80  if.end100  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb80  if.end100  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb80  if.else90  if.then92  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb80  if.else90  if.then92  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb80  if.else90  if.then92  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb80  if.else90  if.end97  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb80  if.else90  if.end97  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb80  if.else90  if.end97  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb80  if.else90  if.else94  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb80  if.else90  if.else94  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb80  if.else90  if.else94  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Extract path function for assertion assert_main_path_1
Extract path function for assertion assert_main_path_3
Extract path function for assertion assert_main_path_5
Extract path function for assertion assert_main_path_7
Extract path function for assertion assert_main_path_9
Extract path function for assertion assert_main_path_11
Extract path function for assertion assert_main_path_13
Extract path function for assertion assert_main_path_15
Extract path function for assertion assert_main_path_17
Extract path function for assertion assert_main_path_21
Extract path function for assertion assert_main_path_23
Extract path function for assertion assert_main_path_27
Extract path function for assertion assert_main_path_31
Extract path function for assertion assert_main_path_34
Extract path function for assertion assert_main_path_36
Extract path function for assertion assert_main_path_38
Extract path function for assertion assert_main_path_40
Extract path function for assertion assert_main_path_42
Extract path function for assertion assert_main_path_44
Extract path function for assertion assert_main_path_46
Extract path function for assertion assert_main_path_48
Extract path function for assertion assert_main_path_50
Extract path function for assertion assert_main_path_52
Extract path function for assertion assert_main_path_54
Extract path function for assertion assert_main_path_56
Extract path function for assertion assert_main_path_58
Extract path function for assertion assert_main_path_60
Extract path function for assertion assert_main_path_62
Extract path function for assertion assert_main_path_64
Extract path function for assertion assert_susan_corners_path_0
Extract path function for assertion assert_susan_corners_path_1
Extract path function for assertion assert_susan_corners_path_2
Extract path function for assertion assert_susan_corners_path_3
Extract path function for assertion assert_susan_corners_path_4
Extract path function for assertion assert_susan_corners_path_5
Extract path function for assertion assert_susan_corners_path_6
Extract path function for assertion assert_susan_corners_path_7
Extract path function for assertion assert_susan_corners_path_8
Extract path function for assertion assert_susan_corners_path_9
Extract path function for assertion assert_susan_corners_path_10
Extract path function for assertion assert_susan_corners_path_11
Extract path function for assertion assert_susan_corners_path_12
Extract path function for assertion assert_susan_corners_path_13
Extract path function for assertion assert_susan_corners_path_14
Extract path function for assertion assert_susan_corners_path_15
Extract path function for assertion assert_susan_corners_path_16
Extract path function for assertion assert_susan_corners_path_17
Extract path function for assertion assert_susan_corners_path_18
Extract path function for assertion assert_susan_corners_path_19
Extract path function for assertion assert_susan_corners_path_20
Extract path function for assertion assert_susan_corners_path_21
Extract path function for assertion assert_susan_corners_path_22
Extract path function for assertion assert_susan_corners_path_23
Extract path function for assertion assert_susan_corners_path_24
Extract path function for assertion assert_susan_corners_path_25
Extract path function for assertion assert_susan_corners_path_26
Extract path function for assertion assert_susan_corners_path_27
Extract path function for assertion assert_susan_corners_path_28
Extract path function for assertion assert_susan_corners_path_29
Extract path function for assertion assert_susan_corners_path_30
Extract path function for assertion assert_susan_corners_path_31
Extract path function for assertion assert_susan_corners_path_32
Extract path function for assertion assert_susan_corners_path_33
Extract path function for assertion assert_susan_corners_path_34
Extract path function for assertion assert_susan_corners_path_35
Extract path function for assertion assert_susan_corners_path_36
Extract path function for assertion assert_susan_corners_path_37
Extract path function for assertion assert_susan_corners_path_38
Extract path function for assertion assert_susan_corners_path_39
Extract path function for assertion assert_susan_corners_path_40
Extract path function for assertion assert_susan_corners_path_41
Extract path function for assertion assert_susan_corners_path_42
Extract path function for assertion assert_susan_corners_path_43
Extract path function for assertion assert_susan_corners_path_44
Extract path function for assertion assert_susan_corners_path_45
Extract path function for assertion assert_susan_corners_path_46
Extract path function for assertion assert_susan_corners_path_47
Extract path function for assertion assert_susan_corners_path_48
Extract path function for assertion assert_susan_corners_path_49
Extract path function for assertion assert_susan_corners_path_50
Extract path function for assertion assert_susan_corners_path_51
Extract path function for assertion assert_susan_corners_path_52
Extract path function for assertion assert_susan_corners_path_53
Extract path function for assertion assert_susan_corners_path_54
Extract path function for assertion assert_susan_corners_path_55
Extract path function for assertion assert_susan_corners_path_56
Extract path function for assertion assert_susan_corners_path_57
Extract path function for assertion assert_susan_corners_path_58
Extract path function for assertion assert_susan_corners_path_59
Extract path function for assertion assert_susan_corners_path_60
Extract path function for assertion assert_susan_corners_path_61
Extract path function for assertion assert_susan_corners_path_62
Extract path function for assertion assert_susan_corners_path_63
Extract path function for assertion assert_susan_corners_path_64
Extract path function for assertion assert_susan_corners_path_65
Extract path function for assertion assert_susan_corners_path_66
Extract path function for assertion assert_susan_corners_path_67
Extract path function for assertion assert_susan_corners_path_68
Extract path function for assertion assert_susan_corners_path_69
Extract path function for assertion assert_susan_corners_path_70
Extract path function for assertion assert_susan_corners_path_71
Extract path function for assertion assert_susan_corners_path_72
Extract path function for assertion assert_susan_corners_path_73
Extract path function for assertion assert_susan_corners_path_74
Extract path function for assertion assert_susan_corners_path_75
Extract path function for assertion assert_susan_corners_path_76
Extract path function for assertion assert_susan_corners_path_77
Extract path function for assertion assert_susan_corners_path_78
Extract path function for assertion assert_susan_corners_path_79
Extract path function for assertion assert_susan_corners_path_80
Extract path function for assertion assert_susan_corners_path_81
Extract path function for assertion assert_susan_corners_path_82
Extract path function for assertion assert_susan_corners_path_83
Extract path function for assertion assert_susan_corners_path_84
Extract path function for assertion assert_susan_corners_path_85
Extract path function for assertion assert_susan_corners_path_86
Extract path function for assertion assert_susan_corners_path_87
Extract path function for assertion assert_susan_corners_path_88
Extract path function for assertion assert_susan_corners_path_89
Extract path function for assertion assert_susan_corners_path_90
Extract path function for assertion assert_susan_corners_path_91
Extract path function for assertion assert_susan_corners_path_92
Extract path function for assertion assert_susan_corners_path_93
Extract path function for assertion assert_susan_corners_path_94
Extract path function for assertion assert_susan_corners_path_95
Extract path function for assertion assert_susan_corners_path_96
Extract path function for assertion assert_susan_corners_path_97
Extract path function for assertion assert_susan_corners_path_98
Extract path function for assertion assert_susan_corners_path_99
Extract path function for assertion assert_susan_corners_path_100
Extract path function for assertion assert_susan_corners_path_101
Extract path function for assertion assert_susan_corners_path_102
Extract path function for assertion assert_susan_corners_path_103
Extract path function for assertion assert_susan_corners_path_104
Extract path function for assertion assert_susan_corners_path_105
Extract path function for assertion assert_susan_corners_path_106
Extract path function for assertion assert_susan_corners_path_107
Extract path function for assertion assert_susan_corners_path_108
Extract path function for assertion assert_susan_corners_path_110
Extract path function for assertion assert_susan_corners_path_112
Extract path function for assertion assert_susan_corners_path_114
Extract path function for assertion assert_susan_corners_path_115
Extract path function for assertion assert_susan_corners_path_116
Extract path function for assertion assert_susan_corners_path_118
Extract path function for assertion assert_susan_corners_path_119
Extract path function for assertion assert_susan_corners_path_120
Extract path function for assertion assert_susan_corners_path_122
Extract path function for assertion assert_susan_corners_path_123
Extract path function for assertion assert_susan_corners_path_124
Extract path function for assertion assert_susan_corners_path_126
Extract path function for assertion assert_susan_corners_path_128
Extract path function for assertion assert_susan_corners_path_130
Extract path function for assertion assert_susan_corners_path_133
Extract path function for assertion assert_susan_corners_quick_path_0
Extract path function for assertion assert_susan_corners_quick_path_1
Extract path function for assertion assert_susan_corners_quick_path_2
Extract path function for assertion assert_susan_corners_quick_path_3
Extract path function for assertion assert_susan_corners_quick_path_4
Extract path function for assertion assert_susan_corners_quick_path_5
Extract path function for assertion assert_susan_corners_quick_path_6
Extract path function for assertion assert_susan_corners_quick_path_7
Extract path function for assertion assert_susan_corners_quick_path_8
Extract path function for assertion assert_susan_corners_quick_path_9
Extract path function for assertion assert_susan_corners_quick_path_10
Extract path function for assertion assert_susan_corners_quick_path_11
Extract path function for assertion assert_susan_corners_quick_path_12
Extract path function for assertion assert_susan_corners_quick_path_13
Extract path function for assertion assert_susan_corners_quick_path_14
Extract path function for assertion assert_susan_corners_quick_path_15
Extract path function for assertion assert_susan_corners_quick_path_16
Extract path function for assertion assert_susan_corners_quick_path_17
Extract path function for assertion assert_susan_corners_quick_path_18
Extract path function for assertion assert_susan_corners_quick_path_19
Extract path function for assertion assert_susan_corners_quick_path_20
Extract path function for assertion assert_susan_corners_quick_path_21
Extract path function for assertion assert_susan_corners_quick_path_22
Extract path function for assertion assert_susan_corners_quick_path_23
Extract path function for assertion assert_susan_corners_quick_path_24
Extract path function for assertion assert_susan_corners_quick_path_25
Extract path function for assertion assert_susan_corners_quick_path_26
Extract path function for assertion assert_susan_corners_quick_path_27
Extract path function for assertion assert_susan_corners_quick_path_28
Extract path function for assertion assert_susan_corners_quick_path_29
Extract path function for assertion assert_susan_corners_quick_path_30
Extract path function for assertion assert_susan_corners_quick_path_31
Extract path function for assertion assert_susan_corners_quick_path_32
Extract path function for assertion assert_susan_corners_quick_path_33
Extract path function for assertion assert_susan_corners_quick_path_34
Extract path function for assertion assert_susan_corners_quick_path_35
Extract path function for assertion assert_susan_corners_quick_path_36
Extract path function for assertion assert_susan_corners_quick_path_37
Extract path function for assertion assert_susan_corners_quick_path_38
Extract path function for assertion assert_susan_corners_quick_path_39
Extract path function for assertion assert_susan_corners_quick_path_40
Extract path function for assertion assert_susan_corners_quick_path_41
Extract path function for assertion assert_susan_corners_quick_path_42
Extract path function for assertion assert_susan_corners_quick_path_43
Extract path function for assertion assert_susan_corners_quick_path_44
Extract path function for assertion assert_susan_corners_quick_path_45
Extract path function for assertion assert_susan_corners_quick_path_46
Extract path function for assertion assert_susan_corners_quick_path_47
Extract path function for assertion assert_susan_corners_quick_path_48
Extract path function for assertion assert_susan_corners_quick_path_49
Extract path function for assertion assert_susan_corners_quick_path_50
Extract path function for assertion assert_susan_corners_quick_path_51
Extract path function for assertion assert_susan_corners_quick_path_52
Extract path function for assertion assert_susan_corners_quick_path_53
Extract path function for assertion assert_susan_corners_quick_path_54
Extract path function for assertion assert_susan_corners_quick_path_55
Extract path function for assertion assert_susan_corners_quick_path_56
Extract path function for assertion assert_susan_corners_quick_path_57
Extract path function for assertion assert_susan_corners_quick_path_58
Extract path function for assertion assert_susan_corners_quick_path_59
Extract path function for assertion assert_susan_corners_quick_path_60
Extract path function for assertion assert_susan_corners_quick_path_62
Extract path function for assertion assert_susan_corners_quick_path_64
Extract path function for assertion assert_susan_corners_quick_path_66
Extract path function for assertion assert_susan_corners_quick_path_67
Extract path function for assertion assert_susan_corners_quick_path_68
Extract path function for assertion assert_susan_corners_quick_path_70
Extract path function for assertion assert_susan_corners_quick_path_71
Extract path function for assertion assert_susan_corners_quick_path_72
Extract path function for assertion assert_susan_corners_quick_path_74
Extract path function for assertion assert_susan_corners_quick_path_75
Extract path function for assertion assert_susan_corners_quick_path_76
Extract path function for assertion assert_susan_corners_quick_path_78
Extract path function for assertion assert_susan_corners_quick_path_80
Extract path function for assertion assert_susan_corners_quick_path_82
Extract path function for assertion assert_susan_corners_quick_path_85
Extract path function for assertion assert_corner_draw_path_0
Extract path function for assertion assert_corner_draw_path_1
Extract path function for assertion assert_corner_draw_path_3
Extract path function for assertion assert_corner_draw_path_4
Extract path function for assertion assert_corner_draw_path_5
Extract path function for assertion assert_corner_draw_path_7
Extract path function for assertion assert_susan_edges_small_path_0
Extract path function for assertion assert_susan_edges_small_path_1
Extract path function for assertion assert_susan_edges_small_path_2
Extract path function for assertion assert_susan_edges_small_path_3
Extract path function for assertion assert_susan_edges_small_path_4
Extract path function for assertion assert_susan_edges_small_path_5
Extract path function for assertion assert_susan_edges_small_path_6
Extract path function for assertion assert_susan_edges_small_path_8
Extract path function for assertion assert_susan_edges_small_path_9
Extract path function for assertion assert_susan_edges_small_path_10
Extract path function for assertion assert_susan_edges_small_path_12
Extract path function for assertion assert_susan_edges_small_path_13
Extract path function for assertion assert_susan_edges_small_path_14
Extract path function for assertion assert_susan_edges_small_path_16
Extract path function for assertion assert_susan_edges_small_path_17
Extract path function for assertion assert_susan_edges_small_path_18
Extract path function for assertion assert_susan_edges_small_path_20
Extract path function for assertion assert_susan_edges_small_path_21
Extract path function for assertion assert_susan_edges_small_path_22
Extract path function for assertion assert_susan_edges_small_path_24
Extract path function for assertion assert_susan_edges_small_path_25
Extract path function for assertion assert_susan_edges_small_path_26
Extract path function for assertion assert_susan_edges_small_path_28
Extract path function for assertion assert_susan_edges_small_path_29
Extract path function for assertion assert_susan_edges_small_path_30
Extract path function for assertion assert_susan_edges_small_path_32
Extract path function for assertion assert_susan_edges_small_path_33
Extract path function for assertion assert_susan_edges_small_path_34
Extract path function for assertion assert_susan_edges_small_path_36
Extract path function for assertion assert_susan_edges_small_path_37
Extract path function for assertion assert_susan_edges_small_path_38
Extract path function for assertion assert_susan_edges_small_path_40
Extract path function for assertion assert_susan_edges_small_path_41
Extract path function for assertion assert_susan_edges_small_path_42
Extract path function for assertion assert_susan_edges_small_path_44
Extract path function for assertion assert_susan_edges_small_path_45
Extract path function for assertion assert_susan_edges_small_path_46
Extract path function for assertion assert_susan_edges_small_path_48
Extract path function for assertion assert_susan_edges_small_path_49
Extract path function for assertion assert_susan_edges_small_path_50
Extract path function for assertion assert_susan_edges_small_path_52
Extract path function for assertion assert_susan_edges_small_path_53
Extract path function for assertion assert_susan_edges_small_path_54
Extract path function for assertion assert_susan_edges_small_path_56
Extract path function for assertion assert_susan_edges_small_path_57
Extract path function for assertion assert_susan_edges_small_path_58
Extract path function for assertion assert_susan_edges_small_path_60
Extract path function for assertion assert_susan_edges_small_path_61
Extract path function for assertion assert_susan_edges_small_path_62
Extract path function for assertion assert_susan_edges_small_path_64
Extract path function for assertion assert_susan_edges_small_path_65
Extract path function for assertion assert_susan_edges_small_path_66
Extract path function for assertion assert_susan_edges_small_path_68
Extract path function for assertion assert_susan_edges_small_path_69
Extract path function for assertion assert_susan_edges_small_path_70
Extract path function for assertion assert_susan_edges_small_path_72
Extract path function for assertion assert_susan_edges_small_path_73
Extract path function for assertion assert_susan_edges_small_path_74
Extract path function for assertion assert_susan_edges_small_path_76
Extract path function for assertion assert_susan_edges_small_path_77
Extract path function for assertion assert_susan_edges_small_path_78
Extract path function for assertion assert_susan_edges_small_path_80
Extract path function for assertion assert_susan_edges_small_path_81
Extract path function for assertion assert_susan_edges_small_path_82
Extract path function for assertion assert_susan_edges_small_path_84
Extract path function for assertion assert_susan_edges_small_path_85
Extract path function for assertion assert_susan_edges_small_path_86
Extract path function for assertion assert_susan_edges_small_path_88
Extract path function for assertion assert_susan_edges_small_path_89
Extract path function for assertion assert_susan_edges_small_path_90
Extract path function for assertion assert_susan_edges_small_path_92
Extract path function for assertion assert_susan_edges_small_path_93
Extract path function for assertion assert_susan_edges_small_path_94
Extract path function for assertion assert_susan_edges_small_path_96
Extract path function for assertion assert_susan_edges_small_path_97
Extract path function for assertion assert_susan_edges_small_path_98
Extract path function for assertion assert_susan_edges_small_path_100
Extract path function for assertion assert_susan_edges_small_path_101
Extract path function for assertion assert_susan_edges_small_path_102
Extract path function for assertion assert_susan_edges_small_path_104
Extract path function for assertion assert_susan_edges_small_path_105
Extract path function for assertion assert_susan_edges_small_path_106
Extract path function for assertion assert_susan_edges_small_path_108
Extract path function for assertion assert_susan_edges_small_path_109
Extract path function for assertion assert_susan_edges_small_path_110
Extract path function for assertion assert_susan_edges_small_path_112
Extract path function for assertion assert_susan_edges_small_path_113
Extract path function for assertion assert_susan_edges_small_path_114
Extract path function for assertion assert_susan_edges_small_path_116
Extract path function for assertion assert_susan_edges_small_path_118
Extract path function for assertion assert_susan_edges_small_path_120
Extract path function for assertion assert_susan_edges_small_path_123
Extract path function for assertion assert_susan_edges_path_0
Extract path function for assertion assert_susan_edges_path_1
Extract path function for assertion assert_susan_edges_path_2
Extract path function for assertion assert_susan_edges_path_3
Extract path function for assertion assert_susan_edges_path_4
Extract path function for assertion assert_susan_edges_path_5
Extract path function for assertion assert_susan_edges_path_6
Extract path function for assertion assert_susan_edges_path_8
Extract path function for assertion assert_susan_edges_path_9
Extract path function for assertion assert_susan_edges_path_10
Extract path function for assertion assert_susan_edges_path_12
Extract path function for assertion assert_susan_edges_path_13
Extract path function for assertion assert_susan_edges_path_14
Extract path function for assertion assert_susan_edges_path_16
Extract path function for assertion assert_susan_edges_path_17
Extract path function for assertion assert_susan_edges_path_18
Extract path function for assertion assert_susan_edges_path_20
Extract path function for assertion assert_susan_edges_path_21
Extract path function for assertion assert_susan_edges_path_22
Extract path function for assertion assert_susan_edges_path_24
Extract path function for assertion assert_susan_edges_path_25
Extract path function for assertion assert_susan_edges_path_26
Extract path function for assertion assert_susan_edges_path_28
Extract path function for assertion assert_susan_edges_path_29
Extract path function for assertion assert_susan_edges_path_30
Extract path function for assertion assert_susan_edges_path_32
Extract path function for assertion assert_susan_edges_path_33
Extract path function for assertion assert_susan_edges_path_34
Extract path function for assertion assert_susan_edges_path_36
Extract path function for assertion assert_susan_edges_path_37
Extract path function for assertion assert_susan_edges_path_38
Extract path function for assertion assert_susan_edges_path_40
Extract path function for assertion assert_susan_edges_path_41
Extract path function for assertion assert_susan_edges_path_42
Extract path function for assertion assert_susan_edges_path_44
Extract path function for assertion assert_susan_edges_path_45
Extract path function for assertion assert_susan_edges_path_46
Extract path function for assertion assert_susan_edges_path_48
Extract path function for assertion assert_susan_edges_path_49
Extract path function for assertion assert_susan_edges_path_50
Extract path function for assertion assert_susan_edges_path_52
Extract path function for assertion assert_susan_edges_path_53
Extract path function for assertion assert_susan_edges_path_54
Extract path function for assertion assert_susan_edges_path_56
Extract path function for assertion assert_susan_edges_path_57
Extract path function for assertion assert_susan_edges_path_58
Extract path function for assertion assert_susan_edges_path_60
Extract path function for assertion assert_susan_edges_path_61
Extract path function for assertion assert_susan_edges_path_62
Extract path function for assertion assert_susan_edges_path_64
Extract path function for assertion assert_susan_edges_path_65
Extract path function for assertion assert_susan_edges_path_66
Extract path function for assertion assert_susan_edges_path_68
Extract path function for assertion assert_susan_edges_path_69
Extract path function for assertion assert_susan_edges_path_70
Extract path function for assertion assert_susan_edges_path_72
Extract path function for assertion assert_susan_edges_path_73
Extract path function for assertion assert_susan_edges_path_74
Extract path function for assertion assert_susan_edges_path_76
Extract path function for assertion assert_susan_edges_path_77
Extract path function for assertion assert_susan_edges_path_78
Extract path function for assertion assert_susan_edges_path_80
Extract path function for assertion assert_susan_edges_path_81
Extract path function for assertion assert_susan_edges_path_82
Extract path function for assertion assert_susan_edges_path_84
Extract path function for assertion assert_susan_edges_path_85
Extract path function for assertion assert_susan_edges_path_86
Extract path function for assertion assert_susan_edges_path_88
Extract path function for assertion assert_susan_edges_path_89
Extract path function for assertion assert_susan_edges_path_90
Extract path function for assertion assert_susan_edges_path_92
Extract path function for assertion assert_susan_edges_path_93
Extract path function for assertion assert_susan_edges_path_94
Extract path function for assertion assert_susan_edges_path_96
Extract path function for assertion assert_susan_edges_path_97
Extract path function for assertion assert_susan_edges_path_98
Extract path function for assertion assert_susan_edges_path_100
Extract path function for assertion assert_susan_edges_path_101
Extract path function for assertion assert_susan_edges_path_102
Extract path function for assertion assert_susan_edges_path_104
Extract path function for assertion assert_susan_edges_path_105
Extract path function for assertion assert_susan_edges_path_106
Extract path function for assertion assert_susan_edges_path_108
Extract path function for assertion assert_susan_edges_path_109
Extract path function for assertion assert_susan_edges_path_110
Extract path function for assertion assert_susan_edges_path_112
Extract path function for assertion assert_susan_edges_path_113
Extract path function for assertion assert_susan_edges_path_114
Extract path function for assertion assert_susan_edges_path_116
Extract path function for assertion assert_susan_edges_path_118
Extract path function for assertion assert_susan_edges_path_120
Extract path function for assertion assert_susan_edges_path_123
Extract path function for assertion assert_susan_thin_path_0
Extract path function for assertion assert_susan_thin_path_1
Extract path function for assertion assert_susan_thin_path_2
Extract path function for assertion assert_susan_thin_path_3
Extract path function for assertion assert_susan_thin_path_4
Extract path function for assertion assert_susan_thin_path_5
Extract path function for assertion assert_susan_thin_path_6
Extract path function for assertion assert_susan_thin_path_7
Extract path function for assertion assert_susan_thin_path_8
Extract path function for assertion assert_susan_thin_path_9
Extract path function for assertion assert_susan_thin_path_10
Extract path function for assertion assert_susan_thin_path_11
Extract path function for assertion assert_susan_thin_path_12
Extract path function for assertion assert_susan_thin_path_13
Extract path function for assertion assert_susan_thin_path_14
Extract path function for assertion assert_susan_thin_path_15
Extract path function for assertion assert_susan_thin_path_17
Extract path function for assertion assert_susan_thin_path_18
Extract path function for assertion assert_susan_thin_path_19
Extract path function for assertion assert_susan_thin_path_20
Extract path function for assertion assert_susan_thin_path_22
Extract path function for assertion assert_susan_thin_path_23
Extract path function for assertion assert_susan_thin_path_24
Extract path function for assertion assert_susan_thin_path_26
Extract path function for assertion assert_susan_thin_path_27
Extract path function for assertion assert_susan_thin_path_28
Extract path function for assertion assert_susan_thin_path_30
Extract path function for assertion assert_susan_thin_path_31
Extract path function for assertion assert_susan_thin_path_32
Extract path function for assertion assert_susan_thin_path_34
Extract path function for assertion assert_susan_thin_path_35
Extract path function for assertion assert_susan_thin_path_36
Extract path function for assertion assert_susan_thin_path_38
Extract path function for assertion assert_susan_thin_path_39
Extract path function for assertion assert_susan_thin_path_40
Extract path function for assertion assert_susan_thin_path_42
Extract path function for assertion assert_susan_thin_path_43
Extract path function for assertion assert_susan_thin_path_44
Extract path function for assertion assert_susan_thin_path_46
Extract path function for assertion assert_susan_thin_path_47
Extract path function for assertion assert_susan_thin_path_48
Extract path function for assertion assert_susan_thin_path_49
Extract path function for assertion assert_susan_thin_path_50
Extract path function for assertion assert_susan_thin_path_51
Extract path function for assertion assert_susan_thin_path_52
Extract path function for assertion assert_susan_thin_path_53
Extract path function for assertion assert_susan_thin_path_54
Extract path function for assertion assert_susan_thin_path_55
Extract path function for assertion assert_susan_thin_path_56
Extract path function for assertion assert_susan_thin_path_57
Extract path function for assertion assert_susan_thin_path_58
Extract path function for assertion assert_susan_thin_path_59
Extract path function for assertion assert_susan_thin_path_60
Extract path function for assertion assert_susan_thin_path_61
Extract path function for assertion assert_susan_thin_path_62
Extract path function for assertion assert_susan_thin_path_63
Extract path function for assertion assert_susan_thin_path_64
Extract path function for assertion assert_susan_thin_path_65
Extract path function for assertion assert_susan_thin_path_66
Extract path function for assertion assert_susan_thin_path_67
Extract path function for assertion assert_susan_thin_path_68
Extract path function for assertion assert_susan_thin_path_69
Extract path function for assertion assert_susan_thin_path_70
Extract path function for assertion assert_susan_thin_path_71
Extract path function for assertion assert_susan_thin_path_72
Extract path function for assertion assert_susan_thin_path_73
Extract path function for assertion assert_susan_thin_path_74
Extract path function for assertion assert_susan_thin_path_75
Extract path function for assertion assert_susan_thin_path_76
Extract path function for assertion assert_susan_thin_path_77
Extract path function for assertion assert_susan_thin_path_78
Extract path function for assertion assert_susan_thin_path_79
Extract path function for assertion assert_susan_thin_path_80
Extract path function for assertion assert_susan_thin_path_81
Extract path function for assertion assert_susan_thin_path_82
Extract path function for assertion assert_susan_thin_path_83
Extract path function for assertion assert_susan_thin_path_84
Extract path function for assertion assert_susan_thin_path_85
Extract path function for assertion assert_susan_thin_path_86
Extract path function for assertion assert_susan_thin_path_87
Extract path function for assertion assert_susan_thin_path_88
Extract path function for assertion assert_susan_thin_path_89
Extract path function for assertion assert_susan_thin_path_90
Extract path function for assertion assert_susan_thin_path_91
Extract path function for assertion assert_susan_thin_path_92
Extract path function for assertion assert_susan_thin_path_93
Extract path function for assertion assert_susan_thin_path_94
Extract path function for assertion assert_susan_thin_path_95
Extract path function for assertion assert_susan_thin_path_96
Extract path function for assertion assert_susan_thin_path_97
Extract path function for assertion assert_susan_thin_path_98
Extract path function for assertion assert_susan_thin_path_99
Extract path function for assertion assert_susan_thin_path_101
Extract path function for assertion assert_susan_thin_path_102
Extract path function for assertion assert_susan_thin_path_103
Extract path function for assertion assert_susan_thin_path_104
Extract path function for assertion assert_susan_thin_path_105
Extract path function for assertion assert_susan_thin_path_106
Extract path function for assertion assert_susan_thin_path_107
Extract path function for assertion assert_susan_thin_path_108
Extract path function for assertion assert_susan_thin_path_110
Extract path function for assertion assert_susan_thin_path_111
Extract path function for assertion assert_susan_thin_path_112
Extract path function for assertion assert_susan_thin_path_113
Extract path function for assertion assert_susan_thin_path_114
Extract path function for assertion assert_susan_thin_path_115
Extract path function for assertion assert_susan_thin_path_116
Extract path function for assertion assert_susan_thin_path_117
Extract path function for assertion assert_susan_thin_path_118
Extract path function for assertion assert_susan_thin_path_119
Extract path function for assertion assert_susan_thin_path_120
Extract path function for assertion assert_susan_thin_path_121
Extract path function for assertion assert_susan_thin_path_122
Extract path function for assertion assert_susan_thin_path_123
Extract path function for assertion assert_susan_thin_path_124
Extract path function for assertion assert_susan_thin_path_125
Extract path function for assertion assert_susan_thin_path_126
Extract path function for assertion assert_susan_thin_path_127
Extract path function for assertion assert_susan_thin_path_128
Extract path function for assertion assert_susan_thin_path_129
Extract path function for assertion assert_susan_thin_path_130
Extract path function for assertion assert_susan_thin_path_131
Extract path function for assertion assert_susan_thin_path_132
Extract path function for assertion assert_susan_thin_path_133
Extract path function for assertion assert_susan_thin_path_134
Extract path function for assertion assert_susan_thin_path_135
Extract path function for assertion assert_susan_thin_path_136
Extract path function for assertion assert_susan_thin_path_137
Extract path function for assertion assert_susan_thin_path_138
Extract path function for assertion assert_susan_thin_path_139
Extract path function for assertion assert_susan_thin_path_140
Extract path function for assertion assert_susan_thin_path_141
Extract path function for assertion assert_susan_thin_path_142
Extract path function for assertion assert_susan_thin_path_143
Extract path function for assertion assert_susan_thin_path_144
Extract path function for assertion assert_susan_thin_path_145
Extract path function for assertion assert_susan_thin_path_146
Extract path function for assertion assert_susan_thin_path_147
Extract path function for assertion assert_susan_thin_path_148
Extract path function for assertion assert_susan_thin_path_149
Extract path function for assertion assert_susan_thin_path_150
Extract path function for assertion assert_susan_thin_path_151
Extract path function for assertion assert_susan_thin_path_152
Extract path function for assertion assert_susan_thin_path_153
Extract path function for assertion assert_susan_thin_path_154
Extract path function for assertion assert_susan_thin_path_155
Extract path function for assertion assert_susan_thin_path_156
Extract path function for assertion assert_susan_thin_path_157
Extract path function for assertion assert_susan_thin_path_158
Extract path function for assertion assert_susan_thin_path_159
Extract path function for assertion assert_susan_thin_path_161
Extract path function for assertion assert_susan_thin_path_162
Extract path function for assertion assert_susan_thin_path_164
Extract path function for assertion assert_edge_draw_path_0
Extract path function for assertion assert_edge_draw_path_1
Extract path function for assertion assert_edge_draw_path_2
Extract path function for assertion assert_edge_draw_path_3
Extract path function for assertion assert_edge_draw_path_5
Extract path function for assertion assert_edge_draw_path_6
Extract path function for assertion assert_edge_draw_path_7
Extract path function for assertion assert_edge_draw_path_8
Extract path function for assertion assert_edge_draw_path_9
Extract path function for assertion assert_edge_draw_path_11
Extract path function for assertion assert_susan_smoothing_path_0
Extract path function for assertion assert_susan_smoothing_path_1
Extract path function for assertion assert_susan_smoothing_path_2
Extract path function for assertion assert_susan_smoothing_path_3
Extract path function for assertion assert_susan_smoothing_path_4
Extract path function for assertion assert_susan_smoothing_path_5
Extract path function for assertion assert_susan_smoothing_path_7
Extract path function for assertion assert_susan_smoothing_path_8
Extract path function for assertion assert_susan_smoothing_path_9
Extract path function for assertion assert_susan_smoothing_path_10
Extract path function for assertion assert_susan_smoothing_path_11
Extract path function for assertion assert_susan_smoothing_path_13
Extract path function for assertion assert_susan_smoothing_path_14
Extract path function for assertion assert_susan_smoothing_path_16
Extract path function for assertion assert_susan_smoothing_path_17
Extract path function for assertion assert_susan_smoothing_path_19
Extract path function for assertion assert_susan_smoothing_path_20
Extract path function for assertion assert_susan_smoothing_path_22
Extract path function for assertion assert_susan_smoothing_path_24
Extract path function for assertion assert_susan_smoothing_path_25
Extract path function for assertion assert_susan_smoothing_path_27
Extract path function for assertion assert_susan_smoothing_path_29
Extract path function for assertion assert_susan_smoothing_path_30
Extract path function for assertion assert_susan_smoothing_path_32
Extract path function for assertion assert_susan_smoothing_path_34
Extract path function for assertion assert_susan_smoothing_path_35
Extract path function for assertion assert_susan_smoothing_path_37
Extract path function for assertion assert_susan_smoothing_path_39
Extract path function for assertion assert_susan_smoothing_path_42
Extract path function for assertion assert_susan_smoothing_path_43
Extract path function for assertion assert_susan_smoothing_path_44
Extract path function for assertion assert_susan_smoothing_path_45
Extract path function for assertion assert_susan_smoothing_path_46
Extract path function for assertion assert_susan_smoothing_path_47
Extract path function for assertion assert_susan_smoothing_path_48
Extract path function for assertion assert_susan_smoothing_path_49
Extract path function for assertion assert_susan_smoothing_path_50
Extract path function for assertion assert_susan_smoothing_path_51
Extract path function for assertion assert_susan_smoothing_path_52
Extract path function for assertion assert_susan_smoothing_path_54
Extract path function for assertion assert_susan_smoothing_path_55
Extract path function for assertion assert_susan_smoothing_path_57
Extract path function for assertion assert_susan_smoothing_path_58
Extract path function for assertion assert_put_image_path_0
Extract path function for assertion assert_put_image_path_1
Extract path function for assertion assert_put_image_path_2
Extract path function for assertion assert_getint_path_6
Extract path function for assertion assert_getint_path_9
Extract path function for assertion assert_getint_path_12
Extract path function for assertion assert_getint_path_15
Extract path function for assertion assert_susan_principle_small_path_0
Extract path function for assertion assert_susan_principle_small_path_1
Extract path function for assertion assert_susan_principle_small_path_2
Extract path function for assertion assert_susan_principle_small_path_3
Extract path function for assertion assert_susan_principle_small_path_4
Extract path function for assertion assert_susan_principle_small_path_5
Extract path function for assertion assert_susan_principle_small_path_6
Extract path function for assertion assert_susan_principle_small_path_8
Extract path function for assertion assert_susan_principle_small_path_10
Extract path function for assertion assert_enlarge_path_1
Extract path function for assertion assert_enlarge_path_4
Extract path function for assertion assert_enlarge_path_6
Extract path function for assertion assert_enlarge_path_9
Extract path function for assertion assert_enlarge_path_11
Extract path function for assertion assert_enlarge_path_14
Extract path function for assertion assert_enlarge_path_18
Extract path function for assertion assert_susan_principle_path_0
Extract path function for assertion assert_susan_principle_path_1
Extract path function for assertion assert_susan_principle_path_2
Extract path function for assertion assert_susan_principle_path_3
Extract path function for assertion assert_susan_principle_path_4
Extract path function for assertion assert_susan_principle_path_5
Extract path function for assertion assert_susan_principle_path_6
Extract path function for assertion assert_susan_principle_path_8
Extract path function for assertion assert_susan_principle_path_10
Extract path function for assertion assert_get_image_path_1
Extract path function for assertion assert_get_image_path_2
Extract path function for assertion assert_get_image_path_3
Extract path function for assertion assert_int_to_uchar_path_0
Extract path function for assertion assert_int_to_uchar_path_1
Extract path function for assertion assert_int_to_uchar_path_2
Extract path function for assertion assert_int_to_uchar_path_3
Extract path function for assertion assert_int_to_uchar_path_4
Extract path function for assertion assert_int_to_uchar_path_5
Extract path function for assertion assert_int_to_uchar_path_8
Extract path function for assertion assert_int_to_uchar_path_11
Extract path function for assertion assert_setup_brightness_lut_path_0
Extract path function for assertion assert_setup_brightness_lut_path_1
Extract path function for assertion assert_setup_brightness_lut_path_2
Extract path function for assertion assert_setup_brightness_lut_path_3
Extract path function for assertion assert_setup_brightness_lut_path_4
Extract path function for assertion assert_setup_brightness_lut_path_5
Extract path function for assertion assert_median_path_0
Extract path function for assertion assert_median_path_1
Extract path function for assertion assert_median_path_2
Extract path function for assertion assert_median_path_3
Extract path function for assertion assert_median_path_4
Extract path function for assertion assert_median_path_5
Extract path function for assertion assert_median_path_6
Extract path function for assertion assert_median_path_7
Extract path function for assertion assert_median_path_8
Extract path function for assertion assert_median_path_9
Extract path function for assertion assert_median_path_10
OH stats is requested, dumping stat file...
Processed instructions number 11879
{
    "numberOfAssertCalls": 8,
    "numberOfBlocksInFunctionsWithNoDG": 0,
    "numberOfDataDependentInstructions": 9349,
    "numberOfHashVariables": 1,
    "numberOfImplicitlyProtectedInstructions": 0,
    "numberOfInstructionsInFilteredFunctions": 0,
    "numberOfInstructionsInFunctionsWithNoDG": 0,
    "numberOfNonHashableBlocks": 31,
    "numberOfNonHashableInstructions": 393,
    "numberOfOHProcessedInstr": 11879,
    "numberOfOtherUnprotectedInstructions": 2,
    "numberOfOtherUnprotectedLoopVariantInstructions": 29,
    "numberOfProtectedArguments": 0,
    "numberOfProtectedBlocks": 1,
    "numberOfProtectedFunctions": 18,
    "numberOfProtectedGuardArguments": 0,
    "numberOfProtectedGuardInstructions": 0,
    "numberOfProtectedInstructions": 12,
    "numberOfSensitiveBlocks": 698,
    "numberOfSensitiveFunctions": 19,
    "numberOfShortRangeAssertCalls": 685,
    "numberOfShortRangeImplicitlyProtectedInstructions": 0,
    "numberOfShortRangeProtectedArguments": 0,
    "numberOfShortRangeProtectedBlocks": 562,
    "numberOfShortRangeProtectedGuardArguments": 0,
    "numberOfShortRangeProtectedGuardInstructions": 0,
    "numberOfShortRangeProtectedInstructions": 640,
    "numberOfUnprotectedArgumentReachableInstructions": 59,
    "numberOfUnprotectedArgumentReachableLoopBlocks": 0,
    "numberOfUnprotectedDataDependentBlocks": 0,
    "numberOfUnprotectedDataDependentLoopBlocks": 104,
    "numberOfUnprotectedGlobalReachableInstructions": 0,
    "numberOfUnprotectedGlobalReachableLoopBlocks": 0,
    "numberOfUnprotectedInputDependentInstructions": 0,
    "numberOfUnprotectedLoopInstructions": 1395
}
ERR. processed 19 function, while filter count is 151
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 175.6449 seconds (175.7001 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
  149.7202 ( 85.5%)   0.4283 ( 74.4%)  150.1486 ( 85.5%)  150.2028 ( 85.5%)  runs input dependency analysis
  20.4019 ( 11.7%)   0.1360 ( 23.6%)  20.5379 ( 11.7%)  20.5395 ( 11.7%)  Instruments bitcode with hashing and logging functions
   4.2922 (  2.5%)   0.0094 (  1.6%)   4.3016 (  2.4%)   4.3002 (  2.4%)  Memory SSA
   0.1996 (  0.1%)   0.0000 (  0.0%)   0.1996 (  0.1%)   0.1996 (  0.1%)  Bitcode Writer
   0.1934 (  0.1%)   0.0008 (  0.1%)   0.1942 (  0.1%)   0.1953 (  0.1%)  Dominator Tree Construction
   0.1722 (  0.1%)   0.0005 (  0.1%)   0.1727 (  0.1%)   0.1723 (  0.1%)  Natural Loop Information
   0.0360 (  0.0%)   0.0000 (  0.0%)   0.0360 (  0.0%)   0.0359 (  0.0%)  Module Verifier
   0.0330 (  0.0%)   0.0001 (  0.0%)   0.0332 (  0.0%)   0.0331 (  0.0%)  Basic Alias Analysis (stateless AA impl)
   0.0049 (  0.0%)   0.0000 (  0.0%)   0.0049 (  0.0%)   0.0049 (  0.0%)  Instruments bitcode with guards
   0.0042 (  0.0%)   0.0000 (  0.0%)   0.0042 (  0.0%)   0.0042 (  0.0%)  Function Alias Analysis Results
   0.0029 (  0.0%)   0.0000 (  0.0%)   0.0029 (  0.0%)   0.0029 (  0.0%)  Post-Dominator Tree Construction
   0.0027 (  0.0%)   0.0000 (  0.0%)   0.0027 (  0.0%)   0.0029 (  0.0%)  Dominator Tree Construction
   0.0028 (  0.0%)   0.0000 (  0.0%)   0.0028 (  0.0%)   0.0028 (  0.0%)  Include functions in a given file in any transformation
   0.0018 (  0.0%)   0.0000 (  0.0%)   0.0018 (  0.0%)   0.0018 (  0.0%)  Natural Loop Information
   0.0006 (  0.0%)   0.0000 (  0.0%)   0.0006 (  0.0%)   0.0006 (  0.0%)  Call site information
   0.0003 (  0.0%)   0.0001 (  0.0%)   0.0004 (  0.0%)   0.0004 (  0.0%)  runs indirect and virtual calls analysis
   0.0002 (  0.0%)   0.0001 (  0.0%)   0.0003 (  0.0%)   0.0003 (  0.0%)  CallGraph Construction
   0.0002 (  0.0%)   0.0001 (  0.0%)   0.0003 (  0.0%)   0.0003 (  0.0%)  Remove unreachable blocks from the CFG
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Dead Global Elimination
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Dominator Tree Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Marks functions in a given file as assert functions
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Natural Loop Information
  175.0693 (100.0%)   0.5756 (100.0%)  175.6449 (100.0%)  175.7001 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0173 seconds (0.0175 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.0145 (100.0%)   0.0028 (100.0%)   0.0173 (100.0%)   0.0175 (100.0%)  Parse IR
   0.0145 (100.0%)   0.0028 (100.0%)   0.0173 (100.0%)   0.0175 (100.0%)  Total

Running input dependency analysis pass
Processing function usage0
Processing function usage
Processing function getint0
Processing function getint1
Processing function getint2
Processing function getint
Processing function get_image0
Processing function get_image1
Processing function get_image2
Processing function get_image
Processing function put_image0
Processing function put_image1
Processing function put_image
Processing function int_to_uchar0
Processing function int_to_uchar1
Processing function int_to_uchar2
Processing function int_to_uchar3
Processing function int_to_uchar4
Processing function int_to_uchar5
Processing function int_to_uchar6
Processing function int_to_uchar
Processing function setup_brightness_lut0
Processing function setup_brightness_lut
Processing function susan_principle0
Processing function susan_principle1
Processing function susan_principle2
Processing function susan_principle
Processing function susan_principle_small0
Processing function susan_principle_small1
Processing function susan_principle_small2
Processing function susan_principle_small
Processing function median
Processing function enlarge0
Processing function enlarge1
Processing function enlarge2
Processing function enlarge3
Processing function enlarge4
Processing function enlarge
Processing function susan_smoothing0
Processing function susan_smoothing1
Processing function susan_smoothing2
Processing function susan_smoothing3
Processing function susan_smoothing4
Processing function susan_smoothing5
Processing function susan_smoothing6
Processing function susan_smoothing7
Processing function susan_smoothing8
Processing function susan_smoothing9
Processing function susan_smoothing10
Processing function susan_smoothing11
Processing function susan_smoothing12
Processing function susan_smoothing13
Processing function susan_smoothing14
Processing function susan_smoothing15
Processing function susan_smoothing16
Processing function susan_smoothing17
Processing function susan_smoothing18
Processing function susan_smoothing19
Processing function susan_smoothing20
Processing function susan_smoothing21
Processing function susan_smoothing22
Processing function susan_smoothing23
Processing function susan_smoothing
Processing function edge_draw0
Processing function edge_draw1
Processing function edge_draw2
Processing function edge_draw3
Processing function edge_draw4
Processing function edge_draw5
Processing function edge_draw6
Processing function edge_draw7
Processing function edge_draw
Processing function susan_thin0
Processing function susan_thin1
Processing function susan_thin2
Processing function susan_thin3
Processing function susan_thin4
Processing function susan_thin5
Processing function susan_thin6
Processing function susan_thin7
Processing function susan_thin8
Processing function susan_thin9
Processing function susan_thin10
Processing function susan_thin
Processing function susan_edges0
Processing function susan_edges1
Processing function susan_edges2
Processing function susan_edges3
Processing function susan_edges4
Processing function susan_edges5
Processing function susan_edges6
Processing function susan_edges7
Processing function susan_edges8
Processing function susan_edges9
Processing function susan_edges10
Processing function susan_edges11
Processing function susan_edges12
Processing function susan_edges13
Processing function susan_edges14
Processing function susan_edges15
Processing function susan_edges16
Processing function susan_edges17
Processing function susan_edges
Processing function susan_edges_small0
Processing function susan_edges_small1
Processing function susan_edges_small2
Processing function susan_edges_small3
Processing function susan_edges_small4
Processing function susan_edges_small5
Processing function susan_edges_small6
Processing function susan_edges_small7
Processing function susan_edges_small8
Processing function susan_edges_small9
Processing function susan_edges_small10
Processing function susan_edges_small11
Processing function susan_edges_small12
Processing function susan_edges_small13
Processing function susan_edges_small14
Processing function susan_edges_small15
Processing function susan_edges_small16
Processing function susan_edges_small17
Processing function susan_edges_small
Processing function corner_draw
Processing function susan_corners0
Processing function susan_corners1
Processing function susan_corners2
Processing function susan_corners3
Processing function susan_corners4
Processing function susan_corners5
Processing function susan_corners6
Processing function susan_corners
Processing function susan_corners_quick0
Processing function susan_corners_quick1
Processing function susan_corners_quick2
Processing function susan_corners_quick3
Processing function susan_corners_quick4
Processing function susan_corners_quick5
Processing function susan_corners_quick
Processing function main0
Processing function main1
Processing function main2
Processing function main3
Processing function main4
Processing function main5
Processing function main6
Processing function main7
Processing function main8
Processing function main9
Processing function main10
Processing function main11
Processing function main
Finalizing main
Finalizing main11
Mark Input dependent function main11
Finalizing main10
Mark Input dependent function main10
Finalizing main9
Mark Input dependent function main9
Finalizing main8
Mark Input dependent function main8
Finalizing main7
Mark Input dependent function main7
Finalizing main6
Mark Input dependent function main6
Finalizing main5
Mark Input dependent function main5
Finalizing main4
Mark Input dependent function main4
Finalizing main3
Mark Input dependent function main3
Finalizing main2
Mark Input dependent function main2
Finalizing main1
Mark Input dependent function main1
Finalizing main0
Mark Input dependent function main0
Finalizing susan_corners_quick
Mark Input dependent function susan_corners_quick
Finalizing susan_corners_quick5
Mark Input dependent function susan_corners_quick5
Finalizing susan_corners_quick4
Mark Input dependent function susan_corners_quick4
Finalizing susan_corners_quick3
Mark Input dependent function susan_corners_quick3
Finalizing susan_corners_quick2
Mark Input dependent function susan_corners_quick2
Finalizing susan_corners_quick1
Mark Input dependent function susan_corners_quick1
Finalizing susan_corners_quick0
Mark Input dependent function susan_corners_quick0
Finalizing susan_corners
Mark Input dependent function susan_corners
Finalizing susan_corners6
Mark Input dependent function susan_corners6
Finalizing susan_corners5
Mark Input dependent function susan_corners5
Finalizing susan_corners4
Mark Input dependent function susan_corners4
Finalizing susan_corners3
Mark Input dependent function susan_corners3
Finalizing susan_corners2
Mark Input dependent function susan_corners2
Finalizing susan_corners1
Mark Input dependent function susan_corners1
Finalizing susan_corners0
Mark Input dependent function susan_corners0
Finalizing corner_draw
Mark Input dependent function corner_draw
Finalizing susan_edges_small
Mark Input dependent function susan_edges_small
Finalizing susan_edges_small17
Mark Input dependent function susan_edges_small17
Finalizing susan_edges_small16
Mark Input dependent function susan_edges_small16
Finalizing susan_edges_small15
Mark Input dependent function susan_edges_small15
Finalizing susan_edges_small14
Mark Input dependent function susan_edges_small14
Finalizing susan_edges_small13
Mark Input dependent function susan_edges_small13
Finalizing susan_edges_small12
Mark Input dependent function susan_edges_small12
Finalizing susan_edges_small11
Mark Input dependent function susan_edges_small11
Finalizing susan_edges_small10
Mark Input dependent function susan_edges_small10
Finalizing susan_edges_small9
Mark Input dependent function susan_edges_small9
Finalizing susan_edges_small8
Mark Input dependent function susan_edges_small8
Finalizing susan_edges_small7
Mark Input dependent function susan_edges_small7
Finalizing susan_edges_small6
Mark Input dependent function susan_edges_small6
Finalizing susan_edges_small5
Mark Input dependent function susan_edges_small5
Finalizing susan_edges_small4
Mark Input dependent function susan_edges_small4
Finalizing susan_edges_small3
Mark Input dependent function susan_edges_small3
Finalizing susan_edges_small2
Mark Input dependent function susan_edges_small2
Finalizing susan_edges_small1
Mark Input dependent function susan_edges_small1
Finalizing susan_edges_small0
Mark Input dependent function susan_edges_small0
Finalizing susan_edges
Mark Input dependent function susan_edges
Finalizing susan_edges17
Mark Input dependent function susan_edges17
Finalizing susan_edges16
Mark Input dependent function susan_edges16
Finalizing susan_edges15
Mark Input dependent function susan_edges15
Finalizing susan_edges14
Mark Input dependent function susan_edges14
Finalizing susan_edges13
Mark Input dependent function susan_edges13
Finalizing susan_edges12
Mark Input dependent function susan_edges12
Finalizing susan_edges11
Mark Input dependent function susan_edges11
Finalizing susan_edges10
Mark Input dependent function susan_edges10
Finalizing susan_edges9
Mark Input dependent function susan_edges9
Finalizing susan_edges8
Mark Input dependent function susan_edges8
Finalizing susan_edges7
Mark Input dependent function susan_edges7
Finalizing susan_edges6
Mark Input dependent function susan_edges6
Finalizing susan_edges5
Mark Input dependent function susan_edges5
Finalizing susan_edges4
Mark Input dependent function susan_edges4
Finalizing susan_edges3
Mark Input dependent function susan_edges3
Finalizing susan_edges2
Mark Input dependent function susan_edges2
Finalizing susan_edges1
Mark Input dependent function susan_edges1
Finalizing susan_edges0
Mark Input dependent function susan_edges0
Finalizing susan_thin
Mark Input dependent function susan_thin
Finalizing susan_thin10
Mark Input dependent function susan_thin10
Finalizing susan_thin9
Mark Input dependent function susan_thin9
Finalizing susan_thin8
Mark Input dependent function susan_thin8
Finalizing susan_thin7
Mark Input dependent function susan_thin7
Finalizing susan_thin6
Mark Input dependent function susan_thin6
Finalizing susan_thin5
Mark Input dependent function susan_thin5
Finalizing susan_thin4
Mark Input dependent function susan_thin4
Finalizing susan_thin3
Mark Input dependent function susan_thin3
Finalizing susan_thin2
Mark Input dependent function susan_thin2
Finalizing susan_thin1
Mark Input dependent function susan_thin1
Finalizing susan_thin0
Mark Input dependent function susan_thin0
Finalizing edge_draw
Mark Input dependent function edge_draw
Finalizing edge_draw7
Mark Input dependent function edge_draw7
Finalizing edge_draw6
Mark Input dependent function edge_draw6
Finalizing edge_draw5
Mark Input dependent function edge_draw5
Finalizing edge_draw4
Mark Input dependent function edge_draw4
Finalizing edge_draw3
Mark Input dependent function edge_draw3
Finalizing edge_draw2
Mark Input dependent function edge_draw2
Finalizing edge_draw1
Mark Input dependent function edge_draw1
Finalizing edge_draw0
Mark Input dependent function edge_draw0
Finalizing susan_smoothing
Mark Input dependent function susan_smoothing
Finalizing susan_smoothing23
Mark Input dependent function susan_smoothing23
Finalizing susan_smoothing22
Mark Input dependent function susan_smoothing22
Finalizing susan_smoothing21
Mark Input dependent function susan_smoothing21
Finalizing susan_smoothing20
Mark Input dependent function susan_smoothing20
Finalizing susan_smoothing19
Mark Input dependent function susan_smoothing19
Finalizing susan_smoothing18
Mark Input dependent function susan_smoothing18
Finalizing susan_smoothing17
Mark Input dependent function susan_smoothing17
Finalizing susan_smoothing16
Mark Input dependent function susan_smoothing16
Finalizing susan_smoothing15
Mark Input dependent function susan_smoothing15
Finalizing susan_smoothing14
Mark Input dependent function susan_smoothing14
Finalizing susan_smoothing13
Mark Input dependent function susan_smoothing13
Finalizing susan_smoothing12
Mark Input dependent function susan_smoothing12
Finalizing susan_smoothing11
Mark Input dependent function susan_smoothing11
Finalizing susan_smoothing10
Mark Input dependent function susan_smoothing10
Finalizing susan_smoothing9
Mark Input dependent function susan_smoothing9
Finalizing susan_smoothing8
Mark Input dependent function susan_smoothing8
Finalizing susan_smoothing7
Mark Input dependent function susan_smoothing7
Finalizing susan_smoothing6
Mark Input dependent function susan_smoothing6
Finalizing susan_smoothing5
Mark Input dependent function susan_smoothing5
Finalizing susan_smoothing4
Mark Input dependent function susan_smoothing4
Finalizing susan_smoothing3
Mark Input dependent function susan_smoothing3
Finalizing susan_smoothing2
Mark Input dependent function susan_smoothing2
Finalizing susan_smoothing1
Mark Input dependent function susan_smoothing1
Finalizing susan_smoothing0
Mark Input dependent function susan_smoothing0
Finalizing enlarge
Mark Input dependent function enlarge
Finalizing enlarge4
Mark Input dependent function enlarge4
Finalizing enlarge3
Mark Input dependent function enlarge3
Finalizing enlarge2
Mark Input dependent function enlarge2
Finalizing enlarge1
Mark Input dependent function enlarge1
Finalizing enlarge0
Mark Input dependent function enlarge0
Finalizing median
Mark Input dependent function median
Finalizing susan_principle_small
Mark Input dependent function susan_principle_small
Finalizing susan_principle_small2
Mark Input dependent function susan_principle_small2
Finalizing susan_principle_small1
Mark Input dependent function susan_principle_small1
Finalizing susan_principle_small0
Mark Input dependent function susan_principle_small0
Finalizing susan_principle
Mark Input dependent function susan_principle
Finalizing susan_principle2
Mark Input dependent function susan_principle2
Finalizing susan_principle1
Mark Input dependent function susan_principle1
Finalizing susan_principle0
Mark Input dependent function susan_principle0
Finalizing setup_brightness_lut
Mark Input dependent function setup_brightness_lut
Finalizing setup_brightness_lut0
Mark Input dependent function setup_brightness_lut0
Finalizing int_to_uchar
Mark Input dependent function int_to_uchar
Finalizing int_to_uchar6
Mark Input dependent function int_to_uchar6
Finalizing int_to_uchar5
Mark Input dependent function int_to_uchar5
Finalizing int_to_uchar4
Mark Input dependent function int_to_uchar4
Finalizing int_to_uchar3
Mark Input dependent function int_to_uchar3
Finalizing int_to_uchar2
Mark Input dependent function int_to_uchar2
Finalizing int_to_uchar1
Mark Input dependent function int_to_uchar1
Finalizing int_to_uchar0
Mark Input dependent function int_to_uchar0
Finalizing put_image
Mark Input dependent function put_image
Finalizing put_image1
Mark Input dependent function put_image1
Finalizing put_image0
Mark Input dependent function put_image0
Finalizing get_image
Finalizing get_image2
Mark Input dependent function get_image2
Finalizing get_image1
Mark Input dependent function get_image1
Finalizing get_image0
Mark Input dependent function get_image0
Finalizing getint
Mark Input dependent function getint
Finalizing getint2
Mark Input dependent function getint2
Finalizing getint1
Mark Input dependent function getint1
Finalizing getint0
Mark Input dependent function getint0
Finalizing usage
Mark Input dependent function usage
Finalizing usage0
Mark Input dependent function usage0
Finished input dependency analysis

In  mark function pass 
In  filter function pass 
Filter file:/home/anahitik/SIP/sip-eval/combination/susan.bc/25/0
here!:susan_corners_quick0
here!:susan_smoothing18
here!:susan_edges_small9
here!:susan_smoothing7
here!:susan_smoothing8
here!:edge_draw2
here!:susan_smoothing12
here!:susan_smoothing3
here!:put_image
here!:put_image0
here!:get_image2
here!:susan_edges_small1
here!:susan_edges_small0
here!:susan_smoothing13
here!:susan_edges_small7
here!:susan_edges8
here!:edge_draw1
here!:get_image0
here!:susan_corners4
here!:susan_edges_small12
here!:susan_corners3
here!:susan_thin8
here!:susan_thin3
here!:susan_smoothing17
here!:edge_draw3
here!:main3
here!:susan_edges_small14
here!:susan_edges_small17
here!:int_to_uchar6
here!:susan_edges6
here!:int_to_uchar0
here!:susan_thin9
here!:susan_corners
here!:susan_thin6
here!:susan_corners_quick5
here!:susan_corners_quick
here!:susan_corners_quick4
here!:susan_edges
here!:susan_edges
got filter function names
did not find usage demangled to usage
did not find printf demangled to printf
did not find exit demangled to exit
did not find getint demangled to getint
did not find _IO_getc demangled to _IO_getc
did not find fgets demangled to fgets
did not find fprintf demangled to fprintf
did not find get_image demangled to get_image
did not find fopen demangled to fopen
did not find fgetc demangled to fgetc
did not find malloc demangled to malloc
did not find fread demangled to fread
did not find fclose demangled to fclose
Add filter function put_image
FunctionInfo. Adding function:put_image
did not find fwrite demangled to fwrite
did not find int_to_uchar demangled to int_to_uchar
did not find setup_brightness_lut demangled to setup_brightness_lut
did not find exp demangled to exp
did not find susan_principle demangled to susan_principle
did not find llvm.memset.p0i8.i64 demangled to llvm.memset.p0i8.i64
did not find susan_principle_small demangled to susan_principle_small
did not find median demangled to median
did not find enlarge demangled to enlarge
did not find llvm.memcpy.p0i8.p0i8.i64 demangled to llvm.memcpy.p0i8.p0i8.i64
did not find susan_smoothing demangled to susan_smoothing
did not find edge_draw demangled to edge_draw
did not find susan_thin demangled to susan_thin
Add filter function susan_edges
FunctionInfo. Adding function:susan_edges
did not find sqrt demangled to sqrt
did not find susan_edges_small demangled to susan_edges_small
did not find corner_draw demangled to corner_draw
Add filter function susan_corners
FunctionInfo. Adding function:susan_corners
did not find abs demangled to abs
did not find free demangled to free
Add filter function susan_corners_quick
FunctionInfo. Adding function:susan_corners_quick
did not find main demangled to main
did not find atof demangled to atof
did not find atoi demangled to atoi
did not find usage0 demangled to usage0
did not find getint0 demangled to getint0
did not find getint1 demangled to getint1
did not find getint2 demangled to getint2
Add filter function get_image0
FunctionInfo. Adding function:get_image0
did not find get_image1 demangled to get_image1
Add filter function get_image2
FunctionInfo. Adding function:get_image2
Add filter function put_image0
FunctionInfo. Adding function:put_image0
did not find put_image1 demangled to put_image1
Add filter function int_to_uchar0
FunctionInfo. Adding function:int_to_uchar0
did not find int_to_uchar1 demangled to int_to_uchar1
did not find int_to_uchar2 demangled to int_to_uchar2
did not find int_to_uchar3 demangled to int_to_uchar3
did not find int_to_uchar4 demangled to int_to_uchar4
did not find int_to_uchar5 demangled to int_to_uchar5
Add filter function int_to_uchar6
FunctionInfo. Adding function:int_to_uchar6
did not find setup_brightness_lut0 demangled to setup_brightness_lut0
did not find susan_principle0 demangled to susan_principle0
did not find susan_principle1 demangled to susan_principle1
did not find susan_principle2 demangled to susan_principle2
did not find susan_principle_small0 demangled to susan_principle_small0
did not find susan_principle_small1 demangled to susan_principle_small1
did not find susan_principle_small2 demangled to susan_principle_small2
did not find enlarge0 demangled to enlarge0
did not find enlarge1 demangled to enlarge1
did not find enlarge2 demangled to enlarge2
did not find enlarge3 demangled to enlarge3
did not find enlarge4 demangled to enlarge4
did not find susan_smoothing0 demangled to susan_smoothing0
did not find susan_smoothing1 demangled to susan_smoothing1
did not find susan_smoothing2 demangled to susan_smoothing2
Add filter function susan_smoothing3
FunctionInfo. Adding function:susan_smoothing3
did not find susan_smoothing4 demangled to susan_smoothing4
did not find susan_smoothing5 demangled to susan_smoothing5
did not find susan_smoothing6 demangled to susan_smoothing6
Add filter function susan_smoothing7
FunctionInfo. Adding function:susan_smoothing7
Add filter function susan_smoothing8
FunctionInfo. Adding function:susan_smoothing8
did not find susan_smoothing9 demangled to susan_smoothing9
did not find susan_smoothing10 demangled to susan_smoothing10
did not find susan_smoothing11 demangled to susan_smoothing11
Add filter function susan_smoothing12
FunctionInfo. Adding function:susan_smoothing12
Add filter function susan_smoothing13
FunctionInfo. Adding function:susan_smoothing13
did not find susan_smoothing14 demangled to susan_smoothing14
did not find susan_smoothing15 demangled to susan_smoothing15
did not find susan_smoothing16 demangled to susan_smoothing16
Add filter function susan_smoothing17
FunctionInfo. Adding function:susan_smoothing17
Add filter function susan_smoothing18
FunctionInfo. Adding function:susan_smoothing18
did not find susan_smoothing19 demangled to susan_smoothing19
did not find susan_smoothing20 demangled to susan_smoothing20
did not find susan_smoothing21 demangled to susan_smoothing21
did not find susan_smoothing22 demangled to susan_smoothing22
did not find susan_smoothing23 demangled to susan_smoothing23
did not find edge_draw0 demangled to edge_draw0
Add filter function edge_draw1
FunctionInfo. Adding function:edge_draw1
Add filter function edge_draw2
FunctionInfo. Adding function:edge_draw2
Add filter function edge_draw3
FunctionInfo. Adding function:edge_draw3
did not find edge_draw4 demangled to edge_draw4
did not find edge_draw5 demangled to edge_draw5
did not find edge_draw6 demangled to edge_draw6
did not find edge_draw7 demangled to edge_draw7
did not find susan_thin0 demangled to susan_thin0
did not find susan_thin1 demangled to susan_thin1
did not find susan_thin2 demangled to susan_thin2
Add filter function susan_thin3
FunctionInfo. Adding function:susan_thin3
did not find susan_thin4 demangled to susan_thin4
did not find susan_thin5 demangled to susan_thin5
Add filter function susan_thin6
FunctionInfo. Adding function:susan_thin6
did not find susan_thin7 demangled to susan_thin7
Add filter function susan_thin8
FunctionInfo. Adding function:susan_thin8
Add filter function susan_thin9
FunctionInfo. Adding function:susan_thin9
did not find susan_thin10 demangled to susan_thin10
did not find susan_edges0 demangled to susan_edges0
did not find susan_edges1 demangled to susan_edges1
did not find susan_edges2 demangled to susan_edges2
did not find susan_edges3 demangled to susan_edges3
did not find susan_edges4 demangled to susan_edges4
did not find susan_edges5 demangled to susan_edges5
Add filter function susan_edges6
FunctionInfo. Adding function:susan_edges6
did not find susan_edges7 demangled to susan_edges7
Add filter function susan_edges8
FunctionInfo. Adding function:susan_edges8
did not find susan_edges9 demangled to susan_edges9
did not find susan_edges10 demangled to susan_edges10
did not find susan_edges11 demangled to susan_edges11
did not find susan_edges12 demangled to susan_edges12
did not find susan_edges13 demangled to susan_edges13
did not find susan_edges14 demangled to susan_edges14
did not find susan_edges15 demangled to susan_edges15
did not find susan_edges16 demangled to susan_edges16
did not find susan_edges17 demangled to susan_edges17
Add filter function susan_edges_small0
FunctionInfo. Adding function:susan_edges_small0
Add filter function susan_edges_small1
FunctionInfo. Adding function:susan_edges_small1
did not find susan_edges_small2 demangled to susan_edges_small2
did not find susan_edges_small3 demangled to susan_edges_small3
did not find susan_edges_small4 demangled to susan_edges_small4
did not find susan_edges_small5 demangled to susan_edges_small5
did not find susan_edges_small6 demangled to susan_edges_small6
Add filter function susan_edges_small7
FunctionInfo. Adding function:susan_edges_small7
did not find susan_edges_small8 demangled to susan_edges_small8
Add filter function susan_edges_small9
FunctionInfo. Adding function:susan_edges_small9
did not find susan_edges_small10 demangled to susan_edges_small10
did not find susan_edges_small11 demangled to susan_edges_small11
Add filter function susan_edges_small12
FunctionInfo. Adding function:susan_edges_small12
did not find susan_edges_small13 demangled to susan_edges_small13
Add filter function susan_edges_small14
FunctionInfo. Adding function:susan_edges_small14
did not find susan_edges_small15 demangled to susan_edges_small15
did not find susan_edges_small16 demangled to susan_edges_small16
Add filter function susan_edges_small17
FunctionInfo. Adding function:susan_edges_small17
did not find susan_corners0 demangled to susan_corners0
did not find susan_corners1 demangled to susan_corners1
did not find susan_corners2 demangled to susan_corners2
Add filter function susan_corners3
FunctionInfo. Adding function:susan_corners3
Add filter function susan_corners4
FunctionInfo. Adding function:susan_corners4
did not find susan_corners5 demangled to susan_corners5
did not find susan_corners6 demangled to susan_corners6
Add filter function susan_corners_quick0
FunctionInfo. Adding function:susan_corners_quick0
did not find susan_corners_quick1 demangled to susan_corners_quick1
did not find susan_corners_quick2 demangled to susan_corners_quick2
did not find susan_corners_quick3 demangled to susan_corners_quick3
Add filter function susan_corners_quick4
FunctionInfo. Adding function:susan_corners_quick4
Add filter function susan_corners_quick5
FunctionInfo. Adding function:susan_corners_quick5
did not find main0 demangled to main0
did not find main1 demangled to main1
did not find main2 demangled to main2
Add filter function main3
FunctionInfo. Adding function:main3
did not find main4 demangled to main4
did not find main5 demangled to main5
did not find main6 demangled to main6
did not find main7 demangled to main7
did not find main8 demangled to main8
did not find main9 demangled to main9
did not find main10 demangled to main10
did not find main11 demangled to main11
Adding usage other functions, ExtractedOnly mode uses other functions
Adding getint other functions, ExtractedOnly mode uses other functions
Adding get_image other functions, ExtractedOnly mode uses other functions
Adding put_image other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar other functions, ExtractedOnly mode uses other functions
Adding setup_brightness_lut other functions, ExtractedOnly mode uses other functions
Adding susan_principle other functions, ExtractedOnly mode uses other functions
Adding susan_principle_small other functions, ExtractedOnly mode uses other functions
Adding median other functions, ExtractedOnly mode uses other functions
Adding enlarge other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing other functions, ExtractedOnly mode uses other functions
Adding edge_draw other functions, ExtractedOnly mode uses other functions
Adding susan_thin other functions, ExtractedOnly mode uses other functions
Adding susan_edges other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small other functions, ExtractedOnly mode uses other functions
Adding corner_draw other functions, ExtractedOnly mode uses other functions
Adding susan_corners other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick other functions, ExtractedOnly mode uses other functions
Adding main other functions, ExtractedOnly mode uses other functions
Adding usage0 other functions, ExtractedOnly mode uses other functions
Adding getint0 other functions, ExtractedOnly mode uses other functions
Adding getint1 other functions, ExtractedOnly mode uses other functions
Adding getint2 other functions, ExtractedOnly mode uses other functions
Adding get_image0 other functions, ExtractedOnly mode uses other functions
Adding get_image1 other functions, ExtractedOnly mode uses other functions
Adding get_image2 other functions, ExtractedOnly mode uses other functions
Adding put_image0 other functions, ExtractedOnly mode uses other functions
Adding put_image1 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar0 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar1 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar2 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar3 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar4 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar5 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar6 other functions, ExtractedOnly mode uses other functions
Adding setup_brightness_lut0 other functions, ExtractedOnly mode uses other functions
Adding susan_principle0 other functions, ExtractedOnly mode uses other functions
Adding susan_principle1 other functions, ExtractedOnly mode uses other functions
Adding susan_principle2 other functions, ExtractedOnly mode uses other functions
Adding susan_principle_small0 other functions, ExtractedOnly mode uses other functions
Adding susan_principle_small1 other functions, ExtractedOnly mode uses other functions
Adding susan_principle_small2 other functions, ExtractedOnly mode uses other functions
Adding enlarge0 other functions, ExtractedOnly mode uses other functions
Adding enlarge1 other functions, ExtractedOnly mode uses other functions
Adding enlarge2 other functions, ExtractedOnly mode uses other functions
Adding enlarge3 other functions, ExtractedOnly mode uses other functions
Adding enlarge4 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing0 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing1 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing2 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing3 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing4 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing5 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing6 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing7 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing8 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing9 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing10 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing11 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing12 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing13 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing14 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing15 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing16 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing17 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing18 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing19 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing20 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing21 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing22 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing23 other functions, ExtractedOnly mode uses other functions
Adding edge_draw0 other functions, ExtractedOnly mode uses other functions
Adding edge_draw1 other functions, ExtractedOnly mode uses other functions
Adding edge_draw2 other functions, ExtractedOnly mode uses other functions
Adding edge_draw3 other functions, ExtractedOnly mode uses other functions
Adding edge_draw4 other functions, ExtractedOnly mode uses other functions
Adding edge_draw5 other functions, ExtractedOnly mode uses other functions
Adding edge_draw6 other functions, ExtractedOnly mode uses other functions
Adding edge_draw7 other functions, ExtractedOnly mode uses other functions
Adding susan_thin0 other functions, ExtractedOnly mode uses other functions
Adding susan_thin1 other functions, ExtractedOnly mode uses other functions
Adding susan_thin2 other functions, ExtractedOnly mode uses other functions
Adding susan_thin3 other functions, ExtractedOnly mode uses other functions
Adding susan_thin4 other functions, ExtractedOnly mode uses other functions
Adding susan_thin5 other functions, ExtractedOnly mode uses other functions
Adding susan_thin6 other functions, ExtractedOnly mode uses other functions
Adding susan_thin7 other functions, ExtractedOnly mode uses other functions
Adding susan_thin8 other functions, ExtractedOnly mode uses other functions
Adding susan_thin9 other functions, ExtractedOnly mode uses other functions
Adding susan_thin10 other functions, ExtractedOnly mode uses other functions
Adding susan_edges0 other functions, ExtractedOnly mode uses other functions
Adding susan_edges1 other functions, ExtractedOnly mode uses other functions
Adding susan_edges2 other functions, ExtractedOnly mode uses other functions
Adding susan_edges3 other functions, ExtractedOnly mode uses other functions
Adding susan_edges4 other functions, ExtractedOnly mode uses other functions
Adding susan_edges5 other functions, ExtractedOnly mode uses other functions
Adding susan_edges6 other functions, ExtractedOnly mode uses other functions
Adding susan_edges7 other functions, ExtractedOnly mode uses other functions
Adding susan_edges8 other functions, ExtractedOnly mode uses other functions
Adding susan_edges9 other functions, ExtractedOnly mode uses other functions
Adding susan_edges10 other functions, ExtractedOnly mode uses other functions
Adding susan_edges11 other functions, ExtractedOnly mode uses other functions
Adding susan_edges12 other functions, ExtractedOnly mode uses other functions
Adding susan_edges13 other functions, ExtractedOnly mode uses other functions
Adding susan_edges14 other functions, ExtractedOnly mode uses other functions
Adding susan_edges15 other functions, ExtractedOnly mode uses other functions
Adding susan_edges16 other functions, ExtractedOnly mode uses other functions
Adding susan_edges17 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small0 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small1 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small2 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small3 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small4 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small5 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small6 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small7 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small8 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small9 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small10 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small11 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small12 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small13 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small14 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small15 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small16 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small17 other functions, ExtractedOnly mode uses other functions
Adding susan_corners0 other functions, ExtractedOnly mode uses other functions
Adding susan_corners1 other functions, ExtractedOnly mode uses other functions
Adding susan_corners2 other functions, ExtractedOnly mode uses other functions
Adding susan_corners3 other functions, ExtractedOnly mode uses other functions
Adding susan_corners4 other functions, ExtractedOnly mode uses other functions
Adding susan_corners5 other functions, ExtractedOnly mode uses other functions
Adding susan_corners6 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick0 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick1 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick2 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick3 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick4 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick5 other functions, ExtractedOnly mode uses other functions
Adding main0 other functions, ExtractedOnly mode uses other functions
Adding main1 other functions, ExtractedOnly mode uses other functions
Adding main2 other functions, ExtractedOnly mode uses other functions
Adding main3 other functions, ExtractedOnly mode uses other functions
Adding main4 other functions, ExtractedOnly mode uses other functions
Adding main5 other functions, ExtractedOnly mode uses other functions
Adding main6 other functions, ExtractedOnly mode uses other functions
Adding main7 other functions, ExtractedOnly mode uses other functions
Adding main8 other functions, ExtractedOnly mode uses other functions
Adding main9 other functions, ExtractedOnly mode uses other functions
Adding main10 other functions, ExtractedOnly mode uses other functions
Adding main11 other functions, ExtractedOnly mode uses other functions
Sensitive functions:0 other functions:151
DesiredConnectivity is :1
Other functions to be fed to the network of checkers
susan_edges_small15
susan_thin4
put_image1
susan_edges_small17
edge_draw
susan_smoothing23
susan_smoothing21
usage0
int_to_uchar5
susan_smoothing9
susan_thin3
susan_edges_small13
susan_smoothing6
susan_smoothing2
susan_principle_small1
susan_edges_small12
susan_edges15
enlarge
susan_edges_small9
get_image
main8
main5
susan_smoothing3
susan_corners3
susan_principle1
susan_edges_small10
susan_edges9
int_to_uchar
susan_edges2
susan_edges13
susan_corners2
susan_smoothing15
susan_edges3
susan_edges_small14
getint0
edge_draw5
edge_draw0
main10
int_to_uchar3
susan_smoothing4
susan_edges7
susan_corners4
enlarge0
susan_smoothing1
usage
susan_principle2
setup_brightness_lut
susan_corners
susan_edges12
getint
get_image2
susan_edges_small16
susan_corners_quick2
susan_corners_quick3
susan_edges11
susan_edges_small2
susan_edges5
corner_draw
susan_edges_small1
getint2
main7
susan_edges16
susan_thin1
susan_edges_small5
susan_thin9
susan_smoothing18
susan_smoothing22
susan_thin2
susan_corners_quick4
susan_smoothing16
put_image
int_to_uchar1
susan_edges_small7
main11
susan_thin6
put_image0
get_image0
susan_smoothing17
susan_smoothing13
enlarge4
main4
int_to_uchar0
main0
main2
main9
susan_edges_small11
susan_corners6
susan_smoothing8
susan_thin8
susan_thin10
susan_corners0
susan_corners_quick1
edge_draw1
susan_edges_small
susan_corners_quick
susan_smoothing14
susan_principle_small2
edge_draw4
susan_edges_small8
setup_brightness_lut0
susan_smoothing
susan_thin7
susan_edges_small6
enlarge3
susan_smoothing20
median
getint1
susan_edges_small3
edge_draw7
susan_thin5
susan_principle
susan_smoothing12
int_to_uchar4
enlarge2
susan_edges4
susan_smoothing10
int_to_uchar6
susan_corners5
susan_smoothing5
main1
susan_corners1
susan_edges
susan_smoothing19
main
susan_principle_small0
susan_edges_small0
enlarge1
susan_smoothing7
susan_smoothing0
get_image1
susan_edges10
susan_edges14
susan_edges17
edge_draw2
int_to_uchar2
susan_smoothing11
main3
edge_draw3
susan_corners_quick0
susan_edges6
susan_thin
susan_edges8
susan_principle0
main6
susan_edges1
susan_edges0
susan_thin0
susan_corners_quick5
susan_edges_small4
susan_principle_small
edge_draw6
***
Sensitive functions to be fed to the network of checkers
***
Sensitive functions only checked:0
DAGCheckersNetwork::getReverseTopologicalSort freed visited
Constructed the network of checkers!
Sensitive functions are never checkers as SensitiveOnlyChecked is set to:0
Dumping checkers network info
{
    "allCheckees": [],
    "topologicalsort": []
}
SC stats is requested, dumping stat file...
{
    "avgConnectivity": -nan.0,
    "desiredConnectivity": 1,
    "numberOfGuardInstructions": 0,
    "numberOfGuards": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveInstructions": 0,
    "stdConnectivity": -nan.0
}
Recieved marked functions 0
ERR. processed 151 function, while filter count is 38
Functions called in loop
Function call numbers
get_image -- 1
main -- 0
Insert hash computation
WARNING: Non-0 memset:   call void @llvm.memset.p0i8.i64(i8* %34, i8 100, i64 %conv67, i32 1, i1 false), !control_dep_instr !9, !argument_dep_instr !8, !data_indep_instr !7
Warning: Empty PHI
PSNodeType::PHI with ID 36
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 37
  - operands: []
No reaching definition for: @stderr = external global %struct._IO_FILE*, align 8 in:   store i8* %1, i8** %filename.addr.el, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7, !argument_dep_instr !8 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %call11 = call i32 @fclose(%struct._IO_FILE* %10), !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %max_r = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %max_r.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %min_r = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %min_r.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   store i32 7, i32* %info1328, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   call void @free(i8* %950) #8, !control_dep_instr !5, !data_indep_instr !9 off: 0
No reaching definition for:   %cgy = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %cgy.el = alloca i32*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %cgx = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %cgx.el = alloca i32*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %bp = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 in:   %bp.el = alloca i8*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %i.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %temp = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %temp.el = alloca float, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %dpt.el = alloca i8*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %dp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %dp.el = alloca i8*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %increment = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %increment.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   store i8* %63, i8** %64, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7 off: 0
No reaching definition for:   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %mask_size.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %i.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %midp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %midp.el = alloca i8*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %retval.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No tags were supplied to be skipped! 
'guard' metadata was found in the input bitcode
Recieved marked functions 0
Recieved filter functions 38
 Skipping function per FilterFunctionPass:usage
 Skipping function per FilterFunctionPass:getint
 Skipping function per FilterFunctionPass:get_image
Collecting defining blocks for put_image
 Skipping function per FilterFunctionPass:int_to_uchar
 Skipping function per FilterFunctionPass:setup_brightness_lut
 Skipping function per FilterFunctionPass:susan_principle
 Skipping function per FilterFunctionPass:susan_principle_small
 Skipping function per FilterFunctionPass:median
 Skipping function per FilterFunctionPass:enlarge
 Skipping function per FilterFunctionPass:susan_smoothing
 Skipping function per FilterFunctionPass:edge_draw
 Skipping function per FilterFunctionPass:susan_thin
Collecting defining blocks for susan_edges
 Skipping function per FilterFunctionPass:susan_edges_small
 Skipping function per FilterFunctionPass:corner_draw
Collecting defining blocks for susan_corners
Collecting defining blocks for susan_corners_quick
 Skipping function per FilterFunctionPass:main
 Skipping function per FilterFunctionPass:usage
 Skipping function per FilterFunctionPass:getint
 Skipping function per FilterFunctionPass:get_image
 Processing function:put_image
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @put_image0(i8** %filename.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.then8  
After path modifications process path
entry  if.end  if.then8  
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @put_image1(i8** %filename.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end10  
After path modifications process path
entry  if.end  if.end10  
 Skipping function per FilterFunctionPass:int_to_uchar
 Skipping function per FilterFunctionPass:setup_brightness_lut
 Skipping function per FilterFunctionPass:susan_principle
 Skipping function per FilterFunctionPass:susan_principle_small
 Skipping function per FilterFunctionPass:median
 Skipping function per FilterFunctionPass:enlarge
 Skipping function per FilterFunctionPass:susan_smoothing
 Skipping function per FilterFunctionPass:edge_draw
 Skipping function per FilterFunctionPass:susan_thin
 Processing function:susan_edges
Short range hashing enabled.
Processing path: entry  for.cond3  for.body7  if.then  
After path modifications process path
for.body7  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
  %22 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %max_no.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %n = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 3, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.end  for.inc  
After path modifications process path
for.body7  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %32 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 3, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  for.end  for.inc285  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc285, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 3, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.then685  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.then685  
Hash path invariants only
Invariants are
  br label %if.end688, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store float 1.000000e+06, float* %z, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %279 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  %281 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.then691  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.then691  
Hash path invariants only
Invariants are
  br label %if.end694, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges4(i32* %w, float* %z), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %297 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %295 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %w = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges4(i32* %w, float* %z), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %z = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges4(i32* %w, float* %z), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.then698  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.then698  
Hash path invariants only
Invariants are
  br label %if.end711, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges5(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %313 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %311 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges5(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges5(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.end711  land.lhs.true  land.lhs.true728  land.lhs.true739  if.then750  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.end711  land.lhs.true  land.lhs.true728  land.lhs.true739  if.then750  
Hash path invariants only
Invariants are
  br label %if.end755, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %329 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %327 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.end711  if.end755  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.end711  if.end755  
Hash path invariants only
Invariants are
  %345 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end757, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %343 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.then703  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.then703  
Hash path invariants only
Invariants are
  br label %if.end710, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges6(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %361 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %359 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges6(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges6(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.end710  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.end710  
Hash path invariants only
Invariants are
  br label %if.end711, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %377 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %375 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.then707  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.then707  
Hash path invariants only
Invariants are
  br label %if.end709, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges7(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %393 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %391 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges7(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges7(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.end709  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.end709  
Hash path invariants only
Invariants are
  br label %if.end710, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %409 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %407 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.else708  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.else708  
Hash path invariants only
Invariants are
  call void @susan_edges8(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %425 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %423 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end709, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges8(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges8(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.else693  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.else693  
Hash path invariants only
Invariants are
  br label %if.end694, !control_dep_instr !5, !data_indep_instr !9
  %441 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %439 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 1, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.else  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.else  
Hash path invariants only
Invariants are
  call void @susan_edges3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %if.end688, !control_dep_instr !5, !data_indep_instr !9
  %457 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %455 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %z = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.end757  
After path modifications process path
for.body297  if.then304  if.then319  if.end757  
Hash path invariants only
Invariants are
  br label %if.end759, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %473 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %471 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.else756  
After path modifications process path
for.body297  if.then304  if.then319  if.else756  
Hash path invariants only
Invariants are
  store i32 1, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %489 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %487 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end757, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.then1183  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.then1183  
Hash path invariants only
Invariants are
  br label %if.end1188, !control_dep_instr !5, !data_indep_instr !9
  store float 1.000000e+06, float* %z, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %945 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %947 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
  %943 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.then1192  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.then1192  
Hash path invariants only
Invariants are
  call void @susan_edges11(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %964 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %966 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end1205, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %962 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges11(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges11(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.end1205  land.lhs.true1214  land.lhs.true1223  land.lhs.true1234  if.then1245  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.end1205  land.lhs.true1214  land.lhs.true1223  land.lhs.true1234  if.then1245  
Hash path invariants only
Invariants are
  call void @susan_edges15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %983 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end1250, !control_dep_instr !5, !data_indep_instr !9
  %985 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %981 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.end1205  if.end1250  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.end1205  if.end1250  
Hash path invariants only
Invariants are
  %1002 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end1251, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1004 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1000 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.then1197  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.then1197  
Hash path invariants only
Invariants are
  br label %if.end1204, !control_dep_instr !5, !data_indep_instr !9
  %1021 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges12(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1023 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1019 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges12(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges12(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.end1204  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.end1204  
Hash path invariants only
Invariants are
  %1040 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1042 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end1205, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1038 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.then1201  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.then1201  
Hash path invariants only
Invariants are
  call void @susan_edges13(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %if.end1203, !control_dep_instr !5, !data_indep_instr !9
  %1059 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1061 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1057 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges13(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges13(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.end1203  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.end1203  
Hash path invariants only
Invariants are
  br label %if.end1204, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1078 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1080 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1076 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.else1202  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.else1202  
Hash path invariants only
Invariants are
  br label %if.end1203, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges14(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1097 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1099 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1095 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges14(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges14(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.else1184  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.else1184  
Hash path invariants only
Invariants are
  br label %if.end1188, !control_dep_instr !5, !data_indep_instr !9
  %1116 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  call void @susan_edges10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1118 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1114 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %z = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.end1251  
After path modifications process path
for.body297  if.then304  if.end759  if.end1251  
Hash path invariants only
Invariants are
  br label %if.end1252, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.else758  
After path modifications process path
for.body297  if.then304  if.else758  
Hash path invariants only
Invariants are
  br label %if.end759, !control_dep_instr !5, !data_indep_instr !9
  store i32 1, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.end1252  for.inc1253  
After path modifications process path
for.body297  if.end1252  
Hash path invariants only
Invariants are
  br label %for.inc1253, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  for.end1255  for.inc1256  
After path modifications process path
for.body292  for.end1255  
Hash path invariants only
Invariants are
  br label %for.inc1256, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond288  for.end1258  
After path modifications process path is empty
Processing path: entry  for.cond  for.end287  for.end1258  
After path modifications process path is empty
Processing path: entry  for.end287  for.end1258  
After path modifications process path
entry  for.end287  for.end1258  
 Skipping function per FilterFunctionPass:susan_edges_small
 Skipping function per FilterFunctionPass:corner_draw
 Processing function:susan_corners
Short range hashing enabled.
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.true  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.true  
Hash path invariants only
Invariants are
  br label %cond.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  %260 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %258 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %22 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %cgy = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners0(i32** %cgy, i32** %cgx, i32* %y_size.addr, i32* %x_size.addr), !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Can't handle this operand   %cgx = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners0(i32** %cgy, i32** %cgx, i32* %y_size.addr, i32* %x_size.addr), !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Can't handle this operand   %y_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners0(i32** %cgy, i32** %cgx, i32* %y_size.addr, i32* %x_size.addr), !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners0(i32** %cgy, i32** %cgx, i32* %y_size.addr, i32* %x_size.addr), !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.true729  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.true729  
Hash path invariants only
Invariants are
  br label %cond.end739, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %32 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %293 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %291 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.true757  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.true757  
Hash path invariants only
Invariants are
  br label %cond.end767, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %42 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %326 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %324 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.end767  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.end767  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %52 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %359 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %357 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.false762  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.false762  
Hash path invariants only
Invariants are
  br label %cond.end767, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %62 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %392 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %390 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.false734  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.false734  
Hash path invariants only
Invariants are
  br label %cond.end739, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %72 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %425 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %423 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.false  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.false  
Hash path invariants only
Invariants are
  br label %cond.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %82 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %458 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %456 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.end  if.then869  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.end  if.then869  
Hash path invariants only
Invariants are
  br label %if.end887, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %92 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %491 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %489 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %cgy = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %cgx = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %max_no.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %n = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.end  if.end887  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.end  if.end887  
Hash path invariants only
Invariants are
  br label %if.end888, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %102 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %524 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %522 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.true793  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.true793  
Hash path invariants only
Invariants are
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %112 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %557 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %555 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %cond.end801, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.true818  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.true818  
Hash path invariants only
Invariants are
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %122 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %590 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %588 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %cond.end828, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.true846  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.true846  
Hash path invariants only
Invariants are
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %132 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %623 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %cond.end856, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  %621 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.end856  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.end856  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %142 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %656 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %654 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.false851  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.false851  
Hash path invariants only
Invariants are
  br label %cond.end856, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %152 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %689 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %687 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.false823  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.false823  
Hash path invariants only
Invariants are
  br label %cond.end828, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %162 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %722 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %720 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.false797  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.false797  
Hash path invariants only
Invariants are
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %172 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %755 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %cond.end801, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  %753 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.end888  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.end888  
Hash path invariants only
Invariants are
  br label %if.end889, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %182 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %788 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %786 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.end889  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.end889  
Hash path invariants only
Invariants are
  br label %if.end890, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %192 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.end890  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.end890  
Hash path invariants only
Invariants are
  br label %if.end891, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %202 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.end891  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.end891  
Hash path invariants only
Invariants are
  %212 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end892, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.end892  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.end892  
Hash path invariants only
Invariants are
  br label %if.end893, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %222 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.end893  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.end893  
Hash path invariants only
Invariants are
  br label %if.end894, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %232 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.end894  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.end894  
Hash path invariants only
Invariants are
  br label %if.end895, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %242 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.end895  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.end895  
Hash path invariants only
Invariants are
  br label %if.end896, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %252 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.end896  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.end896  
Hash path invariants only
Invariants are
  br label %if.end897, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %262 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.end897  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.end897  
Hash path invariants only
Invariants are
  br label %if.end898, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %272 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.end898  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.end898  
Hash path invariants only
Invariants are
  %282 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end899, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.end899  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.end899  
Hash path invariants only
Invariants are
  br label %if.end900, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %292 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.end900  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.end900  
Hash path invariants only
Invariants are
  br label %if.end901, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %302 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.end901  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.end901  
Hash path invariants only
Invariants are
  br label %if.end902, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %312 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.end902  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.end902  
Hash path invariants only
Invariants are
  br label %if.end903, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %322 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.end903  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.end903  
Hash path invariants only
Invariants are
  br label %if.end904, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %332 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.end904  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.end904  
Hash path invariants only
Invariants are
  br label %if.end905, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %342 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.end905  
After path modifications process path
for.body14  if.then  if.then165  if.end905  
Hash path invariants only
Invariants are
  %352 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end906, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.end906  
After path modifications process path
for.body14  if.then  if.end906  
Hash path invariants only
Invariants are
  br label %if.end907, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %362 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.end907  for.inc  
After path modifications process path
for.body14  if.end907  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %372 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  for.end  for.inc908  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc908, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.end910  for.cond916  for.body920  if.then927  land.lhs.true  land.lhs.true944  land.lhs.true953  land.lhs.true961  land.lhs.true970  land.lhs.true979  land.lhs.true988  land.lhs.true997  land.lhs.true1006  land.lhs.true1015  land.lhs.true1023  land.lhs.true1032  land.lhs.true1041  land.lhs.true1050  land.lhs.true1059  land.lhs.true1068  land.lhs.true1077  land.lhs.true1085  land.lhs.true1094  land.lhs.true1103  land.lhs.true1112  land.lhs.true1120  land.lhs.true1128  land.lhs.true1136  land.lhs.true1144  land.lhs.true1152  land.lhs.true1160  land.lhs.true1169  land.lhs.true1178  land.lhs.true1187  land.lhs.true1195  land.lhs.true1204  land.lhs.true1213  land.lhs.true1222  land.lhs.true1231  land.lhs.true1240  land.lhs.true1249  land.lhs.true1257  land.lhs.true1266  land.lhs.true1275  land.lhs.true1284  land.lhs.true1293  land.lhs.true1302  land.lhs.true1311  land.lhs.true1319  land.lhs.true1328  land.lhs.true1337  if.then1346  if.then1377  
After path modifications process path
for.body920  if.then927  land.lhs.true  land.lhs.true944  land.lhs.true953  land.lhs.true961  land.lhs.true970  land.lhs.true979  land.lhs.true988  land.lhs.true997  land.lhs.true1006  land.lhs.true1015  land.lhs.true1023  land.lhs.true1032  land.lhs.true1041  land.lhs.true1050  land.lhs.true1059  land.lhs.true1068  land.lhs.true1077  land.lhs.true1085  land.lhs.true1094  land.lhs.true1103  land.lhs.true1112  land.lhs.true1120  land.lhs.true1128  land.lhs.true1136  land.lhs.true1144  land.lhs.true1152  land.lhs.true1160  land.lhs.true1169  land.lhs.true1178  land.lhs.true1187  land.lhs.true1195  land.lhs.true1204  land.lhs.true1213  land.lhs.true1222  land.lhs.true1231  land.lhs.true1240  land.lhs.true1249  land.lhs.true1257  land.lhs.true1266  land.lhs.true1275  land.lhs.true1284  land.lhs.true1293  land.lhs.true1302  land.lhs.true1311  land.lhs.true1319  land.lhs.true1328  land.lhs.true1337  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.end910  for.cond911  for.body915  if.then1377  
After path modifications process path
for.body915  
Hash path invariants only
Invariants are
  br label %for.cond916, !control_dep_instr !5, !data_indep_instr !9
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end910  if.then1377  
After path modifications process path is empty
Processing path: entry  for.end910  if.then1377  
After path modifications process path
entry  for.end910  if.then1377  
Processing call instruction..
Processing path: entry  for.end910  for.cond916  for.body920  if.then927  land.lhs.true  land.lhs.true944  land.lhs.true953  land.lhs.true961  land.lhs.true970  land.lhs.true979  land.lhs.true988  land.lhs.true997  land.lhs.true1006  land.lhs.true1015  land.lhs.true1023  land.lhs.true1032  land.lhs.true1041  land.lhs.true1050  land.lhs.true1059  land.lhs.true1068  land.lhs.true1077  land.lhs.true1085  land.lhs.true1094  land.lhs.true1103  land.lhs.true1112  land.lhs.true1120  land.lhs.true1128  land.lhs.true1136  land.lhs.true1144  land.lhs.true1152  land.lhs.true1160  land.lhs.true1169  land.lhs.true1178  land.lhs.true1187  land.lhs.true1195  land.lhs.true1204  land.lhs.true1213  land.lhs.true1222  land.lhs.true1231  land.lhs.true1240  land.lhs.true1249  land.lhs.true1257  land.lhs.true1266  land.lhs.true1275  land.lhs.true1284  land.lhs.true1293  land.lhs.true1302  land.lhs.true1311  land.lhs.true1319  land.lhs.true1328  land.lhs.true1337  if.then1346  if.end1379  
After path modifications process path
for.body920  if.then927  land.lhs.true  land.lhs.true944  land.lhs.true953  land.lhs.true961  land.lhs.true970  land.lhs.true979  land.lhs.true988  land.lhs.true997  land.lhs.true1006  land.lhs.true1015  land.lhs.true1023  land.lhs.true1032  land.lhs.true1041  land.lhs.true1050  land.lhs.true1059  land.lhs.true1068  land.lhs.true1077  land.lhs.true1085  land.lhs.true1094  land.lhs.true1103  land.lhs.true1112  land.lhs.true1120  land.lhs.true1128  land.lhs.true1136  land.lhs.true1144  land.lhs.true1152  land.lhs.true1160  land.lhs.true1169  land.lhs.true1178  land.lhs.true1187  land.lhs.true1195  land.lhs.true1204  land.lhs.true1213  land.lhs.true1222  land.lhs.true1231  land.lhs.true1240  land.lhs.true1249  land.lhs.true1257  land.lhs.true1266  land.lhs.true1275  land.lhs.true1284  land.lhs.true1293  land.lhs.true1302  land.lhs.true1311  land.lhs.true1319  land.lhs.true1328  land.lhs.true1337  if.end1379  
Hash path invariants only
Invariants are
  br label %if.end1380, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end910  for.cond911  for.body915  
After path modifications process path
for.body915  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond916, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end910  
After path modifications process path is empty
Processing path: entry  for.end910  
After path modifications process path
entry  for.end910  
Processing path: entry  for.end910  for.cond916  for.body920  if.then927  if.end1380  
After path modifications process path
for.body920  if.then927  if.end1380  
Hash path invariants only
Invariants are
  br label %if.end1381, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end910  for.cond911  for.body915  
After path modifications process path
for.body915  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond916, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end910  
After path modifications process path is empty
Processing path: entry  for.end910  
After path modifications process path
entry  for.end910  
Processing path: entry  for.end910  for.cond916  for.body920  if.end1381  for.inc1382  
After path modifications process path
for.body920  if.end1381  
Hash path invariants only
Invariants are
  br label %for.inc1382, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end910  for.cond911  for.body915  
After path modifications process path
for.body915  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond916, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end910  
After path modifications process path is empty
Processing path: entry  for.end910  
After path modifications process path
entry  for.end910  
Processing path: entry  for.end910  for.cond916  
After path modifications process path is empty
Processing path: entry  for.end910  for.cond911  for.body915  for.end1384  for.inc1385  
After path modifications process path
for.body915  for.end1384  
Hash path invariants only
Invariants are
  br label %for.inc1385, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond916, !control_dep_instr !5, !data_indep_instr !9
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end910  
After path modifications process path is empty
Processing path: entry  for.end910  
After path modifications process path
entry  for.end910  
Processing path: entry  for.end910  for.cond911  for.end1387  
After path modifications process path is empty
Processing path: entry  for.cond  for.end910  for.end1387  
After path modifications process path is empty
Processing path: entry  for.end910  for.end1387  
After path modifications process path
entry  for.end910  for.end1387  
 Processing function:susan_corners_quick
Short range hashing enabled.
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.then324  if.then333  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.then324  if.then333  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
  %22 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %max_no.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %n = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.then324  if.end  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.then324  if.end  
Hash path invariants only
Invariants are
  br label %if.end339, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %32 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.end339  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.end339  
Hash path invariants only
Invariants are
  br label %if.end340, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %42 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.end340  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.end340  
Hash path invariants only
Invariants are
  br label %if.end341, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %52 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.end341  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.end341  
Hash path invariants only
Invariants are
  br label %if.end342, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %62 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.end342  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.end342  
Hash path invariants only
Invariants are
  %72 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end343, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.end343  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.end343  
Hash path invariants only
Invariants are
  br label %if.end344, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %82 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.end344  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.end344  
Hash path invariants only
Invariants are
  br label %if.end345, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %92 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.end345  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.end345  
Hash path invariants only
Invariants are
  br label %if.end346, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %102 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.end346  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.end346  
Hash path invariants only
Invariants are
  br label %if.end347, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %112 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.end347  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.end347  
Hash path invariants only
Invariants are
  br label %if.end348, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %122 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.end348  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.end348  
Hash path invariants only
Invariants are
  br label %if.end349, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %132 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.end349  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.end349  
Hash path invariants only
Invariants are
  %142 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end350, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.end350  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.end350  
Hash path invariants only
Invariants are
  br label %if.end351, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %152 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.end351  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.end351  
Hash path invariants only
Invariants are
  br label %if.end352, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %162 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.end352  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.end352  
Hash path invariants only
Invariants are
  br label %if.end353, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %172 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.end353  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.end353  
Hash path invariants only
Invariants are
  br label %if.end354, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %182 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.end354  
After path modifications process path
for.body7  if.then  if.then158  if.end354  
Hash path invariants only
Invariants are
  br label %if.end355, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %192 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.end355  
After path modifications process path
for.body7  if.then  if.end355  
Hash path invariants only
Invariants are
  br label %if.end356, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %202 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.end356  for.inc  
After path modifications process path
for.body7  if.end356  
Hash path invariants only
Invariants are
  %212 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  for.end  for.inc357  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc357, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.end359  for.cond365  for.body369  if.then376  land.lhs.true  land.lhs.true393  land.lhs.true402  land.lhs.true410  land.lhs.true419  land.lhs.true428  land.lhs.true437  land.lhs.true446  land.lhs.true455  land.lhs.true464  land.lhs.true472  land.lhs.true481  land.lhs.true490  land.lhs.true499  land.lhs.true508  land.lhs.true517  land.lhs.true526  land.lhs.true534  land.lhs.true543  land.lhs.true552  land.lhs.true561  land.lhs.true569  land.lhs.true577  land.lhs.true585  land.lhs.true593  land.lhs.true601  land.lhs.true609  land.lhs.true618  land.lhs.true627  land.lhs.true636  land.lhs.true644  land.lhs.true653  land.lhs.true662  land.lhs.true671  land.lhs.true680  land.lhs.true689  land.lhs.true698  land.lhs.true706  land.lhs.true715  land.lhs.true724  land.lhs.true733  land.lhs.true742  land.lhs.true751  land.lhs.true760  land.lhs.true768  land.lhs.true777  land.lhs.true786  if.then795  if.then1316  
After path modifications process path
for.body369  if.then376  land.lhs.true  land.lhs.true393  land.lhs.true402  land.lhs.true410  land.lhs.true419  land.lhs.true428  land.lhs.true437  land.lhs.true446  land.lhs.true455  land.lhs.true464  land.lhs.true472  land.lhs.true481  land.lhs.true490  land.lhs.true499  land.lhs.true508  land.lhs.true517  land.lhs.true526  land.lhs.true534  land.lhs.true543  land.lhs.true552  land.lhs.true561  land.lhs.true569  land.lhs.true577  land.lhs.true585  land.lhs.true593  land.lhs.true601  land.lhs.true609  land.lhs.true618  land.lhs.true627  land.lhs.true636  land.lhs.true644  land.lhs.true653  land.lhs.true662  land.lhs.true671  land.lhs.true680  land.lhs.true689  land.lhs.true698  land.lhs.true706  land.lhs.true715  land.lhs.true724  land.lhs.true733  land.lhs.true742  land.lhs.true751  land.lhs.true760  land.lhs.true768  land.lhs.true777  land.lhs.true786  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.end359  for.cond360  for.body364  if.then1316  
After path modifications process path
for.body364  
Hash path invariants only
Invariants are
  br label %for.cond365, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end359  if.then1316  
After path modifications process path is empty
Processing path: entry  for.end359  if.then1316  
After path modifications process path
entry  for.end359  if.then1316  
Processing path: entry  for.end359  for.cond365  for.body369  if.then376  land.lhs.true  land.lhs.true393  land.lhs.true402  land.lhs.true410  land.lhs.true419  land.lhs.true428  land.lhs.true437  land.lhs.true446  land.lhs.true455  land.lhs.true464  land.lhs.true472  land.lhs.true481  land.lhs.true490  land.lhs.true499  land.lhs.true508  land.lhs.true517  land.lhs.true526  land.lhs.true534  land.lhs.true543  land.lhs.true552  land.lhs.true561  land.lhs.true569  land.lhs.true577  land.lhs.true585  land.lhs.true593  land.lhs.true601  land.lhs.true609  land.lhs.true618  land.lhs.true627  land.lhs.true636  land.lhs.true644  land.lhs.true653  land.lhs.true662  land.lhs.true671  land.lhs.true680  land.lhs.true689  land.lhs.true698  land.lhs.true706  land.lhs.true715  land.lhs.true724  land.lhs.true733  land.lhs.true742  land.lhs.true751  land.lhs.true760  land.lhs.true768  land.lhs.true777  land.lhs.true786  if.then795  if.end1317  
After path modifications process path
for.body369  if.then376  land.lhs.true  land.lhs.true393  land.lhs.true402  land.lhs.true410  land.lhs.true419  land.lhs.true428  land.lhs.true437  land.lhs.true446  land.lhs.true455  land.lhs.true464  land.lhs.true472  land.lhs.true481  land.lhs.true490  land.lhs.true499  land.lhs.true508  land.lhs.true517  land.lhs.true526  land.lhs.true534  land.lhs.true543  land.lhs.true552  land.lhs.true561  land.lhs.true569  land.lhs.true577  land.lhs.true585  land.lhs.true593  land.lhs.true601  land.lhs.true609  land.lhs.true618  land.lhs.true627  land.lhs.true636  land.lhs.true644  land.lhs.true653  land.lhs.true662  land.lhs.true671  land.lhs.true680  land.lhs.true689  land.lhs.true698  land.lhs.true706  land.lhs.true715  land.lhs.true724  land.lhs.true733  land.lhs.true742  land.lhs.true751  land.lhs.true760  land.lhs.true768  land.lhs.true777  land.lhs.true786  if.end1317  
Hash path invariants only
Invariants are
  br label %if.end1318, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end359  for.cond360  for.body364  
After path modifications process path
for.body364  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond365, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond  for.end359  
After path modifications process path is empty
Processing path: entry  for.end359  
After path modifications process path
entry  for.end359  
Processing path: entry  for.end359  for.cond365  for.body369  if.then376  if.end1318  
After path modifications process path
for.body369  if.then376  if.end1318  
Hash path invariants only
Invariants are
  br label %if.end1319, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end359  for.cond360  for.body364  
After path modifications process path
for.body364  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond365, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond  for.end359  
After path modifications process path is empty
Processing path: entry  for.end359  
After path modifications process path
entry  for.end359  
Processing path: entry  for.end359  for.cond365  for.body369  if.end1319  for.inc1320  
After path modifications process path
for.body369  if.end1319  
Hash path invariants only
Invariants are
  br label %for.inc1320, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end359  for.cond360  for.body364  
After path modifications process path
for.body364  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond365, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond  for.end359  
After path modifications process path is empty
Processing path: entry  for.end359  
After path modifications process path
entry  for.end359  
Processing path: entry  for.end359  for.cond365  
After path modifications process path is empty
Processing path: entry  for.end359  for.cond360  for.body364  for.end1322  for.inc1323  
After path modifications process path
for.body364  for.end1322  
Hash path invariants only
Invariants are
  br label %for.inc1323, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond365, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end359  
After path modifications process path is empty
Processing path: entry  for.end359  
After path modifications process path
entry  for.end359  
Processing path: entry  for.end359  for.cond360  for.end1325  
After path modifications process path is empty
Processing path: entry  for.cond  for.end359  for.end1325  
After path modifications process path is empty
Processing path: entry  for.end359  for.end1325  
After path modifications process path
entry  for.end359  for.end1325  
 Skipping function per FilterFunctionPass:main
Extract path function for assertion assert_susan_corners_quick_path_0
Extract path function for assertion assert_susan_corners_quick_path_1
Extract path function for assertion assert_susan_corners_quick_path_2
Extract path function for assertion assert_susan_corners_quick_path_3
Extract path function for assertion assert_susan_corners_quick_path_4
Extract path function for assertion assert_susan_corners_quick_path_5
Extract path function for assertion assert_susan_corners_quick_path_6
Extract path function for assertion assert_susan_corners_quick_path_7
Extract path function for assertion assert_susan_corners_quick_path_8
Extract path function for assertion assert_susan_corners_quick_path_9
Extract path function for assertion assert_susan_corners_quick_path_10
Extract path function for assertion assert_susan_corners_quick_path_11
Extract path function for assertion assert_susan_corners_quick_path_12
Extract path function for assertion assert_susan_corners_quick_path_13
Extract path function for assertion assert_susan_corners_quick_path_14
Extract path function for assertion assert_susan_corners_quick_path_15
Extract path function for assertion assert_susan_corners_quick_path_16
Extract path function for assertion assert_susan_corners_quick_path_17
Extract path function for assertion assert_susan_corners_quick_path_18
Extract path function for assertion assert_susan_corners_quick_path_19
Extract path function for assertion assert_susan_corners_quick_path_20
Extract path function for assertion assert_susan_corners_quick_path_21
Extract path function for assertion assert_susan_corners_quick_path_22
Extract path function for assertion assert_susan_corners_quick_path_23
Extract path function for assertion assert_susan_corners_quick_path_24
Extract path function for assertion assert_susan_corners_quick_path_25
Extract path function for assertion assert_susan_corners_quick_path_26
Extract path function for assertion assert_susan_corners_quick_path_27
Extract path function for assertion assert_susan_corners_quick_path_28
Extract path function for assertion assert_susan_corners_quick_path_29
Extract path function for assertion assert_susan_corners_quick_path_30
Extract path function for assertion assert_susan_corners_quick_path_31
Extract path function for assertion assert_susan_corners_quick_path_32
Extract path function for assertion assert_susan_corners_quick_path_33
Extract path function for assertion assert_susan_corners_quick_path_34
Extract path function for assertion assert_susan_corners_quick_path_35
Extract path function for assertion assert_susan_corners_quick_path_36
Extract path function for assertion assert_susan_corners_quick_path_37
Extract path function for assertion assert_susan_corners_quick_path_38
Extract path function for assertion assert_susan_corners_quick_path_39
Extract path function for assertion assert_susan_corners_quick_path_40
Extract path function for assertion assert_susan_corners_quick_path_41
Extract path function for assertion assert_susan_corners_quick_path_42
Extract path function for assertion assert_susan_corners_quick_path_43
Extract path function for assertion assert_susan_corners_quick_path_44
Extract path function for assertion assert_susan_corners_quick_path_45
Extract path function for assertion assert_susan_corners_quick_path_46
Extract path function for assertion assert_susan_corners_quick_path_47
Extract path function for assertion assert_susan_corners_quick_path_48
Extract path function for assertion assert_susan_corners_quick_path_49
Extract path function for assertion assert_susan_corners_quick_path_50
Extract path function for assertion assert_susan_corners_quick_path_51
Extract path function for assertion assert_susan_corners_quick_path_52
Extract path function for assertion assert_susan_corners_quick_path_53
Extract path function for assertion assert_susan_corners_quick_path_54
Extract path function for assertion assert_susan_corners_quick_path_55
Extract path function for assertion assert_susan_corners_quick_path_56
Extract path function for assertion assert_susan_corners_quick_path_57
Extract path function for assertion assert_susan_corners_quick_path_58
Extract path function for assertion assert_susan_corners_quick_path_59
Extract path function for assertion assert_susan_corners_quick_path_61
Extract path function for assertion assert_susan_corners_quick_path_62
Extract path function for assertion assert_susan_corners_quick_path_64
Extract path function for assertion assert_susan_corners_quick_path_66
Extract path function for assertion assert_susan_corners_quick_path_67
Extract path function for assertion assert_susan_corners_quick_path_68
Extract path function for assertion assert_susan_corners_quick_path_70
Extract path function for assertion assert_susan_corners_quick_path_71
Extract path function for assertion assert_susan_corners_quick_path_72
Extract path function for assertion assert_susan_corners_quick_path_74
Extract path function for assertion assert_susan_corners_quick_path_75
Extract path function for assertion assert_susan_corners_quick_path_76
Extract path function for assertion assert_susan_corners_quick_path_78
Extract path function for assertion assert_susan_corners_quick_path_80
Extract path function for assertion assert_susan_corners_quick_path_82
Extract path function for assertion assert_susan_corners_quick_path_85
Extract path function for assertion assert_susan_corners_path_0
Extract path function for assertion assert_susan_corners_path_1
Extract path function for assertion assert_susan_corners_path_2
Extract path function for assertion assert_susan_corners_path_3
Extract path function for assertion assert_susan_corners_path_4
Extract path function for assertion assert_susan_corners_path_5
Extract path function for assertion assert_susan_corners_path_6
Extract path function for assertion assert_susan_corners_path_7
Extract path function for assertion assert_susan_corners_path_8
Extract path function for assertion assert_susan_corners_path_9
Extract path function for assertion assert_susan_corners_path_10
Extract path function for assertion assert_susan_corners_path_11
Extract path function for assertion assert_susan_corners_path_12
Extract path function for assertion assert_susan_corners_path_13
Extract path function for assertion assert_susan_corners_path_14
Extract path function for assertion assert_susan_corners_path_15
Extract path function for assertion assert_susan_corners_path_16
Extract path function for assertion assert_susan_corners_path_17
Extract path function for assertion assert_susan_corners_path_18
Extract path function for assertion assert_susan_corners_path_19
Extract path function for assertion assert_susan_corners_path_20
Extract path function for assertion assert_susan_corners_path_21
Extract path function for assertion assert_susan_corners_path_22
Extract path function for assertion assert_susan_corners_path_23
Extract path function for assertion assert_susan_corners_path_24
Extract path function for assertion assert_susan_corners_path_25
Extract path function for assertion assert_susan_corners_path_26
Extract path function for assertion assert_susan_corners_path_27
Extract path function for assertion assert_susan_corners_path_28
Extract path function for assertion assert_susan_corners_path_29
Extract path function for assertion assert_susan_corners_path_30
Extract path function for assertion assert_susan_corners_path_31
Extract path function for assertion assert_susan_corners_path_32
Extract path function for assertion assert_susan_corners_path_33
Extract path function for assertion assert_susan_corners_path_34
Extract path function for assertion assert_susan_corners_path_35
Extract path function for assertion assert_susan_corners_path_36
Extract path function for assertion assert_susan_corners_path_37
Extract path function for assertion assert_susan_corners_path_38
Extract path function for assertion assert_susan_corners_path_39
Extract path function for assertion assert_susan_corners_path_40
Extract path function for assertion assert_susan_corners_path_41
Extract path function for assertion assert_susan_corners_path_42
Extract path function for assertion assert_susan_corners_path_43
Extract path function for assertion assert_susan_corners_path_44
Extract path function for assertion assert_susan_corners_path_45
Extract path function for assertion assert_susan_corners_path_46
Extract path function for assertion assert_susan_corners_path_47
Extract path function for assertion assert_susan_corners_path_48
Extract path function for assertion assert_susan_corners_path_49
Extract path function for assertion assert_susan_corners_path_50
Extract path function for assertion assert_susan_corners_path_51
Extract path function for assertion assert_susan_corners_path_52
Extract path function for assertion assert_susan_corners_path_53
Extract path function for assertion assert_susan_corners_path_54
Extract path function for assertion assert_susan_corners_path_55
Extract path function for assertion assert_susan_corners_path_56
Extract path function for assertion assert_susan_corners_path_57
Extract path function for assertion assert_susan_corners_path_58
Extract path function for assertion assert_susan_corners_path_59
Extract path function for assertion assert_susan_corners_path_60
Extract path function for assertion assert_susan_corners_path_61
Extract path function for assertion assert_susan_corners_path_62
Extract path function for assertion assert_susan_corners_path_63
Extract path function for assertion assert_susan_corners_path_64
Extract path function for assertion assert_susan_corners_path_65
Extract path function for assertion assert_susan_corners_path_66
Extract path function for assertion assert_susan_corners_path_67
Extract path function for assertion assert_susan_corners_path_68
Extract path function for assertion assert_susan_corners_path_69
Extract path function for assertion assert_susan_corners_path_70
Extract path function for assertion assert_susan_corners_path_71
Extract path function for assertion assert_susan_corners_path_72
Extract path function for assertion assert_susan_corners_path_73
Extract path function for assertion assert_susan_corners_path_74
Extract path function for assertion assert_susan_corners_path_75
Extract path function for assertion assert_susan_corners_path_76
Extract path function for assertion assert_susan_corners_path_77
Extract path function for assertion assert_susan_corners_path_78
Extract path function for assertion assert_susan_corners_path_79
Extract path function for assertion assert_susan_corners_path_80
Extract path function for assertion assert_susan_corners_path_81
Extract path function for assertion assert_susan_corners_path_82
Extract path function for assertion assert_susan_corners_path_83
Extract path function for assertion assert_susan_corners_path_84
Extract path function for assertion assert_susan_corners_path_85
Extract path function for assertion assert_susan_corners_path_86
Extract path function for assertion assert_susan_corners_path_87
Extract path function for assertion assert_susan_corners_path_88
Extract path function for assertion assert_susan_corners_path_89
Extract path function for assertion assert_susan_corners_path_90
Extract path function for assertion assert_susan_corners_path_91
Extract path function for assertion assert_susan_corners_path_92
Extract path function for assertion assert_susan_corners_path_93
Extract path function for assertion assert_susan_corners_path_94
Extract path function for assertion assert_susan_corners_path_95
Extract path function for assertion assert_susan_corners_path_96
Extract path function for assertion assert_susan_corners_path_97
Extract path function for assertion assert_susan_corners_path_98
Extract path function for assertion assert_susan_corners_path_99
Extract path function for assertion assert_susan_corners_path_100
Extract path function for assertion assert_susan_corners_path_101
Extract path function for assertion assert_susan_corners_path_102
Extract path function for assertion assert_susan_corners_path_103
Extract path function for assertion assert_susan_corners_path_104
Extract path function for assertion assert_susan_corners_path_105
Extract path function for assertion assert_susan_corners_path_106
Extract path function for assertion assert_susan_corners_path_107
Extract path function for assertion assert_susan_corners_path_109
Extract path function for assertion assert_susan_corners_path_110
Extract path function for assertion assert_susan_corners_path_112
Extract path function for assertion assert_susan_corners_path_114
Extract path function for assertion assert_susan_corners_path_115
Extract path function for assertion assert_susan_corners_path_116
Extract path function for assertion assert_susan_corners_path_118
Extract path function for assertion assert_susan_corners_path_119
Extract path function for assertion assert_susan_corners_path_120
Extract path function for assertion assert_susan_corners_path_122
Extract path function for assertion assert_susan_corners_path_123
Extract path function for assertion assert_susan_corners_path_124
Extract path function for assertion assert_susan_corners_path_126
Extract path function for assertion assert_susan_corners_path_128
Extract path function for assertion assert_susan_corners_path_130
Extract path function for assertion assert_susan_corners_path_133
Extract path function for assertion assert_susan_edges_path_0
Extract path function for assertion assert_susan_edges_path_1
Extract path function for assertion assert_susan_edges_path_2
Extract path function for assertion assert_susan_edges_path_3
Extract path function for assertion assert_susan_edges_path_4
Extract path function for assertion assert_susan_edges_path_5
Extract path function for assertion assert_susan_edges_path_7
Extract path function for assertion assert_susan_edges_path_8
Extract path function for assertion assert_susan_edges_path_9
Extract path function for assertion assert_susan_edges_path_10
Extract path function for assertion assert_susan_edges_path_12
Extract path function for assertion assert_susan_edges_path_13
Extract path function for assertion assert_susan_edges_path_14
Extract path function for assertion assert_susan_edges_path_16
Extract path function for assertion assert_susan_edges_path_17
Extract path function for assertion assert_susan_edges_path_18
Extract path function for assertion assert_susan_edges_path_20
Extract path function for assertion assert_susan_edges_path_21
Extract path function for assertion assert_susan_edges_path_22
Extract path function for assertion assert_susan_edges_path_24
Extract path function for assertion assert_susan_edges_path_25
Extract path function for assertion assert_susan_edges_path_26
Extract path function for assertion assert_susan_edges_path_28
Extract path function for assertion assert_susan_edges_path_29
Extract path function for assertion assert_susan_edges_path_30
Extract path function for assertion assert_susan_edges_path_32
Extract path function for assertion assert_susan_edges_path_33
Extract path function for assertion assert_susan_edges_path_34
Extract path function for assertion assert_susan_edges_path_36
Extract path function for assertion assert_susan_edges_path_37
Extract path function for assertion assert_susan_edges_path_38
Extract path function for assertion assert_susan_edges_path_40
Extract path function for assertion assert_susan_edges_path_41
Extract path function for assertion assert_susan_edges_path_42
Extract path function for assertion assert_susan_edges_path_44
Extract path function for assertion assert_susan_edges_path_45
Extract path function for assertion assert_susan_edges_path_46
Extract path function for assertion assert_susan_edges_path_48
Extract path function for assertion assert_susan_edges_path_49
Extract path function for assertion assert_susan_edges_path_50
Extract path function for assertion assert_susan_edges_path_52
Extract path function for assertion assert_susan_edges_path_53
Extract path function for assertion assert_susan_edges_path_54
Extract path function for assertion assert_susan_edges_path_56
Extract path function for assertion assert_susan_edges_path_57
Extract path function for assertion assert_susan_edges_path_58
Extract path function for assertion assert_susan_edges_path_60
Extract path function for assertion assert_susan_edges_path_61
Extract path function for assertion assert_susan_edges_path_62
Extract path function for assertion assert_susan_edges_path_64
Extract path function for assertion assert_susan_edges_path_65
Extract path function for assertion assert_susan_edges_path_66
Extract path function for assertion assert_susan_edges_path_68
Extract path function for assertion assert_susan_edges_path_69
Extract path function for assertion assert_susan_edges_path_70
Extract path function for assertion assert_susan_edges_path_72
Extract path function for assertion assert_susan_edges_path_73
Extract path function for assertion assert_susan_edges_path_74
Extract path function for assertion assert_susan_edges_path_76
Extract path function for assertion assert_susan_edges_path_77
Extract path function for assertion assert_susan_edges_path_78
Extract path function for assertion assert_susan_edges_path_80
Extract path function for assertion assert_susan_edges_path_81
Extract path function for assertion assert_susan_edges_path_82
Extract path function for assertion assert_susan_edges_path_84
Extract path function for assertion assert_susan_edges_path_85
Extract path function for assertion assert_susan_edges_path_86
Extract path function for assertion assert_susan_edges_path_88
Extract path function for assertion assert_susan_edges_path_89
Extract path function for assertion assert_susan_edges_path_90
Extract path function for assertion assert_susan_edges_path_92
Extract path function for assertion assert_susan_edges_path_93
Extract path function for assertion assert_susan_edges_path_94
Extract path function for assertion assert_susan_edges_path_96
Extract path function for assertion assert_susan_edges_path_97
Extract path function for assertion assert_susan_edges_path_98
Extract path function for assertion assert_susan_edges_path_100
Extract path function for assertion assert_susan_edges_path_101
Extract path function for assertion assert_susan_edges_path_102
Extract path function for assertion assert_susan_edges_path_104
Extract path function for assertion assert_susan_edges_path_105
Extract path function for assertion assert_susan_edges_path_106
Extract path function for assertion assert_susan_edges_path_108
Extract path function for assertion assert_susan_edges_path_109
Extract path function for assertion assert_susan_edges_path_110
Extract path function for assertion assert_susan_edges_path_112
Extract path function for assertion assert_susan_edges_path_113
Extract path function for assertion assert_susan_edges_path_114
Extract path function for assertion assert_susan_edges_path_116
Extract path function for assertion assert_susan_edges_path_118
Extract path function for assertion assert_susan_edges_path_120
Extract path function for assertion assert_susan_edges_path_123
Extract path function for assertion assert_put_image_path_0
Extract path function for assertion assert_put_image_path_1
Extract path function for assertion assert_put_image_path_2
OH stats is requested, dumping stat file...
Processed instructions number 11880
{
    "numberOfAssertCalls": 0,
    "numberOfBlocksInFunctionsWithNoDG": 0,
    "numberOfDataDependentInstructions": 5903,
    "numberOfHashVariables": 1,
    "numberOfImplicitlyProtectedInstructions": 0,
    "numberOfInstructionsInFilteredFunctions": 4431,
    "numberOfInstructionsInFunctionsWithNoDG": 0,
    "numberOfNonHashableBlocks": 4,
    "numberOfNonHashableInstructions": 132,
    "numberOfOHProcessedInstr": 7449,
    "numberOfOtherUnprotectedInstructions": 2,
    "numberOfOtherUnprotectedLoopVariantInstructions": 0,
    "numberOfProtectedArguments": 0,
    "numberOfProtectedBlocks": 0,
    "numberOfProtectedFunctions": 4,
    "numberOfProtectedGuardArguments": 0,
    "numberOfProtectedGuardInstructions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveBlocks": 312,
    "numberOfSensitiveFunctions": 4,
    "numberOfShortRangeAssertCalls": 295,
    "numberOfShortRangeImplicitlyProtectedInstructions": 0,
    "numberOfShortRangeProtectedArguments": 0,
    "numberOfShortRangeProtectedBlocks": 282,
    "numberOfShortRangeProtectedGuardArguments": 0,
    "numberOfShortRangeProtectedGuardInstructions": 0,
    "numberOfShortRangeProtectedInstructions": 364,
    "numberOfUnprotectedArgumentReachableInstructions": 7,
    "numberOfUnprotectedArgumentReachableLoopBlocks": 0,
    "numberOfUnprotectedDataDependentBlocks": 0,
    "numberOfUnprotectedDataDependentLoopBlocks": 26,
    "numberOfUnprotectedGlobalReachableInstructions": 0,
    "numberOfUnprotectedGlobalReachableLoopBlocks": 0,
    "numberOfUnprotectedInputDependentInstructions": 0,
    "numberOfUnprotectedLoopInstructions": 1041
}
ERR. processed 4 function, while filter count is 38
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 166.7630 seconds (166.7686 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
  149.5063 ( 89.9%)   0.4201 ( 83.5%)  149.9265 ( 89.9%)  149.9289 ( 89.9%)  runs input dependency analysis
  12.9836 (  7.8%)   0.0680 ( 13.5%)  13.0516 (  7.8%)  13.0552 (  7.8%)  Instruments bitcode with hashing and logging functions
   3.4195 (  2.1%)   0.0138 (  2.7%)   3.4333 (  2.1%)   3.4326 (  2.1%)  Memory SSA
   0.1094 (  0.1%)   0.0001 (  0.0%)   0.1096 (  0.1%)   0.1093 (  0.1%)  Natural Loop Information
   0.0963 (  0.1%)   0.0005 (  0.1%)   0.0968 (  0.1%)   0.0973 (  0.1%)  Dominator Tree Construction
   0.0919 (  0.1%)   0.0000 (  0.0%)   0.0919 (  0.1%)   0.0919 (  0.1%)  Bitcode Writer
   0.0190 (  0.0%)   0.0000 (  0.0%)   0.0190 (  0.0%)   0.0189 (  0.0%)  Module Verifier
   0.0188 (  0.0%)   0.0001 (  0.0%)   0.0189 (  0.0%)   0.0188 (  0.0%)  Basic Alias Analysis (stateless AA impl)
   0.0028 (  0.0%)   0.0000 (  0.0%)   0.0028 (  0.0%)   0.0028 (  0.0%)  Post-Dominator Tree Construction
   0.0027 (  0.0%)   0.0000 (  0.0%)   0.0027 (  0.0%)   0.0027 (  0.0%)  Include functions in a given file in any transformation
   0.0026 (  0.0%)   0.0000 (  0.0%)   0.0027 (  0.0%)   0.0027 (  0.0%)  Dominator Tree Construction
   0.0020 (  0.0%)   0.0000 (  0.0%)   0.0021 (  0.0%)   0.0021 (  0.0%)  Function Alias Analysis Results
   0.0019 (  0.0%)   0.0000 (  0.0%)   0.0019 (  0.0%)   0.0019 (  0.0%)  Natural Loop Information
   0.0017 (  0.0%)   0.0000 (  0.0%)   0.0017 (  0.0%)   0.0017 (  0.0%)  Instruments bitcode with guards
   0.0006 (  0.0%)   0.0000 (  0.0%)   0.0006 (  0.0%)   0.0006 (  0.0%)  Call site information
   0.0003 (  0.0%)   0.0000 (  0.0%)   0.0004 (  0.0%)   0.0004 (  0.0%)  runs indirect and virtual calls analysis
   0.0003 (  0.0%)   0.0000 (  0.0%)   0.0003 (  0.0%)   0.0003 (  0.0%)  CallGraph Construction
   0.0002 (  0.0%)   0.0000 (  0.0%)   0.0003 (  0.0%)   0.0003 (  0.0%)  Remove unreachable blocks from the CFG
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Dead Global Elimination
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Dominator Tree Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Natural Loop Information
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Marks functions in a given file as assert functions
  166.2601 (100.0%)   0.5029 (100.0%)  166.7630 (100.0%)  166.7686 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0176 seconds (0.0176 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.0139 (100.0%)   0.0037 (100.0%)   0.0176 (100.0%)   0.0176 (100.0%)  Parse IR
   0.0139 (100.0%)   0.0037 (100.0%)   0.0176 (100.0%)   0.0176 (100.0%)  Total

Running input dependency analysis pass
Processing function usage0
Processing function usage
Processing function getint0
Processing function getint1
Processing function getint2
Processing function getint
Processing function get_image0
Processing function get_image1
Processing function get_image2
Processing function get_image
Processing function put_image0
Processing function put_image1
Processing function put_image
Processing function int_to_uchar0
Processing function int_to_uchar1
Processing function int_to_uchar2
Processing function int_to_uchar3
Processing function int_to_uchar4
Processing function int_to_uchar5
Processing function int_to_uchar6
Processing function int_to_uchar
Processing function setup_brightness_lut0
Processing function setup_brightness_lut
Processing function susan_principle0
Processing function susan_principle1
Processing function susan_principle2
Processing function susan_principle
Processing function susan_principle_small0
Processing function susan_principle_small1
Processing function susan_principle_small2
Processing function susan_principle_small
Processing function median
Processing function enlarge0
Processing function enlarge1
Processing function enlarge2
Processing function enlarge3
Processing function enlarge4
Processing function enlarge
Processing function susan_smoothing0
Processing function susan_smoothing1
Processing function susan_smoothing2
Processing function susan_smoothing3
Processing function susan_smoothing4
Processing function susan_smoothing5
Processing function susan_smoothing6
Processing function susan_smoothing7
Processing function susan_smoothing8
Processing function susan_smoothing9
Processing function susan_smoothing10
Processing function susan_smoothing11
Processing function susan_smoothing12
Processing function susan_smoothing13
Processing function susan_smoothing14
Processing function susan_smoothing15
Processing function susan_smoothing16
Processing function susan_smoothing17
Processing function susan_smoothing18
Processing function susan_smoothing19
Processing function susan_smoothing20
Processing function susan_smoothing21
Processing function susan_smoothing22
Processing function susan_smoothing23
Processing function susan_smoothing
Processing function edge_draw0
Processing function edge_draw1
Processing function edge_draw2
Processing function edge_draw3
Processing function edge_draw4
Processing function edge_draw5
Processing function edge_draw6
Processing function edge_draw7
Processing function edge_draw
Processing function susan_thin0
Processing function susan_thin1
Processing function susan_thin2
Processing function susan_thin3
Processing function susan_thin4
Processing function susan_thin5
Processing function susan_thin6
Processing function susan_thin7
Processing function susan_thin8
Processing function susan_thin9
Processing function susan_thin10
Processing function susan_thin
Processing function susan_edges0
Processing function susan_edges1
Processing function susan_edges2
Processing function susan_edges3
Processing function susan_edges4
Processing function susan_edges5
Processing function susan_edges6
Processing function susan_edges7
Processing function susan_edges8
Processing function susan_edges9
Processing function susan_edges10
Processing function susan_edges11
Processing function susan_edges12
Processing function susan_edges13
Processing function susan_edges14
Processing function susan_edges15
Processing function susan_edges16
Processing function susan_edges17
Processing function susan_edges
Processing function susan_edges_small0
Processing function susan_edges_small1
Processing function susan_edges_small2
Processing function susan_edges_small3
Processing function susan_edges_small4
Processing function susan_edges_small5
Processing function susan_edges_small6
Processing function susan_edges_small7
Processing function susan_edges_small8
Processing function susan_edges_small9
Processing function susan_edges_small10
Processing function susan_edges_small11
Processing function susan_edges_small12
Processing function susan_edges_small13
Processing function susan_edges_small14
Processing function susan_edges_small15
Processing function susan_edges_small16
Processing function susan_edges_small17
Processing function susan_edges_small
Processing function corner_draw
Processing function susan_corners0
Processing function susan_corners1
Processing function susan_corners2
Processing function susan_corners3
Processing function susan_corners4
Processing function susan_corners5
Processing function susan_corners6
Processing function susan_corners
Processing function susan_corners_quick0
Processing function susan_corners_quick1
Processing function susan_corners_quick2
Processing function susan_corners_quick3
Processing function susan_corners_quick4
Processing function susan_corners_quick5
Processing function susan_corners_quick
Processing function main0
Processing function main1
Processing function main2
Processing function main3
Processing function main4
Processing function main5
Processing function main6
Processing function main7
Processing function main8
Processing function main9
Processing function main10
Processing function main11
Processing function main
Finalizing main
Finalizing main11
Mark Input dependent function main11
Finalizing main10
Mark Input dependent function main10
Finalizing main9
Mark Input dependent function main9
Finalizing main8
Mark Input dependent function main8
Finalizing main7
Mark Input dependent function main7
Finalizing main6
Mark Input dependent function main6
Finalizing main5
Mark Input dependent function main5
Finalizing main4
Mark Input dependent function main4
Finalizing main3
Mark Input dependent function main3
Finalizing main2
Mark Input dependent function main2
Finalizing main1
Mark Input dependent function main1
Finalizing main0
Mark Input dependent function main0
Finalizing susan_corners_quick
Mark Input dependent function susan_corners_quick
Finalizing susan_corners_quick5
Mark Input dependent function susan_corners_quick5
Finalizing susan_corners_quick4
Mark Input dependent function susan_corners_quick4
Finalizing susan_corners_quick3
Mark Input dependent function susan_corners_quick3
Finalizing susan_corners_quick2
Mark Input dependent function susan_corners_quick2
Finalizing susan_corners_quick1
Mark Input dependent function susan_corners_quick1
Finalizing susan_corners_quick0
Mark Input dependent function susan_corners_quick0
Finalizing susan_corners
Mark Input dependent function susan_corners
Finalizing susan_corners6
Mark Input dependent function susan_corners6
Finalizing susan_corners5
Mark Input dependent function susan_corners5
Finalizing susan_corners4
Mark Input dependent function susan_corners4
Finalizing susan_corners3
Mark Input dependent function susan_corners3
Finalizing susan_corners2
Mark Input dependent function susan_corners2
Finalizing susan_corners1
Mark Input dependent function susan_corners1
Finalizing susan_corners0
Mark Input dependent function susan_corners0
Finalizing corner_draw
Mark Input dependent function corner_draw
Finalizing susan_edges_small
Mark Input dependent function susan_edges_small
Finalizing susan_edges_small17
Mark Input dependent function susan_edges_small17
Finalizing susan_edges_small16
Mark Input dependent function susan_edges_small16
Finalizing susan_edges_small15
Mark Input dependent function susan_edges_small15
Finalizing susan_edges_small14
Mark Input dependent function susan_edges_small14
Finalizing susan_edges_small13
Mark Input dependent function susan_edges_small13
Finalizing susan_edges_small12
Mark Input dependent function susan_edges_small12
Finalizing susan_edges_small11
Mark Input dependent function susan_edges_small11
Finalizing susan_edges_small10
Mark Input dependent function susan_edges_small10
Finalizing susan_edges_small9
Mark Input dependent function susan_edges_small9
Finalizing susan_edges_small8
Mark Input dependent function susan_edges_small8
Finalizing susan_edges_small7
Mark Input dependent function susan_edges_small7
Finalizing susan_edges_small6
Mark Input dependent function susan_edges_small6
Finalizing susan_edges_small5
Mark Input dependent function susan_edges_small5
Finalizing susan_edges_small4
Mark Input dependent function susan_edges_small4
Finalizing susan_edges_small3
Mark Input dependent function susan_edges_small3
Finalizing susan_edges_small2
Mark Input dependent function susan_edges_small2
Finalizing susan_edges_small1
Mark Input dependent function susan_edges_small1
Finalizing susan_edges_small0
Mark Input dependent function susan_edges_small0
Finalizing susan_edges
Mark Input dependent function susan_edges
Finalizing susan_edges17
Mark Input dependent function susan_edges17
Finalizing susan_edges16
Mark Input dependent function susan_edges16
Finalizing susan_edges15
Mark Input dependent function susan_edges15
Finalizing susan_edges14
Mark Input dependent function susan_edges14
Finalizing susan_edges13
Mark Input dependent function susan_edges13
Finalizing susan_edges12
Mark Input dependent function susan_edges12
Finalizing susan_edges11
Mark Input dependent function susan_edges11
Finalizing susan_edges10
Mark Input dependent function susan_edges10
Finalizing susan_edges9
Mark Input dependent function susan_edges9
Finalizing susan_edges8
Mark Input dependent function susan_edges8
Finalizing susan_edges7
Mark Input dependent function susan_edges7
Finalizing susan_edges6
Mark Input dependent function susan_edges6
Finalizing susan_edges5
Mark Input dependent function susan_edges5
Finalizing susan_edges4
Mark Input dependent function susan_edges4
Finalizing susan_edges3
Mark Input dependent function susan_edges3
Finalizing susan_edges2
Mark Input dependent function susan_edges2
Finalizing susan_edges1
Mark Input dependent function susan_edges1
Finalizing susan_edges0
Mark Input dependent function susan_edges0
Finalizing susan_thin
Mark Input dependent function susan_thin
Finalizing susan_thin10
Mark Input dependent function susan_thin10
Finalizing susan_thin9
Mark Input dependent function susan_thin9
Finalizing susan_thin8
Mark Input dependent function susan_thin8
Finalizing susan_thin7
Mark Input dependent function susan_thin7
Finalizing susan_thin6
Mark Input dependent function susan_thin6
Finalizing susan_thin5
Mark Input dependent function susan_thin5
Finalizing susan_thin4
Mark Input dependent function susan_thin4
Finalizing susan_thin3
Mark Input dependent function susan_thin3
Finalizing susan_thin2
Mark Input dependent function susan_thin2
Finalizing susan_thin1
Mark Input dependent function susan_thin1
Finalizing susan_thin0
Mark Input dependent function susan_thin0
Finalizing edge_draw
Mark Input dependent function edge_draw
Finalizing edge_draw7
Mark Input dependent function edge_draw7
Finalizing edge_draw6
Mark Input dependent function edge_draw6
Finalizing edge_draw5
Mark Input dependent function edge_draw5
Finalizing edge_draw4
Mark Input dependent function edge_draw4
Finalizing edge_draw3
Mark Input dependent function edge_draw3
Finalizing edge_draw2
Mark Input dependent function edge_draw2
Finalizing edge_draw1
Mark Input dependent function edge_draw1
Finalizing edge_draw0
Mark Input dependent function edge_draw0
Finalizing susan_smoothing
Mark Input dependent function susan_smoothing
Finalizing susan_smoothing23
Mark Input dependent function susan_smoothing23
Finalizing susan_smoothing22
Mark Input dependent function susan_smoothing22
Finalizing susan_smoothing21
Mark Input dependent function susan_smoothing21
Finalizing susan_smoothing20
Mark Input dependent function susan_smoothing20
Finalizing susan_smoothing19
Mark Input dependent function susan_smoothing19
Finalizing susan_smoothing18
Mark Input dependent function susan_smoothing18
Finalizing susan_smoothing17
Mark Input dependent function susan_smoothing17
Finalizing susan_smoothing16
Mark Input dependent function susan_smoothing16
Finalizing susan_smoothing15
Mark Input dependent function susan_smoothing15
Finalizing susan_smoothing14
Mark Input dependent function susan_smoothing14
Finalizing susan_smoothing13
Mark Input dependent function susan_smoothing13
Finalizing susan_smoothing12
Mark Input dependent function susan_smoothing12
Finalizing susan_smoothing11
Mark Input dependent function susan_smoothing11
Finalizing susan_smoothing10
Mark Input dependent function susan_smoothing10
Finalizing susan_smoothing9
Mark Input dependent function susan_smoothing9
Finalizing susan_smoothing8
Mark Input dependent function susan_smoothing8
Finalizing susan_smoothing7
Mark Input dependent function susan_smoothing7
Finalizing susan_smoothing6
Mark Input dependent function susan_smoothing6
Finalizing susan_smoothing5
Mark Input dependent function susan_smoothing5
Finalizing susan_smoothing4
Mark Input dependent function susan_smoothing4
Finalizing susan_smoothing3
Mark Input dependent function susan_smoothing3
Finalizing susan_smoothing2
Mark Input dependent function susan_smoothing2
Finalizing susan_smoothing1
Mark Input dependent function susan_smoothing1
Finalizing susan_smoothing0
Mark Input dependent function susan_smoothing0
Finalizing enlarge
Mark Input dependent function enlarge
Finalizing enlarge4
Mark Input dependent function enlarge4
Finalizing enlarge3
Mark Input dependent function enlarge3
Finalizing enlarge2
Mark Input dependent function enlarge2
Finalizing enlarge1
Mark Input dependent function enlarge1
Finalizing enlarge0
Mark Input dependent function enlarge0
Finalizing median
Mark Input dependent function median
Finalizing susan_principle_small
Mark Input dependent function susan_principle_small
Finalizing susan_principle_small2
Mark Input dependent function susan_principle_small2
Finalizing susan_principle_small1
Mark Input dependent function susan_principle_small1
Finalizing susan_principle_small0
Mark Input dependent function susan_principle_small0
Finalizing susan_principle
Mark Input dependent function susan_principle
Finalizing susan_principle2
Mark Input dependent function susan_principle2
Finalizing susan_principle1
Mark Input dependent function susan_principle1
Finalizing susan_principle0
Mark Input dependent function susan_principle0
Finalizing setup_brightness_lut
Mark Input dependent function setup_brightness_lut
Finalizing setup_brightness_lut0
Mark Input dependent function setup_brightness_lut0
Finalizing int_to_uchar
Mark Input dependent function int_to_uchar
Finalizing int_to_uchar6
Mark Input dependent function int_to_uchar6
Finalizing int_to_uchar5
Mark Input dependent function int_to_uchar5
Finalizing int_to_uchar4
Mark Input dependent function int_to_uchar4
Finalizing int_to_uchar3
Mark Input dependent function int_to_uchar3
Finalizing int_to_uchar2
Mark Input dependent function int_to_uchar2
Finalizing int_to_uchar1
Mark Input dependent function int_to_uchar1
Finalizing int_to_uchar0
Mark Input dependent function int_to_uchar0
Finalizing put_image
Mark Input dependent function put_image
Finalizing put_image1
Mark Input dependent function put_image1
Finalizing put_image0
Mark Input dependent function put_image0
Finalizing get_image
Finalizing get_image2
Mark Input dependent function get_image2
Finalizing get_image1
Mark Input dependent function get_image1
Finalizing get_image0
Mark Input dependent function get_image0
Finalizing getint
Mark Input dependent function getint
Finalizing getint2
Mark Input dependent function getint2
Finalizing getint1
Mark Input dependent function getint1
Finalizing getint0
Mark Input dependent function getint0
Finalizing usage
Mark Input dependent function usage
Finalizing usage0
Mark Input dependent function usage0
Finished input dependency analysis

In  mark function pass 
In  filter function pass 
Filter file:/home/anahitik/SIP/sip-eval/combination/susan.bc/50/0
here!:susan_corners_quick0
here!:susan_smoothing18
here!:susan_edges_small9
here!:susan_smoothing7
here!:susan_smoothing8
here!:edge_draw2
here!:susan_smoothing12
here!:susan_smoothing3
here!:put_image
here!:put_image0
here!:get_image2
here!:susan_edges_small1
here!:susan_edges_small0
here!:susan_smoothing13
here!:susan_edges_small7
here!:susan_edges8
here!:edge_draw1
here!:get_image0
here!:susan_corners4
here!:susan_edges_small12
here!:susan_corners3
here!:susan_thin8
here!:susan_thin3
here!:susan_smoothing17
here!:edge_draw3
here!:main3
here!:susan_edges_small14
here!:susan_edges_small17
here!:int_to_uchar6
here!:susan_edges6
here!:int_to_uchar0
here!:susan_thin9
here!:susan_corners
here!:susan_thin6
here!:susan_corners_quick5
here!:susan_corners_quick
here!:susan_corners_quick4
here!:susan_edges
here!:enlarge1
here!:susan_edges3
here!:susan_edges11
here!:susan_smoothing11
here!:susan_thin0
here!:enlarge2
here!:susan_smoothing1
here!:getint0
here!:susan_principle_small
here!:susan_edges13
here!:susan_smoothing5
here!:susan_edges4
here!:susan_principle_small2
here!:int_to_uchar1
here!:susan_smoothing19
here!:edge_draw5
here!:susan_edges_small15
here!:susan_edges2
here!:main0
here!:usage
here!:susan_principle
here!:susan_smoothing
here!:edge_draw
here!:susan_smoothing0
here!:susan_edges14
here!:main9
here!:enlarge
here!:main
here!:susan_thin7
here!:susan_thin10
here!:susan_corners_quick3
here!:susan_edges16
here!:susan_edges7
here!:susan_edges_small6
here!:susan_edges_small
here!:susan_smoothing10
here!:corner_draw
here!:median
here!:median
got filter function names
Add filter function usage
FunctionInfo. Adding function:usage
did not find printf demangled to printf
did not find exit demangled to exit
did not find getint demangled to getint
did not find _IO_getc demangled to _IO_getc
did not find fgets demangled to fgets
did not find fprintf demangled to fprintf
did not find get_image demangled to get_image
did not find fopen demangled to fopen
did not find fgetc demangled to fgetc
did not find malloc demangled to malloc
did not find fread demangled to fread
did not find fclose demangled to fclose
Add filter function put_image
FunctionInfo. Adding function:put_image
did not find fwrite demangled to fwrite
did not find int_to_uchar demangled to int_to_uchar
did not find setup_brightness_lut demangled to setup_brightness_lut
did not find exp demangled to exp
Add filter function susan_principle
FunctionInfo. Adding function:susan_principle
did not find llvm.memset.p0i8.i64 demangled to llvm.memset.p0i8.i64
Add filter function susan_principle_small
FunctionInfo. Adding function:susan_principle_small
Add filter function median
FunctionInfo. Adding function:median
Add filter function enlarge
FunctionInfo. Adding function:enlarge
did not find llvm.memcpy.p0i8.p0i8.i64 demangled to llvm.memcpy.p0i8.p0i8.i64
Add filter function susan_smoothing
FunctionInfo. Adding function:susan_smoothing
Add filter function edge_draw
FunctionInfo. Adding function:edge_draw
did not find susan_thin demangled to susan_thin
Add filter function susan_edges
FunctionInfo. Adding function:susan_edges
did not find sqrt demangled to sqrt
Add filter function susan_edges_small
FunctionInfo. Adding function:susan_edges_small
Add filter function corner_draw
FunctionInfo. Adding function:corner_draw
Add filter function susan_corners
FunctionInfo. Adding function:susan_corners
did not find abs demangled to abs
did not find free demangled to free
Add filter function susan_corners_quick
FunctionInfo. Adding function:susan_corners_quick
Add filter function main
FunctionInfo. Adding function:main
did not find atof demangled to atof
did not find atoi demangled to atoi
did not find usage0 demangled to usage0
Add filter function getint0
FunctionInfo. Adding function:getint0
did not find getint1 demangled to getint1
did not find getint2 demangled to getint2
Add filter function get_image0
FunctionInfo. Adding function:get_image0
did not find get_image1 demangled to get_image1
Add filter function get_image2
FunctionInfo. Adding function:get_image2
Add filter function put_image0
FunctionInfo. Adding function:put_image0
did not find put_image1 demangled to put_image1
Add filter function int_to_uchar0
FunctionInfo. Adding function:int_to_uchar0
Add filter function int_to_uchar1
FunctionInfo. Adding function:int_to_uchar1
did not find int_to_uchar2 demangled to int_to_uchar2
did not find int_to_uchar3 demangled to int_to_uchar3
did not find int_to_uchar4 demangled to int_to_uchar4
did not find int_to_uchar5 demangled to int_to_uchar5
Add filter function int_to_uchar6
FunctionInfo. Adding function:int_to_uchar6
did not find setup_brightness_lut0 demangled to setup_brightness_lut0
did not find susan_principle0 demangled to susan_principle0
did not find susan_principle1 demangled to susan_principle1
did not find susan_principle2 demangled to susan_principle2
did not find susan_principle_small0 demangled to susan_principle_small0
did not find susan_principle_small1 demangled to susan_principle_small1
Add filter function susan_principle_small2
FunctionInfo. Adding function:susan_principle_small2
did not find enlarge0 demangled to enlarge0
Add filter function enlarge1
FunctionInfo. Adding function:enlarge1
Add filter function enlarge2
FunctionInfo. Adding function:enlarge2
did not find enlarge3 demangled to enlarge3
did not find enlarge4 demangled to enlarge4
Add filter function susan_smoothing0
FunctionInfo. Adding function:susan_smoothing0
Add filter function susan_smoothing1
FunctionInfo. Adding function:susan_smoothing1
did not find susan_smoothing2 demangled to susan_smoothing2
Add filter function susan_smoothing3
FunctionInfo. Adding function:susan_smoothing3
did not find susan_smoothing4 demangled to susan_smoothing4
Add filter function susan_smoothing5
FunctionInfo. Adding function:susan_smoothing5
did not find susan_smoothing6 demangled to susan_smoothing6
Add filter function susan_smoothing7
FunctionInfo. Adding function:susan_smoothing7
Add filter function susan_smoothing8
FunctionInfo. Adding function:susan_smoothing8
did not find susan_smoothing9 demangled to susan_smoothing9
Add filter function susan_smoothing10
FunctionInfo. Adding function:susan_smoothing10
Add filter function susan_smoothing11
FunctionInfo. Adding function:susan_smoothing11
Add filter function susan_smoothing12
FunctionInfo. Adding function:susan_smoothing12
Add filter function susan_smoothing13
FunctionInfo. Adding function:susan_smoothing13
did not find susan_smoothing14 demangled to susan_smoothing14
did not find susan_smoothing15 demangled to susan_smoothing15
did not find susan_smoothing16 demangled to susan_smoothing16
Add filter function susan_smoothing17
FunctionInfo. Adding function:susan_smoothing17
Add filter function susan_smoothing18
FunctionInfo. Adding function:susan_smoothing18
Add filter function susan_smoothing19
FunctionInfo. Adding function:susan_smoothing19
did not find susan_smoothing20 demangled to susan_smoothing20
did not find susan_smoothing21 demangled to susan_smoothing21
did not find susan_smoothing22 demangled to susan_smoothing22
did not find susan_smoothing23 demangled to susan_smoothing23
did not find edge_draw0 demangled to edge_draw0
Add filter function edge_draw1
FunctionInfo. Adding function:edge_draw1
Add filter function edge_draw2
FunctionInfo. Adding function:edge_draw2
Add filter function edge_draw3
FunctionInfo. Adding function:edge_draw3
did not find edge_draw4 demangled to edge_draw4
Add filter function edge_draw5
FunctionInfo. Adding function:edge_draw5
did not find edge_draw6 demangled to edge_draw6
did not find edge_draw7 demangled to edge_draw7
Add filter function susan_thin0
FunctionInfo. Adding function:susan_thin0
did not find susan_thin1 demangled to susan_thin1
did not find susan_thin2 demangled to susan_thin2
Add filter function susan_thin3
FunctionInfo. Adding function:susan_thin3
did not find susan_thin4 demangled to susan_thin4
did not find susan_thin5 demangled to susan_thin5
Add filter function susan_thin6
FunctionInfo. Adding function:susan_thin6
Add filter function susan_thin7
FunctionInfo. Adding function:susan_thin7
Add filter function susan_thin8
FunctionInfo. Adding function:susan_thin8
Add filter function susan_thin9
FunctionInfo. Adding function:susan_thin9
Add filter function susan_thin10
FunctionInfo. Adding function:susan_thin10
did not find susan_edges0 demangled to susan_edges0
did not find susan_edges1 demangled to susan_edges1
Add filter function susan_edges2
FunctionInfo. Adding function:susan_edges2
Add filter function susan_edges3
FunctionInfo. Adding function:susan_edges3
Add filter function susan_edges4
FunctionInfo. Adding function:susan_edges4
did not find susan_edges5 demangled to susan_edges5
Add filter function susan_edges6
FunctionInfo. Adding function:susan_edges6
Add filter function susan_edges7
FunctionInfo. Adding function:susan_edges7
Add filter function susan_edges8
FunctionInfo. Adding function:susan_edges8
did not find susan_edges9 demangled to susan_edges9
did not find susan_edges10 demangled to susan_edges10
Add filter function susan_edges11
FunctionInfo. Adding function:susan_edges11
did not find susan_edges12 demangled to susan_edges12
Add filter function susan_edges13
FunctionInfo. Adding function:susan_edges13
Add filter function susan_edges14
FunctionInfo. Adding function:susan_edges14
did not find susan_edges15 demangled to susan_edges15
Add filter function susan_edges16
FunctionInfo. Adding function:susan_edges16
did not find susan_edges17 demangled to susan_edges17
Add filter function susan_edges_small0
FunctionInfo. Adding function:susan_edges_small0
Add filter function susan_edges_small1
FunctionInfo. Adding function:susan_edges_small1
did not find susan_edges_small2 demangled to susan_edges_small2
did not find susan_edges_small3 demangled to susan_edges_small3
did not find susan_edges_small4 demangled to susan_edges_small4
did not find susan_edges_small5 demangled to susan_edges_small5
Add filter function susan_edges_small6
FunctionInfo. Adding function:susan_edges_small6
Add filter function susan_edges_small7
FunctionInfo. Adding function:susan_edges_small7
did not find susan_edges_small8 demangled to susan_edges_small8
Add filter function susan_edges_small9
FunctionInfo. Adding function:susan_edges_small9
did not find susan_edges_small10 demangled to susan_edges_small10
did not find susan_edges_small11 demangled to susan_edges_small11
Add filter function susan_edges_small12
FunctionInfo. Adding function:susan_edges_small12
did not find susan_edges_small13 demangled to susan_edges_small13
Add filter function susan_edges_small14
FunctionInfo. Adding function:susan_edges_small14
Add filter function susan_edges_small15
FunctionInfo. Adding function:susan_edges_small15
did not find susan_edges_small16 demangled to susan_edges_small16
Add filter function susan_edges_small17
FunctionInfo. Adding function:susan_edges_small17
did not find susan_corners0 demangled to susan_corners0
did not find susan_corners1 demangled to susan_corners1
did not find susan_corners2 demangled to susan_corners2
Add filter function susan_corners3
FunctionInfo. Adding function:susan_corners3
Add filter function susan_corners4
FunctionInfo. Adding function:susan_corners4
did not find susan_corners5 demangled to susan_corners5
did not find susan_corners6 demangled to susan_corners6
Add filter function susan_corners_quick0
FunctionInfo. Adding function:susan_corners_quick0
did not find susan_corners_quick1 demangled to susan_corners_quick1
did not find susan_corners_quick2 demangled to susan_corners_quick2
Add filter function susan_corners_quick3
FunctionInfo. Adding function:susan_corners_quick3
Add filter function susan_corners_quick4
FunctionInfo. Adding function:susan_corners_quick4
Add filter function susan_corners_quick5
FunctionInfo. Adding function:susan_corners_quick5
Add filter function main0
FunctionInfo. Adding function:main0
did not find main1 demangled to main1
did not find main2 demangled to main2
Add filter function main3
FunctionInfo. Adding function:main3
did not find main4 demangled to main4
did not find main5 demangled to main5
did not find main6 demangled to main6
did not find main7 demangled to main7
did not find main8 demangled to main8
Add filter function main9
FunctionInfo. Adding function:main9
did not find main10 demangled to main10
did not find main11 demangled to main11
Adding usage other functions, ExtractedOnly mode uses other functions
Adding getint other functions, ExtractedOnly mode uses other functions
Adding get_image other functions, ExtractedOnly mode uses other functions
Adding put_image other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar other functions, ExtractedOnly mode uses other functions
Adding setup_brightness_lut other functions, ExtractedOnly mode uses other functions
Adding susan_principle other functions, ExtractedOnly mode uses other functions
Adding susan_principle_small other functions, ExtractedOnly mode uses other functions
Adding median other functions, ExtractedOnly mode uses other functions
Adding enlarge other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing other functions, ExtractedOnly mode uses other functions
Adding edge_draw other functions, ExtractedOnly mode uses other functions
Adding susan_thin other functions, ExtractedOnly mode uses other functions
Adding susan_edges other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small other functions, ExtractedOnly mode uses other functions
Adding corner_draw other functions, ExtractedOnly mode uses other functions
Adding susan_corners other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick other functions, ExtractedOnly mode uses other functions
Adding main other functions, ExtractedOnly mode uses other functions
Adding usage0 other functions, ExtractedOnly mode uses other functions
Adding getint0 other functions, ExtractedOnly mode uses other functions
Adding getint1 other functions, ExtractedOnly mode uses other functions
Adding getint2 other functions, ExtractedOnly mode uses other functions
Adding get_image0 other functions, ExtractedOnly mode uses other functions
Adding get_image1 other functions, ExtractedOnly mode uses other functions
Adding get_image2 other functions, ExtractedOnly mode uses other functions
Adding put_image0 other functions, ExtractedOnly mode uses other functions
Adding put_image1 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar0 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar1 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar2 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar3 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar4 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar5 other functions, ExtractedOnly mode uses other functions
Adding int_to_uchar6 other functions, ExtractedOnly mode uses other functions
Adding setup_brightness_lut0 other functions, ExtractedOnly mode uses other functions
Adding susan_principle0 other functions, ExtractedOnly mode uses other functions
Adding susan_principle1 other functions, ExtractedOnly mode uses other functions
Adding susan_principle2 other functions, ExtractedOnly mode uses other functions
Adding susan_principle_small0 other functions, ExtractedOnly mode uses other functions
Adding susan_principle_small1 other functions, ExtractedOnly mode uses other functions
Adding susan_principle_small2 other functions, ExtractedOnly mode uses other functions
Adding enlarge0 other functions, ExtractedOnly mode uses other functions
Adding enlarge1 other functions, ExtractedOnly mode uses other functions
Adding enlarge2 other functions, ExtractedOnly mode uses other functions
Adding enlarge3 other functions, ExtractedOnly mode uses other functions
Adding enlarge4 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing0 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing1 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing2 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing3 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing4 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing5 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing6 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing7 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing8 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing9 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing10 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing11 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing12 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing13 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing14 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing15 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing16 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing17 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing18 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing19 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing20 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing21 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing22 other functions, ExtractedOnly mode uses other functions
Adding susan_smoothing23 other functions, ExtractedOnly mode uses other functions
Adding edge_draw0 other functions, ExtractedOnly mode uses other functions
Adding edge_draw1 other functions, ExtractedOnly mode uses other functions
Adding edge_draw2 other functions, ExtractedOnly mode uses other functions
Adding edge_draw3 other functions, ExtractedOnly mode uses other functions
Adding edge_draw4 other functions, ExtractedOnly mode uses other functions
Adding edge_draw5 other functions, ExtractedOnly mode uses other functions
Adding edge_draw6 other functions, ExtractedOnly mode uses other functions
Adding edge_draw7 other functions, ExtractedOnly mode uses other functions
Adding susan_thin0 other functions, ExtractedOnly mode uses other functions
Adding susan_thin1 other functions, ExtractedOnly mode uses other functions
Adding susan_thin2 other functions, ExtractedOnly mode uses other functions
Adding susan_thin3 other functions, ExtractedOnly mode uses other functions
Adding susan_thin4 other functions, ExtractedOnly mode uses other functions
Adding susan_thin5 other functions, ExtractedOnly mode uses other functions
Adding susan_thin6 other functions, ExtractedOnly mode uses other functions
Adding susan_thin7 other functions, ExtractedOnly mode uses other functions
Adding susan_thin8 other functions, ExtractedOnly mode uses other functions
Adding susan_thin9 other functions, ExtractedOnly mode uses other functions
Adding susan_thin10 other functions, ExtractedOnly mode uses other functions
Adding susan_edges0 other functions, ExtractedOnly mode uses other functions
Adding susan_edges1 other functions, ExtractedOnly mode uses other functions
Adding susan_edges2 other functions, ExtractedOnly mode uses other functions
Adding susan_edges3 other functions, ExtractedOnly mode uses other functions
Adding susan_edges4 other functions, ExtractedOnly mode uses other functions
Adding susan_edges5 other functions, ExtractedOnly mode uses other functions
Adding susan_edges6 other functions, ExtractedOnly mode uses other functions
Adding susan_edges7 other functions, ExtractedOnly mode uses other functions
Adding susan_edges8 other functions, ExtractedOnly mode uses other functions
Adding susan_edges9 other functions, ExtractedOnly mode uses other functions
Adding susan_edges10 other functions, ExtractedOnly mode uses other functions
Adding susan_edges11 other functions, ExtractedOnly mode uses other functions
Adding susan_edges12 other functions, ExtractedOnly mode uses other functions
Adding susan_edges13 other functions, ExtractedOnly mode uses other functions
Adding susan_edges14 other functions, ExtractedOnly mode uses other functions
Adding susan_edges15 other functions, ExtractedOnly mode uses other functions
Adding susan_edges16 other functions, ExtractedOnly mode uses other functions
Adding susan_edges17 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small0 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small1 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small2 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small3 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small4 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small5 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small6 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small7 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small8 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small9 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small10 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small11 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small12 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small13 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small14 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small15 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small16 other functions, ExtractedOnly mode uses other functions
Adding susan_edges_small17 other functions, ExtractedOnly mode uses other functions
Adding susan_corners0 other functions, ExtractedOnly mode uses other functions
Adding susan_corners1 other functions, ExtractedOnly mode uses other functions
Adding susan_corners2 other functions, ExtractedOnly mode uses other functions
Adding susan_corners3 other functions, ExtractedOnly mode uses other functions
Adding susan_corners4 other functions, ExtractedOnly mode uses other functions
Adding susan_corners5 other functions, ExtractedOnly mode uses other functions
Adding susan_corners6 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick0 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick1 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick2 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick3 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick4 other functions, ExtractedOnly mode uses other functions
Adding susan_corners_quick5 other functions, ExtractedOnly mode uses other functions
Adding main0 other functions, ExtractedOnly mode uses other functions
Adding main1 other functions, ExtractedOnly mode uses other functions
Adding main2 other functions, ExtractedOnly mode uses other functions
Adding main3 other functions, ExtractedOnly mode uses other functions
Adding main4 other functions, ExtractedOnly mode uses other functions
Adding main5 other functions, ExtractedOnly mode uses other functions
Adding main6 other functions, ExtractedOnly mode uses other functions
Adding main7 other functions, ExtractedOnly mode uses other functions
Adding main8 other functions, ExtractedOnly mode uses other functions
Adding main9 other functions, ExtractedOnly mode uses other functions
Adding main10 other functions, ExtractedOnly mode uses other functions
Adding main11 other functions, ExtractedOnly mode uses other functions
Sensitive functions:0 other functions:151
DesiredConnectivity is :1
Other functions to be fed to the network of checkers
susan_edges_small15
susan_thin4
put_image1
susan_edges_small17
edge_draw
susan_smoothing23
susan_smoothing21
usage0
int_to_uchar5
susan_smoothing9
susan_thin3
susan_edges_small13
susan_smoothing6
susan_smoothing2
susan_principle_small1
susan_edges_small12
susan_edges15
enlarge
susan_edges_small9
get_image
main8
main5
susan_smoothing3
susan_corners3
susan_principle1
susan_edges_small10
susan_edges9
int_to_uchar
susan_edges2
susan_edges13
susan_corners2
susan_smoothing15
susan_edges3
susan_edges_small14
getint0
edge_draw5
edge_draw0
main10
int_to_uchar3
susan_smoothing4
susan_edges7
susan_corners4
enlarge0
susan_smoothing1
usage
susan_principle2
setup_brightness_lut
susan_corners
susan_edges12
getint
get_image2
susan_edges_small16
susan_corners_quick2
susan_corners_quick3
susan_edges11
susan_edges_small2
susan_edges5
corner_draw
susan_edges_small1
getint2
main7
susan_edges16
susan_thin1
susan_edges_small5
susan_thin9
susan_smoothing18
susan_smoothing22
susan_thin2
susan_corners_quick4
susan_smoothing16
put_image
int_to_uchar1
susan_edges_small7
main11
susan_thin6
put_image0
get_image0
susan_smoothing17
susan_smoothing13
enlarge4
main4
int_to_uchar0
main0
main2
main9
susan_edges_small11
susan_corners6
susan_smoothing8
susan_thin8
susan_thin10
susan_corners0
susan_corners_quick1
edge_draw1
susan_edges_small
susan_corners_quick
susan_smoothing14
susan_principle_small2
edge_draw4
susan_edges_small8
setup_brightness_lut0
susan_smoothing
susan_thin7
susan_edges_small6
enlarge3
susan_smoothing20
median
getint1
susan_edges_small3
edge_draw7
susan_thin5
susan_principle
susan_smoothing12
int_to_uchar4
enlarge2
susan_edges4
susan_smoothing10
int_to_uchar6
susan_corners5
susan_smoothing5
main1
susan_corners1
susan_edges
susan_smoothing19
main
susan_principle_small0
susan_edges_small0
enlarge1
susan_smoothing7
susan_smoothing0
get_image1
susan_edges10
susan_edges14
susan_edges17
edge_draw2
int_to_uchar2
susan_smoothing11
main3
edge_draw3
susan_corners_quick0
susan_edges6
susan_thin
susan_edges8
susan_principle0
main6
susan_edges1
susan_edges0
susan_thin0
susan_corners_quick5
susan_edges_small4
susan_principle_small
edge_draw6
***
Sensitive functions to be fed to the network of checkers
***
Sensitive functions only checked:0
DAGCheckersNetwork::getReverseTopologicalSort freed visited
Constructed the network of checkers!
Sensitive functions are never checkers as SensitiveOnlyChecked is set to:0
Dumping checkers network info
{
    "allCheckees": [],
    "topologicalsort": []
}
SC stats is requested, dumping stat file...
{
    "avgConnectivity": -nan.0,
    "desiredConnectivity": 1,
    "numberOfGuardInstructions": 0,
    "numberOfGuards": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveInstructions": 0,
    "stdConnectivity": -nan.0
}
Recieved marked functions 0
ERR. processed 151 function, while filter count is 76
Functions called in loop
Function call numbers
get_image -- 1
main -- 0
Insert hash computation
WARNING: Non-0 memset:   call void @llvm.memset.p0i8.i64(i8* %34, i8 100, i64 %conv67, i32 1, i1 false), !control_dep_instr !9, !argument_dep_instr !8, !data_indep_instr !7
Warning: Empty PHI
PSNodeType::PHI with ID 36
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 37
  - operands: []
No reaching definition for:   %bp = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 in:   %bp.el = alloca i8*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %i.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %temp = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %temp.el = alloca float, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %dpt.el = alloca i8*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %dp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %dp.el = alloca i8*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %increment = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %increment.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   store i8* %63, i8** %64, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7 off: 0
No reaching definition for:   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %mask_size.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for: @stderr = external global %struct._IO_FILE*, align 8 in:   store i8* %1, i8** %filename.addr.el, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7, !argument_dep_instr !8 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %call11 = call i32 @fclose(%struct._IO_FILE* %10), !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %i.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %midp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %midp.el = alloca i8*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %max_r = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %max_r.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %min_r = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %min_r.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   call void @free(i8* %950) #8, !control_dep_instr !5, !data_indep_instr !9 off: 0
No reaching definition for:   %cgy = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %cgy.el = alloca i32*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %cgx = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %cgx.el = alloca i32*, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   store i32 7, i32* %info1328, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !3, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 in:   %retval.el = alloca i32, !input_dep_instr !5, !control_dep_instr !6, !data_dep_instr !7 off: 0
No tags were supplied to be skipped! 
'guard' metadata was found in the input bitcode
Recieved marked functions 0
Recieved filter functions 76
Collecting defining blocks for usage
 Skipping function per FilterFunctionPass:getint
 Skipping function per FilterFunctionPass:get_image
Collecting defining blocks for put_image
 Skipping function per FilterFunctionPass:int_to_uchar
 Skipping function per FilterFunctionPass:setup_brightness_lut
Collecting defining blocks for susan_principle
Collecting defining blocks for susan_principle_small
Collecting defining blocks for median
Collecting defining blocks for enlarge
Collecting defining blocks for susan_smoothing
Collecting defining blocks for edge_draw
 Skipping function per FilterFunctionPass:susan_thin
Collecting defining blocks for susan_edges
Collecting defining blocks for susan_edges_small
Collecting defining blocks for corner_draw
Collecting defining blocks for susan_corners
Collecting defining blocks for susan_corners_quick
Collecting defining blocks for main
 Processing function:usage
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
No oh has been applied in the path
 Skipping function per FilterFunctionPass:getint
 Skipping function per FilterFunctionPass:get_image
 Processing function:put_image
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @put_image0(i8** %filename.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.then8  
After path modifications process path
entry  if.end  if.then8  
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @put_image1(i8** %filename.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end10  
After path modifications process path
entry  if.end  if.end10  
 Skipping function per FilterFunctionPass:int_to_uchar
 Skipping function per FilterFunctionPass:setup_brightness_lut
 Processing function:susan_principle
Short range hashing enabled.
Processing path: entry  for.cond3  for.body7  if.then  
After path modifications process path
for.body7  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  call void @susan_principle0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
  %22 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %max_no.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %n = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 3, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.end  for.inc  
After path modifications process path
for.body7  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %32 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 3, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  for.end  for.inc285  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc285, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 3, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
 Processing function:susan_principle_small
Short range hashing enabled.
Processing path: entry  for.cond3  for.body7  if.then  
After path modifications process path
for.body7  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  call void @susan_principle_small0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
  %22 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle_small0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle_small0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %max_no.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle_small0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %n = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle_small0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle_small0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_principle_small0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.end  for.inc  
After path modifications process path
for.body7  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %34 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  for.end  for.inc81  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc81, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
 Processing function:median
Short range hashing enabled.
Processing path: entry  for.cond56  for.body60  if.then  
After path modifications process path
for.body60  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.cond  for.body  
Extended path is 
entry  for.cond  for.body  for.cond56  for.end  for.inc78  for.body60  if.end  for.inc  for.end80  
After path modifications process path
entry  for.cond  for.body  for.cond56  for.end  for.inc78  for.body60  if.end  for.inc  for.end80  
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond56  for.body60  if.end  for.inc  
After path modifications process path
for.body60  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !input_indep_block !3, !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Processing path: entry  for.cond  for.body  
Extended path is 
entry  for.cond  for.body  for.cond56  for.end  for.inc78  for.body60  if.end  for.inc  for.end80  
After path modifications process path
entry  for.cond  for.body  for.cond56  for.end  for.inc78  for.body60  if.end  for.inc  for.end80  
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond56  
Extended path is 
entry  for.cond56  for.body60  if.end  for.inc  for.end  
After path modifications process path
entry  for.cond56  for.body60  if.end  for.inc  for.end  
Processing path: entry  for.cond  for.body  for.end  for.inc78  
Extended path is 
entry  for.cond  for.body  for.cond56  for.end  for.inc78  for.body60  if.end  for.inc  for.end80  
After path modifications process path
entry  for.cond  for.body  for.cond56  for.end  for.inc78  for.body60  if.end  for.inc  for.end80  
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end80  
Extended path is 
entry  for.cond  for.body  for.cond56  for.end  for.inc78  for.body60  if.end  for.inc  for.end80  
After path modifications process path
entry  for.cond  for.body  for.cond56  for.end  for.inc78  for.body60  if.end  for.inc  for.end80  
Processing path: entry  for.end80  
After path modifications process path
entry  for.end80  
 Processing function:enlarge
Short range hashing enabled.
Processing path: entry  for.cond  for.body  for.inc  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  for.cond8  for.body11  for.inc39  
After path modifications process path
for.body11  
Hash path invariants only
Invariants are
  br label %for.inc39, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
No oh has been applied in the path
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing path: entry  for.end  for.end41  for.cond46  for.body51  for.inc82  
After path modifications process path
for.body51  
Hash path invariants only
Invariants are
  br label %for.inc82, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  call void @enlarge2(i8** %tmp_image.addr, i32* %j, i32** %x_size.addr, i32* %border.addr, i32* %i), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %tmp_image.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @enlarge2(i8** %tmp_image.addr, i32* %j, i32** %x_size.addr, i32* %border.addr, i32* %i), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @enlarge2(i8** %tmp_image.addr, i32* %j, i32** %x_size.addr, i32* %border.addr, i32* %i), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @enlarge2(i8** %tmp_image.addr, i32* %j, i32** %x_size.addr, i32* %border.addr, i32* %i), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %border.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @enlarge2(i8** %tmp_image.addr, i32* %j, i32** %x_size.addr, i32* %border.addr, i32* %i), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @enlarge2(i8** %tmp_image.addr, i32* %j, i32** %x_size.addr, i32* %border.addr, i32* %i), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
No oh has been applied in the path
Processing path: entry  for.end  for.cond8  for.end41  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  for.end41  
After path modifications process path is empty
Processing path: entry  for.end  for.end41  
After path modifications process path
entry  for.end  for.end41  
Processing path: entry  for.end  for.end41  for.cond42  for.body45  
After path modifications process path
for.body45  
Hash path invariants only
Invariants are
  br label %for.cond46, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end  for.end41  for.cond46  
After path modifications process path is empty
Processing path: entry  for.end  for.cond8  for.end41  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  for.end41  
After path modifications process path is empty
Processing path: entry  for.end  for.end41  
After path modifications process path
entry  for.end  for.end41  
Processing path: entry  for.end  for.end41  for.cond42  for.body45  for.end84  for.inc85  
After path modifications process path
for.body45  for.end84  
Hash path invariants only
Invariants are
  br label %for.inc85, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond46, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end  for.end41  for.cond42  for.end87  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  for.end41  for.end87  
After path modifications process path is empty
Processing path: entry  for.end  for.cond8  for.end41  for.end87  
After path modifications process path is empty
Processing path: entry  for.end  for.end41  for.end87  
After path modifications process path
entry  for.end  for.end41  for.end87  
 Processing function:susan_smoothing
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  land.lhs.true  if.then14  
After path modifications process path
entry  if.end  land.lhs.true  if.then14  
Processing path: entry  if.end  if.end18  if.then27  
After path modifications process path
entry  if.end  if.end18  if.then27  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond52  for.body55  for.inc  
After path modifications process path
for.body55  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing5(i8** %dpt, i32* %i, i32* %j, float* %temp, i32* %x), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing5(i8** %dpt, i32* %i, i32* %j, float* %temp, i32* %x), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing5(i8** %dpt, i32* %i, i32* %j, float* %temp, i32* %x), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing5(i8** %dpt, i32* %i, i32* %j, float* %temp, i32* %x), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %temp = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing5(i8** %dpt, i32* %i, i32* %j, float* %temp, i32* %x), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing5(i8** %dpt, i32* %i, i32* %j, float* %temp, i32* %x), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond52, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing4(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing4(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing4(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.body  for.end  for.inc65  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc65, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond52, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing4(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing4(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing4(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond90  for.body93  
After path modifications process path
for.body93  
Hash path invariants only
Invariants are
  br label %for.cond95, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing11(i32* %x, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing11(i32* %x, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing11(i32* %x, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond95  for.body98  for.inc111  
After path modifications process path
for.body98  
Hash path invariants only
Invariants are
  br label %for.inc111, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing12(i32* %total, i32* %area, i32* %tmp, i8** %ip, i32* %brightness, i8** %dpt, i8** %cp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %total = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing12(i32* %total, i32* %area, i32* %tmp, i8** %ip, i32* %brightness, i8** %dpt, i8** %cp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %area = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing12(i32* %total, i32* %area, i32* %tmp, i8** %ip, i32* %brightness, i8** %dpt, i8** %cp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %tmp = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing12(i32* %total, i32* %area, i32* %tmp, i8** %ip, i32* %brightness, i8** %dpt, i8** %cp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %ip = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing12(i32* %total, i32* %area, i32* %tmp, i8** %ip, i32* %brightness, i8** %dpt, i8** %cp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %brightness = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing12(i32* %total, i32* %area, i32* %tmp, i8** %ip, i32* %brightness, i8** %dpt, i8** %cp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing12(i32* %total, i32* %area, i32* %tmp, i8** %ip, i32* %brightness, i8** %dpt, i8** %cp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing12(i32* %total, i32* %area, i32* %tmp, i8** %ip, i32* %brightness, i8** %dpt, i8** %cp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing8(i32* %i, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing8(i32* %i, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.end67  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond68  for.body72  
After path modifications process path
for.body72  
Hash path invariants only
Invariants are
  br label %for.cond73, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond73  for.body77  
After path modifications process path
for.body77  
Hash path invariants only
Invariants are
  br label %for.cond90, !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %total, align 4, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %area, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %ip = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %centre = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %bp.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond90  for.body93  for.end113  for.inc116  
After path modifications process path
for.body93  for.end113  
Hash path invariants only
Invariants are
  br label %for.inc116, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing14(i8** %ip, i32* %increment), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond95, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing11(i32* %x, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing11(i32* %x, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing11(i32* %x, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %ip = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing14(i8** %ip, i32* %increment), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %increment = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing14(i8** %ip, i32* %increment), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond95  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.end67  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond68  for.body72  
After path modifications process path
for.body72  
Hash path invariants only
Invariants are
  call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond73, !control_dep_instr !5, !data_indep_instr !8
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond73  for.body77  
After path modifications process path
for.body77  
Hash path invariants only
Invariants are
  store i32 0, i32* %area, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %total, align 4, !control_dep_instr !5, !data_indep_instr !8
  br label %for.cond90, !control_dep_instr !5, !data_indep_instr !8
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %ip = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %centre = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %bp.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond90  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.end67  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond68  for.body72  
After path modifications process path
for.body72  
Hash path invariants only
Invariants are
  call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond73, !control_dep_instr !5, !data_indep_instr !8
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond73  for.body77  for.end118  if.then122  
After path modifications process path
for.body77  for.end118  if.then122  
Hash path invariants only
Invariants are
  call void @susan_smoothing16(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond90, !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %total, align 4, !control_dep_instr !5, !data_indep_instr !8
  br label %if.end131, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %area, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %ip = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %centre = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %bp.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Processing call instruction..
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing16(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %out = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing16(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing16(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing16(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing16(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond90  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.end67  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond68  for.body72  
After path modifications process path
for.body72  
Hash path invariants only
Invariants are
  call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond73, !control_dep_instr !5, !data_indep_instr !8
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond73  for.body77  for.end118  if.end131  for.inc132  
After path modifications process path
for.body77  for.end118  if.end131  
Hash path invariants only
Invariants are
  br label %for.cond90, !control_dep_instr !5, !data_indep_instr !8
  br label %for.inc132, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  store i32 0, i32* %total, align 4, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %area, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %ip = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %centre = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %bp.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond90  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.end67  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond68  for.body72  
After path modifications process path
for.body72  
Hash path invariants only
Invariants are
  call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond73, !control_dep_instr !5, !data_indep_instr !8
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond73  for.body77  for.end118  if.else125  
After path modifications process path
for.body77  for.end118  if.else125  
Hash path invariants only
Invariants are
  br label %if.end131, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing17(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond90, !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %total, align 4, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %area, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dpt = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %dp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %ip = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %centre = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Can't handle this operand   %bp.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing10(i32* %y, i8** %cp, i8** %in.addr, i32* %i, i8** %dpt, i32* %mask_size, i8** %dp, i32* %x_size.addr, i32* %j, i8** %ip, i32* %centre, i8** %bp.addr), !control_dep_instr !5, !data_indep_instr !8
Processing call instruction..
Can't handle this operand   %tmp = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing17(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %out = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing17(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %centre = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing17(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %total = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing17(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond73  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond68  for.body72  for.end134  for.inc135  
After path modifications process path
for.body72  for.end134  
Hash path invariants only
Invariants are
  br label %for.inc135, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond73, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mask_size = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing9(i32* %j, i32* %mask_size), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.end67  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.cond68  for.end137  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.cond  for.end67  for.end137  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.end137  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.then40  for.end67  for.end137  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.end266  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.end266  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond144  for.body148  if.then250  
After path modifications process path
for.body148  if.then250  
Hash path invariants only
Invariants are
  call void @susan_smoothing20(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  store i32 0, i32* %area, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  %232 = load i32, i32* %area, align 4, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end259, !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %total, align 4, !control_dep_instr !5, !data_indep_instr !8
  %235 = load i32, i32* %total, align 4, !control_dep_instr !5, !data_dep_instr !6
Processing call instruction..
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing20(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %out = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing20(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing20(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing20(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing20(i8** %in.addr, i8** %out, i32* %j, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond139  for.body143  
After path modifications process path
for.body143  
Hash path invariants only
Invariants are
  br label %for.cond144, !control_dep_instr !5, !data_indep_instr !8
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond144  for.body148  if.end259  for.inc260  
After path modifications process path
for.body148  if.end259  
Hash path invariants only
Invariants are
  %251 = load i32, i32* %area, align 4, !control_dep_instr !5, !data_dep_instr !6
  %254 = load i32, i32* %total, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %total, align 4, !control_dep_instr !5, !data_indep_instr !8
  br label %for.inc260, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  store i32 0, i32* %area, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond139  for.body143  
After path modifications process path
for.body143  
Hash path invariants only
Invariants are
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond144, !control_dep_instr !5, !data_indep_instr !8
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond144  for.body148  if.else253  
After path modifications process path
for.body148  if.else253  
Hash path invariants only
Invariants are
  br label %if.end259, !control_dep_instr !5, !data_indep_instr !8
  call void @susan_smoothing21(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  %270 = load i32, i32* %area, align 4, !control_dep_instr !5, !data_dep_instr !6
  %273 = load i32, i32* %total, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %total, align 4, !control_dep_instr !5, !data_indep_instr !8
  store i32 0, i32* %area, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %tmp = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing21(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %out = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing21(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %centre = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing21(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %total = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_smoothing21(i32* %tmp, i8** %out, i32* %centre, i32* %total), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond139  for.body143  
After path modifications process path
for.body143  
Hash path invariants only
Invariants are
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond144, !control_dep_instr !5, !data_indep_instr !8
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond144  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond139  for.body143  for.end262  for.inc263  
After path modifications process path
for.body143  for.end262  
Hash path invariants only
Invariants are
  br label %for.inc263, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
  br label %for.cond144, !control_dep_instr !5, !data_indep_instr !8
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.cond139  for.end265  
After path modifications process path is empty
Processing path: entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.end265  
After path modifications process path
entry  if.end  if.end18  lor.lhs.false  if.end29  if.else138  for.end265  
Processing path: entry  if.else  
After path modifications process path
entry  if.else  
 Processing function:edge_draw
Short range hashing enabled.
Processing path: entry  if.then  for.cond  for.body  if.then4  
After path modifications process path
for.body  if.then4  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !data_indep_instr !8
  call void @edge_draw1(i8** %in.addr, i8** %midp, i32* %x_size.addr, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw1(i8** %in.addr, i8** %midp, i32* %x_size.addr, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %midp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw1(i8** %in.addr, i8** %midp, i32* %x_size.addr, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw1(i8** %in.addr, i8** %midp, i32* %x_size.addr, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw1(i8** %in.addr, i8** %midp, i32* %x_size.addr, i8** %mid.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.then  for.cond  for.body  if.end  for.inc  
After path modifications process path
for.body  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !data_indep_instr !8
  call void @edge_draw2(i8** %midp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %midp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw2(i8** %midp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.then  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.then  for.end  
After path modifications process path
entry  if.then  for.end  
Processing path: entry  if.end18  for.cond19  for.body23  if.then27  
After path modifications process path
for.body23  if.then27  
Hash path invariants only
Invariants are
  br label %if.end32, !control_dep_instr !5, !data_indep_instr !8
  call void @edge_draw5(i8** %mid.addr, i8** %midp, i8** %in.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw5(i8** %mid.addr, i8** %midp, i8** %in.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %midp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw5(i8** %mid.addr, i8** %midp, i8** %in.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw5(i8** %mid.addr, i8** %midp, i8** %in.addr), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end18  
After path modifications process path
entry  if.end18  
Processing call instruction..
Can't handle this operand   %midp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw4(i8** %midp, i8** %mid.addr), !input_indep_block !3, !control_dep_instr !5, !input_indep_instr !11, !data_indep_instr !8
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw4(i8** %midp, i8** %mid.addr), !input_indep_block !3, !control_dep_instr !5, !input_indep_instr !11, !data_indep_instr !8
Processing path: entry  if.end18  for.cond19  for.body23  if.end32  for.inc34  
After path modifications process path
for.body23  if.end32  
Hash path invariants only
Invariants are
  br label %for.inc34, !control_dep_instr !5, !data_indep_instr !8
  call void @edge_draw6(i8** %midp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing call instruction..
Can't handle this operand   %midp = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @edge_draw6(i8** %midp), !control_dep_instr !5, !data_indep_instr !8, !input_dep_block !9
Processing path: entry  if.end18  
After path modifications process path
entry  if.end18  
Processing path: entry  if.end18  for.cond19  for.end36  
After path modifications process path is empty
Processing path: entry  if.end18  for.end36  
After path modifications process path
entry  if.end18  for.end36  
 Skipping function per FilterFunctionPass:susan_thin
 Processing function:susan_edges
Short range hashing enabled.
Processing path: entry  for.cond3  for.body7  if.then  
After path modifications process path
for.body7  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
  %22 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %max_no.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %n = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 3, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.end  for.inc  
After path modifications process path
for.body7  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %32 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 3, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  for.end  for.inc285  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  br label %for.inc285, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 3, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.then685  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.then685  
Hash path invariants only
Invariants are
  br label %if.end688, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store float 1.000000e+06, float* %z, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %279 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  %281 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.then691  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.then691  
Hash path invariants only
Invariants are
  br label %if.end694, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges4(i32* %w, float* %z), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %297 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %295 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %w = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges4(i32* %w, float* %z), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %z = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges4(i32* %w, float* %z), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.then698  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.then698  
Hash path invariants only
Invariants are
  br label %if.end711, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges5(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %313 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %311 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges5(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges5(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.end711  land.lhs.true  land.lhs.true728  land.lhs.true739  if.then750  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.end711  land.lhs.true  land.lhs.true728  land.lhs.true739  if.then750  
Hash path invariants only
Invariants are
  br label %if.end755, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %329 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %327 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.end711  if.end755  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.end711  if.end755  
Hash path invariants only
Invariants are
  br label %if.end757, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %345 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %343 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.then703  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.then703  
Hash path invariants only
Invariants are
  br label %if.end710, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges6(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %361 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %359 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges6(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges6(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.end710  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.end710  
Hash path invariants only
Invariants are
  br label %if.end711, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %377 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %375 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.then707  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.then707  
Hash path invariants only
Invariants are
  br label %if.end709, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges7(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %393 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %391 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges7(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges7(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.end709  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.end709  
Hash path invariants only
Invariants are
  br label %if.end710, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %409 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %407 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.else708  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.end694  if.else699  if.else704  if.else708  
Hash path invariants only
Invariants are
  call void @susan_edges8(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %425 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %423 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end709, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges8(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges8(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.end688  if.else693  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.end688  if.else693  
Hash path invariants only
Invariants are
  br label %if.end694, !control_dep_instr !5, !data_indep_instr !9
  %441 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %439 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 1, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.then682  if.else  
After path modifications process path
for.body297  if.then304  if.then319  if.then682  if.else  
Hash path invariants only
Invariants are
  call void @susan_edges3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %if.end688, !control_dep_instr !5, !data_indep_instr !9
  %457 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %455 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %z = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.end757  
After path modifications process path
for.body297  if.then304  if.then319  if.end757  
Hash path invariants only
Invariants are
  br label %if.end759, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %473 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %471 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.then319  if.else756  
After path modifications process path
for.body297  if.then304  if.then319  if.else756  
Hash path invariants only
Invariants are
  br label %if.end757, !control_dep_instr !5, !data_indep_instr !9
  %489 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %487 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 1, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.then1183  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.then1183  
Hash path invariants only
Invariants are
  br label %if.end1188, !control_dep_instr !5, !data_indep_instr !9
  store float 1.000000e+06, float* %z, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %945 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %947 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
  %943 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.then1192  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.then1192  
Hash path invariants only
Invariants are
  br label %if.end1205, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges11(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %964 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %966 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %962 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges11(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges11(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.end1205  land.lhs.true1214  land.lhs.true1223  land.lhs.true1234  if.then1245  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.end1205  land.lhs.true1214  land.lhs.true1223  land.lhs.true1234  if.then1245  
Hash path invariants only
Invariants are
  br label %if.end1250, !control_dep_instr !5, !data_indep_instr !9
  %983 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %985 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %981 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.end1205  if.end1250  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.end1205  if.end1250  
Hash path invariants only
Invariants are
  br label %if.end1251, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1002 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1004 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1000 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.then1197  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.then1197  
Hash path invariants only
Invariants are
  br label %if.end1204, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges12(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1021 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1023 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1019 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges12(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges12(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.end1204  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.end1204  
Hash path invariants only
Invariants are
  %1040 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end1205, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1042 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1038 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.then1201  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.then1201  
Hash path invariants only
Invariants are
  call void @susan_edges13(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1059 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end1203, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1061 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1057 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges13(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges13(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.end1203  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.end1203  
Hash path invariants only
Invariants are
  br label %if.end1204, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1078 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1080 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1076 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.else1202  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.end1188  if.else1193  if.else1198  if.else1202  
Hash path invariants only
Invariants are
  call void @susan_edges14(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1097 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1099 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end1203, !control_dep_instr !5, !data_indep_instr !9
  %1095 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges14(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges14(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.then762  if.else1184  
After path modifications process path
for.body297  if.then304  if.end759  if.then762  if.else1184  
Hash path invariants only
Invariants are
  br label %if.end1188, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %1116 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1118 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %1114 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %z = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.end759  if.end1251  
After path modifications process path
for.body297  if.then304  if.end759  if.end1251  
Hash path invariants only
Invariants are
  br label %if.end1252, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.then304  if.else758  
After path modifications process path
for.body297  if.then304  if.else758  
Hash path invariants only
Invariants are
  br label %if.end759, !control_dep_instr !5, !data_indep_instr !9
  store i32 1, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  for.body297  if.end1252  for.inc1253  
After path modifications process path
for.body297  if.end1252  
Hash path invariants only
Invariants are
  br label %for.inc1253, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  
After path modifications process path
for.body292  
Hash path invariants only
Invariants are
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.end287  for.cond293  
After path modifications process path is empty
Processing path: entry  for.cond  for.end287  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.body292  for.end1255  for.inc1256  
After path modifications process path
for.body292  for.end1255  
Hash path invariants only
Invariants are
  br label %for.inc1256, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond293, !control_dep_instr !5, !data_indep_instr !9
  store i32 4, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end287  
After path modifications process path
entry  for.end287  
Processing path: entry  for.cond  for.end287  for.end1258  
After path modifications process path is empty
Processing path: entry  for.end287  for.cond288  for.end1258  
After path modifications process path is empty
Processing path: entry  for.end287  for.end1258  
After path modifications process path
entry  for.end287  for.end1258  
 Processing function:susan_edges_small
Short range hashing enabled.
Processing path: entry  for.cond3  for.body7  if.then  
After path modifications process path
for.body7  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  call void @susan_edges_small0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
  %22 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %max_no.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %n = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small0(i32* %j, i32* %max_no.addr, i32* %i, i32** %r.addr, i32* %n, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.end  for.inc  
After path modifications process path
for.body7  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %34 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  for.end  for.inc81  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc81, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 1, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.then205  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.then205  
Hash path invariants only
Invariants are
  br label %if.end208, !control_dep_instr !5, !data_indep_instr !9
  store float 1.000000e+06, float* %z, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %137 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  %139 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.then211  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.then211  
Hash path invariants only
Invariants are
  br label %if.end214, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges_small4(i32* %w, float* %z), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %157 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %155 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %w = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small4(i32* %w, float* %z), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %z = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small4(i32* %w, float* %z), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.then218  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.then218  
Hash path invariants only
Invariants are
  call void @susan_edges_small5(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %if.end231, !control_dep_instr !5, !data_indep_instr !9
  %175 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %173 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small5(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small5(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.end231  land.lhs.true  if.then248  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.end231  land.lhs.true  if.then248  
Hash path invariants only
Invariants are
  call void @susan_edges_small9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %if.end253, !control_dep_instr !5, !data_indep_instr !9
  %193 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %191 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small9(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.end231  if.end253  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.end231  if.end253  
Hash path invariants only
Invariants are
  br label %if.end255, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %211 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %209 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.then223  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.then223  
Hash path invariants only
Invariants are
  call void @susan_edges_small6(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %if.end230, !control_dep_instr !5, !data_indep_instr !9
  %229 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %227 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small6(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small6(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.end230  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.end230  
Hash path invariants only
Invariants are
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %if.end231, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %247 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %245 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.else224  if.then227  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.else224  if.then227  
Hash path invariants only
Invariants are
  br label %if.end229, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges_small7(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %265 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %263 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small7(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small7(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.else224  if.end229  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.else224  if.end229  
Hash path invariants only
Invariants are
  br label %if.end230, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %283 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %281 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.else224  if.else228  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.end214  if.else219  if.else224  if.else228  
Hash path invariants only
Invariants are
  br label %if.end229, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %301 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %299 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges_small8(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small8(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small8(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.end208  if.else213  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.end208  if.else213  
Hash path invariants only
Invariants are
  store i32 1, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %if.end214, !control_dep_instr !5, !data_indep_instr !9
  %319 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %317 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.then202  if.else  
After path modifications process path
for.body93  if.then100  if.then115  if.then202  if.else  
Hash path invariants only
Invariants are
  call void @susan_edges_small3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %337 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %335 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end208, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %z = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small3(float* %z, i32* %x, i32* %y), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.end255  
After path modifications process path
for.body93  if.then100  if.then115  if.end255  
Hash path invariants only
Invariants are
  br label %if.end257, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %355 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %353 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.then115  if.else254  
After path modifications process path
for.body93  if.then100  if.then115  if.else254  
Hash path invariants only
Invariants are
  br label %if.end255, !control_dep_instr !5, !data_indep_instr !9
  store i32 1, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  %373 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %371 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.then345  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.then345  
Hash path invariants only
Invariants are
  store float 1.000000e+06, float* %z, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end350, !control_dep_instr !5, !data_indep_instr !9
  %599 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %597 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
  %595 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.end350  if.then354  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.end350  if.then354  
Hash path invariants only
Invariants are
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges_small11(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %620 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end367, !control_dep_instr !5, !data_indep_instr !9
  %618 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %616 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small11(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small11(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.end350  if.end367  land.lhs.true376  if.then385  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.end350  if.end367  land.lhs.true376  if.then385  
Hash path invariants only
Invariants are
  call void @susan_edges_small15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %641 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %639 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  br label %if.end390, !control_dep_instr !5, !data_indep_instr !9
  %637 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %mid.addr = alloca i8*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small15(i8** %mid.addr, i32* %j, i32* %x_size.addr, i32* %i), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.end350  if.end367  if.end390  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.end350  if.end367  if.end390  
Hash path invariants only
Invariants are
  br label %if.end391, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %662 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %660 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %658 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.then359  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.then359  
Hash path invariants only
Invariants are
  call void @susan_edges_small12(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  br label %if.end366, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %683 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %681 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %679 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small12(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small12(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.end366  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.end366  
Hash path invariants only
Invariants are
  br label %if.end367, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %704 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %702 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %700 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.else360  if.then363  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.else360  if.then363  
Hash path invariants only
Invariants are
  br label %if.end365, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges_small13(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %725 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %723 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %721 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small13(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small13(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.else360  if.end365  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.else360  if.end365  
Hash path invariants only
Invariants are
  br label %if.end366, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %746 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %744 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %742 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.else360  if.else364  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.end350  if.else355  if.else360  if.else364  
Hash path invariants only
Invariants are
  br label %if.end365, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges_small14(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %767 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %765 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %763 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %b = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small14(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %a = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small14(i32* %b, i32* %a), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.then260  if.else346  
After path modifications process path
for.body93  if.then100  if.end257  if.then260  if.else346  
Hash path invariants only
Invariants are
  br label %if.end350, !control_dep_instr !5, !data_indep_instr !9
  call void @susan_edges_small10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !data_indep_instr !9
  %788 = load i32, i32* %w, align 4, !control_dep_instr !5, !data_dep_instr !6
  %786 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6
  %784 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6
  store i32 0, i32* %w, align 4, !control_dep_instr !5, !data_indep_instr !9
Processing call instruction..
Can't handle this operand   %z = alloca float, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_edges_small10(float* %z, i32* %y, i32* %x), !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.end257  if.end391  
After path modifications process path
for.body93  if.then100  if.end257  if.end391  
Hash path invariants only
Invariants are
  br label %if.end392, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.then100  if.else256  
After path modifications process path
for.body93  if.then100  if.else256  
Hash path invariants only
Invariants are
  br label %if.end257, !control_dep_instr !5, !data_indep_instr !9
  store i32 1, i32* %do_symmetry, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  for.body93  if.end392  for.inc393  
After path modifications process path
for.body93  if.end392  
Hash path invariants only
Invariants are
  br label %for.inc393, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  
After path modifications process path
for.body88  
Hash path invariants only
Invariants are
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.end83  for.cond89  
After path modifications process path is empty
Processing path: entry  for.cond  for.end83  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.body88  for.end395  for.inc396  
After path modifications process path
for.body88  for.end395  
Hash path invariants only
Invariants are
  br label %for.inc396, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond89, !control_dep_instr !5, !data_indep_instr !9
  store i32 2, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end83  
After path modifications process path
entry  for.end83  
Processing path: entry  for.cond  for.end83  for.end398  
After path modifications process path is empty
Processing path: entry  for.end83  for.cond84  for.end398  
After path modifications process path is empty
Processing path: entry  for.end83  for.end398  
After path modifications process path
entry  for.end83  for.end398  
 Processing function:corner_draw
Short range hashing enabled.
Processing path: entry  while.cond  while.body  if.then  
After path modifications process path
while.body  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  while.cond  while.body  if.end  
After path modifications process path
while.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  while.cond  while.body  if.else  
After path modifications process path
while.body  if.else  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
 Processing function:susan_corners
Short range hashing enabled.
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.true  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.true  
Hash path invariants only
Invariants are
  br label %cond.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  %260 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %258 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %22 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %cgy = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners0(i32** %cgy, i32** %cgx, i32* %y_size.addr, i32* %x_size.addr), !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Can't handle this operand   %cgx = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners0(i32** %cgy, i32** %cgx, i32* %y_size.addr, i32* %x_size.addr), !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Can't handle this operand   %y_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners0(i32** %cgy, i32** %cgx, i32* %y_size.addr, i32* %x_size.addr), !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners0(i32** %cgy, i32** %cgx, i32* %y_size.addr, i32* %x_size.addr), !control_dep_instr !5, !input_indep_instr !8, !data_indep_instr !9
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.true729  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.true729  
Hash path invariants only
Invariants are
  br label %cond.end739, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %32 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %293 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %291 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.true757  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.true757  
Hash path invariants only
Invariants are
  br label %cond.end767, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %42 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %326 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %324 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.end767  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.end767  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %52 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %359 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %357 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.false762  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.end739  cond.false762  
Hash path invariants only
Invariants are
  br label %cond.end767, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %62 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %392 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %390 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.false734  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.end  cond.false734  
Hash path invariants only
Invariants are
  br label %cond.end739, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %72 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %425 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %423 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.false  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.then700  cond.false  
Hash path invariants only
Invariants are
  br label %cond.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %82 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %458 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %456 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.end  if.then869  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.end  if.then869  
Hash path invariants only
Invariants are
  br label %if.end887, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %92 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %491 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %489 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %cgy = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %cgx = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %y = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %max_no.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %n = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners1(i32** %cgy, i32** %cgx, i32** %r.addr, i32* %y, i32* %j, i32* %max_no.addr, i32* %n, i32* %x, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.end  if.end887  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.end  if.end887  
Hash path invariants only
Invariants are
  br label %if.end888, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %102 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %524 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %522 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.true793  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.true793  
Hash path invariants only
Invariants are
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %112 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %557 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %555 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %cond.end801, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.true818  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.true818  
Hash path invariants only
Invariants are
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %122 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %590 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %588 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %cond.end828, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.true846  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.true846  
Hash path invariants only
Invariants are
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %132 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %623 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %cond.end856, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  %621 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.end856  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.end856  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %142 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %656 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %654 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.false851  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.end828  cond.false851  
Hash path invariants only
Invariants are
  br label %cond.end856, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %152 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %689 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %687 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.false823  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.end801  cond.false823  
Hash path invariants only
Invariants are
  br label %cond.end828, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %162 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %722 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %720 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.false797  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.then697  if.else  cond.false797  
Hash path invariants only
Invariants are
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %172 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %755 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %cond.end801, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  %753 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.end888  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.then340  if.end888  
Hash path invariants only
Invariants are
  br label %if.end889, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %182 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %788 = load i32, i32* %y, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  %786 = load i32, i32* %x, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 0, i32* %y, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 0, i32* %x, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.end889  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.then331  if.end889  
Hash path invariants only
Invariants are
  br label %if.end890, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %192 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.end890  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.then321  if.end890  
Hash path invariants only
Invariants are
  br label %if.end891, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %202 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.end891  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.then308  if.end891  
Hash path invariants only
Invariants are
  %212 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end892, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.end892  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.then299  if.end892  
Hash path invariants only
Invariants are
  br label %if.end893, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %222 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.end893  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.then289  if.end893  
Hash path invariants only
Invariants are
  br label %if.end894, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %232 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.end894  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.then279  if.end894  
Hash path invariants only
Invariants are
  br label %if.end895, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %242 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.end895  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.then269  if.end895  
Hash path invariants only
Invariants are
  br label %if.end896, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %252 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.end896  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.then256  if.end896  
Hash path invariants only
Invariants are
  br label %if.end897, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %262 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.end897  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.then247  if.end897  
Hash path invariants only
Invariants are
  br label %if.end898, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %272 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.end898  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.then237  if.end898  
Hash path invariants only
Invariants are
  %282 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end899, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.end899  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.then227  if.end899  
Hash path invariants only
Invariants are
  br label %if.end900, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %292 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.end900  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.then217  if.end900  
Hash path invariants only
Invariants are
  br label %if.end901, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %302 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.end901  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.then207  if.end901  
Hash path invariants only
Invariants are
  br label %if.end902, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %312 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.end902  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.then197  if.end902  
Hash path invariants only
Invariants are
  br label %if.end903, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %322 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.then184  if.end903  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.then184  if.end903  
Hash path invariants only
Invariants are
  br label %if.end904, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %332 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.then175  if.end904  
After path modifications process path
for.body14  if.then  if.then165  if.then175  if.end904  
Hash path invariants only
Invariants are
  br label %if.end905, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %342 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.then165  if.end905  
After path modifications process path
for.body14  if.then  if.then165  if.end905  
Hash path invariants only
Invariants are
  %352 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end906, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.then  if.end906  
After path modifications process path
for.body14  if.then  if.end906  
Hash path invariants only
Invariants are
  br label %if.end907, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %362 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  for.body14  if.end907  for.inc  
After path modifications process path
for.body14  if.end907  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %372 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond10  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  for.end  for.inc908  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc908, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond10, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.end910  for.cond916  for.body920  if.then927  land.lhs.true  land.lhs.true944  land.lhs.true953  land.lhs.true961  land.lhs.true970  land.lhs.true979  land.lhs.true988  land.lhs.true997  land.lhs.true1006  land.lhs.true1015  land.lhs.true1023  land.lhs.true1032  land.lhs.true1041  land.lhs.true1050  land.lhs.true1059  land.lhs.true1068  land.lhs.true1077  land.lhs.true1085  land.lhs.true1094  land.lhs.true1103  land.lhs.true1112  land.lhs.true1120  land.lhs.true1128  land.lhs.true1136  land.lhs.true1144  land.lhs.true1152  land.lhs.true1160  land.lhs.true1169  land.lhs.true1178  land.lhs.true1187  land.lhs.true1195  land.lhs.true1204  land.lhs.true1213  land.lhs.true1222  land.lhs.true1231  land.lhs.true1240  land.lhs.true1249  land.lhs.true1257  land.lhs.true1266  land.lhs.true1275  land.lhs.true1284  land.lhs.true1293  land.lhs.true1302  land.lhs.true1311  land.lhs.true1319  land.lhs.true1328  land.lhs.true1337  if.then1346  if.then1377  
After path modifications process path
for.body920  if.then927  land.lhs.true  land.lhs.true944  land.lhs.true953  land.lhs.true961  land.lhs.true970  land.lhs.true979  land.lhs.true988  land.lhs.true997  land.lhs.true1006  land.lhs.true1015  land.lhs.true1023  land.lhs.true1032  land.lhs.true1041  land.lhs.true1050  land.lhs.true1059  land.lhs.true1068  land.lhs.true1077  land.lhs.true1085  land.lhs.true1094  land.lhs.true1103  land.lhs.true1112  land.lhs.true1120  land.lhs.true1128  land.lhs.true1136  land.lhs.true1144  land.lhs.true1152  land.lhs.true1160  land.lhs.true1169  land.lhs.true1178  land.lhs.true1187  land.lhs.true1195  land.lhs.true1204  land.lhs.true1213  land.lhs.true1222  land.lhs.true1231  land.lhs.true1240  land.lhs.true1249  land.lhs.true1257  land.lhs.true1266  land.lhs.true1275  land.lhs.true1284  land.lhs.true1293  land.lhs.true1302  land.lhs.true1311  land.lhs.true1319  land.lhs.true1328  land.lhs.true1337  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.cond  for.end910  if.then1377  
After path modifications process path is empty
Processing path: entry  for.end910  for.cond911  for.body915  if.then1377  
After path modifications process path
for.body915  
Hash path invariants only
Invariants are
  br label %for.cond916, !control_dep_instr !5, !data_indep_instr !9
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end910  if.then1377  
After path modifications process path
entry  for.end910  if.then1377  
Processing call instruction..
Processing path: entry  for.end910  for.cond916  for.body920  if.then927  land.lhs.true  land.lhs.true944  land.lhs.true953  land.lhs.true961  land.lhs.true970  land.lhs.true979  land.lhs.true988  land.lhs.true997  land.lhs.true1006  land.lhs.true1015  land.lhs.true1023  land.lhs.true1032  land.lhs.true1041  land.lhs.true1050  land.lhs.true1059  land.lhs.true1068  land.lhs.true1077  land.lhs.true1085  land.lhs.true1094  land.lhs.true1103  land.lhs.true1112  land.lhs.true1120  land.lhs.true1128  land.lhs.true1136  land.lhs.true1144  land.lhs.true1152  land.lhs.true1160  land.lhs.true1169  land.lhs.true1178  land.lhs.true1187  land.lhs.true1195  land.lhs.true1204  land.lhs.true1213  land.lhs.true1222  land.lhs.true1231  land.lhs.true1240  land.lhs.true1249  land.lhs.true1257  land.lhs.true1266  land.lhs.true1275  land.lhs.true1284  land.lhs.true1293  land.lhs.true1302  land.lhs.true1311  land.lhs.true1319  land.lhs.true1328  land.lhs.true1337  if.then1346  if.end1379  
After path modifications process path
for.body920  if.then927  land.lhs.true  land.lhs.true944  land.lhs.true953  land.lhs.true961  land.lhs.true970  land.lhs.true979  land.lhs.true988  land.lhs.true997  land.lhs.true1006  land.lhs.true1015  land.lhs.true1023  land.lhs.true1032  land.lhs.true1041  land.lhs.true1050  land.lhs.true1059  land.lhs.true1068  land.lhs.true1077  land.lhs.true1085  land.lhs.true1094  land.lhs.true1103  land.lhs.true1112  land.lhs.true1120  land.lhs.true1128  land.lhs.true1136  land.lhs.true1144  land.lhs.true1152  land.lhs.true1160  land.lhs.true1169  land.lhs.true1178  land.lhs.true1187  land.lhs.true1195  land.lhs.true1204  land.lhs.true1213  land.lhs.true1222  land.lhs.true1231  land.lhs.true1240  land.lhs.true1249  land.lhs.true1257  land.lhs.true1266  land.lhs.true1275  land.lhs.true1284  land.lhs.true1293  land.lhs.true1302  land.lhs.true1311  land.lhs.true1319  land.lhs.true1328  land.lhs.true1337  if.end1379  
Hash path invariants only
Invariants are
  br label %if.end1380, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end910  
After path modifications process path is empty
Processing path: entry  for.end910  for.cond911  for.body915  
After path modifications process path
for.body915  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond916, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end910  
After path modifications process path
entry  for.end910  
Processing path: entry  for.end910  for.cond916  for.body920  if.then927  if.end1380  
After path modifications process path
for.body920  if.then927  if.end1380  
Hash path invariants only
Invariants are
  br label %if.end1381, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end910  
After path modifications process path is empty
Processing path: entry  for.end910  for.cond911  for.body915  
After path modifications process path
for.body915  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond916, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end910  
After path modifications process path
entry  for.end910  
Processing path: entry  for.end910  for.cond916  for.body920  if.end1381  for.inc1382  
After path modifications process path
for.body920  if.end1381  
Hash path invariants only
Invariants are
  br label %for.inc1382, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end910  
After path modifications process path is empty
Processing path: entry  for.end910  for.cond911  for.body915  
After path modifications process path
for.body915  
Hash path invariants only
Invariants are
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond916, !control_dep_instr !5, !data_indep_instr !9
Processing path: entry  for.end910  
After path modifications process path
entry  for.end910  
Processing path: entry  for.end910  for.cond916  
After path modifications process path is empty
Processing path: entry  for.cond  for.end910  
After path modifications process path is empty
Processing path: entry  for.end910  for.cond911  for.body915  for.end1384  for.inc1385  
After path modifications process path
for.body915  for.end1384  
Hash path invariants only
Invariants are
  br label %for.inc1385, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond916, !control_dep_instr !5, !data_indep_instr !9
  store i32 5, i32* %j, align 4, !control_dep_instr !5, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end910  
After path modifications process path
entry  for.end910  
Processing path: entry  for.cond  for.end910  for.end1387  
After path modifications process path is empty
Processing path: entry  for.end910  for.cond911  for.end1387  
After path modifications process path is empty
Processing path: entry  for.end910  for.end1387  
After path modifications process path
entry  for.end910  for.end1387  
 Processing function:susan_corners_quick
Short range hashing enabled.
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.then324  if.then333  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.then324  if.then333  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
  %22 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %r.addr = alloca i32*, align 8, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %max_no.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %n = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Can't handle this operand   %x_size.addr = alloca i32, align 4, !input_dep_instr !4, !control_dep_instr !5, !data_dep_instr !6 of the call   call void @susan_corners_quick0(i32** %r.addr, i32* %j, i32* %max_no.addr, i32* %n, i32* %i, i32* %x_size.addr), !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !10
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.then324  if.end  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.then324  if.end  
Hash path invariants only
Invariants are
  br label %if.end339, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %32 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.end339  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.then314  if.end339  
Hash path invariants only
Invariants are
  br label %if.end340, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %42 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.end340  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.then301  if.end340  
Hash path invariants only
Invariants are
  br label %if.end341, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %52 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.end341  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.then292  if.end341  
Hash path invariants only
Invariants are
  %62 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end342, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.end342  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.then282  if.end342  
Hash path invariants only
Invariants are
  br label %if.end343, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %72 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.end343  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.then272  if.end343  
Hash path invariants only
Invariants are
  br label %if.end344, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %82 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.end344  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.then262  if.end344  
Hash path invariants only
Invariants are
  br label %if.end345, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %92 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.end345  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.then249  if.end345  
Hash path invariants only
Invariants are
  br label %if.end346, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %102 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.end346  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.then240  if.end346  
Hash path invariants only
Invariants are
  br label %if.end347, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %112 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.end347  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.then230  if.end347  
Hash path invariants only
Invariants are
  br label %if.end348, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %122 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.end348  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.then220  if.end348  
Hash path invariants only
Invariants are
  %132 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end349, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.end349  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.then210  if.end349  
Hash path invariants only
Invariants are
  br label %if.end350, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %142 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.end350  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.then200  if.end350  
Hash path invariants only
Invariants are
  br label %if.end351, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %152 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.end351  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.then190  if.end351  
Hash path invariants only
Invariants are
  br label %if.end352, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %162 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.then177  if.end352  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.then177  if.end352  
Hash path invariants only
Invariants are
  br label %if.end353, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %172 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.then168  if.end353  
After path modifications process path
for.body7  if.then  if.then158  if.then168  if.end353  
Hash path invariants only
Invariants are
  br label %if.end354, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %182 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.then158  if.end354  
After path modifications process path
for.body7  if.then  if.then158  if.end354  
Hash path invariants only
Invariants are
  br label %if.end355, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %192 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.then  if.end355  
After path modifications process path
for.body7  if.then  if.end355  
Hash path invariants only
Invariants are
  %202 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  br label %if.end356, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  for.body7  if.end356  for.inc  
After path modifications process path
for.body7  if.end356  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  %212 = load i32, i32* %n, align 4, !control_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !7
  store i32 100, i32* %n, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  for.end  for.inc357  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc357, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond3, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.end359  for.cond365  for.body369  if.then376  land.lhs.true  land.lhs.true393  land.lhs.true402  land.lhs.true410  land.lhs.true419  land.lhs.true428  land.lhs.true437  land.lhs.true446  land.lhs.true455  land.lhs.true464  land.lhs.true472  land.lhs.true481  land.lhs.true490  land.lhs.true499  land.lhs.true508  land.lhs.true517  land.lhs.true526  land.lhs.true534  land.lhs.true543  land.lhs.true552  land.lhs.true561  land.lhs.true569  land.lhs.true577  land.lhs.true585  land.lhs.true593  land.lhs.true601  land.lhs.true609  land.lhs.true618  land.lhs.true627  land.lhs.true636  land.lhs.true644  land.lhs.true653  land.lhs.true662  land.lhs.true671  land.lhs.true680  land.lhs.true689  land.lhs.true698  land.lhs.true706  land.lhs.true715  land.lhs.true724  land.lhs.true733  land.lhs.true742  land.lhs.true751  land.lhs.true760  land.lhs.true768  land.lhs.true777  land.lhs.true786  if.then795  if.then1316  
After path modifications process path
for.body369  if.then376  land.lhs.true  land.lhs.true393  land.lhs.true402  land.lhs.true410  land.lhs.true419  land.lhs.true428  land.lhs.true437  land.lhs.true446  land.lhs.true455  land.lhs.true464  land.lhs.true472  land.lhs.true481  land.lhs.true490  land.lhs.true499  land.lhs.true508  land.lhs.true517  land.lhs.true526  land.lhs.true534  land.lhs.true543  land.lhs.true552  land.lhs.true561  land.lhs.true569  land.lhs.true577  land.lhs.true585  land.lhs.true593  land.lhs.true601  land.lhs.true609  land.lhs.true618  land.lhs.true627  land.lhs.true636  land.lhs.true644  land.lhs.true653  land.lhs.true662  land.lhs.true671  land.lhs.true680  land.lhs.true689  land.lhs.true698  land.lhs.true706  land.lhs.true715  land.lhs.true724  land.lhs.true733  land.lhs.true742  land.lhs.true751  land.lhs.true760  land.lhs.true768  land.lhs.true777  land.lhs.true786  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.cond  for.end359  if.then1316  
After path modifications process path is empty
Processing path: entry  for.end359  for.cond360  for.body364  if.then1316  
After path modifications process path
for.body364  
Hash path invariants only
Invariants are
  br label %for.cond365, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end359  if.then1316  
After path modifications process path
entry  for.end359  if.then1316  
Processing path: entry  for.end359  for.cond365  for.body369  if.then376  land.lhs.true  land.lhs.true393  land.lhs.true402  land.lhs.true410  land.lhs.true419  land.lhs.true428  land.lhs.true437  land.lhs.true446  land.lhs.true455  land.lhs.true464  land.lhs.true472  land.lhs.true481  land.lhs.true490  land.lhs.true499  land.lhs.true508  land.lhs.true517  land.lhs.true526  land.lhs.true534  land.lhs.true543  land.lhs.true552  land.lhs.true561  land.lhs.true569  land.lhs.true577  land.lhs.true585  land.lhs.true593  land.lhs.true601  land.lhs.true609  land.lhs.true618  land.lhs.true627  land.lhs.true636  land.lhs.true644  land.lhs.true653  land.lhs.true662  land.lhs.true671  land.lhs.true680  land.lhs.true689  land.lhs.true698  land.lhs.true706  land.lhs.true715  land.lhs.true724  land.lhs.true733  land.lhs.true742  land.lhs.true751  land.lhs.true760  land.lhs.true768  land.lhs.true777  land.lhs.true786  if.then795  if.end1317  
After path modifications process path
for.body369  if.then376  land.lhs.true  land.lhs.true393  land.lhs.true402  land.lhs.true410  land.lhs.true419  land.lhs.true428  land.lhs.true437  land.lhs.true446  land.lhs.true455  land.lhs.true464  land.lhs.true472  land.lhs.true481  land.lhs.true490  land.lhs.true499  land.lhs.true508  land.lhs.true517  land.lhs.true526  land.lhs.true534  land.lhs.true543  land.lhs.true552  land.lhs.true561  land.lhs.true569  land.lhs.true577  land.lhs.true585  land.lhs.true593  land.lhs.true601  land.lhs.true609  land.lhs.true618  land.lhs.true627  land.lhs.true636  land.lhs.true644  land.lhs.true653  land.lhs.true662  land.lhs.true671  land.lhs.true680  land.lhs.true689  land.lhs.true698  land.lhs.true706  land.lhs.true715  land.lhs.true724  land.lhs.true733  land.lhs.true742  land.lhs.true751  land.lhs.true760  land.lhs.true768  land.lhs.true777  land.lhs.true786  if.end1317  
Hash path invariants only
Invariants are
  br label %if.end1318, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end359  
After path modifications process path is empty
Processing path: entry  for.end359  for.cond360  for.body364  
After path modifications process path
for.body364  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond365, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.end359  
After path modifications process path
entry  for.end359  
Processing path: entry  for.end359  for.cond365  for.body369  if.then376  if.end1318  
After path modifications process path
for.body369  if.then376  if.end1318  
Hash path invariants only
Invariants are
  br label %if.end1319, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end359  
After path modifications process path is empty
Processing path: entry  for.end359  for.cond360  for.body364  
After path modifications process path
for.body364  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond365, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.end359  
After path modifications process path
entry  for.end359  
Processing path: entry  for.end359  for.cond365  for.body369  if.end1319  for.inc1320  
After path modifications process path
for.body369  if.end1319  
Hash path invariants only
Invariants are
  br label %for.inc1320, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.cond  for.end359  
After path modifications process path is empty
Processing path: entry  for.end359  for.cond360  for.body364  
After path modifications process path
for.body364  
Hash path invariants only
Invariants are
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond365, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
Processing path: entry  for.end359  
After path modifications process path
entry  for.end359  
Processing path: entry  for.end359  for.cond365  
After path modifications process path is empty
Processing path: entry  for.cond  for.end359  
After path modifications process path is empty
Processing path: entry  for.end359  for.cond360  for.body364  for.end1322  for.inc1323  
After path modifications process path
for.body364  for.end1322  
Hash path invariants only
Invariants are
  br label %for.inc1323, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
  br label %for.cond365, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9
  store i32 7, i32* %j, align 4, !control_dep_instr !5, !argument_dep_instr !7, !data_indep_instr !9, !input_dep_block !11
Processing path: entry  for.end359  
After path modifications process path
entry  for.end359  
Processing path: entry  for.cond  for.end359  for.end1325  
After path modifications process path is empty
Processing path: entry  for.end359  for.cond360  for.end1325  
After path modifications process path is empty
Processing path: entry  for.end359  for.end1325  
After path modifications process path
entry  for.end359  for.end1325  
 Processing function:main
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.epilog  
After path modifications process path
while.body  if.then5  sw.epilog  
Hash path invariants only
Invariants are
  br label %if.end39, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle input dependent load operand Can't handle this operand   %in = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @get_image(i8* %26, i8** %in, i32* %x_size, i32* %y_size), !input_indep_instr !6, !data_indep_instr !7
Can't handle this operand   %x_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @get_image(i8* %26, i8** %in, i32* %x_size, i32* %y_size), !input_indep_instr !6, !data_indep_instr !7
Can't handle this operand   %y_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @get_image(i8* %26, i8** %in, i32* %x_size, i32* %y_size), !input_indep_instr !6, !data_indep_instr !7
Insert assertion skipped because there was no hash update in between!
Insert assertion skipped because there was no hash update in between!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb  
After path modifications process path
while.body  if.then5  sw.bb  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7
  store i32 0, i32* %mode, align 4, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb7  
After path modifications process path
while.body  if.then5  sw.bb7  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7
  store i32 1, i32* %mode, align 4, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb8  
After path modifications process path
while.body  if.then5  sw.bb8  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7
  store i32 2, i32* %mode, align 4, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb9  
After path modifications process path
while.body  if.then5  sw.bb9  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7
  store i32 1, i32* %principle, align 4, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb10  
After path modifications process path
while.body  if.then5  sw.bb10  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7
  store i32 0, i32* %thin_post_proc, align 4, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb11  
After path modifications process path
while.body  if.then5  sw.bb11  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7
  store i32 1, i32* %drawing_mode, align 4, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb12  
After path modifications process path
while.body  if.then5  sw.bb12  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7
  store i32 1, i32* %three_by_three, align 4, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb13  
After path modifications process path
while.body  if.then5  sw.bb13  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7
  store i32 1, i32* %susan_quick, align 4, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb14  if.then17  
After path modifications process path
while.body  if.then5  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.then17  
After path modifications process path
entry  if.end  if.then17  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb14  if.end19  if.then26  
After path modifications process path
while.body  if.then5  if.end19  if.then26  
Hash path invariants only
Invariants are
  br label %if.end27, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7
  store i32 1, i32* %three_by_three, align 4, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb14  if.end19  if.end27  
After path modifications process path
while.body  if.then5  if.end19  if.end27  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb28  if.then32  
After path modifications process path
while.body  if.then5  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.then32  
After path modifications process path
entry  if.end  if.then32  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.then5  sw.bb28  if.end34  
After path modifications process path
while.body  if.then5  if.end34  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.end39  
After path modifications process path
while.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.body  if.else  
After path modifications process path
while.body  if.else  
Hash path invariants only
Invariants are
  br label %if.end39, !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7
  %call38 = call i32 @usage(), !control_dep_instr !10, !argument_dep_instr !8, !data_indep_instr !7, !input_dep_block !11
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end  while.cond  while.end  land.lhs.true  if.then45  
After path modifications process path is empty
Processing path: entry  if.end  while.end  land.lhs.true  if.then45  
After path modifications process path
entry  if.end  while.end  land.lhs.true  if.then45  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.epilog101  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.epilog101  
After path modifications process path
entry  if.end  while.end  if.end46  sw.epilog101  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb47  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb47  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb47  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb49  if.then53  if.then55  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb49  if.then53  if.then55  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb49  if.then53  if.then55  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %y_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main4(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %x_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main4(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %in = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main4(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %r = alloca i32*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main4(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %bp = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main4(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %max_no_edges = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main4(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb49  if.then53  if.end59  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb49  if.then53  if.end59  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb49  if.then53  if.end59  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %y_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main6(i32* %y_size, i32* %x_size, i8** %in, i32** %r), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %x_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main6(i32* %y_size, i32* %x_size, i8** %in, i32** %r), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %in = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main6(i32* %y_size, i32* %x_size, i8** %in, i32** %r), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %r = alloca i32*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main6(i32* %y_size, i32* %x_size, i8** %in, i32** %r), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb49  if.then53  if.else57  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb49  if.then53  if.else57  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb49  if.then53  if.else57  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %y_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main5(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %x_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main5(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %in = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main5(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %r = alloca i32*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main5(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %bp = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main5(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %max_no_edges = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main5(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i8** %bp, i32* %max_no_edges), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb49  if.end79  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb49  if.end79  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb49  if.end79  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb49  if.else62  if.then69  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb49  if.else62  if.then69  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb49  if.else62  if.then69  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %y_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main7(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %x_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main7(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %in = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main7(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %r = alloca i32*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main7(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %max_no_edges = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main7(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %mid = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main7(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %bp = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main7(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb49  if.else62  if.end73  if.then75  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb49  if.else62  if.end73  if.then75  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb49  if.else62  if.end73  if.then75  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %x_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main9(i32* %x_size, i32* %y_size, i8** %mid, i32** %r), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %y_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main9(i32* %x_size, i32* %y_size, i8** %mid, i32** %r), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %mid = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main9(i32* %x_size, i32* %y_size, i8** %mid, i32** %r), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %r = alloca i32*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main9(i32* %x_size, i32* %y_size, i8** %mid, i32** %r), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb49  if.else62  if.end73  if.end77  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb49  if.else62  if.end73  if.end77  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb49  if.else62  if.end73  if.end77  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %drawing_mode = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main10(i32* %drawing_mode, i8** %in, i8** %mid, i32* %y_size, i32* %x_size), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %in = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main10(i32* %drawing_mode, i8** %in, i8** %mid, i32* %y_size, i32* %x_size), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %mid = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main10(i32* %drawing_mode, i8** %in, i8** %mid, i32* %y_size, i32* %x_size), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %y_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main10(i32* %drawing_mode, i8** %in, i8** %mid, i32* %y_size, i32* %x_size), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %x_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main10(i32* %drawing_mode, i8** %in, i8** %mid, i32* %y_size, i32* %x_size), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb49  if.else62  if.else71  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb49  if.else62  if.else71  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb49  if.else62  if.else71  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %y_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main8(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %x_size = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main8(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %in = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main8(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %r = alloca i32*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main8(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %max_no_edges = alloca i32, align 4, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main8(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %mid = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main8(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Can't handle this operand   %bp = alloca i8*, align 8, !input_dep_instr !4, !data_dep_instr !5 of the call   call void @main8(i32* %y_size, i32* %x_size, i8** %in, i32** %r, i32* %max_no_edges, i8** %mid, i8** %bp), !control_dep_instr !10, !data_indep_instr !7, !input_dep_block !11
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb80  if.then86  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb80  if.then86  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb80  if.then86  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb80  if.end100  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb80  if.end100  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb80  if.end100  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb80  if.else90  if.then92  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb80  if.else90  if.then92  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb80  if.else90  if.then92  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb80  if.else90  if.end97  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb80  if.else90  if.end97  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb80  if.else90  if.end97  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end  while.cond  while.end  if.end46  sw.bb80  if.else90  if.else94  
After path modifications process path is empty
Processing path: entry  if.end  while.end  if.end46  sw.bb80  if.else90  if.else94  
After path modifications process path
entry  if.end  while.end  if.end46  sw.bb80  if.else90  if.else94  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Extract path function for assertion assert_main_path_1
Extract path function for assertion assert_main_path_3
Extract path function for assertion assert_main_path_5
Extract path function for assertion assert_main_path_7
Extract path function for assertion assert_main_path_9
Extract path function for assertion assert_main_path_11
Extract path function for assertion assert_main_path_13
Extract path function for assertion assert_main_path_15
Extract path function for assertion assert_main_path_17
Extract path function for assertion assert_main_path_21
Extract path function for assertion assert_main_path_23
Extract path function for assertion assert_main_path_27
Extract path function for assertion assert_main_path_31
Extract path function for assertion assert_main_path_34
Extract path function for assertion assert_main_path_36
Extract path function for assertion assert_main_path_38
Extract path function for assertion assert_main_path_40
Extract path function for assertion assert_main_path_42
Extract path function for assertion assert_main_path_44
Extract path function for assertion assert_main_path_46
Extract path function for assertion assert_main_path_48
Extract path function for assertion assert_main_path_50
Extract path function for assertion assert_main_path_52
Extract path function for assertion assert_main_path_54
Extract path function for assertion assert_main_path_56
Extract path function for assertion assert_main_path_58
Extract path function for assertion assert_main_path_60
Extract path function for assertion assert_main_path_62
Extract path function for assertion assert_main_path_64
Extract path function for assertion assert_susan_corners_path_0
Extract path function for assertion assert_susan_corners_path_1
Extract path function for assertion assert_susan_corners_path_2
Extract path function for assertion assert_susan_corners_path_3
Extract path function for assertion assert_susan_corners_path_4
Extract path function for assertion assert_susan_corners_path_5
Extract path function for assertion assert_susan_corners_path_6
Extract path function for assertion assert_susan_corners_path_7
Extract path function for assertion assert_susan_corners_path_8
Extract path function for assertion assert_susan_corners_path_9
Extract path function for assertion assert_susan_corners_path_10
Extract path function for assertion assert_susan_corners_path_11
Extract path function for assertion assert_susan_corners_path_12
Extract path function for assertion assert_susan_corners_path_13
Extract path function for assertion assert_susan_corners_path_14
Extract path function for assertion assert_susan_corners_path_15
Extract path function for assertion assert_susan_corners_path_16
Extract path function for assertion assert_susan_corners_path_17
Extract path function for assertion assert_susan_corners_path_18
Extract path function for assertion assert_susan_corners_path_19
Extract path function for assertion assert_susan_corners_path_20
Extract path function for assertion assert_susan_corners_path_21
Extract path function for assertion assert_susan_corners_path_22
Extract path function for assertion assert_susan_corners_path_23
Extract path function for assertion assert_susan_corners_path_24
Extract path function for assertion assert_susan_corners_path_25
Extract path function for assertion assert_susan_corners_path_26
Extract path function for assertion assert_susan_corners_path_27
Extract path function for assertion assert_susan_corners_path_28
Extract path function for assertion assert_susan_corners_path_29
Extract path function for assertion assert_susan_corners_path_30
Extract path function for assertion assert_susan_corners_path_31
Extract path function for assertion assert_susan_corners_path_32
Extract path function for assertion assert_susan_corners_path_33
Extract path function for assertion assert_susan_corners_path_34
Extract path function for assertion assert_susan_corners_path_35
Extract path function for assertion assert_susan_corners_path_36
Extract path function for assertion assert_susan_corners_path_37
Extract path function for assertion assert_susan_corners_path_38
Extract path function for assertion assert_susan_corners_path_39
Extract path function for assertion assert_susan_corners_path_40
Extract path function for assertion assert_susan_corners_path_41
Extract path function for assertion assert_susan_corners_path_42
Extract path function for assertion assert_susan_corners_path_43
Extract path function for assertion assert_susan_corners_path_44
Extract path function for assertion assert_susan_corners_path_45
Extract path function for assertion assert_susan_corners_path_46
Extract path function for assertion assert_susan_corners_path_47
Extract path function for assertion assert_susan_corners_path_48
Extract path function for assertion assert_susan_corners_path_49
Extract path function for assertion assert_susan_corners_path_50
Extract path function for assertion assert_susan_corners_path_51
Extract path function for assertion assert_susan_corners_path_52
Extract path function for assertion assert_susan_corners_path_53
Extract path function for assertion assert_susan_corners_path_54
Extract path function for assertion assert_susan_corners_path_55
Extract path function for assertion assert_susan_corners_path_56
Extract path function for assertion assert_susan_corners_path_57
Extract path function for assertion assert_susan_corners_path_58
Extract path function for assertion assert_susan_corners_path_59
Extract path function for assertion assert_susan_corners_path_60
Extract path function for assertion assert_susan_corners_path_61
Extract path function for assertion assert_susan_corners_path_62
Extract path function for assertion assert_susan_corners_path_63
Extract path function for assertion assert_susan_corners_path_64
Extract path function for assertion assert_susan_corners_path_65
Extract path function for assertion assert_susan_corners_path_66
Extract path function for assertion assert_susan_corners_path_67
Extract path function for assertion assert_susan_corners_path_68
Extract path function for assertion assert_susan_corners_path_69
Extract path function for assertion assert_susan_corners_path_70
Extract path function for assertion assert_susan_corners_path_71
Extract path function for assertion assert_susan_corners_path_72
Extract path function for assertion assert_susan_corners_path_73
Extract path function for assertion assert_susan_corners_path_74
Extract path function for assertion assert_susan_corners_path_75
Extract path function for assertion assert_susan_corners_path_76
Extract path function for assertion assert_susan_corners_path_77
Extract path function for assertion assert_susan_corners_path_78
Extract path function for assertion assert_susan_corners_path_79
Extract path function for assertion assert_susan_corners_path_80
Extract path function for assertion assert_susan_corners_path_81
Extract path function for assertion assert_susan_corners_path_82
Extract path function for assertion assert_susan_corners_path_83
Extract path function for assertion assert_susan_corners_path_84
Extract path function for assertion assert_susan_corners_path_85
Extract path function for assertion assert_susan_corners_path_86
Extract path function for assertion assert_susan_corners_path_87
Extract path function for assertion assert_susan_corners_path_88
Extract path function for assertion assert_susan_corners_path_89
Extract path function for assertion assert_susan_corners_path_90
Extract path function for assertion assert_susan_corners_path_91
Extract path function for assertion assert_susan_corners_path_92
Extract path function for assertion assert_susan_corners_path_93
Extract path function for assertion assert_susan_corners_path_94
Extract path function for assertion assert_susan_corners_path_95
Extract path function for assertion assert_susan_corners_path_96
Extract path function for assertion assert_susan_corners_path_97
Extract path function for assertion assert_susan_corners_path_98
Extract path function for assertion assert_susan_corners_path_99
Extract path function for assertion assert_susan_corners_path_100
Extract path function for assertion assert_susan_corners_path_101
Extract path function for assertion assert_susan_corners_path_102
Extract path function for assertion assert_susan_corners_path_103
Extract path function for assertion assert_susan_corners_path_104
Extract path function for assertion assert_susan_corners_path_105
Extract path function for assertion assert_susan_corners_path_106
Extract path function for assertion assert_susan_corners_path_107
Extract path function for assertion assert_susan_corners_path_109
Extract path function for assertion assert_susan_corners_path_110
Extract path function for assertion assert_susan_corners_path_113
Extract path function for assertion assert_susan_corners_path_114
Extract path function for assertion assert_susan_corners_path_115
Extract path function for assertion assert_susan_corners_path_117
Extract path function for assertion assert_susan_corners_path_118
Extract path function for assertion assert_susan_corners_path_119
Extract path function for assertion assert_susan_corners_path_121
Extract path function for assertion assert_susan_corners_path_122
Extract path function for assertion assert_susan_corners_path_123
Extract path function for assertion assert_susan_corners_path_125
Extract path function for assertion assert_susan_corners_path_126
Extract path function for assertion assert_susan_corners_path_129
Extract path function for assertion assert_susan_corners_path_130
Extract path function for assertion assert_susan_corners_path_133
Extract path function for assertion assert_susan_corners_quick_path_0
Extract path function for assertion assert_susan_corners_quick_path_1
Extract path function for assertion assert_susan_corners_quick_path_2
Extract path function for assertion assert_susan_corners_quick_path_3
Extract path function for assertion assert_susan_corners_quick_path_4
Extract path function for assertion assert_susan_corners_quick_path_5
Extract path function for assertion assert_susan_corners_quick_path_6
Extract path function for assertion assert_susan_corners_quick_path_7
Extract path function for assertion assert_susan_corners_quick_path_8
Extract path function for assertion assert_susan_corners_quick_path_9
Extract path function for assertion assert_susan_corners_quick_path_10
Extract path function for assertion assert_susan_corners_quick_path_11
Extract path function for assertion assert_susan_corners_quick_path_12
Extract path function for assertion assert_susan_corners_quick_path_13
Extract path function for assertion assert_susan_corners_quick_path_14
Extract path function for assertion assert_susan_corners_quick_path_15
Extract path function for assertion assert_susan_corners_quick_path_16
Extract path function for assertion assert_susan_corners_quick_path_17
Extract path function for assertion assert_susan_corners_quick_path_18
Extract path function for assertion assert_susan_corners_quick_path_19
Extract path function for assertion assert_susan_corners_quick_path_20
Extract path function for assertion assert_susan_corners_quick_path_21
Extract path function for assertion assert_susan_corners_quick_path_22
Extract path function for assertion assert_susan_corners_quick_path_23
Extract path function for assertion assert_susan_corners_quick_path_24
Extract path function for assertion assert_susan_corners_quick_path_25
Extract path function for assertion assert_susan_corners_quick_path_26
Extract path function for assertion assert_susan_corners_quick_path_27
Extract path function for assertion assert_susan_corners_quick_path_28
Extract path function for assertion assert_susan_corners_quick_path_29
Extract path function for assertion assert_susan_corners_quick_path_30
Extract path function for assertion assert_susan_corners_quick_path_31
Extract path function for assertion assert_susan_corners_quick_path_32
Extract path function for assertion assert_susan_corners_quick_path_33
Extract path function for assertion assert_susan_corners_quick_path_34
Extract path function for assertion assert_susan_corners_quick_path_35
Extract path function for assertion assert_susan_corners_quick_path_36
Extract path function for assertion assert_susan_corners_quick_path_37
Extract path function for assertion assert_susan_corners_quick_path_38
Extract path function for assertion assert_susan_corners_quick_path_39
Extract path function for assertion assert_susan_corners_quick_path_40
Extract path function for assertion assert_susan_corners_quick_path_41
Extract path function for assertion assert_susan_corners_quick_path_42
Extract path function for assertion assert_susan_corners_quick_path_43
Extract path function for assertion assert_susan_corners_quick_path_44
Extract path function for assertion assert_susan_corners_quick_path_45
Extract path function for assertion assert_susan_corners_quick_path_46
Extract path function for assertion assert_susan_corners_quick_path_47
Extract path function for assertion assert_susan_corners_quick_path_48
Extract path function for assertion assert_susan_corners_quick_path_49
Extract path function for assertion assert_susan_corners_quick_path_50
Extract path function for assertion assert_susan_corners_quick_path_51
Extract path function for assertion assert_susan_corners_quick_path_52
Extract path function for assertion assert_susan_corners_quick_path_53
Extract path function for assertion assert_susan_corners_quick_path_54
Extract path function for assertion assert_susan_corners_quick_path_55
Extract path function for assertion assert_susan_corners_quick_path_56
Extract path function for assertion assert_susan_corners_quick_path_57
Extract path function for assertion assert_susan_corners_quick_path_58
Extract path function for assertion assert_susan_corners_quick_path_59
Extract path function for assertion assert_susan_corners_quick_path_61
Extract path function for assertion assert_susan_corners_quick_path_62
Extract path function for assertion assert_susan_corners_quick_path_65
Extract path function for assertion assert_susan_corners_quick_path_66
Extract path function for assertion assert_susan_corners_quick_path_67
Extract path function for assertion assert_susan_corners_quick_path_69
Extract path function for assertion assert_susan_corners_quick_path_70
Extract path function for assertion assert_susan_corners_quick_path_71
Extract path function for assertion assert_susan_corners_quick_path_73
Extract path function for assertion assert_susan_corners_quick_path_74
Extract path function for assertion assert_susan_corners_quick_path_75
Extract path function for assertion assert_susan_corners_quick_path_77
Extract path function for assertion assert_susan_corners_quick_path_78
Extract path function for assertion assert_susan_corners_quick_path_81
Extract path function for assertion assert_susan_corners_quick_path_82
Extract path function for assertion assert_susan_corners_quick_path_85
Extract path function for assertion assert_corner_draw_path_0
Extract path function for assertion assert_corner_draw_path_1
Extract path function for assertion assert_corner_draw_path_3
Extract path function for assertion assert_corner_draw_path_4
Extract path function for assertion assert_corner_draw_path_5
Extract path function for assertion assert_corner_draw_path_7
Extract path function for assertion assert_put_image_path_0
Extract path function for assertion assert_put_image_path_1
Extract path function for assertion assert_put_image_path_2
Extract path function for assertion assert_susan_principle_small_path_0
Extract path function for assertion assert_susan_principle_small_path_1
Extract path function for assertion assert_susan_principle_small_path_2
Extract path function for assertion assert_susan_principle_small_path_3
Extract path function for assertion assert_susan_principle_small_path_4
Extract path function for assertion assert_susan_principle_small_path_5
Extract path function for assertion assert_susan_principle_small_path_7
Extract path function for assertion assert_susan_principle_small_path_8
Extract path function for assertion assert_susan_principle_small_path_10
Extract path function for assertion assert_susan_principle_path_0
Extract path function for assertion assert_susan_principle_path_1
Extract path function for assertion assert_susan_principle_path_2
Extract path function for assertion assert_susan_principle_path_3
Extract path function for assertion assert_susan_principle_path_4
Extract path function for assertion assert_susan_principle_path_5
Extract path function for assertion assert_susan_principle_path_7
Extract path function for assertion assert_susan_principle_path_8
Extract path function for assertion assert_susan_principle_path_10
Extract path function for assertion assert_susan_edges_path_0
Extract path function for assertion assert_susan_edges_path_1
Extract path function for assertion assert_susan_edges_path_2
Extract path function for assertion assert_susan_edges_path_3
Extract path function for assertion assert_susan_edges_path_4
Extract path function for assertion assert_susan_edges_path_5
Extract path function for assertion assert_susan_edges_path_7
Extract path function for assertion assert_susan_edges_path_8
Extract path function for assertion assert_susan_edges_path_9
Extract path function for assertion assert_susan_edges_path_11
Extract path function for assertion assert_susan_edges_path_12
Extract path function for assertion assert_susan_edges_path_13
Extract path function for assertion assert_susan_edges_path_15
Extract path function for assertion assert_susan_edges_path_16
Extract path function for assertion assert_susan_edges_path_17
Extract path function for assertion assert_susan_edges_path_19
Extract path function for assertion assert_susan_edges_path_20
Extract path function for assertion assert_susan_edges_path_21
Extract path function for assertion assert_susan_edges_path_23
Extract path function for assertion assert_susan_edges_path_24
Extract path function for assertion assert_susan_edges_path_25
Extract path function for assertion assert_susan_edges_path_27
Extract path function for assertion assert_susan_edges_path_28
Extract path function for assertion assert_susan_edges_path_29
Extract path function for assertion assert_susan_edges_path_31
Extract path function for assertion assert_susan_edges_path_32
Extract path function for assertion assert_susan_edges_path_33
Extract path function for assertion assert_susan_edges_path_35
Extract path function for assertion assert_susan_edges_path_36
Extract path function for assertion assert_susan_edges_path_37
Extract path function for assertion assert_susan_edges_path_39
Extract path function for assertion assert_susan_edges_path_40
Extract path function for assertion assert_susan_edges_path_41
Extract path function for assertion assert_susan_edges_path_43
Extract path function for assertion assert_susan_edges_path_44
Extract path function for assertion assert_susan_edges_path_45
Extract path function for assertion assert_susan_edges_path_47
Extract path function for assertion assert_susan_edges_path_48
Extract path function for assertion assert_susan_edges_path_49
Extract path function for assertion assert_susan_edges_path_51
Extract path function for assertion assert_susan_edges_path_52
Extract path function for assertion assert_susan_edges_path_53
Extract path function for assertion assert_susan_edges_path_55
Extract path function for assertion assert_susan_edges_path_56
Extract path function for assertion assert_susan_edges_path_57
Extract path function for assertion assert_susan_edges_path_59
Extract path function for assertion assert_susan_edges_path_60
Extract path function for assertion assert_susan_edges_path_61
Extract path function for assertion assert_susan_edges_path_63
Extract path function for assertion assert_susan_edges_path_64
Extract path function for assertion assert_susan_edges_path_65
Extract path function for assertion assert_susan_edges_path_67
Extract path function for assertion assert_susan_edges_path_68
Extract path function for assertion assert_susan_edges_path_69
Extract path function for assertion assert_susan_edges_path_71
Extract path function for assertion assert_susan_edges_path_72
Extract path function for assertion assert_susan_edges_path_73
Extract path function for assertion assert_susan_edges_path_75
Extract path function for assertion assert_susan_edges_path_76
Extract path function for assertion assert_susan_edges_path_77
Extract path function for assertion assert_susan_edges_path_79
Extract path function for assertion assert_susan_edges_path_80
Extract path function for assertion assert_susan_edges_path_81
Extract path function for assertion assert_susan_edges_path_83
Extract path function for assertion assert_susan_edges_path_84
Extract path function for assertion assert_susan_edges_path_85
Extract path function for assertion assert_susan_edges_path_87
Extract path function for assertion assert_susan_edges_path_88
Extract path function for assertion assert_susan_edges_path_89
Extract path function for assertion assert_susan_edges_path_91
Extract path function for assertion assert_susan_edges_path_92
Extract path function for assertion assert_susan_edges_path_93
Extract path function for assertion assert_susan_edges_path_95
Extract path function for assertion assert_susan_edges_path_96
Extract path function for assertion assert_susan_edges_path_97
Extract path function for assertion assert_susan_edges_path_99
Extract path function for assertion assert_susan_edges_path_100
Extract path function for assertion assert_susan_edges_path_101
Extract path function for assertion assert_susan_edges_path_103
Extract path function for assertion assert_susan_edges_path_104
Extract path function for assertion assert_susan_edges_path_105
Extract path function for assertion assert_susan_edges_path_107
Extract path function for assertion assert_susan_edges_path_108
Extract path function for assertion assert_susan_edges_path_109
Extract path function for assertion assert_susan_edges_path_111
Extract path function for assertion assert_susan_edges_path_112
Extract path function for assertion assert_susan_edges_path_113
Extract path function for assertion assert_susan_edges_path_115
Extract path function for assertion assert_susan_edges_path_116
Extract path function for assertion assert_susan_edges_path_119
Extract path function for assertion assert_susan_edges_path_120
Extract path function for assertion assert_susan_edges_path_123
Extract path function for assertion assert_enlarge_path_1
Extract path function for assertion assert_enlarge_path_4
Extract path function for assertion assert_enlarge_path_8
Extract path function for assertion assert_enlarge_path_9
Extract path function for assertion assert_enlarge_path_13
Extract path function for assertion assert_enlarge_path_14
Extract path function for assertion assert_enlarge_path_18
Extract path function for assertion assert_median_path_0
Extract path function for assertion assert_median_path_1
Extract path function for assertion assert_median_path_2
Extract path function for assertion assert_median_path_3
Extract path function for assertion assert_median_path_4
Extract path function for assertion assert_median_path_5
Extract path function for assertion assert_median_path_6
Extract path function for assertion assert_median_path_7
Extract path function for assertion assert_median_path_8
Extract path function for assertion assert_median_path_9
Extract path function for assertion assert_median_path_10
Extract path function for assertion assert_susan_smoothing_path_0
Extract path function for assertion assert_susan_smoothing_path_1
Extract path function for assertion assert_susan_smoothing_path_2
Extract path function for assertion assert_susan_smoothing_path_3
Extract path function for assertion assert_susan_smoothing_path_4
Extract path function for assertion assert_susan_smoothing_path_5
Extract path function for assertion assert_susan_smoothing_path_7
Extract path function for assertion assert_susan_smoothing_path_8
Extract path function for assertion assert_susan_smoothing_path_9
Extract path function for assertion assert_susan_smoothing_path_10
Extract path function for assertion assert_susan_smoothing_path_11
Extract path function for assertion assert_susan_smoothing_path_13
Extract path function for assertion assert_susan_smoothing_path_14
Extract path function for assertion assert_susan_smoothing_path_15
Extract path function for assertion assert_susan_smoothing_path_17
Extract path function for assertion assert_susan_smoothing_path_19
Extract path function for assertion assert_susan_smoothing_path_20
Extract path function for assertion assert_susan_smoothing_path_22
Extract path function for assertion assert_susan_smoothing_path_24
Extract path function for assertion assert_susan_smoothing_path_25
Extract path function for assertion assert_susan_smoothing_path_27
Extract path function for assertion assert_susan_smoothing_path_29
Extract path function for assertion assert_susan_smoothing_path_30
Extract path function for assertion assert_susan_smoothing_path_32
Extract path function for assertion assert_susan_smoothing_path_34
Extract path function for assertion assert_susan_smoothing_path_35
Extract path function for assertion assert_susan_smoothing_path_37
Extract path function for assertion assert_susan_smoothing_path_39
Extract path function for assertion assert_susan_smoothing_path_42
Extract path function for assertion assert_susan_smoothing_path_43
Extract path function for assertion assert_susan_smoothing_path_44
Extract path function for assertion assert_susan_smoothing_path_45
Extract path function for assertion assert_susan_smoothing_path_46
Extract path function for assertion assert_susan_smoothing_path_47
Extract path function for assertion assert_susan_smoothing_path_48
Extract path function for assertion assert_susan_smoothing_path_49
Extract path function for assertion assert_susan_smoothing_path_50
Extract path function for assertion assert_susan_smoothing_path_51
Extract path function for assertion assert_susan_smoothing_path_52
Extract path function for assertion assert_susan_smoothing_path_54
Extract path function for assertion assert_susan_smoothing_path_55
Extract path function for assertion assert_susan_smoothing_path_57
Extract path function for assertion assert_susan_smoothing_path_58
Extract path function for assertion assert_susan_edges_small_path_0
Extract path function for assertion assert_susan_edges_small_path_1
Extract path function for assertion assert_susan_edges_small_path_2
Extract path function for assertion assert_susan_edges_small_path_3
Extract path function for assertion assert_susan_edges_small_path_4
Extract path function for assertion assert_susan_edges_small_path_5
Extract path function for assertion assert_susan_edges_small_path_7
Extract path function for assertion assert_susan_edges_small_path_8
Extract path function for assertion assert_susan_edges_small_path_9
Extract path function for assertion assert_susan_edges_small_path_11
Extract path function for assertion assert_susan_edges_small_path_12
Extract path function for assertion assert_susan_edges_small_path_13
Extract path function for assertion assert_susan_edges_small_path_15
Extract path function for assertion assert_susan_edges_small_path_16
Extract path function for assertion assert_susan_edges_small_path_17
Extract path function for assertion assert_susan_edges_small_path_19
Extract path function for assertion assert_susan_edges_small_path_20
Extract path function for assertion assert_susan_edges_small_path_21
Extract path function for assertion assert_susan_edges_small_path_23
Extract path function for assertion assert_susan_edges_small_path_24
Extract path function for assertion assert_susan_edges_small_path_25
Extract path function for assertion assert_susan_edges_small_path_27
Extract path function for assertion assert_susan_edges_small_path_28
Extract path function for assertion assert_susan_edges_small_path_29
Extract path function for assertion assert_susan_edges_small_path_31
Extract path function for assertion assert_susan_edges_small_path_32
Extract path function for assertion assert_susan_edges_small_path_33
Extract path function for assertion assert_susan_edges_small_path_35
Extract path function for assertion assert_susan_edges_small_path_36
Extract path function for assertion assert_susan_edges_small_path_37
Extract path function for assertion assert_susan_edges_small_path_39
Extract path function for assertion assert_susan_edges_small_path_40
Extract path function for assertion assert_susan_edges_small_path_41
Extract path function for assertion assert_susan_edges_small_path_43
Extract path function for assertion assert_susan_edges_small_path_44
Extract path function for assertion assert_susan_edges_small_path_45
Extract path function for assertion assert_susan_edges_small_path_47
Extract path function for assertion assert_susan_edges_small_path_48
Extract path function for assertion assert_susan_edges_small_path_49
Extract path function for assertion assert_susan_edges_small_path_51
Extract path function for assertion assert_susan_edges_small_path_52
Extract path function for assertion assert_susan_edges_small_path_53
Extract path function for assertion assert_susan_edges_small_path_55
Extract path function for assertion assert_susan_edges_small_path_56
Extract path function for assertion assert_susan_edges_small_path_57
Extract path function for assertion assert_susan_edges_small_path_59
Extract path function for assertion assert_susan_edges_small_path_60
Extract path function for assertion assert_susan_edges_small_path_61
Extract path function for assertion assert_susan_edges_small_path_63
Extract path function for assertion assert_susan_edges_small_path_64
Extract path function for assertion assert_susan_edges_small_path_65
Extract path function for assertion assert_susan_edges_small_path_67
Extract path function for assertion assert_susan_edges_small_path_68
Extract path function for assertion assert_susan_edges_small_path_69
Extract path function for assertion assert_susan_edges_small_path_71
Extract path function for assertion assert_susan_edges_small_path_72
Extract path function for assertion assert_susan_edges_small_path_73
Extract path function for assertion assert_susan_edges_small_path_75
Extract path function for assertion assert_susan_edges_small_path_76
Extract path function for assertion assert_susan_edges_small_path_77
Extract path function for assertion assert_susan_edges_small_path_79
Extract path function for assertion assert_susan_edges_small_path_80
Extract path function for assertion assert_susan_edges_small_path_81
Extract path function for assertion assert_susan_edges_small_path_83
Extract path function for assertion assert_susan_edges_small_path_84
Extract path function for assertion assert_susan_edges_small_path_85
Extract path function for assertion assert_susan_edges_small_path_87
Extract path function for assertion assert_susan_edges_small_path_88
Extract path function for assertion assert_susan_edges_small_path_89
Extract path function for assertion assert_susan_edges_small_path_91
Extract path function for assertion assert_susan_edges_small_path_92
Extract path function for assertion assert_susan_edges_small_path_93
Extract path function for assertion assert_susan_edges_small_path_95
Extract path function for assertion assert_susan_edges_small_path_96
Extract path function for assertion assert_susan_edges_small_path_97
Extract path function for assertion assert_susan_edges_small_path_99
Extract path function for assertion assert_susan_edges_small_path_100
Extract path function for assertion assert_susan_edges_small_path_101
Extract path function for assertion assert_susan_edges_small_path_103
Extract path function for assertion assert_susan_edges_small_path_104
Extract path function for assertion assert_susan_edges_small_path_105
Extract path function for assertion assert_susan_edges_small_path_107
Extract path function for assertion assert_susan_edges_small_path_108
Extract path function for assertion assert_susan_edges_small_path_109
Extract path function for assertion assert_susan_edges_small_path_111
Extract path function for assertion assert_susan_edges_small_path_112
Extract path function for assertion assert_susan_edges_small_path_113
Extract path function for assertion assert_susan_edges_small_path_115
Extract path function for assertion assert_susan_edges_small_path_116
Extract path function for assertion assert_susan_edges_small_path_119
Extract path function for assertion assert_susan_edges_small_path_120
Extract path function for assertion assert_susan_edges_small_path_123
Extract path function for assertion assert_edge_draw_path_0
Extract path function for assertion assert_edge_draw_path_1
Extract path function for assertion assert_edge_draw_path_2
Extract path function for assertion assert_edge_draw_path_3
Extract path function for assertion assert_edge_draw_path_5
Extract path function for assertion assert_edge_draw_path_6
Extract path function for assertion assert_edge_draw_path_7
Extract path function for assertion assert_edge_draw_path_8
Extract path function for assertion assert_edge_draw_path_9
Extract path function for assertion assert_edge_draw_path_11
OH stats is requested, dumping stat file...
Processed instructions number 11879
{
    "numberOfAssertCalls": 7,
    "numberOfBlocksInFunctionsWithNoDG": 0,
    "numberOfDataDependentInstructions": 8136,
    "numberOfHashVariables": 1,
    "numberOfImplicitlyProtectedInstructions": 0,
    "numberOfInstructionsInFilteredFunctions": 1619,
    "numberOfInstructionsInFunctionsWithNoDG": 0,
    "numberOfNonHashableBlocks": 21,
    "numberOfNonHashableInstructions": 294,
    "numberOfOHProcessedInstr": 10260,
    "numberOfOtherUnprotectedInstructions": 2,
    "numberOfOtherUnprotectedLoopVariantInstructions": 23,
    "numberOfProtectedArguments": 0,
    "numberOfProtectedBlocks": 1,
    "numberOfProtectedFunctions": 13,
    "numberOfProtectedGuardArguments": 0,
    "numberOfProtectedGuardInstructions": 0,
    "numberOfProtectedInstructions": 12,
    "numberOfSensitiveBlocks": 548,
    "numberOfSensitiveFunctions": 14,
    "numberOfShortRangeAssertCalls": 511,
    "numberOfShortRangeImplicitlyProtectedInstructions": 0,
    "numberOfShortRangeProtectedArguments": 0,
    "numberOfShortRangeProtectedBlocks": 450,
    "numberOfShortRangeProtectedGuardArguments": 0,
    "numberOfShortRangeProtectedGuardInstructions": 0,
    "numberOfShortRangeProtectedInstructions": 513,
    "numberOfUnprotectedArgumentReachableInstructions": 57,
    "numberOfUnprotectedArgumentReachableLoopBlocks": 0,
    "numberOfUnprotectedDataDependentBlocks": 0,
    "numberOfUnprotectedDataDependentLoopBlocks": 76,
    "numberOfUnprotectedGlobalReachableInstructions": 0,
    "numberOfUnprotectedGlobalReachableLoopBlocks": 0,
    "numberOfUnprotectedInputDependentInstructions": 0,
    "numberOfUnprotectedLoopInstructions": 1223
}
ERR. processed 14 function, while filter count is 76
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 185.9941 seconds (186.0300 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
  163.2152 ( 88.0%)   0.4920 ( 86.8%)  163.7072 ( 88.0%)  163.7415 ( 88.0%)  runs input dependency analysis
  17.7330 (  9.6%)   0.0680 ( 12.0%)  17.8010 (  9.6%)  17.8035 (  9.6%)  Instruments bitcode with hashing and logging functions
   4.0099 (  2.2%)   0.0020 (  0.4%)   4.0120 (  2.2%)   4.0108 (  2.2%)  Memory SSA
   0.1435 (  0.1%)   0.0001 (  0.0%)   0.1436 (  0.1%)   0.1432 (  0.1%)  Natural Loop Information
   0.1359 (  0.1%)   0.0001 (  0.0%)   0.1360 (  0.1%)   0.1368 (  0.1%)  Dominator Tree Construction
   0.1232 (  0.1%)   0.0000 (  0.0%)   0.1232 (  0.1%)   0.1232 (  0.1%)  Bitcode Writer
   0.0240 (  0.0%)   0.0037 (  0.7%)   0.0278 (  0.0%)   0.0277 (  0.0%)  Module Verifier
   0.0255 (  0.0%)   0.0000 (  0.0%)   0.0255 (  0.0%)   0.0255 (  0.0%)  Basic Alias Analysis (stateless AA impl)
   0.0034 (  0.0%)   0.0000 (  0.0%)   0.0034 (  0.0%)   0.0034 (  0.0%)  Include functions in a given file in any transformation
   0.0033 (  0.0%)   0.0000 (  0.0%)   0.0033 (  0.0%)   0.0033 (  0.0%)  Function Alias Analysis Results
   0.0027 (  0.0%)   0.0003 (  0.0%)   0.0029 (  0.0%)   0.0030 (  0.0%)  Dominator Tree Construction
   0.0027 (  0.0%)   0.0002 (  0.0%)   0.0030 (  0.0%)   0.0029 (  0.0%)  Post-Dominator Tree Construction
   0.0017 (  0.0%)   0.0002 (  0.0%)   0.0019 (  0.0%)   0.0019 (  0.0%)  Natural Loop Information
   0.0016 (  0.0%)   0.0000 (  0.0%)   0.0016 (  0.0%)   0.0016 (  0.0%)  Instruments bitcode with guards
   0.0007 (  0.0%)   0.0000 (  0.0%)   0.0007 (  0.0%)   0.0007 (  0.0%)  Call site information
   0.0004 (  0.0%)   0.0000 (  0.0%)   0.0004 (  0.0%)   0.0004 (  0.0%)  runs indirect and virtual calls analysis
   0.0003 (  0.0%)   0.0000 (  0.0%)   0.0003 (  0.0%)   0.0003 (  0.0%)  CallGraph Construction
   0.0003 (  0.0%)   0.0000 (  0.0%)   0.0003 (  0.0%)   0.0003 (  0.0%)  Remove unreachable blocks from the CFG
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Dead Global Elimination
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Dominator Tree Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Natural Loop Information
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Marks functions in a given file as assert functions
  185.4275 (100.0%)   0.5666 (100.0%)  185.9941 (100.0%)  186.0300 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0195 seconds (0.0195 wall clock)

   ---User Time---   --User+System--   ---Wall Time---  --- Name ---
   0.0195 (100.0%)   0.0195 (100.0%)   0.0195 (100.0%)  Parse IR
   0.0195 (100.0%)   0.0195 (100.0%)   0.0195 (100.0%)  Total

