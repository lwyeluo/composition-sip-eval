Running input dependency analysis pass
Processing function main0
Processing function adpcm_decoder0
Processing function adpcm_decoder1
Processing function adpcm_decoder2
Processing function adpcm_decoder3
Processing function adpcm_decoder4
Processing function adpcm_decoder5
Processing function adpcm_decoder6
Processing function adpcm_decoder7
Processing function adpcm_decoder8
Processing function adpcm_decoder
Processing function main1
Processing function main2
Processing function main
Processing function adpcm_coder0
Processing function adpcm_coder1
Processing function adpcm_coder2
Processing function adpcm_coder3
Processing function adpcm_coder4
Processing function adpcm_coder5
Processing function adpcm_coder6
Processing function adpcm_coder7
Processing function adpcm_coder8
Processing function adpcm_coder9
Processing function adpcm_coder10
Processing function adpcm_coder
Finalizing adpcm_coder
Finalizing adpcm_coder10
Mark Input dependent function adpcm_coder10
Finalizing adpcm_coder9
Mark Input dependent function adpcm_coder9
Finalizing adpcm_coder8
Mark Input dependent function adpcm_coder8
Finalizing adpcm_coder7
Mark Input dependent function adpcm_coder7
Finalizing adpcm_coder6
Mark Input dependent function adpcm_coder6
Finalizing adpcm_coder5
Mark Input dependent function adpcm_coder5
Finalizing adpcm_coder4
Mark Input dependent function adpcm_coder4
Finalizing adpcm_coder3
Mark Input dependent function adpcm_coder3
Finalizing adpcm_coder2
Mark Input dependent function adpcm_coder2
Finalizing adpcm_coder1
Mark Input dependent function adpcm_coder1
Finalizing adpcm_coder0
Mark Input dependent function adpcm_coder0
Finalizing main
Finalizing main2
Mark Input dependent function main2
Finalizing main1
Mark Input dependent function main1
Finalizing adpcm_decoder
Mark Input dependent function adpcm_decoder
Finalizing adpcm_decoder8
Mark Input dependent function adpcm_decoder8
Finalizing adpcm_decoder7
Mark Input dependent function adpcm_decoder7
Finalizing adpcm_decoder6
Mark Input dependent function adpcm_decoder6
Finalizing adpcm_decoder5
Mark Input dependent function adpcm_decoder5
Finalizing adpcm_decoder4
Mark Input dependent function adpcm_decoder4
Finalizing adpcm_decoder3
Mark Input dependent function adpcm_decoder3
Finalizing adpcm_decoder2
Mark Input dependent function adpcm_decoder2
Finalizing adpcm_decoder1
Mark Input dependent function adpcm_decoder1
Finalizing adpcm_decoder0
Mark Input dependent function adpcm_decoder0
Finalizing main0
Mark Input dependent function main0
Finished input dependency analysis

In  mark function pass 
In  filter function pass 
Filter file:/home/anahitik/SIP/sip-eval/combination/rawdaudio.x.bc/10/0
here!:adpcm_decoder1
here!:main0
here!:adpcm_coder9
here!:adpcm_coder9
got filter function names
did not find main demangled to main
did not find read demangled to read
did not find perror demangled to perror
did not find exit demangled to exit
did not find write demangled to write
did not find fprintf demangled to fprintf
did not find adpcm_coder demangled to adpcm_coder
did not find adpcm_decoder demangled to adpcm_decoder
Add filter function main0
FunctionInfo. Adding function:main0
did not find main1 demangled to main1
did not find main2 demangled to main2
did not find adpcm_coder0 demangled to adpcm_coder0
did not find adpcm_coder1 demangled to adpcm_coder1
did not find adpcm_coder2 demangled to adpcm_coder2
did not find adpcm_coder3 demangled to adpcm_coder3
did not find adpcm_coder4 demangled to adpcm_coder4
did not find adpcm_coder5 demangled to adpcm_coder5
did not find adpcm_coder6 demangled to adpcm_coder6
did not find adpcm_coder7 demangled to adpcm_coder7
did not find adpcm_coder8 demangled to adpcm_coder8
Add filter function adpcm_coder9
FunctionInfo. Adding function:adpcm_coder9
did not find adpcm_coder10 demangled to adpcm_coder10
did not find adpcm_decoder0 demangled to adpcm_decoder0
Add filter function adpcm_decoder1
FunctionInfo. Adding function:adpcm_decoder1
did not find adpcm_decoder2 demangled to adpcm_decoder2
did not find adpcm_decoder3 demangled to adpcm_decoder3
did not find adpcm_decoder4 demangled to adpcm_decoder4
did not find adpcm_decoder5 demangled to adpcm_decoder5
did not find adpcm_decoder6 demangled to adpcm_decoder6
did not find adpcm_decoder7 demangled to adpcm_decoder7
did not find adpcm_decoder8 demangled to adpcm_decoder8
Adding main other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder other functions, ExtractedOnly mode uses other functions
Adding main0 other functions, ExtractedOnly mode uses other functions
Adding main1 other functions, ExtractedOnly mode uses other functions
Adding main2 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder0 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder1 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder2 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder3 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder4 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder5 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder6 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder7 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder8 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder9 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder10 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder0 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder1 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder2 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder3 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder4 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder5 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder6 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder7 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder8 other functions, ExtractedOnly mode uses other functions
Sensitive functions:0 other functions:26
DesiredConnectivity is :1
Other functions to be fed to the network of checkers
adpcm_decoder1
adpcm_decoder3
main1
main2
adpcm_coder5
main0
adpcm_coder6
adpcm_decoder2
main
adpcm_decoder4
adpcm_coder4
adpcm_coder7
adpcm_decoder0
adpcm_coder
adpcm_decoder6
adpcm_decoder5
adpcm_coder2
adpcm_coder3
adpcm_coder9
adpcm_decoder
adpcm_coder0
adpcm_coder10
adpcm_decoder8
adpcm_decoder7
adpcm_coder1
adpcm_coder8
***
Sensitive functions to be fed to the network of checkers
***
Sensitive functions only checked:0
DAGCheckersNetwork::getReverseTopologicalSort freed visited
Constructed the network of checkers!
Sensitive functions are never checkers as SensitiveOnlyChecked is set to:0
Dumping checkers network info
{
    "allCheckees": [],
    "topologicalsort": []
}
SC stats is requested, dumping stat file...
{
    "avgConnectivity": -nan.0,
    "desiredConnectivity": 1,
    "numberOfGuardInstructions": 0,
    "numberOfGuards": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveInstructions": 0,
    "stdConnectivity": -nan.0
}
Recieved marked functions 0
ERR. processed 26 function, while filter count is 3
Functions called in loop
Function call numbers
main -- 0
Insert hash computation
No reaching definition for: @stderr = external global %struct._IO_FILE*, align 8 off: 0
No tags were supplied to be skipped! 
'guard' metadata was found in the input bitcode
Recieved marked functions 0
Recieved filter functions 3
 Skipping function per FilterFunctionPass:main
 Skipping function per FilterFunctionPass:adpcm_coder
 Skipping function per FilterFunctionPass:adpcm_decoder
 Skipping function per FilterFunctionPass:main
 Skipping function per FilterFunctionPass:adpcm_coder
 Skipping function per FilterFunctionPass:adpcm_decoder
OH stats is requested, dumping stat file...
Processed instructions number 314
{
    "numberOfAssertCalls": 0,
    "numberOfBlocksInFunctionsWithNoDG": 0,
    "numberOfDataDependentInstructions": 0,
    "numberOfHashVariables": 1,
    "numberOfImplicitlyProtectedInstructions": 0,
    "numberOfInstructionsInFilteredFunctions": 314,
    "numberOfInstructionsInFunctionsWithNoDG": 0,
    "numberOfNonHashableBlocks": 0,
    "numberOfNonHashableInstructions": 0,
    "numberOfOHProcessedInstr": 0,
    "numberOfOtherUnprotectedInstructions": 0,
    "numberOfOtherUnprotectedLoopVariantInstructions": 0,
    "numberOfProtectedArguments": 0,
    "numberOfProtectedBlocks": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedGuardArguments": 0,
    "numberOfProtectedGuardInstructions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveBlocks": 0,
    "numberOfSensitiveFunctions": 0,
    "numberOfShortRangeAssertCalls": 0,
    "numberOfShortRangeImplicitlyProtectedInstructions": 0,
    "numberOfShortRangeProtectedArguments": 0,
    "numberOfShortRangeProtectedBlocks": 0,
    "numberOfShortRangeProtectedGuardArguments": 0,
    "numberOfShortRangeProtectedGuardInstructions": 0,
    "numberOfShortRangeProtectedInstructions": 0,
    "numberOfUnprotectedArgumentReachableInstructions": 0,
    "numberOfUnprotectedArgumentReachableLoopBlocks": 0,
    "numberOfUnprotectedDataDependentBlocks": 0,
    "numberOfUnprotectedDataDependentLoopBlocks": 0,
    "numberOfUnprotectedGlobalReachableInstructions": 0,
    "numberOfUnprotectedGlobalReachableLoopBlocks": 0,
    "numberOfUnprotectedInputDependentInstructions": 0,
    "numberOfUnprotectedLoopInstructions": 0
}
ERR. processed 0 function, while filter count is 3
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 0.2638 seconds (0.2638 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.2178 ( 83.8%)   0.0039 ( 98.7%)   0.2217 ( 84.1%)   0.2217 ( 84.0%)  runs input dependency analysis
   0.0365 ( 14.0%)   0.0000 (  0.0%)   0.0365 ( 13.8%)   0.0365 ( 13.8%)  Instruments bitcode with hashing and logging functions
   0.0013 (  0.5%)   0.0000 (  0.0%)   0.0013 (  0.5%)   0.0013 (  0.5%)  Bitcode Writer
   0.0013 (  0.5%)   0.0000 (  0.0%)   0.0013 (  0.5%)   0.0013 (  0.5%)  Instruments bitcode with guards
   0.0006 (  0.2%)   0.0000 (  0.8%)   0.0007 (  0.2%)   0.0007 (  0.2%)  Include functions in a given file in any transformation
   0.0004 (  0.2%)   0.0000 (  0.2%)   0.0005 (  0.2%)   0.0005 (  0.2%)  Dominator Tree Construction
   0.0004 (  0.2%)   0.0000 (  0.0%)   0.0004 (  0.2%)   0.0004 (  0.2%)  Module Verifier
   0.0004 (  0.2%)   0.0000 (  0.0%)   0.0004 (  0.2%)   0.0004 (  0.2%)  Call site information
   0.0003 (  0.1%)   0.0000 (  0.1%)   0.0003 (  0.1%)   0.0003 (  0.1%)  Post-Dominator Tree Construction
   0.0002 (  0.1%)   0.0000 (  0.1%)   0.0002 (  0.1%)   0.0002 (  0.1%)  Natural Loop Information
   0.0002 (  0.1%)   0.0000 (  0.0%)   0.0002 (  0.1%)   0.0002 (  0.1%)  runs indirect and virtual calls analysis
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Remove unreachable blocks from the CFG
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  CallGraph Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Marks functions in a given file as assert functions
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Dead Global Elimination
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Dominator Tree Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Natural Loop Information
   0.2598 (100.0%)   0.0040 (100.0%)   0.2638 (100.0%)   0.2638 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0017 seconds (0.0017 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.0008 (100.0%)   0.0008 (100.0%)   0.0017 (100.0%)   0.0017 (100.0%)  Parse IR
   0.0008 (100.0%)   0.0008 (100.0%)   0.0017 (100.0%)   0.0017 (100.0%)  Total

Running input dependency analysis pass
Processing function main0
Processing function adpcm_decoder0
Processing function adpcm_decoder1
Processing function adpcm_decoder2
Processing function adpcm_decoder3
Processing function adpcm_decoder4
Processing function adpcm_decoder5
Processing function adpcm_decoder6
Processing function adpcm_decoder7
Processing function adpcm_decoder8
Processing function adpcm_decoder
Processing function main1
Processing function main2
Processing function main
Processing function adpcm_coder0
Processing function adpcm_coder1
Processing function adpcm_coder2
Processing function adpcm_coder3
Processing function adpcm_coder4
Processing function adpcm_coder5
Processing function adpcm_coder6
Processing function adpcm_coder7
Processing function adpcm_coder8
Processing function adpcm_coder9
Processing function adpcm_coder10
Processing function adpcm_coder
Finalizing adpcm_coder
Finalizing adpcm_coder10
Mark Input dependent function adpcm_coder10
Finalizing adpcm_coder9
Mark Input dependent function adpcm_coder9
Finalizing adpcm_coder8
Mark Input dependent function adpcm_coder8
Finalizing adpcm_coder7
Mark Input dependent function adpcm_coder7
Finalizing adpcm_coder6
Mark Input dependent function adpcm_coder6
Finalizing adpcm_coder5
Mark Input dependent function adpcm_coder5
Finalizing adpcm_coder4
Mark Input dependent function adpcm_coder4
Finalizing adpcm_coder3
Mark Input dependent function adpcm_coder3
Finalizing adpcm_coder2
Mark Input dependent function adpcm_coder2
Finalizing adpcm_coder1
Mark Input dependent function adpcm_coder1
Finalizing adpcm_coder0
Mark Input dependent function adpcm_coder0
Finalizing main
Finalizing main2
Mark Input dependent function main2
Finalizing main1
Mark Input dependent function main1
Finalizing adpcm_decoder
Mark Input dependent function adpcm_decoder
Finalizing adpcm_decoder8
Mark Input dependent function adpcm_decoder8
Finalizing adpcm_decoder7
Mark Input dependent function adpcm_decoder7
Finalizing adpcm_decoder6
Mark Input dependent function adpcm_decoder6
Finalizing adpcm_decoder5
Mark Input dependent function adpcm_decoder5
Finalizing adpcm_decoder4
Mark Input dependent function adpcm_decoder4
Finalizing adpcm_decoder3
Mark Input dependent function adpcm_decoder3
Finalizing adpcm_decoder2
Mark Input dependent function adpcm_decoder2
Finalizing adpcm_decoder1
Mark Input dependent function adpcm_decoder1
Finalizing adpcm_decoder0
Mark Input dependent function adpcm_decoder0
Finalizing main0
Mark Input dependent function main0
Finished input dependency analysis

In  mark function pass 
In  filter function pass 
Filter file:/home/anahitik/SIP/sip-eval/combination/rawdaudio.x.bc/100/0
here!:main
here!:adpcm_coder
here!:adpcm_decoder
here!:main0
here!:main1
here!:main2
here!:adpcm_coder0
here!:adpcm_coder1
here!:adpcm_coder2
here!:adpcm_coder3
here!:adpcm_coder4
here!:adpcm_coder5
here!:adpcm_coder6
here!:adpcm_coder7
here!:adpcm_coder8
here!:adpcm_coder9
here!:adpcm_coder10
here!:adpcm_decoder0
here!:adpcm_decoder1
here!:adpcm_decoder2
here!:adpcm_decoder3
here!:adpcm_decoder4
here!:adpcm_decoder5
here!:adpcm_decoder6
here!:adpcm_decoder7
here!:adpcm_decoder8
here!:adpcm_decoder8
got filter function names
Add filter function main
FunctionInfo. Adding function:main
did not find read demangled to read
did not find perror demangled to perror
did not find exit demangled to exit
did not find write demangled to write
did not find fprintf demangled to fprintf
Add filter function adpcm_coder
FunctionInfo. Adding function:adpcm_coder
Add filter function adpcm_decoder
FunctionInfo. Adding function:adpcm_decoder
Add filter function main0
FunctionInfo. Adding function:main0
Add filter function main1
FunctionInfo. Adding function:main1
Add filter function main2
FunctionInfo. Adding function:main2
Add filter function adpcm_coder0
FunctionInfo. Adding function:adpcm_coder0
Add filter function adpcm_coder1
FunctionInfo. Adding function:adpcm_coder1
Add filter function adpcm_coder2
FunctionInfo. Adding function:adpcm_coder2
Add filter function adpcm_coder3
FunctionInfo. Adding function:adpcm_coder3
Add filter function adpcm_coder4
FunctionInfo. Adding function:adpcm_coder4
Add filter function adpcm_coder5
FunctionInfo. Adding function:adpcm_coder5
Add filter function adpcm_coder6
FunctionInfo. Adding function:adpcm_coder6
Add filter function adpcm_coder7
FunctionInfo. Adding function:adpcm_coder7
Add filter function adpcm_coder8
FunctionInfo. Adding function:adpcm_coder8
Add filter function adpcm_coder9
FunctionInfo. Adding function:adpcm_coder9
Add filter function adpcm_coder10
FunctionInfo. Adding function:adpcm_coder10
Add filter function adpcm_decoder0
FunctionInfo. Adding function:adpcm_decoder0
Add filter function adpcm_decoder1
FunctionInfo. Adding function:adpcm_decoder1
Add filter function adpcm_decoder2
FunctionInfo. Adding function:adpcm_decoder2
Add filter function adpcm_decoder3
FunctionInfo. Adding function:adpcm_decoder3
Add filter function adpcm_decoder4
FunctionInfo. Adding function:adpcm_decoder4
Add filter function adpcm_decoder5
FunctionInfo. Adding function:adpcm_decoder5
Add filter function adpcm_decoder6
FunctionInfo. Adding function:adpcm_decoder6
Add filter function adpcm_decoder7
FunctionInfo. Adding function:adpcm_decoder7
Add filter function adpcm_decoder8
FunctionInfo. Adding function:adpcm_decoder8
Adding main other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder other functions, ExtractedOnly mode uses other functions
Adding main0 other functions, ExtractedOnly mode uses other functions
Adding main1 other functions, ExtractedOnly mode uses other functions
Adding main2 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder0 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder1 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder2 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder3 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder4 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder5 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder6 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder7 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder8 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder9 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder10 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder0 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder1 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder2 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder3 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder4 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder5 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder6 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder7 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder8 other functions, ExtractedOnly mode uses other functions
Sensitive functions:0 other functions:26
DesiredConnectivity is :1
Other functions to be fed to the network of checkers
adpcm_decoder1
adpcm_decoder3
main1
main2
adpcm_coder5
main0
adpcm_coder6
adpcm_decoder2
main
adpcm_decoder4
adpcm_coder4
adpcm_coder7
adpcm_decoder0
adpcm_coder
adpcm_decoder6
adpcm_decoder5
adpcm_coder2
adpcm_coder3
adpcm_coder9
adpcm_decoder
adpcm_coder0
adpcm_coder10
adpcm_decoder8
adpcm_decoder7
adpcm_coder1
adpcm_coder8
***
Sensitive functions to be fed to the network of checkers
***
Sensitive functions only checked:0
DAGCheckersNetwork::getReverseTopologicalSort freed visited
Constructed the network of checkers!
Sensitive functions are never checkers as SensitiveOnlyChecked is set to:0
Dumping checkers network info
{
    "allCheckees": [],
    "topologicalsort": []
}
SC stats is requested, dumping stat file...
{
    "avgConnectivity": -nan.0,
    "desiredConnectivity": 1,
    "numberOfGuardInstructions": 0,
    "numberOfGuards": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveInstructions": 0,
    "stdConnectivity": -nan.0
}
Recieved marked functions 0
Functions called in loop
Function call numbers
main -- 0
Insert hash computation
No reaching definition for: @stderr = external global %struct._IO_FILE*, align 8 off: 0
No tags were supplied to be skipped! 
'guard' metadata was found in the input bitcode
Recieved marked functions 0
Recieved filter functions 26
Collecting defining blocks for main
Skip. No dependence graph for function adpcm_coder
Collecting defining blocks for adpcm_decoder
 Processing function:main
Short range hashing enabled.
Processing path: entry  while.body  if.then  
After path modifications process path is empty
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion skipped because there was no hash update in between!
Processing call instruction..
Processing path: entry  while.body  if.end  if.then2  while.end  
After path modifications process path is empty
Processing path: entry  if.then2  while.end  
After path modifications process path
entry  if.then2  while.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
No oh has been applied in the path
Processing path: entry  while.body  if.end  if.end3  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Skip. No dependence graph for function adpcm_coder
 Processing function:adpcm_decoder
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  
After path modifications process path
for.body  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
  call void @adpcm_decoder0(i32* %delta, i32* %inputbuffer), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %delta = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder0(i32* %delta, i32* %inputbuffer), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %inputbuffer = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder0(i32* %delta, i32* %inputbuffer), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.then11  
After path modifications process path
for.body  if.end  if.then11  
Hash path invariants only
Invariants are
  br label %if.end12, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %index, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.then15  
After path modifications process path
for.body  if.end  if.end12  if.then15  
Hash path invariants only
Invariants are
  br label %if.end16, !control_dep_instr !7, !data_indep_instr !11
  store i32 88, i32* %index, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.then22  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.then22  
Hash path invariants only
Invariants are
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11
  call void @adpcm_decoder2(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %vpdiff = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder2(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %step = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder2(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.end24  if.then27  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.end24  if.then27  
Hash path invariants only
Invariants are
  br label %if.end30, !control_dep_instr !7, !data_indep_instr !11
  call void @adpcm_decoder3(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %vpdiff = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder3(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %step = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder3(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.then33  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.then33  
Hash path invariants only
Invariants are
  br label %if.end36, !control_dep_instr !7, !data_indep_instr !11
  call void @adpcm_decoder4(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %vpdiff = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder4(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %step = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder4(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.then38  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.then38  
Hash path invariants only
Invariants are
  br label %if.end41, !control_dep_instr !7, !data_indep_instr !11
  call void @adpcm_decoder5(i32* %valpred, i32* %vpdiff), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %valpred = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder5(i32* %valpred, i32* %vpdiff), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %vpdiff = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder5(i32* %valpred, i32* %vpdiff), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.end41  if.then44  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.end41  if.then44  
Hash path invariants only
Invariants are
  br label %if.end50, !control_dep_instr !7, !data_indep_instr !11
  store i32 32767, i32* %valpred, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.end41  if.end50  for.inc  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.end41  if.end50  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
  call void @adpcm_decoder7(i32* %valpred, i32* %step, i16** %outp, i32* %index), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %valpred = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder7(i32* %valpred, i32* %step, i16** %outp, i32* %index), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %step = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder7(i32* %valpred, i32* %step, i16** %outp, i32* %index), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %outp = alloca i16*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder7(i32* %valpred, i32* %step, i16** %outp, i32* %index), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %index = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder7(i32* %valpred, i32* %step, i16** %outp, i32* %index), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.end41  if.else45  if.then48  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.end41  if.else45  if.then48  
Hash path invariants only
Invariants are
  br label %if.end49, !control_dep_instr !7, !data_indep_instr !11
  store i32 -32768, i32* %valpred, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.end41  if.else45  if.end49  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.end41  if.else45  if.end49  
Hash path invariants only
Invariants are
  br label %if.end50, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.else39  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.else39  
Hash path invariants only
Invariants are
  br label %if.end41, !control_dep_instr !7, !data_indep_instr !11
  call void @adpcm_decoder6(i32* %valpred, i32* %vpdiff), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %valpred = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder6(i32* %valpred, i32* %vpdiff), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %vpdiff = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder6(i32* %valpred, i32* %vpdiff), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.else  
After path modifications process path
for.body  if.else  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
  call void @adpcm_decoder1(i32* %delta, i32* %inputbuffer, i8** %inp), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %delta = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder1(i32* %delta, i32* %inputbuffer, i8** %inp), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %inputbuffer = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder1(i32* %delta, i32* %inputbuffer, i8** %inp), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %inp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder1(i32* %delta, i32* %inputbuffer, i8** %inp), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Extract path function for assertion assert_adpcm_decoder_path_0
Extract path function for assertion assert_adpcm_decoder_path_1
Extract path function for assertion assert_adpcm_decoder_path_2
Extract path function for assertion assert_adpcm_decoder_path_3
Extract path function for assertion assert_adpcm_decoder_path_4
Extract path function for assertion assert_adpcm_decoder_path_5
Extract path function for assertion assert_adpcm_decoder_path_6
Extract path function for assertion assert_adpcm_decoder_path_7
Extract path function for assertion assert_adpcm_decoder_path_8
Extract path function for assertion assert_adpcm_decoder_path_9
Extract path function for assertion assert_adpcm_decoder_path_10
Extract path function for assertion assert_adpcm_decoder_path_11
Extract path function for assertion assert_adpcm_decoder_path_12
Extract path function for assertion assert_adpcm_decoder_path_13
Extract path function for assertion assert_adpcm_decoder_path_14
Extract path function for assertion assert_adpcm_decoder_path_15
Extract path function for assertion assert_adpcm_decoder_path_16
Extract path function for assertion assert_adpcm_decoder_path_17
Extract path function for assertion assert_adpcm_decoder_path_18
Extract path function for assertion assert_adpcm_decoder_path_19
Extract path function for assertion assert_adpcm_decoder_path_20
Extract path function for assertion assert_adpcm_decoder_path_21
Extract path function for assertion assert_adpcm_decoder_path_22
Extract path function for assertion assert_adpcm_decoder_path_23
Extract path function for assertion assert_adpcm_decoder_path_24
Extract path function for assertion assert_adpcm_decoder_path_25
Extract path function for assertion assert_adpcm_decoder_path_27
OH stats is requested, dumping stat file...
Processed instructions number 313
{
    "numberOfAssertCalls": 0,
    "numberOfBlocksInFunctionsWithNoDG": 30,
    "numberOfDataDependentInstructions": 82,
    "numberOfHashVariables": 1,
    "numberOfImplicitlyProtectedInstructions": 0,
    "numberOfInstructionsInFilteredFunctions": 0,
    "numberOfInstructionsInFunctionsWithNoDG": 163,
    "numberOfNonHashableBlocks": 3,
    "numberOfNonHashableInstructions": 29,
    "numberOfOHProcessedInstr": 150,
    "numberOfOtherUnprotectedInstructions": 0,
    "numberOfOtherUnprotectedLoopVariantInstructions": 0,
    "numberOfProtectedArguments": 0,
    "numberOfProtectedBlocks": 1,
    "numberOfProtectedFunctions": 2,
    "numberOfProtectedGuardArguments": 0,
    "numberOfProtectedGuardInstructions": 0,
    "numberOfProtectedInstructions": 1,
    "numberOfSensitiveBlocks": 33,
    "numberOfSensitiveFunctions": 2,
    "numberOfShortRangeAssertCalls": 27,
    "numberOfShortRangeImplicitlyProtectedInstructions": 0,
    "numberOfShortRangeProtectedArguments": 0,
    "numberOfShortRangeProtectedBlocks": 24,
    "numberOfShortRangeProtectedGuardArguments": 0,
    "numberOfShortRangeProtectedGuardInstructions": 0,
    "numberOfShortRangeProtectedInstructions": 23,
    "numberOfUnprotectedArgumentReachableInstructions": 0,
    "numberOfUnprotectedArgumentReachableLoopBlocks": 0,
    "numberOfUnprotectedDataDependentBlocks": 0,
    "numberOfUnprotectedDataDependentLoopBlocks": 5,
    "numberOfUnprotectedGlobalReachableInstructions": 0,
    "numberOfUnprotectedGlobalReachableLoopBlocks": 0,
    "numberOfUnprotectedInputDependentInstructions": 0,
    "numberOfUnprotectedLoopInstructions": 15
}
ERR. processed 2 function, while filter count is 26
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 0.3884 seconds (0.3884 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.2297 ( 59.2%)   0.0007 ( 94.2%)   0.2303 ( 59.3%)   0.2303 ( 59.3%)  runs input dependency analysis
   0.1299 ( 33.5%)   0.0000 (  0.0%)   0.1299 ( 33.4%)   0.1299 ( 33.4%)  Instruments bitcode with hashing and logging functions
   0.0172 (  4.4%)   0.0000 (  0.0%)   0.0172 (  4.4%)   0.0171 (  4.4%)  Memory SSA
   0.0039 (  1.0%)   0.0000 (  0.0%)   0.0039 (  1.0%)   0.0039 (  1.0%)  Bitcode Writer
   0.0013 (  0.3%)   0.0000 (  0.0%)   0.0013 (  0.3%)   0.0014 (  0.4%)  Dominator Tree Construction
   0.0011 (  0.3%)   0.0000 (  0.0%)   0.0011 (  0.3%)   0.0011 (  0.3%)  Natural Loop Information
   0.0010 (  0.3%)   0.0000 (  0.0%)   0.0010 (  0.3%)   0.0010 (  0.3%)  Instruments bitcode with guards
   0.0010 (  0.2%)   0.0000 (  0.0%)   0.0010 (  0.2%)   0.0009 (  0.2%)  Module Verifier
   0.0007 (  0.2%)   0.0000 (  0.0%)   0.0007 (  0.2%)   0.0007 (  0.2%)  Include functions in a given file in any transformation
   0.0004 (  0.1%)   0.0000 (  1.9%)   0.0004 (  0.1%)   0.0004 (  0.1%)  Dominator Tree Construction
   0.0004 (  0.1%)   0.0000 (  2.7%)   0.0004 (  0.1%)   0.0004 (  0.1%)  Post-Dominator Tree Construction
   0.0003 (  0.1%)   0.0000 (  0.0%)   0.0003 (  0.1%)   0.0003 (  0.1%)  Call site information
   0.0003 (  0.1%)   0.0000 (  1.2%)   0.0003 (  0.1%)   0.0003 (  0.1%)  Natural Loop Information
   0.0002 (  0.1%)   0.0000 (  0.0%)   0.0002 (  0.1%)   0.0002 (  0.1%)  runs indirect and virtual calls analysis
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Function Alias Analysis Results
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Basic Alias Analysis (stateless AA impl)
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Remove unreachable blocks from the CFG
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Dead Global Elimination
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  CallGraph Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Marks functions in a given file as assert functions
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Dominator Tree Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Natural Loop Information
   0.3877 (100.0%)   0.0007 (100.0%)   0.3884 (100.0%)   0.3884 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0018 seconds (0.0018 wall clock)

   ---User Time---   --User+System--   ---Wall Time---  --- Name ---
   0.0018 (100.0%)   0.0018 (100.0%)   0.0018 (100.0%)  Parse IR
   0.0018 (100.0%)   0.0018 (100.0%)   0.0018 (100.0%)  Total

Running input dependency analysis pass
Processing function main0
Processing function adpcm_decoder0
Processing function adpcm_decoder1
Processing function adpcm_decoder2
Processing function adpcm_decoder3
Processing function adpcm_decoder4
Processing function adpcm_decoder5
Processing function adpcm_decoder6
Processing function adpcm_decoder7
Processing function adpcm_decoder8
Processing function adpcm_decoder
Processing function main1
Processing function main2
Processing function main
Processing function adpcm_coder0
Processing function adpcm_coder1
Processing function adpcm_coder2
Processing function adpcm_coder3
Processing function adpcm_coder4
Processing function adpcm_coder5
Processing function adpcm_coder6
Processing function adpcm_coder7
Processing function adpcm_coder8
Processing function adpcm_coder9
Processing function adpcm_coder10
Processing function adpcm_coder
Finalizing adpcm_coder
Finalizing adpcm_coder10
Mark Input dependent function adpcm_coder10
Finalizing adpcm_coder9
Mark Input dependent function adpcm_coder9
Finalizing adpcm_coder8
Mark Input dependent function adpcm_coder8
Finalizing adpcm_coder7
Mark Input dependent function adpcm_coder7
Finalizing adpcm_coder6
Mark Input dependent function adpcm_coder6
Finalizing adpcm_coder5
Mark Input dependent function adpcm_coder5
Finalizing adpcm_coder4
Mark Input dependent function adpcm_coder4
Finalizing adpcm_coder3
Mark Input dependent function adpcm_coder3
Finalizing adpcm_coder2
Mark Input dependent function adpcm_coder2
Finalizing adpcm_coder1
Mark Input dependent function adpcm_coder1
Finalizing adpcm_coder0
Mark Input dependent function adpcm_coder0
Finalizing main
Finalizing main2
Mark Input dependent function main2
Finalizing main1
Mark Input dependent function main1
Finalizing adpcm_decoder
Mark Input dependent function adpcm_decoder
Finalizing adpcm_decoder8
Mark Input dependent function adpcm_decoder8
Finalizing adpcm_decoder7
Mark Input dependent function adpcm_decoder7
Finalizing adpcm_decoder6
Mark Input dependent function adpcm_decoder6
Finalizing adpcm_decoder5
Mark Input dependent function adpcm_decoder5
Finalizing adpcm_decoder4
Mark Input dependent function adpcm_decoder4
Finalizing adpcm_decoder3
Mark Input dependent function adpcm_decoder3
Finalizing adpcm_decoder2
Mark Input dependent function adpcm_decoder2
Finalizing adpcm_decoder1
Mark Input dependent function adpcm_decoder1
Finalizing adpcm_decoder0
Mark Input dependent function adpcm_decoder0
Finalizing main0
Mark Input dependent function main0
Finished input dependency analysis

In  mark function pass 
In  filter function pass 
Filter file:/home/anahitik/SIP/sip-eval/combination/rawdaudio.x.bc/25/0
here!:adpcm_decoder1
here!:main0
here!:adpcm_coder9
here!:adpcm_coder3
here!:main2
here!:adpcm_coder2
here!:adpcm_decoder7
here!:adpcm_decoder7
got filter function names
did not find main demangled to main
did not find read demangled to read
did not find perror demangled to perror
did not find exit demangled to exit
did not find write demangled to write
did not find fprintf demangled to fprintf
did not find adpcm_coder demangled to adpcm_coder
did not find adpcm_decoder demangled to adpcm_decoder
Add filter function main0
FunctionInfo. Adding function:main0
did not find main1 demangled to main1
Add filter function main2
FunctionInfo. Adding function:main2
did not find adpcm_coder0 demangled to adpcm_coder0
did not find adpcm_coder1 demangled to adpcm_coder1
Add filter function adpcm_coder2
FunctionInfo. Adding function:adpcm_coder2
Add filter function adpcm_coder3
FunctionInfo. Adding function:adpcm_coder3
did not find adpcm_coder4 demangled to adpcm_coder4
did not find adpcm_coder5 demangled to adpcm_coder5
did not find adpcm_coder6 demangled to adpcm_coder6
did not find adpcm_coder7 demangled to adpcm_coder7
did not find adpcm_coder8 demangled to adpcm_coder8
Add filter function adpcm_coder9
FunctionInfo. Adding function:adpcm_coder9
did not find adpcm_coder10 demangled to adpcm_coder10
did not find adpcm_decoder0 demangled to adpcm_decoder0
Add filter function adpcm_decoder1
FunctionInfo. Adding function:adpcm_decoder1
did not find adpcm_decoder2 demangled to adpcm_decoder2
did not find adpcm_decoder3 demangled to adpcm_decoder3
did not find adpcm_decoder4 demangled to adpcm_decoder4
did not find adpcm_decoder5 demangled to adpcm_decoder5
did not find adpcm_decoder6 demangled to adpcm_decoder6
Add filter function adpcm_decoder7
FunctionInfo. Adding function:adpcm_decoder7
did not find adpcm_decoder8 demangled to adpcm_decoder8
Adding main other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder other functions, ExtractedOnly mode uses other functions
Adding main0 other functions, ExtractedOnly mode uses other functions
Adding main1 other functions, ExtractedOnly mode uses other functions
Adding main2 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder0 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder1 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder2 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder3 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder4 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder5 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder6 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder7 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder8 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder9 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder10 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder0 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder1 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder2 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder3 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder4 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder5 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder6 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder7 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder8 other functions, ExtractedOnly mode uses other functions
Sensitive functions:0 other functions:26
DesiredConnectivity is :1
Other functions to be fed to the network of checkers
adpcm_decoder1
adpcm_decoder3
main1
main2
adpcm_coder5
main0
adpcm_coder6
adpcm_decoder2
main
adpcm_decoder4
adpcm_coder4
adpcm_coder7
adpcm_decoder0
adpcm_coder
adpcm_decoder6
adpcm_decoder5
adpcm_coder2
adpcm_coder3
adpcm_coder9
adpcm_decoder
adpcm_coder0
adpcm_coder10
adpcm_decoder8
adpcm_decoder7
adpcm_coder1
adpcm_coder8
***
Sensitive functions to be fed to the network of checkers
***
Sensitive functions only checked:0
DAGCheckersNetwork::getReverseTopologicalSort freed visited
Constructed the network of checkers!
Sensitive functions are never checkers as SensitiveOnlyChecked is set to:0
Dumping checkers network info
{
    "allCheckees": [],
    "topologicalsort": []
}
SC stats is requested, dumping stat file...
{
    "avgConnectivity": -nan.0,
    "desiredConnectivity": 1,
    "numberOfGuardInstructions": 0,
    "numberOfGuards": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveInstructions": 0,
    "stdConnectivity": -nan.0
}
Recieved marked functions 0
ERR. processed 26 function, while filter count is 7
Functions called in loop
Function call numbers
main -- 0
Insert hash computation
No reaching definition for: @stderr = external global %struct._IO_FILE*, align 8 off: 0
No tags were supplied to be skipped! 
'guard' metadata was found in the input bitcode
Recieved marked functions 0
Recieved filter functions 7
 Skipping function per FilterFunctionPass:main
 Skipping function per FilterFunctionPass:adpcm_coder
 Skipping function per FilterFunctionPass:adpcm_decoder
 Skipping function per FilterFunctionPass:main
 Skipping function per FilterFunctionPass:adpcm_coder
 Skipping function per FilterFunctionPass:adpcm_decoder
OH stats is requested, dumping stat file...
Processed instructions number 314
{
    "numberOfAssertCalls": 0,
    "numberOfBlocksInFunctionsWithNoDG": 0,
    "numberOfDataDependentInstructions": 0,
    "numberOfHashVariables": 1,
    "numberOfImplicitlyProtectedInstructions": 0,
    "numberOfInstructionsInFilteredFunctions": 314,
    "numberOfInstructionsInFunctionsWithNoDG": 0,
    "numberOfNonHashableBlocks": 0,
    "numberOfNonHashableInstructions": 0,
    "numberOfOHProcessedInstr": 0,
    "numberOfOtherUnprotectedInstructions": 0,
    "numberOfOtherUnprotectedLoopVariantInstructions": 0,
    "numberOfProtectedArguments": 0,
    "numberOfProtectedBlocks": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedGuardArguments": 0,
    "numberOfProtectedGuardInstructions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveBlocks": 0,
    "numberOfSensitiveFunctions": 0,
    "numberOfShortRangeAssertCalls": 0,
    "numberOfShortRangeImplicitlyProtectedInstructions": 0,
    "numberOfShortRangeProtectedArguments": 0,
    "numberOfShortRangeProtectedBlocks": 0,
    "numberOfShortRangeProtectedGuardArguments": 0,
    "numberOfShortRangeProtectedGuardInstructions": 0,
    "numberOfShortRangeProtectedInstructions": 0,
    "numberOfUnprotectedArgumentReachableInstructions": 0,
    "numberOfUnprotectedArgumentReachableLoopBlocks": 0,
    "numberOfUnprotectedDataDependentBlocks": 0,
    "numberOfUnprotectedDataDependentLoopBlocks": 0,
    "numberOfUnprotectedGlobalReachableInstructions": 0,
    "numberOfUnprotectedGlobalReachableLoopBlocks": 0,
    "numberOfUnprotectedInputDependentInstructions": 0,
    "numberOfUnprotectedLoopInstructions": 0
}
ERR. processed 0 function, while filter count is 7
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 0.3154 seconds (0.3163 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.2660 ( 86.4%)   0.0033 ( 44.7%)   0.2694 ( 85.4%)   0.2702 ( 85.4%)  runs input dependency analysis
   0.0357 ( 11.6%)   0.0038 ( 50.4%)   0.0395 ( 12.5%)   0.0395 ( 12.5%)  Instruments bitcode with hashing and logging functions
   0.0015 (  0.5%)   0.0001 (  1.0%)   0.0015 (  0.5%)   0.0015 (  0.5%)  Bitcode Writer
   0.0012 (  0.4%)   0.0000 (  0.0%)   0.0012 (  0.4%)   0.0012 (  0.4%)  Include functions in a given file in any transformation
   0.0011 (  0.4%)   0.0000 (  0.0%)   0.0011 (  0.4%)   0.0011 (  0.3%)  Instruments bitcode with guards
   0.0005 (  0.2%)   0.0000 (  0.3%)   0.0006 (  0.2%)   0.0006 (  0.2%)  Dominator Tree Construction
   0.0005 (  0.2%)   0.0000 (  0.3%)   0.0005 (  0.2%)   0.0005 (  0.2%)  Module Verifier
   0.0005 (  0.1%)   0.0000 (  0.3%)   0.0005 (  0.1%)   0.0005 (  0.1%)  Post-Dominator Tree Construction
   0.0004 (  0.1%)   0.0000 (  0.0%)   0.0004 (  0.1%)   0.0004 (  0.1%)  Call site information
   0.0003 (  0.1%)   0.0000 (  0.1%)   0.0003 (  0.1%)   0.0003 (  0.1%)  Natural Loop Information
   0.0001 (  0.0%)   0.0002 (  2.1%)   0.0002 (  0.1%)   0.0002 (  0.1%)  runs indirect and virtual calls analysis
   0.0000 (  0.0%)   0.0000 (  0.3%)   0.0000 (  0.0%)   0.0001 (  0.0%)  CallGraph Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Remove unreachable blocks from the CFG
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Marks functions in a given file as assert functions
   0.0000 (  0.0%)   0.0000 (  0.3%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Dead Global Elimination
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Dominator Tree Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Natural Loop Information
   0.3080 (100.0%)   0.0075 (100.0%)   0.3154 (100.0%)   0.3163 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0022 seconds (0.0022 wall clock)

   ---User Time---   --User+System--   ---Wall Time---  --- Name ---
   0.0022 (100.0%)   0.0022 (100.0%)   0.0022 (100.0%)  Parse IR
   0.0022 (100.0%)   0.0022 (100.0%)   0.0022 (100.0%)  Total

Running input dependency analysis pass
Processing function main0
Processing function adpcm_decoder0
Processing function adpcm_decoder1
Processing function adpcm_decoder2
Processing function adpcm_decoder3
Processing function adpcm_decoder4
Processing function adpcm_decoder5
Processing function adpcm_decoder6
Processing function adpcm_decoder7
Processing function adpcm_decoder8
Processing function adpcm_decoder
Processing function main1
Processing function main2
Processing function main
Processing function adpcm_coder0
Processing function adpcm_coder1
Processing function adpcm_coder2
Processing function adpcm_coder3
Processing function adpcm_coder4
Processing function adpcm_coder5
Processing function adpcm_coder6
Processing function adpcm_coder7
Processing function adpcm_coder8
Processing function adpcm_coder9
Processing function adpcm_coder10
Processing function adpcm_coder
Finalizing adpcm_coder
Finalizing adpcm_coder10
Mark Input dependent function adpcm_coder10
Finalizing adpcm_coder9
Mark Input dependent function adpcm_coder9
Finalizing adpcm_coder8
Mark Input dependent function adpcm_coder8
Finalizing adpcm_coder7
Mark Input dependent function adpcm_coder7
Finalizing adpcm_coder6
Mark Input dependent function adpcm_coder6
Finalizing adpcm_coder5
Mark Input dependent function adpcm_coder5
Finalizing adpcm_coder4
Mark Input dependent function adpcm_coder4
Finalizing adpcm_coder3
Mark Input dependent function adpcm_coder3
Finalizing adpcm_coder2
Mark Input dependent function adpcm_coder2
Finalizing adpcm_coder1
Mark Input dependent function adpcm_coder1
Finalizing adpcm_coder0
Mark Input dependent function adpcm_coder0
Finalizing main
Finalizing main2
Mark Input dependent function main2
Finalizing main1
Mark Input dependent function main1
Finalizing adpcm_decoder
Mark Input dependent function adpcm_decoder
Finalizing adpcm_decoder8
Mark Input dependent function adpcm_decoder8
Finalizing adpcm_decoder7
Mark Input dependent function adpcm_decoder7
Finalizing adpcm_decoder6
Mark Input dependent function adpcm_decoder6
Finalizing adpcm_decoder5
Mark Input dependent function adpcm_decoder5
Finalizing adpcm_decoder4
Mark Input dependent function adpcm_decoder4
Finalizing adpcm_decoder3
Mark Input dependent function adpcm_decoder3
Finalizing adpcm_decoder2
Mark Input dependent function adpcm_decoder2
Finalizing adpcm_decoder1
Mark Input dependent function adpcm_decoder1
Finalizing adpcm_decoder0
Mark Input dependent function adpcm_decoder0
Finalizing main0
Mark Input dependent function main0
Finished input dependency analysis

In  mark function pass 
In  filter function pass 
Filter file:/home/anahitik/SIP/sip-eval/combination/rawdaudio.x.bc/50/0
here!:adpcm_decoder1
here!:main0
here!:adpcm_coder9
here!:adpcm_coder3
here!:main2
here!:adpcm_coder2
here!:adpcm_decoder7
here!:adpcm_decoder8
here!:adpcm_decoder6
here!:adpcm_decoder5
here!:adpcm_decoder
here!:adpcm_coder7
here!:main
here!:main
got filter function names
Add filter function main
FunctionInfo. Adding function:main
did not find read demangled to read
did not find perror demangled to perror
did not find exit demangled to exit
did not find write demangled to write
did not find fprintf demangled to fprintf
did not find adpcm_coder demangled to adpcm_coder
Add filter function adpcm_decoder
FunctionInfo. Adding function:adpcm_decoder
Add filter function main0
FunctionInfo. Adding function:main0
did not find main1 demangled to main1
Add filter function main2
FunctionInfo. Adding function:main2
did not find adpcm_coder0 demangled to adpcm_coder0
did not find adpcm_coder1 demangled to adpcm_coder1
Add filter function adpcm_coder2
FunctionInfo. Adding function:adpcm_coder2
Add filter function adpcm_coder3
FunctionInfo. Adding function:adpcm_coder3
did not find adpcm_coder4 demangled to adpcm_coder4
did not find adpcm_coder5 demangled to adpcm_coder5
did not find adpcm_coder6 demangled to adpcm_coder6
Add filter function adpcm_coder7
FunctionInfo. Adding function:adpcm_coder7
did not find adpcm_coder8 demangled to adpcm_coder8
Add filter function adpcm_coder9
FunctionInfo. Adding function:adpcm_coder9
did not find adpcm_coder10 demangled to adpcm_coder10
did not find adpcm_decoder0 demangled to adpcm_decoder0
Add filter function adpcm_decoder1
FunctionInfo. Adding function:adpcm_decoder1
did not find adpcm_decoder2 demangled to adpcm_decoder2
did not find adpcm_decoder3 demangled to adpcm_decoder3
did not find adpcm_decoder4 demangled to adpcm_decoder4
Add filter function adpcm_decoder5
FunctionInfo. Adding function:adpcm_decoder5
Add filter function adpcm_decoder6
FunctionInfo. Adding function:adpcm_decoder6
Add filter function adpcm_decoder7
FunctionInfo. Adding function:adpcm_decoder7
Add filter function adpcm_decoder8
FunctionInfo. Adding function:adpcm_decoder8
Adding main other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder other functions, ExtractedOnly mode uses other functions
Adding main0 other functions, ExtractedOnly mode uses other functions
Adding main1 other functions, ExtractedOnly mode uses other functions
Adding main2 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder0 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder1 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder2 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder3 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder4 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder5 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder6 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder7 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder8 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder9 other functions, ExtractedOnly mode uses other functions
Adding adpcm_coder10 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder0 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder1 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder2 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder3 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder4 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder5 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder6 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder7 other functions, ExtractedOnly mode uses other functions
Adding adpcm_decoder8 other functions, ExtractedOnly mode uses other functions
Sensitive functions:0 other functions:26
DesiredConnectivity is :1
Other functions to be fed to the network of checkers
adpcm_decoder1
adpcm_decoder3
main1
main2
adpcm_coder5
main0
adpcm_coder6
adpcm_decoder2
main
adpcm_decoder4
adpcm_coder4
adpcm_coder7
adpcm_decoder0
adpcm_coder
adpcm_decoder6
adpcm_decoder5
adpcm_coder2
adpcm_coder3
adpcm_coder9
adpcm_decoder
adpcm_coder0
adpcm_coder10
adpcm_decoder8
adpcm_decoder7
adpcm_coder1
adpcm_coder8
***
Sensitive functions to be fed to the network of checkers
***
Sensitive functions only checked:0
DAGCheckersNetwork::getReverseTopologicalSort freed visited
Constructed the network of checkers!
Sensitive functions are never checkers as SensitiveOnlyChecked is set to:0
Dumping checkers network info
{
    "allCheckees": [],
    "topologicalsort": []
}
SC stats is requested, dumping stat file...
{
    "avgConnectivity": -nan.0,
    "desiredConnectivity": 1,
    "numberOfGuardInstructions": 0,
    "numberOfGuards": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveInstructions": 0,
    "stdConnectivity": -nan.0
}
Recieved marked functions 0
ERR. processed 26 function, while filter count is 13
Functions called in loop
Function call numbers
main -- 0
Insert hash computation
No reaching definition for: @stderr = external global %struct._IO_FILE*, align 8 off: 0
No tags were supplied to be skipped! 
'guard' metadata was found in the input bitcode
Recieved marked functions 0
Recieved filter functions 13
Collecting defining blocks for main
 Skipping function per FilterFunctionPass:adpcm_coder
Collecting defining blocks for adpcm_decoder
 Processing function:main
Short range hashing enabled.
Processing path: entry  while.body  if.then  
After path modifications process path is empty
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion skipped because there was no hash update in between!
Processing call instruction..
Processing path: entry  while.body  if.end  if.then2  while.end  
After path modifications process path is empty
Processing path: entry  if.then2  while.end  
After path modifications process path
entry  if.then2  while.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
No oh has been applied in the path
Processing path: entry  while.body  if.end  if.end3  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
 Skipping function per FilterFunctionPass:adpcm_coder
 Processing function:adpcm_decoder
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  
After path modifications process path
for.body  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
  call void @adpcm_decoder0(i32* %delta, i32* %inputbuffer), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %delta = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder0(i32* %delta, i32* %inputbuffer), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %inputbuffer = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder0(i32* %delta, i32* %inputbuffer), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.then11  
After path modifications process path
for.body  if.end  if.then11  
Hash path invariants only
Invariants are
  br label %if.end12, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %index, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.then15  
After path modifications process path
for.body  if.end  if.end12  if.then15  
Hash path invariants only
Invariants are
  br label %if.end16, !control_dep_instr !7, !data_indep_instr !11
  store i32 88, i32* %index, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.then22  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.then22  
Hash path invariants only
Invariants are
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11
  call void @adpcm_decoder2(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %vpdiff = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder2(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %step = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder2(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.end24  if.then27  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.end24  if.then27  
Hash path invariants only
Invariants are
  br label %if.end30, !control_dep_instr !7, !data_indep_instr !11
  call void @adpcm_decoder3(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %vpdiff = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder3(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %step = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder3(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.then33  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.then33  
Hash path invariants only
Invariants are
  br label %if.end36, !control_dep_instr !7, !data_indep_instr !11
  call void @adpcm_decoder4(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %vpdiff = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder4(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %step = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder4(i32* %vpdiff, i32* %step), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.then38  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.then38  
Hash path invariants only
Invariants are
  br label %if.end41, !control_dep_instr !7, !data_indep_instr !11
  call void @adpcm_decoder5(i32* %valpred, i32* %vpdiff), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %valpred = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder5(i32* %valpred, i32* %vpdiff), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %vpdiff = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder5(i32* %valpred, i32* %vpdiff), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.end41  if.then44  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.end41  if.then44  
Hash path invariants only
Invariants are
  br label %if.end50, !control_dep_instr !7, !data_indep_instr !11
  store i32 32767, i32* %valpred, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.end41  if.end50  for.inc  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.end41  if.end50  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
  call void @adpcm_decoder7(i32* %valpred, i32* %step, i16** %outp, i32* %index), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %valpred = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder7(i32* %valpred, i32* %step, i16** %outp, i32* %index), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %step = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder7(i32* %valpred, i32* %step, i16** %outp, i32* %index), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %outp = alloca i16*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder7(i32* %valpred, i32* %step, i16** %outp, i32* %index), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %index = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder7(i32* %valpred, i32* %step, i16** %outp, i32* %index), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.end41  if.else45  if.then48  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.end41  if.else45  if.then48  
Hash path invariants only
Invariants are
  br label %if.end49, !control_dep_instr !7, !data_indep_instr !11
  store i32 -32768, i32* %valpred, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.end41  if.else45  if.end49  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.end41  if.else45  if.end49  
Hash path invariants only
Invariants are
  br label %if.end50, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.else39  
After path modifications process path
for.body  if.end  if.end12  if.end16  if.end24  if.end30  if.end36  if.else39  
Hash path invariants only
Invariants are
  br label %if.end41, !control_dep_instr !7, !data_indep_instr !11
  call void @adpcm_decoder6(i32* %valpred, i32* %vpdiff), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %valpred = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder6(i32* %valpred, i32* %vpdiff), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %vpdiff = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder6(i32* %valpred, i32* %vpdiff), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.else  
After path modifications process path
for.body  if.else  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
  call void @adpcm_decoder1(i32* %delta, i32* %inputbuffer, i8** %inp), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %delta = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder1(i32* %delta, i32* %inputbuffer, i8** %inp), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %inputbuffer = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder1(i32* %delta, i32* %inputbuffer, i8** %inp), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %inp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @adpcm_decoder1(i32* %delta, i32* %inputbuffer, i8** %inp), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Extract path function for assertion assert_adpcm_decoder_path_0
Extract path function for assertion assert_adpcm_decoder_path_1
Extract path function for assertion assert_adpcm_decoder_path_2
Extract path function for assertion assert_adpcm_decoder_path_3
Extract path function for assertion assert_adpcm_decoder_path_4
Extract path function for assertion assert_adpcm_decoder_path_5
Extract path function for assertion assert_adpcm_decoder_path_6
Extract path function for assertion assert_adpcm_decoder_path_7
Extract path function for assertion assert_adpcm_decoder_path_8
Extract path function for assertion assert_adpcm_decoder_path_9
Extract path function for assertion assert_adpcm_decoder_path_10
Extract path function for assertion assert_adpcm_decoder_path_11
Extract path function for assertion assert_adpcm_decoder_path_12
Extract path function for assertion assert_adpcm_decoder_path_13
Extract path function for assertion assert_adpcm_decoder_path_14
Extract path function for assertion assert_adpcm_decoder_path_15
Extract path function for assertion assert_adpcm_decoder_path_16
Extract path function for assertion assert_adpcm_decoder_path_17
Extract path function for assertion assert_adpcm_decoder_path_18
Extract path function for assertion assert_adpcm_decoder_path_19
Extract path function for assertion assert_adpcm_decoder_path_20
Extract path function for assertion assert_adpcm_decoder_path_21
Extract path function for assertion assert_adpcm_decoder_path_22
Extract path function for assertion assert_adpcm_decoder_path_23
Extract path function for assertion assert_adpcm_decoder_path_24
Extract path function for assertion assert_adpcm_decoder_path_25
Extract path function for assertion assert_adpcm_decoder_path_27
OH stats is requested, dumping stat file...
Processed instructions number 313
{
    "numberOfAssertCalls": 0,
    "numberOfBlocksInFunctionsWithNoDG": 0,
    "numberOfDataDependentInstructions": 82,
    "numberOfHashVariables": 1,
    "numberOfImplicitlyProtectedInstructions": 0,
    "numberOfInstructionsInFilteredFunctions": 163,
    "numberOfInstructionsInFunctionsWithNoDG": 0,
    "numberOfNonHashableBlocks": 3,
    "numberOfNonHashableInstructions": 29,
    "numberOfOHProcessedInstr": 150,
    "numberOfOtherUnprotectedInstructions": 0,
    "numberOfOtherUnprotectedLoopVariantInstructions": 0,
    "numberOfProtectedArguments": 0,
    "numberOfProtectedBlocks": 1,
    "numberOfProtectedFunctions": 2,
    "numberOfProtectedGuardArguments": 0,
    "numberOfProtectedGuardInstructions": 0,
    "numberOfProtectedInstructions": 1,
    "numberOfSensitiveBlocks": 33,
    "numberOfSensitiveFunctions": 2,
    "numberOfShortRangeAssertCalls": 27,
    "numberOfShortRangeImplicitlyProtectedInstructions": 0,
    "numberOfShortRangeProtectedArguments": 0,
    "numberOfShortRangeProtectedBlocks": 24,
    "numberOfShortRangeProtectedGuardArguments": 0,
    "numberOfShortRangeProtectedGuardInstructions": 0,
    "numberOfShortRangeProtectedInstructions": 23,
    "numberOfUnprotectedArgumentReachableInstructions": 0,
    "numberOfUnprotectedArgumentReachableLoopBlocks": 0,
    "numberOfUnprotectedDataDependentBlocks": 0,
    "numberOfUnprotectedDataDependentLoopBlocks": 5,
    "numberOfUnprotectedGlobalReachableInstructions": 0,
    "numberOfUnprotectedGlobalReachableLoopBlocks": 0,
    "numberOfUnprotectedInputDependentInstructions": 0,
    "numberOfUnprotectedLoopInstructions": 15
}
ERR. processed 2 function, while filter count is 13
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 0.4803 seconds (0.4831 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.2884 ( 61.3%)   0.0039 ( 39.3%)   0.2923 ( 60.8%)   0.2929 ( 60.6%)  runs input dependency analysis
   0.1528 ( 32.5%)   0.0040 ( 40.8%)   0.1568 ( 32.6%)   0.1583 ( 32.8%)  Instruments bitcode with hashing and logging functions
   0.0171 (  3.6%)   0.0015 ( 15.2%)   0.0186 (  3.9%)   0.0188 (  3.9%)  Memory SSA
   0.0035 (  0.7%)   0.0000 (  0.0%)   0.0035 (  0.7%)   0.0036 (  0.7%)  Bitcode Writer
   0.0016 (  0.3%)   0.0000 (  0.0%)   0.0016 (  0.3%)   0.0019 (  0.4%)  Instruments bitcode with guards
   0.0015 (  0.3%)   0.0001 (  1.5%)   0.0016 (  0.3%)   0.0017 (  0.4%)  Dominator Tree Construction
   0.0012 (  0.2%)   0.0001 (  1.0%)   0.0013 (  0.3%)   0.0012 (  0.3%)  Natural Loop Information
   0.0010 (  0.2%)   0.0000 (  0.0%)   0.0010 (  0.2%)   0.0010 (  0.2%)  Module Verifier
   0.0009 (  0.2%)   0.0000 (  0.4%)   0.0009 (  0.2%)   0.0009 (  0.2%)  Include functions in a given file in any transformation
   0.0006 (  0.1%)   0.0000 (  0.0%)   0.0006 (  0.1%)   0.0006 (  0.1%)  Call site information
   0.0004 (  0.1%)   0.0000 (  0.1%)   0.0004 (  0.1%)   0.0005 (  0.1%)  Dominator Tree Construction
   0.0004 (  0.1%)   0.0000 (  0.0%)   0.0004 (  0.1%)   0.0004 (  0.1%)  runs indirect and virtual calls analysis
   0.0004 (  0.1%)   0.0000 (  0.1%)   0.0004 (  0.1%)   0.0004 (  0.1%)  Post-Dominator Tree Construction
   0.0003 (  0.1%)   0.0000 (  0.1%)   0.0003 (  0.1%)   0.0003 (  0.1%)  Natural Loop Information
   0.0001 (  0.0%)   0.0000 (  0.1%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Function Alias Analysis Results
   0.0001 (  0.0%)   0.0000 (  0.1%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Basic Alias Analysis (stateless AA impl)
   0.0000 (  0.0%)   0.0001 (  0.7%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Remove unreachable blocks from the CFG
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  CallGraph Construction
   0.0000 (  0.0%)   0.0001 (  0.6%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Dead Global Elimination
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Marks functions in a given file as assert functions
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Dominator Tree Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Natural Loop Information
   0.4704 (100.0%)   0.0099 (100.0%)   0.4803 (100.0%)   0.4831 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0019 seconds (0.0019 wall clock)

   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.0019 (100.0%)   0.0019 (100.0%)   0.0019 (100.0%)  Parse IR
   0.0019 (100.0%)   0.0019 (100.0%)   0.0019 (100.0%)  Total

