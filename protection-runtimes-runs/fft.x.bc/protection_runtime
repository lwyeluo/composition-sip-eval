Running input dependency analysis pass
Processing function main0
Processing function main1
Processing function main2
Processing function main3
Processing function main4
Processing function main5
Processing function main6
Processing function main7
Processing function main8
Processing function main9
Processing function main10
Processing function main11
Processing function main12
Processing function main13
Processing function main14
Processing function main15
Processing function main
Processing function IsPowerOfTwo
Processing function NumberOfBitsNeeded0
Processing function NumberOfBitsNeeded1
Processing function NumberOfBitsNeeded
Processing function ReverseBits0
Processing function ReverseBits1
Processing function ReverseBits
Processing function Index_to_frequency0
Processing function Index_to_frequency1
Processing function Index_to_frequency
Processing function fft_float0
Processing function fft_float1
Processing function CheckPointer0
Processing function CheckPointer
Processing function fft_float2
Processing function fft_float3
Processing function fft_float4
Processing function fft_float5
Processing function fft_float6
Processing function fft_float7
Processing function fft_float8
Processing function fft_float9
Processing function fft_float10
Processing function fft_float11
Processing function fft_float
Finalizing fft_float
Finalizing fft_float11
Mark Input dependent function fft_float11
Finalizing fft_float10
Mark Input dependent function fft_float10
Finalizing fft_float9
Mark Input dependent function fft_float9
Finalizing fft_float8
Mark Input dependent function fft_float8
Finalizing fft_float7
Mark Input dependent function fft_float7
Finalizing fft_float6
Mark Input dependent function fft_float6
Finalizing fft_float5
Mark Input dependent function fft_float5
Finalizing fft_float4
Mark Input dependent function fft_float4
Finalizing fft_float3
Mark Input dependent function fft_float3
Finalizing fft_float2
Mark Input dependent function fft_float2
Finalizing CheckPointer
Mark Input dependent function CheckPointer
Finalizing CheckPointer0
Mark Input dependent function CheckPointer0
Finalizing fft_float1
Mark Input dependent function fft_float1
Finalizing fft_float0
Finalizing Index_to_frequency
Finalizing Index_to_frequency1
Mark Input dependent function Index_to_frequency1
Finalizing Index_to_frequency0
Mark Input dependent function Index_to_frequency0
Finalizing ReverseBits
Mark Input dependent function ReverseBits
Finalizing ReverseBits1
Mark Input dependent function ReverseBits1
Finalizing ReverseBits0
Mark Input dependent function ReverseBits0
Finalizing NumberOfBitsNeeded
Mark Input dependent function NumberOfBitsNeeded
Finalizing NumberOfBitsNeeded1
Mark Input dependent function NumberOfBitsNeeded1
Finalizing NumberOfBitsNeeded0
Mark Input dependent function NumberOfBitsNeeded0
Finalizing IsPowerOfTwo
Finalizing main
Finalizing main15
Mark Input dependent function main15
Finalizing main14
Mark Input dependent function main14
Finalizing main13
Mark Input dependent function main13
Finalizing main12
Mark Input dependent function main12
Finalizing main11
Mark Input dependent function main11
Finalizing main10
Mark Input dependent function main10
Finalizing main9
Mark Input dependent function main9
Finalizing main8
Mark Input dependent function main8
Finalizing main7
Mark Input dependent function main7
Finalizing main6
Mark Input dependent function main6
Finalizing main5
Mark Input dependent function main5
Finalizing main4
Mark Input dependent function main4
Finalizing main3
Mark Input dependent function main3
Finalizing main2
Mark Input dependent function main2
Finalizing main1
Mark Input dependent function main1
Finalizing main0
Mark Input dependent function main0
Finished input dependency analysis

In  mark function pass 
In  filter function pass 
Filter file:/home/anahitik/SIP/sip-eval/combination/fft.x.bc/10/0
here!:main1
here!:Index_to_frequency0
here!:fft_float
here!:fft_float0
here!:fft_float0
got filter function names
did not find main demangled to main
did not find printf demangled to printf
did not find exit demangled to exit
did not find strncmp demangled to strncmp
did not find atoi demangled to atoi
did not find srand demangled to srand
did not find malloc demangled to malloc
did not find rand demangled to rand
did not find cos demangled to cos
did not find sin demangled to sin
did not find free demangled to free
did not find IsPowerOfTwo demangled to IsPowerOfTwo
did not find NumberOfBitsNeeded demangled to NumberOfBitsNeeded
did not find fprintf demangled to fprintf
did not find ReverseBits demangled to ReverseBits
did not find Index_to_frequency demangled to Index_to_frequency
Add filter function fft_float
FunctionInfo. Adding function:fft_float
did not find CheckPointer demangled to CheckPointer
did not find main0 demangled to main0
Add filter function main1
FunctionInfo. Adding function:main1
did not find main2 demangled to main2
did not find main3 demangled to main3
did not find main4 demangled to main4
did not find main5 demangled to main5
did not find main6 demangled to main6
did not find main7 demangled to main7
did not find main8 demangled to main8
did not find main9 demangled to main9
did not find main10 demangled to main10
did not find main11 demangled to main11
did not find main12 demangled to main12
did not find main13 demangled to main13
did not find main14 demangled to main14
did not find main15 demangled to main15
did not find NumberOfBitsNeeded0 demangled to NumberOfBitsNeeded0
did not find NumberOfBitsNeeded1 demangled to NumberOfBitsNeeded1
did not find ReverseBits0 demangled to ReverseBits0
did not find ReverseBits1 demangled to ReverseBits1
Add filter function Index_to_frequency0
FunctionInfo. Adding function:Index_to_frequency0
did not find Index_to_frequency1 demangled to Index_to_frequency1
Add filter function fft_float0
FunctionInfo. Adding function:fft_float0
did not find fft_float1 demangled to fft_float1
did not find fft_float2 demangled to fft_float2
did not find fft_float3 demangled to fft_float3
did not find fft_float4 demangled to fft_float4
did not find fft_float5 demangled to fft_float5
did not find fft_float6 demangled to fft_float6
did not find fft_float7 demangled to fft_float7
did not find fft_float8 demangled to fft_float8
did not find fft_float9 demangled to fft_float9
did not find fft_float10 demangled to fft_float10
did not find fft_float11 demangled to fft_float11
did not find CheckPointer0 demangled to CheckPointer0
Adding main other functions, ExtractedOnly mode uses other functions
Adding IsPowerOfTwo other functions, ExtractedOnly mode uses other functions
Adding NumberOfBitsNeeded other functions, ExtractedOnly mode uses other functions
Adding ReverseBits other functions, ExtractedOnly mode uses other functions
Adding Index_to_frequency other functions, ExtractedOnly mode uses other functions
Adding fft_float other functions, ExtractedOnly mode uses other functions
Adding CheckPointer other functions, ExtractedOnly mode uses other functions
Adding main0 other functions, ExtractedOnly mode uses other functions
Adding main1 other functions, ExtractedOnly mode uses other functions
Adding main2 other functions, ExtractedOnly mode uses other functions
Adding main3 other functions, ExtractedOnly mode uses other functions
Adding main4 other functions, ExtractedOnly mode uses other functions
Adding main5 other functions, ExtractedOnly mode uses other functions
Adding main6 other functions, ExtractedOnly mode uses other functions
Adding main7 other functions, ExtractedOnly mode uses other functions
Adding main8 other functions, ExtractedOnly mode uses other functions
Adding main9 other functions, ExtractedOnly mode uses other functions
Adding main10 other functions, ExtractedOnly mode uses other functions
Adding main11 other functions, ExtractedOnly mode uses other functions
Adding main12 other functions, ExtractedOnly mode uses other functions
Adding main13 other functions, ExtractedOnly mode uses other functions
Adding main14 other functions, ExtractedOnly mode uses other functions
Adding main15 other functions, ExtractedOnly mode uses other functions
Adding NumberOfBitsNeeded0 other functions, ExtractedOnly mode uses other functions
Adding NumberOfBitsNeeded1 other functions, ExtractedOnly mode uses other functions
Adding ReverseBits0 other functions, ExtractedOnly mode uses other functions
Adding ReverseBits1 other functions, ExtractedOnly mode uses other functions
Adding Index_to_frequency0 other functions, ExtractedOnly mode uses other functions
Adding Index_to_frequency1 other functions, ExtractedOnly mode uses other functions
Adding fft_float0 other functions, ExtractedOnly mode uses other functions
Adding fft_float1 other functions, ExtractedOnly mode uses other functions
Adding fft_float2 other functions, ExtractedOnly mode uses other functions
Adding fft_float3 other functions, ExtractedOnly mode uses other functions
Adding fft_float4 other functions, ExtractedOnly mode uses other functions
Adding fft_float5 other functions, ExtractedOnly mode uses other functions
Adding fft_float6 other functions, ExtractedOnly mode uses other functions
Adding fft_float7 other functions, ExtractedOnly mode uses other functions
Adding fft_float8 other functions, ExtractedOnly mode uses other functions
Adding fft_float9 other functions, ExtractedOnly mode uses other functions
Adding fft_float10 other functions, ExtractedOnly mode uses other functions
Adding fft_float11 other functions, ExtractedOnly mode uses other functions
Adding CheckPointer0 other functions, ExtractedOnly mode uses other functions
Sensitive functions:0 other functions:42
DesiredConnectivity is :1
Other functions to be fed to the network of checkers
main11
fft_float5
Index_to_frequency0
fft_float
main4
ReverseBits
main5
main12
fft_float4
main14
CheckPointer0
main6
fft_float7
IsPowerOfTwo
fft_float11
main15
main1
main2
Index_to_frequency1
NumberOfBitsNeeded
CheckPointer
fft_float1
ReverseBits0
NumberOfBitsNeeded1
fft_float8
fft_float3
fft_float6
Index_to_frequency
main8
fft_float9
main9
main10
main7
main
main13
NumberOfBitsNeeded0
fft_float0
main0
fft_float2
fft_float10
ReverseBits1
main3
***
Sensitive functions to be fed to the network of checkers
***
Sensitive functions only checked:0
DAGCheckersNetwork::getReverseTopologicalSort freed visited
Constructed the network of checkers!
Sensitive functions are never checkers as SensitiveOnlyChecked is set to:0
Dumping checkers network info
{
    "allCheckees": [],
    "topologicalsort": []
}
SC stats is requested, dumping stat file...
{
    "avgConnectivity": -nan.0,
    "desiredConnectivity": 1,
    "numberOfGuardInstructions": 0,
    "numberOfGuards": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveInstructions": 0,
    "stdConnectivity": -nan.0
}
Recieved marked functions 0
ERR. processed 42 function, while filter count is 4
Functions called in loop
Function call numbers
main -- 0
Insert hash computation
Warning: Empty PHI
PSNodeType::PHI with ID 19
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 20
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 265
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 266
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 267
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 268
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 269
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 270
  - operands: []
No reaching definition for:   %call21 = call noalias i8* @malloc(i64 %mul20) #6, !control_dep_instr !11, !data_dep_instr !7 in:   store i32 %3, i32* %i.el, !control_dep_instr !8, !argument_dep_instr !10, !input_indep_instr !11, !data_indep_instr !12 off: 18446744073709551615
No reaching definition for:   %call18 = call noalias i8* @malloc(i64 %mul17) #6, !control_dep_instr !11, !data_dep_instr !7 in:   store i32 %3, i32* %i.el, !control_dep_instr !8, !argument_dep_instr !10, !input_indep_instr !11, !data_indep_instr !12 off: 18446744073709551615
No reaching definition for:   %denom = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %denom.el = alloca double, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %BlockSize.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %BlockEnd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %BlockEnd.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %i.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %NumBits = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %NumBits.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for: @stderr = external global %struct._IO_FILE*, align 8 in:   store i32 %1, i32* %PowerOfTwo.addr.el, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9, !argument_dep_instr !10 off: 0
No tags were supplied to be skipped! 
'guard' metadata was found in the input bitcode
Recieved marked functions 0
Recieved filter functions 4
 Skipping function per FilterFunctionPass:main
 Skipping function per FilterFunctionPass:IsPowerOfTwo
 Skipping function per FilterFunctionPass:NumberOfBitsNeeded
 Skipping function per FilterFunctionPass:ReverseBits
 Skipping function per FilterFunctionPass:Index_to_frequency
Collecting defining blocks for fft_float
 Skipping function per FilterFunctionPass:CheckPointer
 Skipping function per FilterFunctionPass:main
 Skipping function per FilterFunctionPass:IsPowerOfTwo
 Skipping function per FilterFunctionPass:NumberOfBitsNeeded
 Skipping function per FilterFunctionPass:ReverseBits
 Skipping function per FilterFunctionPass:Index_to_frequency
 Processing function:fft_float
Short range hashing enabled.
Processing path: entry  if.end  if.then3  
After path modifications process path
entry  if.end  if.then3  
Processing path: entry  if.end  if.end4  for.cond  for.body  cond.true  
After path modifications process path
for.body  cond.true  
Hash path invariants only
Invariants are
  br label %cond.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  
After path modifications process path
entry  if.end  if.end4  
Processing path: entry  if.end  if.end4  for.cond  for.body  cond.end  for.inc  
After path modifications process path
for.body  cond.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end4  
After path modifications process path
entry  if.end  if.end4  
Processing path: entry  if.end  if.end4  for.cond  for.body  cond.false  
After path modifications process path
for.body  cond.false  
Hash path invariants only
Invariants are
  br label %cond.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end4  
After path modifications process path
entry  if.end  if.end4  
Processing path: entry  if.end  if.end4  for.end  for.cond36  for.body39  for.inc104  
After path modifications process path
for.body39  
Hash path invariants only
Invariants are
  br label %for.inc104, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx74 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx69 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx58 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx57 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx55 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx63 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx45 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx54 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx44 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx42 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx56 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx46 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx47 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx53 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx51 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx49 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx48 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end4  for.end  
After path modifications process path
entry  if.end  if.end4  for.end  
Processing call instruction..
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float4(i32* %BlockSize, i32* %BlockEnd), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockEnd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float4(i32* %BlockSize, i32* %BlockEnd), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.body18  
After path modifications process path
for.body18  
Hash path invariants only
Invariants are
  br label %for.cond28, !control_dep_instr !7, !data_indep_instr !11
  call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %angle_numerator = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %w = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.cond28  for.body31  
After path modifications process path
for.body31  
Hash path invariants only
Invariants are
  br label %for.cond36, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %n, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx32 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx33 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx34 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx35 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end4  for.end  for.cond36  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  
After path modifications process path
entry  if.end  if.end4  for.end  
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.body18  
After path modifications process path
for.body18  
Hash path invariants only
Invariants are
  call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond28, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %angle_numerator = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %w = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.cond28  for.body31  for.end107  for.inc108  
After path modifications process path
for.body31  for.end107  
Hash path invariants only
Invariants are
  br label %for.inc108, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i32 0, i32* %n, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond36, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx33 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx34 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx32 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx35 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end4  for.end  for.cond28  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.body18  for.end110  for.inc111  
After path modifications process path
for.body18  for.end110  
Hash path invariants only
Invariants are
  br label %for.inc111, !control_dep_instr !7, !data_indep_instr !11
  call void @fft_float7(i32* %BlockEnd, i32* %BlockSize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond28, !control_dep_instr !7, !data_indep_instr !11
  call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %angle_numerator = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %w = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %BlockEnd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float7(i32* %BlockEnd, i32* %BlockSize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float7(i32* %BlockEnd, i32* %BlockSize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  
After path modifications process path
entry  if.end  if.end4  for.end  
Processing path: entry  if.end  if.end4  for.end  for.end112  if.then114  for.cond116  for.body119  for.inc130  
After path modifications process path
for.body119  
Hash path invariants only
Invariants are
  br label %for.inc130, !control_dep_instr !7, !data_indep_instr !11
  call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %RealOut.addr = alloca float*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ImagOut.addr = alloca float*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %denom = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.cond  for.end  for.end112  if.then114  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.end112  if.then114  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.end112  if.then114  
After path modifications process path
entry  if.end  if.end4  for.end  for.end112  if.then114  
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float9(i32* %i, double* %denom, i32* %NumSamples.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %denom = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float9(i32* %i, double* %denom, i32* %NumSamples.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %NumSamples.addr = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float9(i32* %i, double* %denom, i32* %NumSamples.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  for.end112  if.then114  for.cond116  for.end132  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.cond  for.end  for.end112  if.then114  for.end132  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.end112  if.then114  for.end132  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.end112  if.then114  for.end132  
After path modifications process path
entry  if.end  if.end4  for.end  for.end112  if.then114  for.end132  
Processing path: entry  if.end  if.end4  for.cond  for.end  for.end112  if.end133  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.end112  if.end133  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.end112  if.end133  
After path modifications process path
entry  if.end  if.end4  for.end  for.end112  if.end133  
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %NumSamples.addr = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float0(i32* %NumSamples.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
 Skipping function per FilterFunctionPass:CheckPointer
Extract path function for assertion assert_fft_float_path_0
Extract path function for assertion assert_fft_float_path_1
Extract path function for assertion assert_fft_float_path_2
Extract path function for assertion assert_fft_float_path_3
Extract path function for assertion assert_fft_float_path_4
Extract path function for assertion assert_fft_float_path_5
Extract path function for assertion assert_fft_float_path_6
Extract path function for assertion assert_fft_float_path_7
Extract path function for assertion assert_fft_float_path_8
Extract path function for assertion assert_fft_float_path_9
Extract path function for assertion assert_fft_float_path_11
Extract path function for assertion assert_fft_float_path_13
Extract path function for assertion assert_fft_float_path_14
Extract path function for assertion assert_fft_float_path_16
Extract path function for assertion assert_fft_float_path_19
Extract path function for assertion assert_fft_float_path_20
Extract path function for assertion assert_fft_float_path_21
Extract path function for assertion assert_fft_float_path_24
Extract path function for assertion assert_fft_float_path_28
Extract path function for assertion assert_fft_float_path_31
Extract path function for assertion assert_fft_float_path_32
OH stats is requested, dumping stat file...
Processed instructions number 511
{
    "numberOfAssertCalls": 0,
    "numberOfBlocksInFunctionsWithNoDG": 0,
    "numberOfDataDependentInstructions": 202,
    "numberOfHashVariables": 1,
    "numberOfImplicitlyProtectedInstructions": 0,
    "numberOfInstructionsInFilteredFunctions": 239,
    "numberOfInstructionsInFunctionsWithNoDG": 0,
    "numberOfNonHashableBlocks": 0,
    "numberOfNonHashableInstructions": 20,
    "numberOfOHProcessedInstr": 272,
    "numberOfOtherUnprotectedInstructions": 0,
    "numberOfOtherUnprotectedLoopVariantInstructions": 0,
    "numberOfProtectedArguments": 0,
    "numberOfProtectedBlocks": 0,
    "numberOfProtectedFunctions": 1,
    "numberOfProtectedGuardArguments": 0,
    "numberOfProtectedGuardInstructions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveBlocks": 30,
    "numberOfSensitiveFunctions": 1,
    "numberOfShortRangeAssertCalls": 21,
    "numberOfShortRangeImplicitlyProtectedInstructions": 0,
    "numberOfShortRangeProtectedArguments": 0,
    "numberOfShortRangeProtectedBlocks": 20,
    "numberOfShortRangeProtectedGuardArguments": 0,
    "numberOfShortRangeProtectedGuardInstructions": 0,
    "numberOfShortRangeProtectedInstructions": 10,
    "numberOfUnprotectedArgumentReachableInstructions": 5,
    "numberOfUnprotectedArgumentReachableLoopBlocks": 0,
    "numberOfUnprotectedDataDependentBlocks": 0,
    "numberOfUnprotectedDataDependentLoopBlocks": 10,
    "numberOfUnprotectedGlobalReachableInstructions": 0,
    "numberOfUnprotectedGlobalReachableLoopBlocks": 0,
    "numberOfUnprotectedInputDependentInstructions": 0,
    "numberOfUnprotectedLoopInstructions": 35
}
ERR. processed 1 function, while filter count is 4
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 0.6565 seconds (0.6565 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.3251 ( 50.5%)   0.0040 ( 31.8%)   0.3292 ( 50.1%)   0.3292 ( 50.1%)  runs input dependency analysis
   0.2771 ( 43.0%)   0.0071 ( 56.1%)   0.2842 ( 43.3%)   0.2842 ( 43.3%)  Instruments bitcode with hashing and logging functions
   0.0303 (  4.7%)   0.0011 (  8.8%)   0.0314 (  4.8%)   0.0313 (  4.8%)  Memory SSA
   0.0032 (  0.5%)   0.0000 (  0.0%)   0.0032 (  0.5%)   0.0032 (  0.5%)  Bitcode Writer
   0.0014 (  0.2%)   0.0001 (  0.5%)   0.0014 (  0.2%)   0.0015 (  0.2%)  Dominator Tree Construction
   0.0012 (  0.2%)   0.0000 (  0.3%)   0.0012 (  0.2%)   0.0012 (  0.2%)  Natural Loop Information
   0.0012 (  0.2%)   0.0000 (  0.0%)   0.0012 (  0.2%)   0.0012 (  0.2%)  Instruments bitcode with guards
   0.0011 (  0.2%)   0.0000 (  0.0%)   0.0011 (  0.2%)   0.0011 (  0.2%)  Module Verifier
   0.0010 (  0.2%)   0.0000 (  0.0%)   0.0010 (  0.2%)   0.0010 (  0.2%)  Include functions in a given file in any transformation
   0.0005 (  0.1%)   0.0000 (  0.4%)   0.0006 (  0.1%)   0.0006 (  0.1%)  Post-Dominator Tree Construction
   0.0005 (  0.1%)   0.0001 (  0.4%)   0.0005 (  0.1%)   0.0005 (  0.1%)  Dominator Tree Construction
   0.0004 (  0.1%)   0.0000 (  0.0%)   0.0004 (  0.1%)   0.0004 (  0.1%)  Call site information
   0.0003 (  0.1%)   0.0000 (  0.2%)   0.0004 (  0.1%)   0.0004 (  0.1%)  Natural Loop Information
   0.0001 (  0.0%)   0.0001 (  0.9%)   0.0002 (  0.0%)   0.0002 (  0.0%)  runs indirect and virtual calls analysis
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Function Alias Analysis Results
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Basic Alias Analysis (stateless AA impl)
   0.0000 (  0.0%)   0.0000 (  0.2%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Remove unreachable blocks from the CFG
   0.0000 (  0.0%)   0.0000 (  0.1%)   0.0001 (  0.0%)   0.0001 (  0.0%)  CallGraph Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Marks functions in a given file as assert functions
   0.0000 (  0.0%)   0.0000 (  0.2%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Dead Global Elimination
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Dominator Tree Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Natural Loop Information
   0.6438 (100.0%)   0.0127 (100.0%)   0.6565 (100.0%)   0.6565 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0027 seconds (0.0027 wall clock)

   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.0027 (100.0%)   0.0027 (100.0%)   0.0027 (100.0%)  Parse IR
   0.0027 (100.0%)   0.0027 (100.0%)   0.0027 (100.0%)  Total

Running input dependency analysis pass
Processing function main0
Processing function main1
Processing function main2
Processing function main3
Processing function main4
Processing function main5
Processing function main6
Processing function main7
Processing function main8
Processing function main9
Processing function main10
Processing function main11
Processing function main12
Processing function main13
Processing function main14
Processing function main15
Processing function main
Processing function IsPowerOfTwo
Processing function NumberOfBitsNeeded0
Processing function NumberOfBitsNeeded1
Processing function NumberOfBitsNeeded
Processing function ReverseBits0
Processing function ReverseBits1
Processing function ReverseBits
Processing function Index_to_frequency0
Processing function Index_to_frequency1
Processing function Index_to_frequency
Processing function fft_float0
Processing function fft_float1
Processing function CheckPointer0
Processing function CheckPointer
Processing function fft_float2
Processing function fft_float3
Processing function fft_float4
Processing function fft_float5
Processing function fft_float6
Processing function fft_float7
Processing function fft_float8
Processing function fft_float9
Processing function fft_float10
Processing function fft_float11
Processing function fft_float
Finalizing fft_float
Finalizing fft_float11
Mark Input dependent function fft_float11
Finalizing fft_float10
Mark Input dependent function fft_float10
Finalizing fft_float9
Mark Input dependent function fft_float9
Finalizing fft_float8
Mark Input dependent function fft_float8
Finalizing fft_float7
Mark Input dependent function fft_float7
Finalizing fft_float6
Mark Input dependent function fft_float6
Finalizing fft_float5
Mark Input dependent function fft_float5
Finalizing fft_float4
Mark Input dependent function fft_float4
Finalizing fft_float3
Mark Input dependent function fft_float3
Finalizing fft_float2
Mark Input dependent function fft_float2
Finalizing CheckPointer
Mark Input dependent function CheckPointer
Finalizing CheckPointer0
Mark Input dependent function CheckPointer0
Finalizing fft_float1
Mark Input dependent function fft_float1
Finalizing fft_float0
Finalizing Index_to_frequency
Finalizing Index_to_frequency1
Mark Input dependent function Index_to_frequency1
Finalizing Index_to_frequency0
Mark Input dependent function Index_to_frequency0
Finalizing ReverseBits
Mark Input dependent function ReverseBits
Finalizing ReverseBits1
Mark Input dependent function ReverseBits1
Finalizing ReverseBits0
Mark Input dependent function ReverseBits0
Finalizing NumberOfBitsNeeded
Mark Input dependent function NumberOfBitsNeeded
Finalizing NumberOfBitsNeeded1
Mark Input dependent function NumberOfBitsNeeded1
Finalizing NumberOfBitsNeeded0
Mark Input dependent function NumberOfBitsNeeded0
Finalizing IsPowerOfTwo
Finalizing main
Finalizing main15
Mark Input dependent function main15
Finalizing main14
Mark Input dependent function main14
Finalizing main13
Mark Input dependent function main13
Finalizing main12
Mark Input dependent function main12
Finalizing main11
Mark Input dependent function main11
Finalizing main10
Mark Input dependent function main10
Finalizing main9
Mark Input dependent function main9
Finalizing main8
Mark Input dependent function main8
Finalizing main7
Mark Input dependent function main7
Finalizing main6
Mark Input dependent function main6
Finalizing main5
Mark Input dependent function main5
Finalizing main4
Mark Input dependent function main4
Finalizing main3
Mark Input dependent function main3
Finalizing main2
Mark Input dependent function main2
Finalizing main1
Mark Input dependent function main1
Finalizing main0
Mark Input dependent function main0
Finished input dependency analysis

In  mark function pass 
In  filter function pass 
Filter file:/home/anahitik/SIP/sip-eval/combination/fft.x.bc/100/0
here!:main
here!:IsPowerOfTwo
here!:NumberOfBitsNeeded
here!:ReverseBits
here!:Index_to_frequency
here!:fft_float
here!:CheckPointer
here!:main0
here!:main1
here!:main2
here!:main3
here!:main4
here!:main5
here!:main6
here!:main7
here!:main8
here!:main9
here!:main10
here!:main11
here!:main12
here!:main13
here!:main14
here!:main15
here!:NumberOfBitsNeeded0
here!:NumberOfBitsNeeded1
here!:ReverseBits0
here!:ReverseBits1
here!:Index_to_frequency0
here!:Index_to_frequency1
here!:fft_float0
here!:fft_float1
here!:fft_float2
here!:fft_float3
here!:fft_float4
here!:fft_float5
here!:fft_float6
here!:fft_float7
here!:fft_float8
here!:fft_float9
here!:fft_float10
here!:fft_float11
here!:CheckPointer0
here!:CheckPointer0
got filter function names
Add filter function main
FunctionInfo. Adding function:main
did not find printf demangled to printf
did not find exit demangled to exit
did not find strncmp demangled to strncmp
did not find atoi demangled to atoi
did not find srand demangled to srand
did not find malloc demangled to malloc
did not find rand demangled to rand
did not find cos demangled to cos
did not find sin demangled to sin
did not find free demangled to free
Add filter function IsPowerOfTwo
FunctionInfo. Adding function:IsPowerOfTwo
Add filter function NumberOfBitsNeeded
FunctionInfo. Adding function:NumberOfBitsNeeded
did not find fprintf demangled to fprintf
Add filter function ReverseBits
FunctionInfo. Adding function:ReverseBits
Add filter function Index_to_frequency
FunctionInfo. Adding function:Index_to_frequency
Add filter function fft_float
FunctionInfo. Adding function:fft_float
Add filter function CheckPointer
FunctionInfo. Adding function:CheckPointer
Add filter function main0
FunctionInfo. Adding function:main0
Add filter function main1
FunctionInfo. Adding function:main1
Add filter function main2
FunctionInfo. Adding function:main2
Add filter function main3
FunctionInfo. Adding function:main3
Add filter function main4
FunctionInfo. Adding function:main4
Add filter function main5
FunctionInfo. Adding function:main5
Add filter function main6
FunctionInfo. Adding function:main6
Add filter function main7
FunctionInfo. Adding function:main7
Add filter function main8
FunctionInfo. Adding function:main8
Add filter function main9
FunctionInfo. Adding function:main9
Add filter function main10
FunctionInfo. Adding function:main10
Add filter function main11
FunctionInfo. Adding function:main11
Add filter function main12
FunctionInfo. Adding function:main12
Add filter function main13
FunctionInfo. Adding function:main13
Add filter function main14
FunctionInfo. Adding function:main14
Add filter function main15
FunctionInfo. Adding function:main15
Add filter function NumberOfBitsNeeded0
FunctionInfo. Adding function:NumberOfBitsNeeded0
Add filter function NumberOfBitsNeeded1
FunctionInfo. Adding function:NumberOfBitsNeeded1
Add filter function ReverseBits0
FunctionInfo. Adding function:ReverseBits0
Add filter function ReverseBits1
FunctionInfo. Adding function:ReverseBits1
Add filter function Index_to_frequency0
FunctionInfo. Adding function:Index_to_frequency0
Add filter function Index_to_frequency1
FunctionInfo. Adding function:Index_to_frequency1
Add filter function fft_float0
FunctionInfo. Adding function:fft_float0
Add filter function fft_float1
FunctionInfo. Adding function:fft_float1
Add filter function fft_float2
FunctionInfo. Adding function:fft_float2
Add filter function fft_float3
FunctionInfo. Adding function:fft_float3
Add filter function fft_float4
FunctionInfo. Adding function:fft_float4
Add filter function fft_float5
FunctionInfo. Adding function:fft_float5
Add filter function fft_float6
FunctionInfo. Adding function:fft_float6
Add filter function fft_float7
FunctionInfo. Adding function:fft_float7
Add filter function fft_float8
FunctionInfo. Adding function:fft_float8
Add filter function fft_float9
FunctionInfo. Adding function:fft_float9
Add filter function fft_float10
FunctionInfo. Adding function:fft_float10
Add filter function fft_float11
FunctionInfo. Adding function:fft_float11
Add filter function CheckPointer0
FunctionInfo. Adding function:CheckPointer0
Adding main other functions, ExtractedOnly mode uses other functions
Adding IsPowerOfTwo other functions, ExtractedOnly mode uses other functions
Adding NumberOfBitsNeeded other functions, ExtractedOnly mode uses other functions
Adding ReverseBits other functions, ExtractedOnly mode uses other functions
Adding Index_to_frequency other functions, ExtractedOnly mode uses other functions
Adding fft_float other functions, ExtractedOnly mode uses other functions
Adding CheckPointer other functions, ExtractedOnly mode uses other functions
Adding main0 other functions, ExtractedOnly mode uses other functions
Adding main1 other functions, ExtractedOnly mode uses other functions
Adding main2 other functions, ExtractedOnly mode uses other functions
Adding main3 other functions, ExtractedOnly mode uses other functions
Adding main4 other functions, ExtractedOnly mode uses other functions
Adding main5 other functions, ExtractedOnly mode uses other functions
Adding main6 other functions, ExtractedOnly mode uses other functions
Adding main7 other functions, ExtractedOnly mode uses other functions
Adding main8 other functions, ExtractedOnly mode uses other functions
Adding main9 other functions, ExtractedOnly mode uses other functions
Adding main10 other functions, ExtractedOnly mode uses other functions
Adding main11 other functions, ExtractedOnly mode uses other functions
Adding main12 other functions, ExtractedOnly mode uses other functions
Adding main13 other functions, ExtractedOnly mode uses other functions
Adding main14 other functions, ExtractedOnly mode uses other functions
Adding main15 other functions, ExtractedOnly mode uses other functions
Adding NumberOfBitsNeeded0 other functions, ExtractedOnly mode uses other functions
Adding NumberOfBitsNeeded1 other functions, ExtractedOnly mode uses other functions
Adding ReverseBits0 other functions, ExtractedOnly mode uses other functions
Adding ReverseBits1 other functions, ExtractedOnly mode uses other functions
Adding Index_to_frequency0 other functions, ExtractedOnly mode uses other functions
Adding Index_to_frequency1 other functions, ExtractedOnly mode uses other functions
Adding fft_float0 other functions, ExtractedOnly mode uses other functions
Adding fft_float1 other functions, ExtractedOnly mode uses other functions
Adding fft_float2 other functions, ExtractedOnly mode uses other functions
Adding fft_float3 other functions, ExtractedOnly mode uses other functions
Adding fft_float4 other functions, ExtractedOnly mode uses other functions
Adding fft_float5 other functions, ExtractedOnly mode uses other functions
Adding fft_float6 other functions, ExtractedOnly mode uses other functions
Adding fft_float7 other functions, ExtractedOnly mode uses other functions
Adding fft_float8 other functions, ExtractedOnly mode uses other functions
Adding fft_float9 other functions, ExtractedOnly mode uses other functions
Adding fft_float10 other functions, ExtractedOnly mode uses other functions
Adding fft_float11 other functions, ExtractedOnly mode uses other functions
Adding CheckPointer0 other functions, ExtractedOnly mode uses other functions
Sensitive functions:0 other functions:42
DesiredConnectivity is :1
Other functions to be fed to the network of checkers
main11
fft_float5
Index_to_frequency0
fft_float
main4
ReverseBits
main5
main12
fft_float4
main14
CheckPointer0
main6
fft_float7
IsPowerOfTwo
fft_float11
main15
main1
main2
Index_to_frequency1
NumberOfBitsNeeded
CheckPointer
fft_float1
ReverseBits0
NumberOfBitsNeeded1
fft_float8
fft_float3
fft_float6
Index_to_frequency
main8
fft_float9
main9
main10
main7
main
main13
NumberOfBitsNeeded0
fft_float0
main0
fft_float2
fft_float10
ReverseBits1
main3
***
Sensitive functions to be fed to the network of checkers
***
Sensitive functions only checked:0
DAGCheckersNetwork::getReverseTopologicalSort freed visited
Constructed the network of checkers!
Sensitive functions are never checkers as SensitiveOnlyChecked is set to:0
Dumping checkers network info
{
    "allCheckees": [],
    "topologicalsort": []
}
SC stats is requested, dumping stat file...
{
    "avgConnectivity": -nan.0,
    "desiredConnectivity": 1,
    "numberOfGuardInstructions": 0,
    "numberOfGuards": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveInstructions": 0,
    "stdConnectivity": -nan.0
}
Recieved marked functions 0
Functions called in loop
Function call numbers
main -- 0
Insert hash computation
Warning: Empty PHI
PSNodeType::PHI with ID 19
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 20
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 265
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 266
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 267
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 268
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 269
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 270
  - operands: []
No reaching definition for:   %call18 = call noalias i8* @malloc(i64 %mul17) #6, !control_dep_instr !11, !data_dep_instr !7 in:   store i32 %3, i32* %i.el, !control_dep_instr !8, !argument_dep_instr !10, !input_indep_instr !11, !data_indep_instr !12 off: 18446744073709551615
No reaching definition for:   %call21 = call noalias i8* @malloc(i64 %mul20) #6, !control_dep_instr !11, !data_dep_instr !7 in:   store i32 %3, i32* %i.el, !control_dep_instr !8, !argument_dep_instr !10, !input_indep_instr !11, !data_indep_instr !12 off: 18446744073709551615
No reaching definition for: @stderr = external global %struct._IO_FILE*, align 8 in:   store i32 %1, i32* %NumSamples.addr.el, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9, !argument_dep_instr !10 off: 0
No reaching definition for:   %denom = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %denom.el = alloca double, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %BlockSize.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %BlockEnd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %BlockEnd.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %i.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %NumBits = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %NumBits.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No tags were supplied to be skipped! 
'guard' metadata was found in the input bitcode
Recieved marked functions 0
Recieved filter functions 42
Collecting defining blocks for main
Collecting defining blocks for IsPowerOfTwo
Collecting defining blocks for NumberOfBitsNeeded
Collecting defining blocks for ReverseBits
Skip. No dependence graph for function Index_to_frequency
Collecting defining blocks for fft_float
Collecting defining blocks for CheckPointer
 Processing function:main
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.else  if.then5  
After path modifications process path
entry  if.else  if.then5  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.else  if.end  if.end7  for.cond  for.body  for.inc  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !12, !data_indep_instr !10
  call void @main1(float** %amp, float** %coeff, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %amp = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main1(float** %amp, float** %coeff, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %coeff = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main1(float** %amp, float** %coeff, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main1(float** %amp, float** %coeff, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
No oh has been applied in the path
Processing path: entry  if.else  if.end  if.end7  
After path modifications process path
entry  if.else  if.end  if.end7  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.else  if.end  if.end7  for.end  for.cond44  for.body47  if.then51  
After path modifications process path
for.body47  if.then51  
Hash path invariants only
Invariants are
  br label %if.end82, !control_dep_instr !12, !data_indep_instr !10
  %call48 = call i32 @rand() #6, !control_dep_instr !12, !data_dep_instr !7, !input_dep_block !13
  %rem49 = srem i32 %call48, 2, !control_dep_instr !12, !data_dep_instr !7
  call void @main4(float** %RealIn, i32* %j, float** %coeff, float** %amp, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
  %tobool50 = icmp ne i32 %rem49, 0, !control_dep_instr !12, !data_dep_instr !7
  br i1 %tobool50, label %if.then51, label %if.else66, !control_dep_instr !12, !data_dep_instr !7
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %RealIn = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main4(float** %RealIn, i32* %j, float** %coeff, float** %amp, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main4(float** %RealIn, i32* %j, float** %coeff, float** %amp, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %coeff = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main4(float** %RealIn, i32* %j, float** %coeff, float** %amp, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %amp = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main4(float** %RealIn, i32* %j, float** %coeff, float** %amp, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main4(float** %RealIn, i32* %j, float** %coeff, float** %amp, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Processing path: entry  if.else  if.end  if.end7  for.end  for.cond38  for.body41  
After path modifications process path
for.body41  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !12, !data_indep_instr !10
  br label %for.cond44, !control_dep_instr !12, !data_indep_instr !10
  call void @main3(float** %RealIn, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %RealIn = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main3(float** %RealIn, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main3(float** %RealIn, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Processing path: entry  if.else  if.end  if.end7  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.else  if.end  if.end7  for.end  
After path modifications process path
entry  if.else  if.end  if.end7  for.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.else  if.end  if.end7  for.end  for.cond44  for.body47  if.end82  for.inc85  
After path modifications process path
for.body47  if.end82  
Hash path invariants only
Invariants are
  call void @main6(float** %ImagIn, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
  br i1 %tobool50, label %if.then51, label %if.else66, !control_dep_instr !12, !data_dep_instr !7
  %tobool50 = icmp ne i32 %rem49, 0, !control_dep_instr !12, !data_dep_instr !7
  br label %for.inc85, !control_dep_instr !12, !data_indep_instr !10
  %rem49 = srem i32 %call48, 2, !control_dep_instr !12, !data_dep_instr !7
  %call48 = call i32 @rand() #6, !control_dep_instr !12, !data_dep_instr !7, !input_dep_block !13
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %ImagIn = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main6(float** %ImagIn, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main6(float** %ImagIn, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Processing path: entry  if.else  if.end  if.end7  for.end  for.cond38  for.body41  
After path modifications process path
for.body41  
Hash path invariants only
Invariants are
  call void @main3(float** %RealIn, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
  br label %for.cond44, !control_dep_instr !12, !data_indep_instr !10
  store i32 0, i32* %j, align 4, !control_dep_instr !12, !data_indep_instr !10
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %RealIn = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main3(float** %RealIn, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main3(float** %RealIn, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Processing path: entry  if.else  if.end  if.end7  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.else  if.end  if.end7  for.end  
After path modifications process path
entry  if.else  if.end  if.end7  for.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.else  if.end  if.end7  for.end  for.cond44  for.body47  if.else66  
After path modifications process path
for.body47  if.else66  
Hash path invariants only
Invariants are
  br label %if.end82, !control_dep_instr !12, !data_indep_instr !10
  call void @main5(float** %RealIn, i32* %j, float** %coeff, float** %amp, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
  br i1 %tobool50, label %if.then51, label %if.else66, !control_dep_instr !12, !data_dep_instr !7
  %tobool50 = icmp ne i32 %rem49, 0, !control_dep_instr !12, !data_dep_instr !7
  %rem49 = srem i32 %call48, 2, !control_dep_instr !12, !data_dep_instr !7
  %call48 = call i32 @rand() #6, !control_dep_instr !12, !data_dep_instr !7, !input_dep_block !13
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %RealIn = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main5(float** %RealIn, i32* %j, float** %coeff, float** %amp, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %j = alloca i32, align 4, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main5(float** %RealIn, i32* %j, float** %coeff, float** %amp, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %coeff = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main5(float** %RealIn, i32* %j, float** %coeff, float** %amp, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %amp = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main5(float** %RealIn, i32* %j, float** %coeff, float** %amp, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main5(float** %RealIn, i32* %j, float** %coeff, float** %amp, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Processing path: entry  if.else  if.end  if.end7  for.end  for.cond38  for.body41  
After path modifications process path
for.body41  
Hash path invariants only
Invariants are
  call void @main3(float** %RealIn, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
  br label %for.cond44, !control_dep_instr !12, !data_indep_instr !10
  store i32 0, i32* %j, align 4, !control_dep_instr !12, !data_indep_instr !10
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %RealIn = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main3(float** %RealIn, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main3(float** %RealIn, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Processing path: entry  if.else  if.end  if.end7  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.else  if.end  if.end7  for.end  
After path modifications process path
entry  if.else  if.end  if.end7  for.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.else  if.end  if.end7  for.end  for.cond44  
After path modifications process path is empty
Processing path: entry  if.else  if.end  if.end7  for.end  for.cond38  for.body41  for.end87  for.inc88  
After path modifications process path
for.body41  for.end87  
Hash path invariants only
Invariants are
  br label %for.inc88, !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
  call void @main3(float** %RealIn, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
  br label %for.cond44, !control_dep_instr !12, !data_indep_instr !10
  store i32 0, i32* %j, align 4, !control_dep_instr !12, !data_indep_instr !10
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %RealIn = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main3(float** %RealIn, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main3(float** %RealIn, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Processing path: entry  if.else  if.end  if.end7  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.else  if.end  if.end7  for.end  
After path modifications process path
entry  if.else  if.end  if.end7  for.end  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.else  if.end  if.end7  for.end  for.end90  for.cond93  for.body96  for.inc101  
After path modifications process path
for.body96  
Hash path invariants only
Invariants are
  br label %for.inc101, !control_dep_instr !12, !data_indep_instr !10
  call void @main10(float** %RealOut, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %RealOut = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main10(float** %RealOut, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main10(float** %RealOut, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
No oh has been applied in the path
Processing path: entry  if.else  if.end  if.end7  for.end  for.cond38  for.end90  
After path modifications process path is empty
Processing path: entry  if.else  if.end  if.end7  for.cond  for.end  for.end90  
After path modifications process path is empty
Processing path: entry  if.else  if.end  if.end7  for.end  for.end90  
After path modifications process path
entry  if.else  if.end  if.end7  for.end  for.end90  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %ImagOut = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main9(float** %ImagOut, float** %RealOut, i32* %MAXSIZE, float** %RealIn, i32* %invfft, float** %ImagIn), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %RealOut = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main9(float** %ImagOut, float** %RealOut, i32* %MAXSIZE, float** %RealIn, i32* %invfft, float** %ImagIn), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %MAXSIZE = alloca i32, align 4, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main9(float** %ImagOut, float** %RealOut, i32* %MAXSIZE, float** %RealIn, i32* %invfft, float** %ImagIn), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %RealIn = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main9(float** %ImagOut, float** %RealOut, i32* %MAXSIZE, float** %RealIn, i32* %invfft, float** %ImagIn), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %invfft = alloca i32, align 4, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main9(float** %ImagOut, float** %RealOut, i32* %MAXSIZE, float** %RealIn, i32* %invfft, float** %ImagIn), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %ImagIn = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main9(float** %ImagOut, float** %RealOut, i32* %MAXSIZE, float** %RealIn, i32* %invfft, float** %ImagIn), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Processing path: entry  if.else  if.end  if.end7  for.end  for.end90  for.end103  for.cond106  for.body109  for.inc114  
After path modifications process path
for.body109  
Hash path invariants only
Invariants are
  br label %for.inc114, !control_dep_instr !12, !data_indep_instr !10
  call void @main13(float** %ImagOut, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %ImagOut = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main13(float** %ImagOut, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main13(float** %ImagOut, i32* %i), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
No oh has been applied in the path
Processing path: entry  if.else  if.end  if.end7  for.end  for.end90  for.end103  
After path modifications process path
entry  if.else  if.end  if.end7  for.end  for.end90  for.end103  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.else  if.end  if.end7  for.cond  for.end  for.end90  for.end103  
After path modifications process path is empty
Processing path: entry  if.else  if.end  if.end7  for.end  for.cond38  for.end90  for.end103  
After path modifications process path is empty
Processing path: entry  if.else  if.end  if.end7  for.end  for.end90  for.cond93  for.end103  
After path modifications process path is empty
Processing path: entry  if.else  if.end  if.end7  for.end  for.end90  for.end103  for.cond106  for.end116  
After path modifications process path is empty
Processing path: entry  if.else  if.end  if.end7  for.end  for.end90  for.end103  for.end116  
After path modifications process path
entry  if.else  if.end  if.end7  for.end  for.end90  for.end103  for.end116  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %amp = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main15(float** %amp, float** %coeff, float** %RealIn, float** %ImagOut, float** %ImagIn, float** %RealOut), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %coeff = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main15(float** %amp, float** %coeff, float** %RealIn, float** %ImagOut, float** %ImagIn, float** %RealOut), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %RealIn = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main15(float** %amp, float** %coeff, float** %RealIn, float** %ImagOut, float** %ImagIn, float** %RealOut), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %ImagOut = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main15(float** %amp, float** %coeff, float** %RealIn, float** %ImagOut, float** %ImagIn, float** %RealOut), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %ImagIn = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main15(float** %amp, float** %coeff, float** %RealIn, float** %ImagOut, float** %ImagIn, float** %RealOut), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Can't handle this operand   %RealOut = alloca float*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main15(float** %amp, float** %coeff, float** %RealIn, float** %ImagOut, float** %ImagIn, float** %RealOut), !control_dep_instr !12, !data_indep_instr !10, !input_dep_block !13
Processing path: entry  if.else  if.end  if.end7  for.cond  for.end  for.end90  for.end103  for.end116  
After path modifications process path is empty
Processing path: entry  if.else  if.end  if.end7  for.end  for.cond38  for.end90  for.end103  for.end116  
After path modifications process path is empty
Processing path: entry  if.else  if.end  if.end7  for.end  for.end90  for.cond93  for.end103  for.end116  
After path modifications process path is empty
 Processing function:IsPowerOfTwo
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then1  
After path modifications process path
entry  if.end  if.then1  
Processing path: entry  if.end  if.end2  
After path modifications process path
entry  if.end  if.end2  
 Processing function:NumberOfBitsNeeded
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  for.cond  if.then1  
After path modifications process path is empty
Processing path: entry  if.end  if.then1  
After path modifications process path
entry  if.end  if.then1  
Processing path: entry  if.end  for.cond  if.end2  for.inc  
After path modifications process path
if.end2  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !10, !global_dep_instr !13, !input_dep_block !11
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
 Processing function:ReverseBits
Short range hashing enabled.
Processing path: entry  for.cond  for.body  for.inc  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
  call void @ReverseBits0(i32* %index.addr, i32* %rev), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %index.addr = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ReverseBits0(i32* %index.addr, i32* %rev), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %rev = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ReverseBits0(i32* %index.addr, i32* %rev), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Skip. No dependence graph for function Index_to_frequency
 Processing function:fft_float
Short range hashing enabled.
Processing path: entry  if.end  if.then3  
After path modifications process path
entry  if.end  if.then3  
Processing path: entry  if.end  if.end4  for.cond  for.body  cond.true  
After path modifications process path
for.body  cond.true  
Hash path invariants only
Invariants are
  br label %cond.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  
After path modifications process path
entry  if.end  if.end4  
Processing path: entry  if.end  if.end4  for.cond  for.body  cond.end  for.inc  
After path modifications process path
for.body  cond.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end4  
After path modifications process path
entry  if.end  if.end4  
Processing path: entry  if.end  if.end4  for.cond  for.body  cond.false  
After path modifications process path
for.body  cond.false  
Hash path invariants only
Invariants are
  br label %cond.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end4  
After path modifications process path
entry  if.end  if.end4  
Processing path: entry  if.end  if.end4  for.end  for.cond36  for.body39  for.inc104  
After path modifications process path
for.body39  
Hash path invariants only
Invariants are
  %arrayidx74 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx58 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx57 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx56 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx69 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx54 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx45 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx63 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx55 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx46 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx47 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx48 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  br label %for.inc104, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx44 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx42 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx49 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx51 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx53 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end4  for.end  
After path modifications process path
entry  if.end  if.end4  for.end  
Processing call instruction..
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float4(i32* %BlockSize, i32* %BlockEnd), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockEnd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float4(i32* %BlockSize, i32* %BlockEnd), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  for.cond28  for.body31  
After path modifications process path
for.body31  
Hash path invariants only
Invariants are
  br label %for.cond36, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %n, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx32 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx33 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx34 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx35 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end4  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.body18  
After path modifications process path
for.body18  
Hash path invariants only
Invariants are
  br label %for.cond28, !control_dep_instr !7, !data_indep_instr !11
  call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %angle_numerator = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %w = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  for.cond36  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  
After path modifications process path
entry  if.end  if.end4  for.end  
Processing path: entry  if.end  if.end4  for.end  for.cond28  for.body31  for.end107  for.inc108  
After path modifications process path
for.body31  for.end107  
Hash path invariants only
Invariants are
  br label %for.inc108, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i32 0, i32* %n, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx32 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  br label %for.cond36, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx33 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx34 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx35 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end4  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.body18  
After path modifications process path
for.body18  
Hash path invariants only
Invariants are
  call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond28, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %angle_numerator = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %w = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.body18  for.end110  for.inc111  
After path modifications process path
for.body18  for.end110  
Hash path invariants only
Invariants are
  br label %for.inc111, !control_dep_instr !7, !data_indep_instr !11
  call void @fft_float7(i32* %BlockEnd, i32* %BlockSize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond28, !control_dep_instr !7, !data_indep_instr !11
  call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %angle_numerator = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %w = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %BlockEnd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float7(i32* %BlockEnd, i32* %BlockSize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float7(i32* %BlockEnd, i32* %BlockSize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.cond28  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  
After path modifications process path
entry  if.end  if.end4  for.end  
Processing path: entry  if.end  if.end4  for.end  for.end112  if.then114  for.cond116  for.body119  for.inc130  
After path modifications process path
for.body119  
Hash path invariants only
Invariants are
  br label %for.inc130, !control_dep_instr !7, !data_indep_instr !11
  call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %RealOut.addr = alloca float*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ImagOut.addr = alloca float*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %denom = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.end112  if.then114  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.cond  for.end  for.end112  if.then114  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.end112  if.then114  
After path modifications process path
entry  if.end  if.end4  for.end  for.end112  if.then114  
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float9(i32* %i, double* %denom, i32* %NumSamples.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %denom = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float9(i32* %i, double* %denom, i32* %NumSamples.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %NumSamples.addr = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float9(i32* %i, double* %denom, i32* %NumSamples.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  for.end112  if.then114  for.cond116  for.end132  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.end112  if.then114  for.end132  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.cond  for.end  for.end112  if.then114  for.end132  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.end112  if.then114  for.end132  
After path modifications process path
entry  if.end  if.end4  for.end  for.end112  if.then114  for.end132  
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.end112  if.end133  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.cond  for.end  for.end112  if.end133  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.end112  if.end133  
After path modifications process path
entry  if.end  if.end4  for.end  for.end112  if.end133  
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %NumSamples.addr = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float0(i32* %NumSamples.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
 Processing function:CheckPointer
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Extract path function for assertion assert_CheckPointer_path_0
Extract path function for assertion assert_CheckPointer_path_1
Extract path function for assertion assert_fft_float_path_0
Extract path function for assertion assert_fft_float_path_1
Extract path function for assertion assert_fft_float_path_2
Extract path function for assertion assert_fft_float_path_3
Extract path function for assertion assert_fft_float_path_4
Extract path function for assertion assert_fft_float_path_5
Extract path function for assertion assert_fft_float_path_6
Extract path function for assertion assert_fft_float_path_7
Extract path function for assertion assert_fft_float_path_8
Extract path function for assertion assert_fft_float_path_9
Extract path function for assertion assert_fft_float_path_11
Extract path function for assertion assert_fft_float_path_13
Extract path function for assertion assert_fft_float_path_14
Extract path function for assertion assert_fft_float_path_16
Extract path function for assertion assert_fft_float_path_17
Extract path function for assertion assert_fft_float_path_20
Extract path function for assertion assert_fft_float_path_21
Extract path function for assertion assert_fft_float_path_24
Extract path function for assertion assert_fft_float_path_28
Extract path function for assertion assert_fft_float_path_31
Extract path function for assertion assert_fft_float_path_32
Extract path function for assertion assert_main_path_1
Extract path function for assertion assert_main_path_3
Extract path function for assertion assert_main_path_4
Extract path function for assertion assert_main_path_5
Extract path function for assertion assert_main_path_7
Extract path function for assertion assert_main_path_8
Extract path function for assertion assert_main_path_9
Extract path function for assertion assert_main_path_11
Extract path function for assertion assert_main_path_12
Extract path function for assertion assert_main_path_13
Extract path function for assertion assert_main_path_15
Extract path function for assertion assert_main_path_17
Extract path function for assertion assert_main_path_19
Extract path function for assertion assert_main_path_23
Extract path function for assertion assert_main_path_25
Extract path function for assertion assert_main_path_30
Extract path function for assertion assert_NumberOfBitsNeeded_path_0
Extract path function for assertion assert_NumberOfBitsNeeded_path_2
Extract path function for assertion assert_NumberOfBitsNeeded_path_3
Extract path function for assertion assert_NumberOfBitsNeeded_path_4
Extract path function for assertion assert_IsPowerOfTwo_path_0
Extract path function for assertion assert_IsPowerOfTwo_path_1
Extract path function for assertion assert_IsPowerOfTwo_path_2
Extract path function for assertion assert_IsPowerOfTwo_path_3
Extract path function for assertion assert_ReverseBits_path_1
Extract path function for assertion assert_ReverseBits_path_3
OH stats is requested, dumping stat file...
Processed instructions number 510
{
    "numberOfAssertCalls": 2,
    "numberOfBlocksInFunctionsWithNoDG": 7,
    "numberOfDataDependentInstructions": 306,
    "numberOfHashVariables": 1,
    "numberOfImplicitlyProtectedInstructions": 0,
    "numberOfInstructionsInFilteredFunctions": 0,
    "numberOfInstructionsInFunctionsWithNoDG": 23,
    "numberOfNonHashableBlocks": 8,
    "numberOfNonHashableInstructions": 46,
    "numberOfOHProcessedInstr": 487,
    "numberOfOtherUnprotectedInstructions": 2,
    "numberOfOtherUnprotectedLoopVariantInstructions": 0,
    "numberOfProtectedArguments": 0,
    "numberOfProtectedBlocks": 1,
    "numberOfProtectedFunctions": 6,
    "numberOfProtectedGuardArguments": 0,
    "numberOfProtectedGuardInstructions": 0,
    "numberOfProtectedInstructions": 2,
    "numberOfSensitiveBlocks": 80,
    "numberOfSensitiveFunctions": 6,
    "numberOfShortRangeAssertCalls": 49,
    "numberOfShortRangeImplicitlyProtectedInstructions": 0,
    "numberOfShortRangeProtectedArguments": 0,
    "numberOfShortRangeProtectedBlocks": 47,
    "numberOfShortRangeProtectedGuardArguments": 0,
    "numberOfShortRangeProtectedGuardInstructions": 0,
    "numberOfShortRangeProtectedInstructions": 28,
    "numberOfUnprotectedArgumentReachableInstructions": 24,
    "numberOfUnprotectedArgumentReachableLoopBlocks": 0,
    "numberOfUnprotectedDataDependentBlocks": 0,
    "numberOfUnprotectedDataDependentLoopBlocks": 24,
    "numberOfUnprotectedGlobalReachableInstructions": 0,
    "numberOfUnprotectedGlobalReachableLoopBlocks": 0,
    "numberOfUnprotectedInputDependentInstructions": 0,
    "numberOfUnprotectedLoopInstructions": 79
}
ERR. processed 6 function, while filter count is 42
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 0.7480 seconds (0.7480 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.3350 ( 46.8%)   0.0241 ( 76.4%)   0.3591 ( 48.0%)   0.3591 ( 48.0%)  Instruments bitcode with hashing and logging functions
   0.3276 ( 45.7%)   0.0000 (  0.0%)   0.3276 ( 43.8%)   0.3276 ( 43.8%)  runs input dependency analysis
   0.0388 (  5.4%)   0.0067 ( 21.2%)   0.0455 (  6.1%)   0.0454 (  6.1%)  Memory SSA
   0.0041 (  0.6%)   0.0000 (  0.0%)   0.0041 (  0.6%)   0.0041 (  0.6%)  Bitcode Writer
   0.0028 (  0.4%)   0.0004 (  1.2%)   0.0031 (  0.4%)   0.0032 (  0.4%)  Dominator Tree Construction
   0.0022 (  0.3%)   0.0003 (  1.0%)   0.0025 (  0.3%)   0.0025 (  0.3%)  Natural Loop Information
   0.0013 (  0.2%)   0.0000 (  0.0%)   0.0013 (  0.2%)   0.0013 (  0.2%)  Module Verifier
   0.0010 (  0.1%)   0.0000 (  0.0%)   0.0010 (  0.1%)   0.0010 (  0.1%)  Include functions in a given file in any transformation
   0.0010 (  0.1%)   0.0000 (  0.0%)   0.0010 (  0.1%)   0.0010 (  0.1%)  Instruments bitcode with guards
   0.0005 (  0.1%)   0.0000 (  0.0%)   0.0005 (  0.1%)   0.0005 (  0.1%)  Dominator Tree Construction
   0.0005 (  0.1%)   0.0000 (  0.0%)   0.0005 (  0.1%)   0.0005 (  0.1%)  Post-Dominator Tree Construction
   0.0004 (  0.1%)   0.0000 (  0.0%)   0.0004 (  0.1%)   0.0004 (  0.1%)  Call site information
   0.0004 (  0.0%)   0.0000 (  0.0%)   0.0004 (  0.0%)   0.0004 (  0.0%)  Natural Loop Information
   0.0003 (  0.0%)   0.0000 (  0.1%)   0.0003 (  0.0%)   0.0003 (  0.0%)  Function Alias Analysis Results
   0.0002 (  0.0%)   0.0000 (  0.1%)   0.0003 (  0.0%)   0.0003 (  0.0%)  Basic Alias Analysis (stateless AA impl)
   0.0002 (  0.0%)   0.0000 (  0.0%)   0.0002 (  0.0%)   0.0002 (  0.0%)  runs indirect and virtual calls analysis
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Remove unreachable blocks from the CFG
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  CallGraph Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Dead Global Elimination
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Marks functions in a given file as assert functions
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Dominator Tree Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Natural Loop Information
   0.7165 (100.0%)   0.0315 (100.0%)   0.7480 (100.0%)   0.7480 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0027 seconds (0.0027 wall clock)

   ---User Time---   --User+System--   ---Wall Time---  --- Name ---
   0.0027 (100.0%)   0.0027 (100.0%)   0.0027 (100.0%)  Parse IR
   0.0027 (100.0%)   0.0027 (100.0%)   0.0027 (100.0%)  Total

Running input dependency analysis pass
Processing function main0
Processing function main1
Processing function main2
Processing function main3
Processing function main4
Processing function main5
Processing function main6
Processing function main7
Processing function main8
Processing function main9
Processing function main10
Processing function main11
Processing function main12
Processing function main13
Processing function main14
Processing function main15
Processing function main
Processing function IsPowerOfTwo
Processing function NumberOfBitsNeeded0
Processing function NumberOfBitsNeeded1
Processing function NumberOfBitsNeeded
Processing function ReverseBits0
Processing function ReverseBits1
Processing function ReverseBits
Processing function Index_to_frequency0
Processing function Index_to_frequency1
Processing function Index_to_frequency
Processing function fft_float0
Processing function fft_float1
Processing function CheckPointer0
Processing function CheckPointer
Processing function fft_float2
Processing function fft_float3
Processing function fft_float4
Processing function fft_float5
Processing function fft_float6
Processing function fft_float7
Processing function fft_float8
Processing function fft_float9
Processing function fft_float10
Processing function fft_float11
Processing function fft_float
Finalizing fft_float
Finalizing fft_float11
Mark Input dependent function fft_float11
Finalizing fft_float10
Mark Input dependent function fft_float10
Finalizing fft_float9
Mark Input dependent function fft_float9
Finalizing fft_float8
Mark Input dependent function fft_float8
Finalizing fft_float7
Mark Input dependent function fft_float7
Finalizing fft_float6
Mark Input dependent function fft_float6
Finalizing fft_float5
Mark Input dependent function fft_float5
Finalizing fft_float4
Mark Input dependent function fft_float4
Finalizing fft_float3
Mark Input dependent function fft_float3
Finalizing fft_float2
Mark Input dependent function fft_float2
Finalizing CheckPointer
Mark Input dependent function CheckPointer
Finalizing CheckPointer0
Mark Input dependent function CheckPointer0
Finalizing fft_float1
Mark Input dependent function fft_float1
Finalizing fft_float0
Finalizing Index_to_frequency
Finalizing Index_to_frequency1
Mark Input dependent function Index_to_frequency1
Finalizing Index_to_frequency0
Mark Input dependent function Index_to_frequency0
Finalizing ReverseBits
Mark Input dependent function ReverseBits
Finalizing ReverseBits1
Mark Input dependent function ReverseBits1
Finalizing ReverseBits0
Mark Input dependent function ReverseBits0
Finalizing NumberOfBitsNeeded
Mark Input dependent function NumberOfBitsNeeded
Finalizing NumberOfBitsNeeded1
Mark Input dependent function NumberOfBitsNeeded1
Finalizing NumberOfBitsNeeded0
Mark Input dependent function NumberOfBitsNeeded0
Finalizing IsPowerOfTwo
Finalizing main
Finalizing main15
Mark Input dependent function main15
Finalizing main14
Mark Input dependent function main14
Finalizing main13
Mark Input dependent function main13
Finalizing main12
Mark Input dependent function main12
Finalizing main11
Mark Input dependent function main11
Finalizing main10
Mark Input dependent function main10
Finalizing main9
Mark Input dependent function main9
Finalizing main8
Mark Input dependent function main8
Finalizing main7
Mark Input dependent function main7
Finalizing main6
Mark Input dependent function main6
Finalizing main5
Mark Input dependent function main5
Finalizing main4
Mark Input dependent function main4
Finalizing main3
Mark Input dependent function main3
Finalizing main2
Mark Input dependent function main2
Finalizing main1
Mark Input dependent function main1
Finalizing main0
Mark Input dependent function main0
Finished input dependency analysis

In  mark function pass 
In  filter function pass 
Filter file:/home/anahitik/SIP/sip-eval/combination/fft.x.bc/25/0
here!:main1
here!:Index_to_frequency0
here!:fft_float
here!:fft_float0
here!:fft_float6
here!:fft_float5
here!:fft_float11
here!:main10
here!:fft_float8
here!:fft_float10
here!:fft_float3
here!:fft_float3
got filter function names
did not find main demangled to main
did not find printf demangled to printf
did not find exit demangled to exit
did not find strncmp demangled to strncmp
did not find atoi demangled to atoi
did not find srand demangled to srand
did not find malloc demangled to malloc
did not find rand demangled to rand
did not find cos demangled to cos
did not find sin demangled to sin
did not find free demangled to free
did not find IsPowerOfTwo demangled to IsPowerOfTwo
did not find NumberOfBitsNeeded demangled to NumberOfBitsNeeded
did not find fprintf demangled to fprintf
did not find ReverseBits demangled to ReverseBits
did not find Index_to_frequency demangled to Index_to_frequency
Add filter function fft_float
FunctionInfo. Adding function:fft_float
did not find CheckPointer demangled to CheckPointer
did not find main0 demangled to main0
Add filter function main1
FunctionInfo. Adding function:main1
did not find main2 demangled to main2
did not find main3 demangled to main3
did not find main4 demangled to main4
did not find main5 demangled to main5
did not find main6 demangled to main6
did not find main7 demangled to main7
did not find main8 demangled to main8
did not find main9 demangled to main9
Add filter function main10
FunctionInfo. Adding function:main10
did not find main11 demangled to main11
did not find main12 demangled to main12
did not find main13 demangled to main13
did not find main14 demangled to main14
did not find main15 demangled to main15
did not find NumberOfBitsNeeded0 demangled to NumberOfBitsNeeded0
did not find NumberOfBitsNeeded1 demangled to NumberOfBitsNeeded1
did not find ReverseBits0 demangled to ReverseBits0
did not find ReverseBits1 demangled to ReverseBits1
Add filter function Index_to_frequency0
FunctionInfo. Adding function:Index_to_frequency0
did not find Index_to_frequency1 demangled to Index_to_frequency1
Add filter function fft_float0
FunctionInfo. Adding function:fft_float0
did not find fft_float1 demangled to fft_float1
did not find fft_float2 demangled to fft_float2
Add filter function fft_float3
FunctionInfo. Adding function:fft_float3
did not find fft_float4 demangled to fft_float4
Add filter function fft_float5
FunctionInfo. Adding function:fft_float5
Add filter function fft_float6
FunctionInfo. Adding function:fft_float6
did not find fft_float7 demangled to fft_float7
Add filter function fft_float8
FunctionInfo. Adding function:fft_float8
did not find fft_float9 demangled to fft_float9
Add filter function fft_float10
FunctionInfo. Adding function:fft_float10
Add filter function fft_float11
FunctionInfo. Adding function:fft_float11
did not find CheckPointer0 demangled to CheckPointer0
Adding main other functions, ExtractedOnly mode uses other functions
Adding IsPowerOfTwo other functions, ExtractedOnly mode uses other functions
Adding NumberOfBitsNeeded other functions, ExtractedOnly mode uses other functions
Adding ReverseBits other functions, ExtractedOnly mode uses other functions
Adding Index_to_frequency other functions, ExtractedOnly mode uses other functions
Adding fft_float other functions, ExtractedOnly mode uses other functions
Adding CheckPointer other functions, ExtractedOnly mode uses other functions
Adding main0 other functions, ExtractedOnly mode uses other functions
Adding main1 other functions, ExtractedOnly mode uses other functions
Adding main2 other functions, ExtractedOnly mode uses other functions
Adding main3 other functions, ExtractedOnly mode uses other functions
Adding main4 other functions, ExtractedOnly mode uses other functions
Adding main5 other functions, ExtractedOnly mode uses other functions
Adding main6 other functions, ExtractedOnly mode uses other functions
Adding main7 other functions, ExtractedOnly mode uses other functions
Adding main8 other functions, ExtractedOnly mode uses other functions
Adding main9 other functions, ExtractedOnly mode uses other functions
Adding main10 other functions, ExtractedOnly mode uses other functions
Adding main11 other functions, ExtractedOnly mode uses other functions
Adding main12 other functions, ExtractedOnly mode uses other functions
Adding main13 other functions, ExtractedOnly mode uses other functions
Adding main14 other functions, ExtractedOnly mode uses other functions
Adding main15 other functions, ExtractedOnly mode uses other functions
Adding NumberOfBitsNeeded0 other functions, ExtractedOnly mode uses other functions
Adding NumberOfBitsNeeded1 other functions, ExtractedOnly mode uses other functions
Adding ReverseBits0 other functions, ExtractedOnly mode uses other functions
Adding ReverseBits1 other functions, ExtractedOnly mode uses other functions
Adding Index_to_frequency0 other functions, ExtractedOnly mode uses other functions
Adding Index_to_frequency1 other functions, ExtractedOnly mode uses other functions
Adding fft_float0 other functions, ExtractedOnly mode uses other functions
Adding fft_float1 other functions, ExtractedOnly mode uses other functions
Adding fft_float2 other functions, ExtractedOnly mode uses other functions
Adding fft_float3 other functions, ExtractedOnly mode uses other functions
Adding fft_float4 other functions, ExtractedOnly mode uses other functions
Adding fft_float5 other functions, ExtractedOnly mode uses other functions
Adding fft_float6 other functions, ExtractedOnly mode uses other functions
Adding fft_float7 other functions, ExtractedOnly mode uses other functions
Adding fft_float8 other functions, ExtractedOnly mode uses other functions
Adding fft_float9 other functions, ExtractedOnly mode uses other functions
Adding fft_float10 other functions, ExtractedOnly mode uses other functions
Adding fft_float11 other functions, ExtractedOnly mode uses other functions
Adding CheckPointer0 other functions, ExtractedOnly mode uses other functions
Sensitive functions:0 other functions:42
DesiredConnectivity is :1
Other functions to be fed to the network of checkers
main11
fft_float5
Index_to_frequency0
fft_float
main4
ReverseBits
main5
main12
fft_float4
main14
CheckPointer0
main6
fft_float7
IsPowerOfTwo
fft_float11
main15
main1
main2
Index_to_frequency1
NumberOfBitsNeeded
CheckPointer
fft_float1
ReverseBits0
NumberOfBitsNeeded1
fft_float8
fft_float3
fft_float6
Index_to_frequency
main8
fft_float9
main9
main10
main7
main
main13
NumberOfBitsNeeded0
fft_float0
main0
fft_float2
fft_float10
ReverseBits1
main3
***
Sensitive functions to be fed to the network of checkers
***
Sensitive functions only checked:0
DAGCheckersNetwork::getReverseTopologicalSort freed visited
Constructed the network of checkers!
Sensitive functions are never checkers as SensitiveOnlyChecked is set to:0
Dumping checkers network info
{
    "allCheckees": [],
    "topologicalsort": []
}
SC stats is requested, dumping stat file...
{
    "avgConnectivity": -nan.0,
    "desiredConnectivity": 1,
    "numberOfGuardInstructions": 0,
    "numberOfGuards": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveInstructions": 0,
    "stdConnectivity": -nan.0
}
Recieved marked functions 0
ERR. processed 42 function, while filter count is 11
Functions called in loop
Function call numbers
main -- 0
Insert hash computation
Warning: Empty PHI
PSNodeType::PHI with ID 19
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 20
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 265
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 266
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 267
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 268
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 269
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 270
  - operands: []
No reaching definition for:   %call18 = call noalias i8* @malloc(i64 %mul17) #6, !control_dep_instr !11, !data_dep_instr !7 in:   store i32 %3, i32* %i.el, !control_dep_instr !8, !argument_dep_instr !10, !input_indep_instr !11, !data_indep_instr !12 off: 18446744073709551615
No reaching definition for:   %call21 = call noalias i8* @malloc(i64 %mul20) #6, !control_dep_instr !11, !data_dep_instr !7 in:   store i32 %3, i32* %i.el, !control_dep_instr !8, !argument_dep_instr !10, !input_indep_instr !11, !data_indep_instr !12 off: 18446744073709551615
No reaching definition for: @stderr = external global %struct._IO_FILE*, align 8 in:   store i32 %1, i32* %NumSamples.addr.el, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9, !argument_dep_instr !10 off: 0
No reaching definition for:   %denom = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %denom.el = alloca double, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %BlockSize.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %BlockEnd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %BlockEnd.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %i.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %NumBits = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %NumBits.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No tags were supplied to be skipped! 
'guard' metadata was found in the input bitcode
Recieved marked functions 0
Recieved filter functions 11
 Skipping function per FilterFunctionPass:main
 Skipping function per FilterFunctionPass:IsPowerOfTwo
 Skipping function per FilterFunctionPass:NumberOfBitsNeeded
 Skipping function per FilterFunctionPass:ReverseBits
 Skipping function per FilterFunctionPass:Index_to_frequency
Collecting defining blocks for fft_float
 Skipping function per FilterFunctionPass:CheckPointer
 Skipping function per FilterFunctionPass:main
 Skipping function per FilterFunctionPass:IsPowerOfTwo
 Skipping function per FilterFunctionPass:NumberOfBitsNeeded
 Skipping function per FilterFunctionPass:ReverseBits
 Skipping function per FilterFunctionPass:Index_to_frequency
 Processing function:fft_float
Short range hashing enabled.
Processing path: entry  if.end  if.then3  
After path modifications process path
entry  if.end  if.then3  
Processing path: entry  if.end  if.end4  for.cond  for.body  cond.true  
After path modifications process path
for.body  cond.true  
Hash path invariants only
Invariants are
  br label %cond.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  
After path modifications process path
entry  if.end  if.end4  
Processing path: entry  if.end  if.end4  for.cond  for.body  cond.end  for.inc  
After path modifications process path
for.body  cond.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end4  
After path modifications process path
entry  if.end  if.end4  
Processing path: entry  if.end  if.end4  for.cond  for.body  cond.false  
After path modifications process path
for.body  cond.false  
Hash path invariants only
Invariants are
  br label %cond.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end4  
After path modifications process path
entry  if.end  if.end4  
Processing path: entry  if.end  if.end4  for.end  for.cond36  for.body39  for.inc104  
After path modifications process path
for.body39  
Hash path invariants only
Invariants are
  br label %for.inc104, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx63 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx58 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx74 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx57 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx56 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx69 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx45 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx44 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx42 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx54 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx47 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx55 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx48 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx46 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx49 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx51 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx53 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end4  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  
After path modifications process path
entry  if.end  if.end4  for.end  
Processing call instruction..
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float4(i32* %BlockSize, i32* %BlockEnd), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockEnd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float4(i32* %BlockSize, i32* %BlockEnd), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.body18  
After path modifications process path
for.body18  
Hash path invariants only
Invariants are
  br label %for.cond28, !control_dep_instr !7, !data_indep_instr !11
  call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %angle_numerator = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %w = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  for.cond28  for.body31  
After path modifications process path
for.body31  
Hash path invariants only
Invariants are
  br label %for.cond36, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %n, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx32 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx33 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx34 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx35 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end4  for.end  for.cond36  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  
After path modifications process path
entry  if.end  if.end4  for.end  
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.body18  
After path modifications process path
for.body18  
Hash path invariants only
Invariants are
  call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond28, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %angle_numerator = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %w = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  for.cond28  for.body31  for.end107  for.inc108  
After path modifications process path
for.body31  for.end107  
Hash path invariants only
Invariants are
  br label %for.inc108, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond36, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %n, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx32 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx34 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx33 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx35 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end4  for.end  for.cond28  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.body18  for.end110  for.inc111  
After path modifications process path
for.body18  for.end110  
Hash path invariants only
Invariants are
  br label %for.inc111, !control_dep_instr !7, !data_indep_instr !11
  call void @fft_float7(i32* %BlockEnd, i32* %BlockSize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond28, !control_dep_instr !7, !data_indep_instr !11
  call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %angle_numerator = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %w = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %BlockEnd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float7(i32* %BlockEnd, i32* %BlockSize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float7(i32* %BlockEnd, i32* %BlockSize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  
After path modifications process path
entry  if.end  if.end4  for.end  
Processing path: entry  if.end  if.end4  for.end  for.end112  if.then114  for.cond116  for.body119  for.inc130  
After path modifications process path
for.body119  
Hash path invariants only
Invariants are
  br label %for.inc130, !control_dep_instr !7, !data_indep_instr !11
  call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %RealOut.addr = alloca float*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ImagOut.addr = alloca float*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %denom = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.end112  if.then114  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.cond  for.end  for.end112  if.then114  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.end112  if.then114  
After path modifications process path
entry  if.end  if.end4  for.end  for.end112  if.then114  
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float9(i32* %i, double* %denom, i32* %NumSamples.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %denom = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float9(i32* %i, double* %denom, i32* %NumSamples.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %NumSamples.addr = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float9(i32* %i, double* %denom, i32* %NumSamples.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  for.end112  if.then114  for.cond116  for.end132  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.end112  if.then114  for.end132  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.cond  for.end  for.end112  if.then114  for.end132  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.end112  if.then114  for.end132  
After path modifications process path
entry  if.end  if.end4  for.end  for.end112  if.then114  for.end132  
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.end112  if.end133  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.cond  for.end  for.end112  if.end133  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.end112  if.end133  
After path modifications process path
entry  if.end  if.end4  for.end  for.end112  if.end133  
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %NumSamples.addr = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float0(i32* %NumSamples.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
 Skipping function per FilterFunctionPass:CheckPointer
Extract path function for assertion assert_fft_float_path_0
Extract path function for assertion assert_fft_float_path_1
Extract path function for assertion assert_fft_float_path_2
Extract path function for assertion assert_fft_float_path_3
Extract path function for assertion assert_fft_float_path_4
Extract path function for assertion assert_fft_float_path_5
Extract path function for assertion assert_fft_float_path_6
Extract path function for assertion assert_fft_float_path_7
Extract path function for assertion assert_fft_float_path_9
Extract path function for assertion assert_fft_float_path_10
Extract path function for assertion assert_fft_float_path_11
Extract path function for assertion assert_fft_float_path_14
Extract path function for assertion assert_fft_float_path_15
Extract path function for assertion assert_fft_float_path_16
Extract path function for assertion assert_fft_float_path_18
Extract path function for assertion assert_fft_float_path_20
Extract path function for assertion assert_fft_float_path_21
Extract path function for assertion assert_fft_float_path_24
Extract path function for assertion assert_fft_float_path_28
Extract path function for assertion assert_fft_float_path_31
Extract path function for assertion assert_fft_float_path_32
OH stats is requested, dumping stat file...
Processed instructions number 511
{
    "numberOfAssertCalls": 0,
    "numberOfBlocksInFunctionsWithNoDG": 0,
    "numberOfDataDependentInstructions": 202,
    "numberOfHashVariables": 1,
    "numberOfImplicitlyProtectedInstructions": 0,
    "numberOfInstructionsInFilteredFunctions": 239,
    "numberOfInstructionsInFunctionsWithNoDG": 0,
    "numberOfNonHashableBlocks": 0,
    "numberOfNonHashableInstructions": 20,
    "numberOfOHProcessedInstr": 272,
    "numberOfOtherUnprotectedInstructions": 0,
    "numberOfOtherUnprotectedLoopVariantInstructions": 0,
    "numberOfProtectedArguments": 0,
    "numberOfProtectedBlocks": 0,
    "numberOfProtectedFunctions": 1,
    "numberOfProtectedGuardArguments": 0,
    "numberOfProtectedGuardInstructions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveBlocks": 30,
    "numberOfSensitiveFunctions": 1,
    "numberOfShortRangeAssertCalls": 21,
    "numberOfShortRangeImplicitlyProtectedInstructions": 0,
    "numberOfShortRangeProtectedArguments": 0,
    "numberOfShortRangeProtectedBlocks": 20,
    "numberOfShortRangeProtectedGuardArguments": 0,
    "numberOfShortRangeProtectedGuardInstructions": 0,
    "numberOfShortRangeProtectedInstructions": 10,
    "numberOfUnprotectedArgumentReachableInstructions": 5,
    "numberOfUnprotectedArgumentReachableLoopBlocks": 0,
    "numberOfUnprotectedDataDependentBlocks": 0,
    "numberOfUnprotectedDataDependentLoopBlocks": 10,
    "numberOfUnprotectedGlobalReachableInstructions": 0,
    "numberOfUnprotectedGlobalReachableLoopBlocks": 0,
    "numberOfUnprotectedInputDependentInstructions": 0,
    "numberOfUnprotectedLoopInstructions": 35
}
ERR. processed 1 function, while filter count is 11
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 0.6566 seconds (0.6566 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.3327 ( 51.2%)   0.0000 (  0.0%)   0.3327 ( 50.7%)   0.3327 ( 50.7%)  runs input dependency analysis
   0.2742 ( 42.2%)   0.0069 ( 99.7%)   0.2811 ( 42.8%)   0.2811 ( 42.8%)  Instruments bitcode with hashing and logging functions
   0.0314 (  4.8%)   0.0000 (  0.2%)   0.0314 (  4.8%)   0.0314 (  4.8%)  Memory SSA
   0.0030 (  0.5%)   0.0000 (  0.0%)   0.0030 (  0.5%)   0.0030 (  0.5%)  Bitcode Writer
   0.0015 (  0.2%)   0.0000 (  0.0%)   0.0015 (  0.2%)   0.0015 (  0.2%)  Dominator Tree Construction
   0.0012 (  0.2%)   0.0000 (  0.0%)   0.0012 (  0.2%)   0.0012 (  0.2%)  Natural Loop Information
   0.0011 (  0.2%)   0.0000 (  0.0%)   0.0011 (  0.2%)   0.0011 (  0.2%)  Include functions in a given file in any transformation
   0.0010 (  0.2%)   0.0000 (  0.0%)   0.0010 (  0.2%)   0.0010 (  0.2%)  Module Verifier
   0.0010 (  0.2%)   0.0000 (  0.0%)   0.0010 (  0.2%)   0.0010 (  0.2%)  Instruments bitcode with guards
   0.0005 (  0.1%)   0.0000 (  0.0%)   0.0005 (  0.1%)   0.0005 (  0.1%)  Post-Dominator Tree Construction
   0.0005 (  0.1%)   0.0000 (  0.0%)   0.0005 (  0.1%)   0.0005 (  0.1%)  Dominator Tree Construction
   0.0004 (  0.1%)   0.0000 (  0.0%)   0.0004 (  0.1%)   0.0004 (  0.1%)  Call site information
   0.0003 (  0.0%)   0.0000 (  0.0%)   0.0003 (  0.0%)   0.0003 (  0.0%)  Natural Loop Information
   0.0003 (  0.0%)   0.0000 (  0.0%)   0.0003 (  0.0%)   0.0003 (  0.0%)  runs indirect and virtual calls analysis
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Function Alias Analysis Results
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Basic Alias Analysis (stateless AA impl)
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Dead Global Elimination
   0.0001 (  0.0%)   0.0000 (  0.1%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Remove unreachable blocks from the CFG
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  CallGraph Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Marks functions in a given file as assert functions
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Dominator Tree Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Natural Loop Information
   0.6497 (100.0%)   0.0069 (100.0%)   0.6566 (100.0%)   0.6566 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0030 seconds (0.0030 wall clock)

   ---User Time---   --User+System--   ---Wall Time---  --- Name ---
   0.0030 (100.0%)   0.0030 (100.0%)   0.0030 (100.0%)  Parse IR
   0.0030 (100.0%)   0.0030 (100.0%)   0.0030 (100.0%)  Total

Running input dependency analysis pass
Processing function main0
Processing function main1
Processing function main2
Processing function main3
Processing function main4
Processing function main5
Processing function main6
Processing function main7
Processing function main8
Processing function main9
Processing function main10
Processing function main11
Processing function main12
Processing function main13
Processing function main14
Processing function main15
Processing function main
Processing function IsPowerOfTwo
Processing function NumberOfBitsNeeded0
Processing function NumberOfBitsNeeded1
Processing function NumberOfBitsNeeded
Processing function ReverseBits0
Processing function ReverseBits1
Processing function ReverseBits
Processing function Index_to_frequency0
Processing function Index_to_frequency1
Processing function Index_to_frequency
Processing function fft_float0
Processing function fft_float1
Processing function CheckPointer0
Processing function CheckPointer
Processing function fft_float2
Processing function fft_float3
Processing function fft_float4
Processing function fft_float5
Processing function fft_float6
Processing function fft_float7
Processing function fft_float8
Processing function fft_float9
Processing function fft_float10
Processing function fft_float11
Processing function fft_float
Finalizing fft_float
Finalizing fft_float11
Mark Input dependent function fft_float11
Finalizing fft_float10
Mark Input dependent function fft_float10
Finalizing fft_float9
Mark Input dependent function fft_float9
Finalizing fft_float8
Mark Input dependent function fft_float8
Finalizing fft_float7
Mark Input dependent function fft_float7
Finalizing fft_float6
Mark Input dependent function fft_float6
Finalizing fft_float5
Mark Input dependent function fft_float5
Finalizing fft_float4
Mark Input dependent function fft_float4
Finalizing fft_float3
Mark Input dependent function fft_float3
Finalizing fft_float2
Mark Input dependent function fft_float2
Finalizing CheckPointer
Mark Input dependent function CheckPointer
Finalizing CheckPointer0
Mark Input dependent function CheckPointer0
Finalizing fft_float1
Mark Input dependent function fft_float1
Finalizing fft_float0
Finalizing Index_to_frequency
Finalizing Index_to_frequency1
Mark Input dependent function Index_to_frequency1
Finalizing Index_to_frequency0
Mark Input dependent function Index_to_frequency0
Finalizing ReverseBits
Mark Input dependent function ReverseBits
Finalizing ReverseBits1
Mark Input dependent function ReverseBits1
Finalizing ReverseBits0
Mark Input dependent function ReverseBits0
Finalizing NumberOfBitsNeeded
Mark Input dependent function NumberOfBitsNeeded
Finalizing NumberOfBitsNeeded1
Mark Input dependent function NumberOfBitsNeeded1
Finalizing NumberOfBitsNeeded0
Mark Input dependent function NumberOfBitsNeeded0
Finalizing IsPowerOfTwo
Finalizing main
Finalizing main15
Mark Input dependent function main15
Finalizing main14
Mark Input dependent function main14
Finalizing main13
Mark Input dependent function main13
Finalizing main12
Mark Input dependent function main12
Finalizing main11
Mark Input dependent function main11
Finalizing main10
Mark Input dependent function main10
Finalizing main9
Mark Input dependent function main9
Finalizing main8
Mark Input dependent function main8
Finalizing main7
Mark Input dependent function main7
Finalizing main6
Mark Input dependent function main6
Finalizing main5
Mark Input dependent function main5
Finalizing main4
Mark Input dependent function main4
Finalizing main3
Mark Input dependent function main3
Finalizing main2
Mark Input dependent function main2
Finalizing main1
Mark Input dependent function main1
Finalizing main0
Mark Input dependent function main0
Finished input dependency analysis

In  mark function pass 
In  filter function pass 
Filter file:/home/anahitik/SIP/sip-eval/combination/fft.x.bc/50/0
here!:main1
here!:Index_to_frequency0
here!:fft_float
here!:fft_float0
here!:fft_float6
here!:fft_float5
here!:fft_float11
here!:main10
here!:fft_float8
here!:fft_float10
here!:fft_float3
here!:fft_float4
here!:ReverseBits0
here!:NumberOfBitsNeeded0
here!:fft_float7
here!:main3
here!:main6
here!:IsPowerOfTwo
here!:main9
here!:main7
here!:main12
here!:main12
got filter function names
did not find main demangled to main
did not find printf demangled to printf
did not find exit demangled to exit
did not find strncmp demangled to strncmp
did not find atoi demangled to atoi
did not find srand demangled to srand
did not find malloc demangled to malloc
did not find rand demangled to rand
did not find cos demangled to cos
did not find sin demangled to sin
did not find free demangled to free
Add filter function IsPowerOfTwo
FunctionInfo. Adding function:IsPowerOfTwo
did not find NumberOfBitsNeeded demangled to NumberOfBitsNeeded
did not find fprintf demangled to fprintf
did not find ReverseBits demangled to ReverseBits
did not find Index_to_frequency demangled to Index_to_frequency
Add filter function fft_float
FunctionInfo. Adding function:fft_float
did not find CheckPointer demangled to CheckPointer
did not find main0 demangled to main0
Add filter function main1
FunctionInfo. Adding function:main1
did not find main2 demangled to main2
Add filter function main3
FunctionInfo. Adding function:main3
did not find main4 demangled to main4
did not find main5 demangled to main5
Add filter function main6
FunctionInfo. Adding function:main6
Add filter function main7
FunctionInfo. Adding function:main7
did not find main8 demangled to main8
Add filter function main9
FunctionInfo. Adding function:main9
Add filter function main10
FunctionInfo. Adding function:main10
did not find main11 demangled to main11
Add filter function main12
FunctionInfo. Adding function:main12
did not find main13 demangled to main13
did not find main14 demangled to main14
did not find main15 demangled to main15
Add filter function NumberOfBitsNeeded0
FunctionInfo. Adding function:NumberOfBitsNeeded0
did not find NumberOfBitsNeeded1 demangled to NumberOfBitsNeeded1
Add filter function ReverseBits0
FunctionInfo. Adding function:ReverseBits0
did not find ReverseBits1 demangled to ReverseBits1
Add filter function Index_to_frequency0
FunctionInfo. Adding function:Index_to_frequency0
did not find Index_to_frequency1 demangled to Index_to_frequency1
Add filter function fft_float0
FunctionInfo. Adding function:fft_float0
did not find fft_float1 demangled to fft_float1
did not find fft_float2 demangled to fft_float2
Add filter function fft_float3
FunctionInfo. Adding function:fft_float3
Add filter function fft_float4
FunctionInfo. Adding function:fft_float4
Add filter function fft_float5
FunctionInfo. Adding function:fft_float5
Add filter function fft_float6
FunctionInfo. Adding function:fft_float6
Add filter function fft_float7
FunctionInfo. Adding function:fft_float7
Add filter function fft_float8
FunctionInfo. Adding function:fft_float8
did not find fft_float9 demangled to fft_float9
Add filter function fft_float10
FunctionInfo. Adding function:fft_float10
Add filter function fft_float11
FunctionInfo. Adding function:fft_float11
did not find CheckPointer0 demangled to CheckPointer0
Adding main other functions, ExtractedOnly mode uses other functions
Adding IsPowerOfTwo other functions, ExtractedOnly mode uses other functions
Adding NumberOfBitsNeeded other functions, ExtractedOnly mode uses other functions
Adding ReverseBits other functions, ExtractedOnly mode uses other functions
Adding Index_to_frequency other functions, ExtractedOnly mode uses other functions
Adding fft_float other functions, ExtractedOnly mode uses other functions
Adding CheckPointer other functions, ExtractedOnly mode uses other functions
Adding main0 other functions, ExtractedOnly mode uses other functions
Adding main1 other functions, ExtractedOnly mode uses other functions
Adding main2 other functions, ExtractedOnly mode uses other functions
Adding main3 other functions, ExtractedOnly mode uses other functions
Adding main4 other functions, ExtractedOnly mode uses other functions
Adding main5 other functions, ExtractedOnly mode uses other functions
Adding main6 other functions, ExtractedOnly mode uses other functions
Adding main7 other functions, ExtractedOnly mode uses other functions
Adding main8 other functions, ExtractedOnly mode uses other functions
Adding main9 other functions, ExtractedOnly mode uses other functions
Adding main10 other functions, ExtractedOnly mode uses other functions
Adding main11 other functions, ExtractedOnly mode uses other functions
Adding main12 other functions, ExtractedOnly mode uses other functions
Adding main13 other functions, ExtractedOnly mode uses other functions
Adding main14 other functions, ExtractedOnly mode uses other functions
Adding main15 other functions, ExtractedOnly mode uses other functions
Adding NumberOfBitsNeeded0 other functions, ExtractedOnly mode uses other functions
Adding NumberOfBitsNeeded1 other functions, ExtractedOnly mode uses other functions
Adding ReverseBits0 other functions, ExtractedOnly mode uses other functions
Adding ReverseBits1 other functions, ExtractedOnly mode uses other functions
Adding Index_to_frequency0 other functions, ExtractedOnly mode uses other functions
Adding Index_to_frequency1 other functions, ExtractedOnly mode uses other functions
Adding fft_float0 other functions, ExtractedOnly mode uses other functions
Adding fft_float1 other functions, ExtractedOnly mode uses other functions
Adding fft_float2 other functions, ExtractedOnly mode uses other functions
Adding fft_float3 other functions, ExtractedOnly mode uses other functions
Adding fft_float4 other functions, ExtractedOnly mode uses other functions
Adding fft_float5 other functions, ExtractedOnly mode uses other functions
Adding fft_float6 other functions, ExtractedOnly mode uses other functions
Adding fft_float7 other functions, ExtractedOnly mode uses other functions
Adding fft_float8 other functions, ExtractedOnly mode uses other functions
Adding fft_float9 other functions, ExtractedOnly mode uses other functions
Adding fft_float10 other functions, ExtractedOnly mode uses other functions
Adding fft_float11 other functions, ExtractedOnly mode uses other functions
Adding CheckPointer0 other functions, ExtractedOnly mode uses other functions
Sensitive functions:0 other functions:42
DesiredConnectivity is :1
Other functions to be fed to the network of checkers
main11
fft_float5
Index_to_frequency0
fft_float
main4
ReverseBits
main5
main12
fft_float4
main14
CheckPointer0
main6
fft_float7
IsPowerOfTwo
fft_float11
main15
main1
main2
Index_to_frequency1
NumberOfBitsNeeded
CheckPointer
fft_float1
ReverseBits0
NumberOfBitsNeeded1
fft_float8
fft_float3
fft_float6
Index_to_frequency
main8
fft_float9
main9
main10
main7
main
main13
NumberOfBitsNeeded0
fft_float0
main0
fft_float2
fft_float10
ReverseBits1
main3
***
Sensitive functions to be fed to the network of checkers
***
Sensitive functions only checked:0
DAGCheckersNetwork::getReverseTopologicalSort freed visited
Constructed the network of checkers!
Sensitive functions are never checkers as SensitiveOnlyChecked is set to:0
Dumping checkers network info
{
    "allCheckees": [],
    "topologicalsort": []
}
SC stats is requested, dumping stat file...
{
    "avgConnectivity": -nan.0,
    "desiredConnectivity": 1,
    "numberOfGuardInstructions": 0,
    "numberOfGuards": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveInstructions": 0,
    "stdConnectivity": -nan.0
}
Recieved marked functions 0
ERR. processed 42 function, while filter count is 21
Functions called in loop
Function call numbers
main -- 0
Insert hash computation
Warning: Empty PHI
PSNodeType::PHI with ID 19
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 20
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 265
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 266
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 267
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 268
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 269
  - operands: []
Warning: Empty PHI
PSNodeType::PHI with ID 270
  - operands: []
No reaching definition for:   %call18 = call noalias i8* @malloc(i64 %mul17) #6, !control_dep_instr !11, !data_dep_instr !7 in:   store i32 %3, i32* %i.el, !control_dep_instr !8, !argument_dep_instr !10, !input_indep_instr !11, !data_indep_instr !12 off: 18446744073709551615
No reaching definition for:   %call21 = call noalias i8* @malloc(i64 %mul20) #6, !control_dep_instr !11, !data_dep_instr !7 in:   store i32 %3, i32* %i.el, !control_dep_instr !8, !argument_dep_instr !10, !input_indep_instr !11, !data_indep_instr !12 off: 18446744073709551615
No reaching definition for: @stderr = external global %struct._IO_FILE*, align 8 in:   store i32 %1, i32* %NumSamples.addr.el, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9, !argument_dep_instr !10 off: 0
No reaching definition for:   %denom = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %denom.el = alloca double, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %BlockSize.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %BlockEnd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %BlockEnd.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %i.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %NumBits = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %NumBits.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No tags were supplied to be skipped! 
'guard' metadata was found in the input bitcode
Recieved marked functions 0
Recieved filter functions 21
 Skipping function per FilterFunctionPass:main
Collecting defining blocks for IsPowerOfTwo
 Skipping function per FilterFunctionPass:NumberOfBitsNeeded
 Skipping function per FilterFunctionPass:ReverseBits
 Skipping function per FilterFunctionPass:Index_to_frequency
Collecting defining blocks for fft_float
 Skipping function per FilterFunctionPass:CheckPointer
 Skipping function per FilterFunctionPass:main
 Processing function:IsPowerOfTwo
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then1  
After path modifications process path
entry  if.end  if.then1  
Processing path: entry  if.end  if.end2  
After path modifications process path
entry  if.end  if.end2  
 Skipping function per FilterFunctionPass:NumberOfBitsNeeded
 Skipping function per FilterFunctionPass:ReverseBits
 Skipping function per FilterFunctionPass:Index_to_frequency
 Processing function:fft_float
Short range hashing enabled.
Processing path: entry  if.end  if.then3  
After path modifications process path
entry  if.end  if.then3  
Processing path: entry  if.end  if.end4  for.cond  for.body  cond.true  
After path modifications process path
for.body  cond.true  
Hash path invariants only
Invariants are
  br label %cond.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  
After path modifications process path
entry  if.end  if.end4  
Processing path: entry  if.end  if.end4  for.cond  for.body  cond.end  for.inc  
After path modifications process path
for.body  cond.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end4  
After path modifications process path
entry  if.end  if.end4  
Processing path: entry  if.end  if.end4  for.cond  for.body  cond.false  
After path modifications process path
for.body  cond.false  
Hash path invariants only
Invariants are
  br label %cond.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end4  
After path modifications process path
entry  if.end  if.end4  
Processing path: entry  if.end  if.end4  for.end  for.cond36  for.body39  for.inc104  
After path modifications process path
for.body39  
Hash path invariants only
Invariants are
  br label %for.inc104, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx69 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx58 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx57 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx55 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx54 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx45 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx63 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx44 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx42 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx46 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx47 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx56 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx48 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx49 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx74 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx51 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx53 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end4  for.end  
After path modifications process path
entry  if.end  if.end4  for.end  
Processing call instruction..
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float4(i32* %BlockSize, i32* %BlockEnd), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockEnd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float4(i32* %BlockSize, i32* %BlockEnd), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.body18  
After path modifications process path
for.body18  
Hash path invariants only
Invariants are
  br label %for.cond28, !control_dep_instr !7, !data_indep_instr !11
  call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %angle_numerator = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %w = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  for.cond28  for.body31  
After path modifications process path
for.body31  
Hash path invariants only
Invariants are
  br label %for.cond36, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %n, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx32 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx33 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx34 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx35 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end4  for.end  for.cond36  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  
After path modifications process path
entry  if.end  if.end4  for.end  
Processing path: entry  if.end  if.end4  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.body18  
After path modifications process path
for.body18  
Hash path invariants only
Invariants are
  call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond28, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %angle_numerator = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %w = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  for.cond28  for.body31  for.end107  for.inc108  
After path modifications process path
for.body31  for.end107  
Hash path invariants only
Invariants are
  br label %for.inc108, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i32 0, i32* %n, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx32 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  br label %for.cond36, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx33 = getelementptr inbounds [3 x double], [3 x double]* %ar, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx34 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx35 = getelementptr inbounds [3 x double], [3 x double]* %ai, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end4  for.end  for.cond28  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.body18  for.end110  for.inc111  
After path modifications process path
for.body18  for.end110  
Hash path invariants only
Invariants are
  br label %for.inc111, !control_dep_instr !7, !data_indep_instr !11
  call void @fft_float7(i32* %BlockEnd, i32* %BlockSize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond28, !control_dep_instr !7, !data_indep_instr !11
  call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %angle_numerator = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cm1 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %w = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sm2 = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float5(i32* %i, double* %cm2, double* %sm1, double* %angle_numerator, i32* %BlockSize, double* %cm1, double* %w, double* %sm2), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %BlockEnd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float7(i32* %BlockEnd, i32* %BlockSize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %BlockSize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float7(i32* %BlockEnd, i32* %BlockSize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  
After path modifications process path
entry  if.end  if.end4  for.end  
Processing path: entry  if.end  if.end4  for.end  for.end112  if.then114  for.cond116  for.body119  for.inc130  
After path modifications process path
for.body119  
Hash path invariants only
Invariants are
  br label %for.inc130, !control_dep_instr !7, !data_indep_instr !11
  call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %RealOut.addr = alloca float*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ImagOut.addr = alloca float*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %denom = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float10(float** %RealOut.addr, float** %ImagOut.addr, i32* %i, double* %denom), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.end112  if.then114  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.cond  for.end  for.end112  if.then114  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.end112  if.then114  
After path modifications process path
entry  if.end  if.end4  for.end  for.end112  if.then114  
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float9(i32* %i, double* %denom, i32* %NumSamples.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %denom = alloca double, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float9(i32* %i, double* %denom, i32* %NumSamples.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %NumSamples.addr = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float9(i32* %i, double* %denom, i32* %NumSamples.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  for.end  for.end112  if.then114  for.cond116  for.end132  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.end112  if.then114  for.end132  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.cond  for.end  for.end112  if.then114  for.end132  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.end112  if.then114  for.end132  
After path modifications process path
entry  if.end  if.end4  for.end  for.end112  if.then114  for.end132  
Processing path: entry  if.end  if.end4  for.end  for.cond15  for.end112  if.end133  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.cond  for.end  for.end112  if.end133  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  for.end  for.end112  if.end133  
After path modifications process path
entry  if.end  if.end4  for.end  for.end112  if.end133  
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %NumSamples.addr = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @fft_float0(i32* %NumSamples.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
 Skipping function per FilterFunctionPass:CheckPointer
Extract path function for assertion assert_fft_float_path_0
Extract path function for assertion assert_fft_float_path_1
Extract path function for assertion assert_fft_float_path_2
Extract path function for assertion assert_fft_float_path_3
Extract path function for assertion assert_fft_float_path_4
Extract path function for assertion assert_fft_float_path_5
Extract path function for assertion assert_fft_float_path_6
Extract path function for assertion assert_fft_float_path_7
Extract path function for assertion assert_fft_float_path_8
Extract path function for assertion assert_fft_float_path_10
Extract path function for assertion assert_fft_float_path_11
Extract path function for assertion assert_fft_float_path_13
Extract path function for assertion assert_fft_float_path_15
Extract path function for assertion assert_fft_float_path_16
Extract path function for assertion assert_fft_float_path_18
Extract path function for assertion assert_fft_float_path_20
Extract path function for assertion assert_fft_float_path_21
Extract path function for assertion assert_fft_float_path_24
Extract path function for assertion assert_fft_float_path_28
Extract path function for assertion assert_fft_float_path_31
Extract path function for assertion assert_fft_float_path_32
Extract path function for assertion assert_IsPowerOfTwo_path_0
Extract path function for assertion assert_IsPowerOfTwo_path_1
Extract path function for assertion assert_IsPowerOfTwo_path_2
Extract path function for assertion assert_IsPowerOfTwo_path_3
OH stats is requested, dumping stat file...
Processed instructions number 511
{
    "numberOfAssertCalls": 0,
    "numberOfBlocksInFunctionsWithNoDG": 0,
    "numberOfDataDependentInstructions": 210,
    "numberOfHashVariables": 1,
    "numberOfImplicitlyProtectedInstructions": 0,
    "numberOfInstructionsInFilteredFunctions": 219,
    "numberOfInstructionsInFunctionsWithNoDG": 0,
    "numberOfNonHashableBlocks": 1,
    "numberOfNonHashableInstructions": 20,
    "numberOfOHProcessedInstr": 292,
    "numberOfOtherUnprotectedInstructions": 2,
    "numberOfOtherUnprotectedLoopVariantInstructions": 0,
    "numberOfProtectedArguments": 0,
    "numberOfProtectedBlocks": 0,
    "numberOfProtectedFunctions": 2,
    "numberOfProtectedGuardArguments": 0,
    "numberOfProtectedGuardInstructions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveBlocks": 36,
    "numberOfSensitiveFunctions": 2,
    "numberOfShortRangeAssertCalls": 25,
    "numberOfShortRangeImplicitlyProtectedInstructions": 0,
    "numberOfShortRangeProtectedArguments": 0,
    "numberOfShortRangeProtectedBlocks": 25,
    "numberOfShortRangeProtectedGuardArguments": 0,
    "numberOfShortRangeProtectedGuardInstructions": 0,
    "numberOfShortRangeProtectedInstructions": 14,
    "numberOfUnprotectedArgumentReachableInstructions": 11,
    "numberOfUnprotectedArgumentReachableLoopBlocks": 0,
    "numberOfUnprotectedDataDependentBlocks": 0,
    "numberOfUnprotectedDataDependentLoopBlocks": 10,
    "numberOfUnprotectedGlobalReachableInstructions": 0,
    "numberOfUnprotectedGlobalReachableLoopBlocks": 0,
    "numberOfUnprotectedInputDependentInstructions": 0,
    "numberOfUnprotectedLoopInstructions": 35
}
ERR. processed 2 function, while filter count is 21
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 0.6591 seconds (0.6591 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.3286 ( 50.2%)   0.0000 (  0.0%)   0.3286 ( 49.9%)   0.3286 ( 49.9%)  runs input dependency analysis
   0.2818 ( 43.0%)   0.0040 ( 99.9%)   0.2858 ( 43.4%)   0.2858 ( 43.4%)  Instruments bitcode with hashing and logging functions
   0.0329 (  5.0%)   0.0000 (  0.1%)   0.0329 (  5.0%)   0.0328 (  5.0%)  Memory SSA
   0.0031 (  0.5%)   0.0000 (  0.0%)   0.0031 (  0.5%)   0.0031 (  0.5%)  Bitcode Writer
   0.0016 (  0.2%)   0.0000 (  0.0%)   0.0016 (  0.2%)   0.0016 (  0.2%)  Dominator Tree Construction
   0.0013 (  0.2%)   0.0000 (  0.0%)   0.0013 (  0.2%)   0.0013 (  0.2%)  Natural Loop Information
   0.0012 (  0.2%)   0.0000 (  0.0%)   0.0012 (  0.2%)   0.0012 (  0.2%)  Instruments bitcode with guards
   0.0011 (  0.2%)   0.0000 (  0.0%)   0.0011 (  0.2%)   0.0011 (  0.2%)  Include functions in a given file in any transformation
   0.0010 (  0.2%)   0.0000 (  0.0%)   0.0010 (  0.2%)   0.0010 (  0.2%)  Module Verifier
   0.0005 (  0.1%)   0.0000 (  0.0%)   0.0005 (  0.1%)   0.0005 (  0.1%)  Post-Dominator Tree Construction
   0.0005 (  0.1%)   0.0000 (  0.0%)   0.0005 (  0.1%)   0.0005 (  0.1%)  Dominator Tree Construction
   0.0004 (  0.1%)   0.0000 (  0.0%)   0.0004 (  0.1%)   0.0004 (  0.1%)  Call site information
   0.0003 (  0.1%)   0.0000 (  0.0%)   0.0003 (  0.0%)   0.0003 (  0.0%)  Natural Loop Information
   0.0002 (  0.0%)   0.0000 (  0.0%)   0.0002 (  0.0%)   0.0002 (  0.0%)  runs indirect and virtual calls analysis
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Function Alias Analysis Results
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Basic Alias Analysis (stateless AA impl)
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Remove unreachable blocks from the CFG
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  CallGraph Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Marks functions in a given file as assert functions
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Dead Global Elimination
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Dominator Tree Construction
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Natural Loop Information
   0.6550 (100.0%)   0.0040 (100.0%)   0.6591 (100.0%)   0.6591 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0027 seconds (0.0027 wall clock)

   ---User Time---   --User+System--   ---Wall Time---  --- Name ---
   0.0027 (100.0%)   0.0027 (100.0%)   0.0027 (100.0%)  Parse IR
   0.0027 (100.0%)   0.0027 (100.0%)   0.0027 (100.0%)  Total

