Running input dependency analysis pass
Processing function erase
Processing function move
Processing function inverse
Processing function normal
Processing function backup
Processing function terminit0
Processing function terminit1
Processing function terminit2
Processing function terminit3
Processing function terminit4
Processing function terminit5
Processing function terminit
Did not find function assigned   store void (...)* %11, void (...)** @oldint, align 8, !control_dep_instr !7, !data_dep_instr !8
Did not find function assigned   store void (...)* %12, void (...)** @oldterm, align 8, !control_dep_instr !7, !data_dep_instr !8
Did not find function assigned   store void (...)* %13, void (...)** @oldttin, align 8, !control_dep_instr !7, !data_dep_instr !8
Did not find function assigned   store void (...)* %14, void (...)** @oldttou, align 8, !control_dep_instr !7, !data_dep_instr !8
Did not find function assigned   store void (...)* %15, void (...)** @oldtstp, align 8, !control_dep_instr !7, !data_dep_instr !8
Processing function done
Processing function onstop0
Processing function onstop
Processing function stop
Processing function shellescape0
Processing function shellescape1
Processing function shellescape2
Processing function shellescape3
Processing function shellescape4
Processing function shellescape5
Processing function shellescape
Processing function main0
Processing function main1
Processing function main2
Processing function main3
Processing function main4
Processing function main5
Processing function usage0
Processing function givehelp0
Processing function givehelp1
Processing function givehelp2
Processing function givehelp
Processing function usage
Processing function main6
Processing function main7
Processing function main8
Processing function main9
Processing function main10
Processing function main11
Processing function main12
Processing function main13
Processing function main14
Processing function main15
Processing function main16
Processing function main17
Processing function main18
Processing function main19
Processing function main20
Processing function main21
Processing function main22
Processing function main23
Processing function main24
Processing function main25
Processing function main26
Processing function main27
Processing function main28
Processing function main29
Processing function main30
Processing function main31
Processing function main32
Processing function linit0
Processing function linit1
Processing function linit2
Processing function linit3
Processing function linit4
Processing function linit5
Processing function linit6
Processing function linit7
Processing function linit8
Processing function linit9
Processing function linit10
Processing function linit11
Processing function linit12
Processing function linit13
Processing function linit14
Processing function linit15
Processing function linit16
Processing function linit17
Processing function linit18
Processing function linit19
Processing function linit20
Processing function linit21
Processing function linit22
Processing function linit23
Processing function linit24
Processing function linit25
Processing function linit26
Processing function linit27
Processing function linit28
Processing function linit29
Processing function linit30
Processing function linit31
Processing function linit32
Processing function linit33
Processing function linit34
Processing function linit35
Processing function linit36
Processing function linit37
Processing function linit38
Processing function linit39
Processing function linit40
Processing function linit41
Processing function linit42
Processing function linit43
Processing function linit44
Processing function linit45
Processing function linit46
Processing function linit47
Processing function linit48
Processing function linit49
Processing function linit
Processing function findfiletype0
Processing function findfiletype1
Processing function findfiletype2
Processing function findfiletype3
Processing function findfiletype4
Processing function findfiletype5
Processing function findfiletype6
Processing function findfiletype7
Processing function findfiletype
Processing function main33
Processing function main34
Processing function main35
Processing function main36
Processing function initckch0
Processing function initckch1
Processing function initckch2
Processing function initckch
Processing function main37
Processing function treeinit0
Processing function trydict0
Processing function trydict1
Processing function trydict2
Processing function trydict
Processing function treeinit1
Processing function treeinsert0
Processing function treeinsert1
Processing function treeinsert2
Processing function treeinsert3
Processing function treeinsert4
Processing function strtoichar0
Processing function stringcharlen0
Processing function stringcharlen1
Processing function stringcharlen2
Processing function stringcharlen3
Processing function stringcharlen4
Processing function stringcharlen5
Processing function stringcharlen6
Processing function stringcharlen7
Processing function stringcharlen8
Processing function stringcharlen
Processing function strtoichar1
Processing function strtoichar2
Processing function strtoichar3
Processing function strtoichar
Processing function tinsert0
Processing function hash0
Processing function hash1
Processing function hash
Processing function tinsert1
Processing function tinsert2
Processing function tinsert3
Processing function tinsert
Processing function treeinsert5
Processing function treeinsert6
Processing function treeinsert7
Processing function treeinsert8
Processing function treeinsert9
Processing function makedent0
Processing function makedent1
Processing function ichartostr0
Processing function ichartostr1
Processing function ichartostr2
Processing function ichartostr3
Processing function ichartostr4
Processing function ichartostr
Processing function makedent2
Processing function makedent3
Processing function makedent4
Processing function whatcap0
Processing function whatcap1
Processing function whatcap2
Processing function whatcap3
Processing function whatcap4
Processing function whatcap
Processing function makedent5
Processing function mymalloc
Processing function makedent6
Processing function strtosichar0
Processing function strtosichar
Processing function upcase0
Processing function upcase
Processing function chupcase0
Processing function chupcase
Processing function makedent7
Processing function makedent8
Processing function makedent9
Processing function makedent10
Processing function makedent
Processing function treeinsert10
Processing function lookup0
Processing function lookup1
Processing function lookup2
Processing function treelookup0
Processing function treelookup1
Processing function treelookup2
Processing function treelookup
Processing function lookup3
Processing function lookup
Processing function issubset
Processing function acoversb
Processing function combineaffixes0
Processing function combineaffixes
Processing function myfree0
Processing function myfree
Processing function combine_two_entries0
Processing function combine_two_entries1
Processing function addvheader0
Processing function addvheader1
Processing function addvheader2
Processing function addvheader3
Processing function addvheader4
Processing function addvheader
Processing function combine_two_entries2
Processing function combine_two_entries
Processing function combinecaps0
Processing function forcevheader0
Processing function forcevheader
Processing function combinecaps1
Processing function combinecaps2
Processing function combinecaps3
Processing function combinecaps
Processing function treeinsert11
Processing function treeinsert12
Processing function treeinsert13
Processing function treeinsert
Processing function treeload
Processing function treeinit2
Processing function treeinit3
Processing function treeinit4
Processing function treeinit5
Processing function treeinit6
Processing function treeinit7
Processing function treeinit8
Processing function treeinit
Processing function main38
Processing function askmode0
Processing function askmode1
Processing function xgets0
Processing function xgets1
Processing function xgets2
Processing function xgets3
Processing function xgets4
Processing function xgets
Processing function askmode2
Processing function askmode3
Processing function askmode4
Processing function checkline0
Processing function copyout0
Processing function copyout1
Processing function copyout
Processing function checkline1
Processing function checkline2
Processing function checkline3
Processing function checkline4
Processing function skiptoword0
Processing function TeX_open_paren0
Processing function TeX_open_paren
Processing function TeX_math_check0
Processing function TeX_skip_parens0
Processing function TeX_skip_parens
Processing function TeX_math_check1
Processing function TeX_skip_args0
Processing function TeX_skip_args1
Processing function TeX_skip_args2
Processing function TeX_skip_args3
Processing function TeX_skip_args
Processing function TeX_math_check2
Processing function TeX_math_check3
Processing function TeX_math_check
Processing function TeX_LR_check0
Processing function TeX_LR_check1
Processing function TeX_LR_check2
Processing function TeX_LR_check3
Processing function TeX_LR_check4
Processing function TeX_LR_check
Processing function skiptoword1
Processing function skiptoword2
Processing function TeX_math_end0
Processing function TeX_math_end1
Processing function TeX_strncmp0
Processing function TeX_strncmp
Processing function TeX_LR_begin0
Processing function TeX_LR_begin1
Processing function TeX_LR_begin2
Processing function TeX_LR_begin
Processing function TeX_math_end2
Processing function TeX_math_end
Processing function skiptoword3
Processing function skiptoword4
Processing function skiptoword5
Processing function skiptoword6
Processing function skiptoword7
Processing function TeX_math_begin0
Processing function TeX_math_begin1
Processing function TeX_math_begin2
Processing function TeX_skip_check0
Processing function TeX_skip_check1
Processing function TeX_skip_check2
Processing function TeX_skip_check3
Processing function TeX_skip_check
Processing function TeX_math_begin3
Processing function TeX_math_begin4
Processing function TeX_math_begin
Processing function skiptoword8
Processing function skiptoword9
Processing function skiptoword10
Processing function skiptoword11
Processing function skiptoword12
Processing function skiptoword13
Processing function skiptoword14
Processing function skiptoword15
Processing function skiptoword16
Processing function skiptoword17
Processing function skiptoword18
Processing function skiptoword19
Processing function skiptoword
Processing function checkline5
Processing function skipoverword0
Processing function skipoverword1
Processing function skipoverword2
Processing function skipoverword3
Processing function skipoverword4
Processing function skipoverword
Processing function checkline6
Processing function checkline7
Processing function checkline8
Processing function good0
Processing function good1
Processing function ichartosstr0
Processing function ichartosstr
Processing function good2
Processing function good3
Processing function cap_ok0
Processing function cap_ok1
Processing function cap_ok2
Processing function entryhasaffixes
Processing function cap_ok3
Processing function cap_ok4
Processing function cap_ok5
Processing function cap_ok6
Processing function cap_ok7
Processing function cap_ok8
Processing function cap_ok9
Processing function cap_ok10
Processing function cap_ok
Processing function pfx_list_chk0
Processing function pfx_list_chk1
Processing function flagpr0
Processing function flagpr1
Processing function flagpr2
Processing function flagpr3
Processing function flagpr4
Processing function flagpr5
Processing function flagpr6
Processing function printichar0
Processing function printichar1
Processing function printichar
Processing function flagpr7
Processing function flagpr8
Processing function flagpr9
Processing function flagpr10
Processing function flagpr11
Processing function flagpr12
Processing function flagpr13
Processing function flagpr14
Processing function flagpr15
Processing function flagpr16
Processing function flagpr
Processing function pfx_list_chk2
Processing function pfx_list_chk3
Processing function save_root_cap0
Processing function save_root_cap1
Processing function save_root_cap2
Processing function save_root_cap3
Processing function lowcase0
Processing function lowcase
Processing function save_root_cap4
Processing function save_root_cap5
Processing function save_root_cap6
Processing function save_root_cap7
Processing function save_root_cap8
Processing function save_root_cap9
Processing function save_root_cap10
Processing function save_root_cap11
Processing function save_root_cap
Processing function insert0
Processing function insert1
Processing function insert2
Processing function insert
Processing function ins_root_cap0
Processing function ins_root_cap
Processing function pfx_list_chk4
Processing function suf_list_chk0
Processing function suf_list_chk1
Processing function suf_list_chk2
Processing function suf_list_chk3
Processing function suf_list_chk4
Processing function suf_list_chk5
Processing function suf_list_chk6
Processing function suf_list_chk7
Processing function suf_list_chk
Processing function chk_suf0
Processing function chk_suf1
Processing function chk_suf2
Processing function chk_suf
Processing function pfx_list_chk5
Processing function pfx_list_chk
Processing function chk_aff0
Processing function chk_aff1
Processing function chk_aff2
Processing function chk_aff
Processing function good4
Processing function good
Processing function compoundgood0
Processing function compoundgood1
Processing function compoundgood2
Processing function compoundgood3
Processing function compoundgood
Processing function checkline9
Processing function checkline10
Processing function checkline11
Processing function checkline12
Processing function checkline13
Processing function makepossibilities0
Processing function save_cap0
Processing function save_cap1
Processing function save_cap2
Processing function save_cap3
Processing function save_cap4
Processing function save_cap
Processing function ins_cap0
Processing function ins_cap
Processing function wrongcapital
Processing function missingletter0
Processing function missingletter1
Processing function missingletter2
Processing function missingletter
Processing function makepossibilities1
Processing function transposedletter0
Processing function transposedletter1
Processing function transposedletter
Processing function makepossibilities2
Processing function extraletter0
Processing function extraletter
Processing function makepossibilities3
Processing function wrongletter0
Processing function wrongletter1
Processing function wrongletter
Processing function makepossibilities4
Processing function missingspace0
Processing function missingspace1
Processing function missingspace2
Processing function missingspace
Processing function makepossibilities5
Processing function tryveryhard0
Processing function tryveryhard
Processing function makepossibilities6
Processing function makepossibilities7
Processing function makepossibilities8
Processing function makepossibilities
Processing function checkline14
Processing function checkline15
Processing function checkline16
Processing function checkline17
Processing function checkline18
Processing function correct0
Processing function correct1
Processing function correct2
Processing function correct3
Processing function correct4
Processing function correct5
Processing function correct6
Processing function show_char0
Processing function show_char1
Processing function show_char2
Processing function show_char3
Processing function show_char4
Processing function show_char5
Processing function show_char6
Processing function show_char7
Processing function show_char8
Processing function show_char9
Processing function show_char10
Processing function show_char11
Processing function show_char12
Processing function show_char13
Processing function show_char14
Processing function show_char
Processing function show_line0
Processing function show_line1
Processing function show_line2
Processing function show_line3
Processing function show_line
Processing function correct7
Processing function line_size0
Processing function line_size
Processing function correct8
Processing function correct9
Processing function correct10
Processing function correct11
Processing function correct12
Processing function correct13
Processing function correct14
Processing function correct15
Processing function correct16
Processing function correct17
Processing function my_getline0
Processing function my_getline1
Processing function my_getline2
Processing function my_getline3
Processing function my_getline4
Processing function my_getline5
Processing function my_getline6
Processing function my_getline
Processing function correct18
Processing function correct19
Processing function correct20
Processing function inserttoken0
Processing function inserttoken1
Processing function inserttoken2
Processing function inserttoken3
Processing function inserttoken4
Processing function inserttoken5
Processing function inserttoken6
Processing function inserttoken
Processing function correct21
Processing function correct22
Processing function correct23
Processing function correct24
Processing function correct25
Processing function lookharder0
Processing function lookharder1
Processing function lookharder2
Processing function lookharder
Processing function correct26
Processing function correct
Processing function checkline19
Processing function checkline20
Processing function checkline
Processing function askmode5
Processing function askmode6
Processing function treeoutput0
Processing function treeoutput1
Processing function treeoutput2
Processing function treeoutput3
Processing function treeoutput4
Processing function treeoutput5
Processing function treeoutput6
Processing function treeoutput7
Processing function treeoutput8
Processing function treeoutput9
Processing function treeoutput10
Processing function treeoutput11
Processing function treeoutput12
Processing function toutent0
Processing function toutword0
Processing function flagout0
Processing function flagout1
Processing function flagout
Processing function toutword1
Processing function toutword2
Processing function toutword
Processing function toutent1
Processing function toutent2
Processing function toutent
Processing function treeoutput13
Processing function treeoutput14
Processing function treeoutput15
Processing function treeoutput16
Processing function treeoutput17
Processing function treeoutput18
Processing function treeoutput19
Processing function treeoutput20
Processing function treeoutput21
Processing function treeoutput22
Processing function treeoutput23
Processing function treeoutput24
Processing function treeoutput25
Processing function treeoutput26
Processing function treeoutput27
Processing function treeoutput28
Processing function treeoutput29
Processing function treeoutput30
Processing function treeoutput31
Processing function treeoutput32
Processing function treeoutput
Processing function askmode7
Processing function askmode8
Processing function askmode9
Processing function askmode10
Processing function askmode
Processing function main39
Processing function expandmode0
Processing function expandmode1
Processing function expand_pre0
Processing function pr_pre_expansion0
Processing function pr_pre_expansion1
Processing function pr_pre_expansion2
Processing function pr_pre_expansion3
Processing function pr_pre_expansion4
Processing function forcelc0
Processing function forcelc1
Processing function forcelc
Processing function pr_pre_expansion5
Processing function expand_suf0
Processing function pr_suf_expansion0
Processing function pr_suf_expansion1
Processing function pr_suf_expansion2
Processing function pr_suf_expansion3
Processing function pr_suf_expansion4
Processing function pr_suf_expansion
Processing function expand_suf1
Processing function expand_suf2
Processing function expand_suf
Processing function pr_pre_expansion6
Processing function pr_pre_expansion
Processing function expand_pre1
Processing function expand_pre2
Processing function expand_pre
Processing function expandmode
Processing function main40
Processing function dumpmode0
Processing function dumpmode1
Processing function dumpmode2
Processing function entdump0
Processing function setdump0
Processing function setdump1
Processing function setdump2
Processing function subsetdump0
Processing function subsetdump1
Processing function subsetdump2
Processing function subsetdump3
Processing function subsetdump4
Processing function subsetdump5
Processing function subsetdump
Processing function setdump3
Processing function setdump4
Processing function setdump
Processing function entdump1
Processing function entdump2
Processing function entdump3
Processing function entdump4
Processing function entdump
Processing function tbldump0
Processing function tbldump
Processing function dumpmode3
Processing function dumpmode4
Processing function dumpmode
Processing function main41
Processing function checkfile0
Processing function checkfile1
Processing function checkfile2
Processing function checkfile3
Processing function checkfile4
Processing function checkfile5
Processing function checkfile6
Processing function checkfile7
Processing function checkfile
Processing function main42
Processing function dofile0
Processing function dofile1
Processing function dofile2
Processing function update_file0
Processing function update_file1
Processing function update_file2
Processing function update_file3
Processing function update_file4
Processing function update_file5
Processing function update_file
Processing function dofile3
Processing function dofile
Processing function main43
Processing function main
Processing function casecmp0
Processing function casecmp1
Processing function casecmp2
Processing function casecmp3
Processing function casecmp4
Processing function casecmp5
Processing function casecmp6
Processing function casecmp
Processing function posscmp
Processing function pdictcmp
Finalizing pdictcmp
Finalizing posscmp
Finalizing casecmp
Mark Input dependent function casecmp
Finalizing casecmp6
Mark Input dependent function casecmp6
Finalizing casecmp5
Mark Input dependent function casecmp5
Finalizing casecmp4
Mark Input dependent function casecmp4
Finalizing casecmp3
Mark Input dependent function casecmp3
Finalizing casecmp2
Mark Input dependent function casecmp2
Finalizing casecmp1
Mark Input dependent function casecmp1
Finalizing casecmp0
Mark Input dependent function casecmp0
Finalizing main
Finalizing main43
Mark Input dependent function main43
Finalizing dofile
Mark Input dependent function dofile
Finalizing dofile3
Mark Input dependent function dofile3
Finalizing update_file
Mark Input dependent function update_file
Finalizing update_file5
Mark Input dependent function update_file5
Finalizing update_file4
Mark Input dependent function update_file4
Finalizing update_file3
Mark Input dependent function update_file3
Finalizing update_file2
Mark Input dependent function update_file2
Finalizing update_file1
Mark Input dependent function update_file1
Finalizing update_file0
Mark Input dependent function update_file0
Finalizing dofile2
Mark Input dependent function dofile2
Finalizing dofile1
Mark Input dependent function dofile1
Finalizing dofile0
Mark Input dependent function dofile0
Finalizing main42
Mark Input dependent function main42
Finalizing checkfile
Mark Input dependent function checkfile
Finalizing checkfile7
Mark Input dependent function checkfile7
Finalizing checkfile6
Mark Input dependent function checkfile6
Finalizing checkfile5
Mark Input dependent function checkfile5
Finalizing checkfile4
Mark Input dependent function checkfile4
Finalizing checkfile3
Mark Input dependent function checkfile3
Finalizing checkfile2
Mark Input dependent function checkfile2
Finalizing checkfile1
Mark Input dependent function checkfile1
Finalizing checkfile0
Mark Input dependent function checkfile0
Finalizing main41
Mark Input dependent function main41
Finalizing dumpmode
Mark Input dependent function dumpmode
Finalizing dumpmode4
Mark Input dependent function dumpmode4
Finalizing dumpmode3
Mark Input dependent function dumpmode3
Finalizing tbldump
Mark Input dependent function tbldump
Finalizing tbldump0
Mark Input dependent function tbldump0
Finalizing entdump
Mark Input dependent function entdump
Finalizing entdump4
Mark Input dependent function entdump4
Finalizing entdump3
Mark Input dependent function entdump3
Finalizing entdump2
Mark Input dependent function entdump2
Finalizing entdump1
Mark Input dependent function entdump1
Finalizing setdump
Mark Input dependent function setdump
Finalizing setdump4
Mark Input dependent function setdump4
Finalizing setdump3
Mark Input dependent function setdump3
Finalizing subsetdump
Mark Input dependent function subsetdump
Finalizing subsetdump5
Mark Input dependent function subsetdump5
Finalizing subsetdump4
Mark Input dependent function subsetdump4
Finalizing subsetdump3
Mark Input dependent function subsetdump3
Finalizing subsetdump2
Mark Input dependent function subsetdump2
Finalizing subsetdump1
Mark Input dependent function subsetdump1
Finalizing subsetdump0
Mark Input dependent function subsetdump0
Finalizing setdump2
Mark Input dependent function setdump2
Finalizing setdump1
Mark Input dependent function setdump1
Finalizing setdump0
Mark Input dependent function setdump0
Finalizing entdump0
Mark Input dependent function entdump0
Finalizing dumpmode2
Mark Input dependent function dumpmode2
Finalizing dumpmode1
Mark Input dependent function dumpmode1
Finalizing dumpmode0
Mark Input dependent function dumpmode0
Finalizing main40
Mark Input dependent function main40
Finalizing expandmode
Mark Input dependent function expandmode
Finalizing expand_pre
Mark Input dependent function expand_pre
Finalizing expand_pre2
Mark Input dependent function expand_pre2
Finalizing expand_pre1
Mark Input dependent function expand_pre1
Finalizing pr_pre_expansion
Mark Input dependent function pr_pre_expansion
Finalizing pr_pre_expansion6
Mark Input dependent function pr_pre_expansion6
Finalizing expand_suf
Mark Input dependent function expand_suf
Finalizing expand_suf2
Mark Input dependent function expand_suf2
Finalizing expand_suf1
Mark Input dependent function expand_suf1
Finalizing pr_suf_expansion
Mark Input dependent function pr_suf_expansion
Finalizing pr_suf_expansion4
Mark Input dependent function pr_suf_expansion4
Finalizing pr_suf_expansion3
Mark Input dependent function pr_suf_expansion3
Finalizing pr_suf_expansion2
Mark Input dependent function pr_suf_expansion2
Finalizing pr_suf_expansion1
Mark Input dependent function pr_suf_expansion1
Finalizing pr_suf_expansion0
Mark Input dependent function pr_suf_expansion0
Finalizing expand_suf0
Mark Input dependent function expand_suf0
Finalizing pr_pre_expansion5
Mark Input dependent function pr_pre_expansion5
Finalizing forcelc
Mark Input dependent function forcelc
Finalizing forcelc1
Mark Input dependent function forcelc1
Finalizing forcelc0
Mark Input dependent function forcelc0
Finalizing pr_pre_expansion4
Mark Input dependent function pr_pre_expansion4
Finalizing pr_pre_expansion3
Mark Input dependent function pr_pre_expansion3
Finalizing pr_pre_expansion2
Mark Input dependent function pr_pre_expansion2
Finalizing pr_pre_expansion1
Mark Input dependent function pr_pre_expansion1
Finalizing pr_pre_expansion0
Mark Input dependent function pr_pre_expansion0
Finalizing expand_pre0
Mark Input dependent function expand_pre0
Finalizing expandmode1
Mark Input dependent function expandmode1
Finalizing expandmode0
Mark Input dependent function expandmode0
Finalizing main39
Mark Input dependent function main39
Finalizing askmode
Mark Input dependent function askmode
Finalizing askmode10
Mark Input dependent function askmode10
Finalizing askmode9
Mark Input dependent function askmode9
Finalizing askmode8
Mark Input dependent function askmode8
Finalizing askmode7
Mark Input dependent function askmode7
Finalizing treeoutput
Mark Input dependent function treeoutput
Finalizing treeoutput32
Mark Input dependent function treeoutput32
Finalizing treeoutput31
Mark Input dependent function treeoutput31
Finalizing treeoutput30
Mark Input dependent function treeoutput30
Finalizing treeoutput29
Mark Input dependent function treeoutput29
Finalizing treeoutput28
Mark Input dependent function treeoutput28
Finalizing treeoutput27
Mark Input dependent function treeoutput27
Finalizing treeoutput26
Mark Input dependent function treeoutput26
Finalizing treeoutput25
Mark Input dependent function treeoutput25
Finalizing treeoutput24
Mark Input dependent function treeoutput24
Finalizing treeoutput23
Mark Input dependent function treeoutput23
Finalizing treeoutput22
Mark Input dependent function treeoutput22
Finalizing treeoutput21
Mark Input dependent function treeoutput21
Finalizing treeoutput20
Mark Input dependent function treeoutput20
Finalizing treeoutput19
Mark Input dependent function treeoutput19
Finalizing treeoutput18
Mark Input dependent function treeoutput18
Finalizing treeoutput17
Mark Input dependent function treeoutput17
Finalizing treeoutput16
Mark Input dependent function treeoutput16
Finalizing treeoutput15
Mark Input dependent function treeoutput15
Finalizing treeoutput14
Mark Input dependent function treeoutput14
Finalizing treeoutput13
Mark Input dependent function treeoutput13
Finalizing toutent
Mark Input dependent function toutent
Finalizing toutent2
Mark Input dependent function toutent2
Finalizing toutent1
Mark Input dependent function toutent1
Finalizing toutword
Mark Input dependent function toutword
Finalizing toutword2
Mark Input dependent function toutword2
Finalizing toutword1
Mark Input dependent function toutword1
Finalizing flagout
Mark Input dependent function flagout
Finalizing flagout1
Mark Input dependent function flagout1
Finalizing flagout0
Mark Input dependent function flagout0
Finalizing toutword0
Mark Input dependent function toutword0
Finalizing toutent0
Mark Input dependent function toutent0
Finalizing treeoutput12
Mark Input dependent function treeoutput12
Finalizing treeoutput11
Mark Input dependent function treeoutput11
Finalizing treeoutput10
Mark Input dependent function treeoutput10
Finalizing treeoutput9
Mark Input dependent function treeoutput9
Finalizing treeoutput8
Mark Input dependent function treeoutput8
Finalizing treeoutput7
Mark Input dependent function treeoutput7
Finalizing treeoutput6
Mark Input dependent function treeoutput6
Finalizing treeoutput5
Mark Input dependent function treeoutput5
Finalizing treeoutput4
Mark Input dependent function treeoutput4
Finalizing treeoutput3
Mark Input dependent function treeoutput3
Finalizing treeoutput2
Mark Input dependent function treeoutput2
Finalizing treeoutput1
Mark Input dependent function treeoutput1
Finalizing treeoutput0
Mark Input dependent function treeoutput0
Finalizing askmode6
Mark Input dependent function askmode6
Finalizing askmode5
Mark Input dependent function askmode5
Finalizing checkline
Mark Input dependent function checkline
Finalizing checkline20
Mark Input dependent function checkline20
Finalizing checkline19
Mark Input dependent function checkline19
Finalizing correct
Mark Input dependent function correct
Finalizing correct26
Mark Input dependent function correct26
Finalizing lookharder
Mark Input dependent function lookharder
Finalizing lookharder2
Mark Input dependent function lookharder2
Finalizing lookharder1
Mark Input dependent function lookharder1
Finalizing lookharder0
Mark Input dependent function lookharder0
Finalizing correct25
Mark Input dependent function correct25
Finalizing correct24
Mark Input dependent function correct24
Finalizing correct23
Mark Input dependent function correct23
Finalizing correct22
Mark Input dependent function correct22
Finalizing correct21
Mark Input dependent function correct21
Finalizing inserttoken
Mark Input dependent function inserttoken
Finalizing inserttoken6
Mark Input dependent function inserttoken6
Finalizing inserttoken5
Mark Input dependent function inserttoken5
Finalizing inserttoken4
Mark Input dependent function inserttoken4
Finalizing inserttoken3
Mark Input dependent function inserttoken3
Finalizing inserttoken2
Mark Input dependent function inserttoken2
Finalizing inserttoken1
Mark Input dependent function inserttoken1
Finalizing inserttoken0
Mark Input dependent function inserttoken0
Finalizing correct20
Mark Input dependent function correct20
Finalizing correct19
Mark Input dependent function correct19
Finalizing correct18
Mark Input dependent function correct18
Finalizing my_getline
Mark Input dependent function my_getline
Finalizing my_getline6
Mark Input dependent function my_getline6
Finalizing my_getline5
Mark Input dependent function my_getline5
Finalizing my_getline4
Mark Input dependent function my_getline4
Finalizing my_getline3
Mark Input dependent function my_getline3
Finalizing my_getline2
Mark Input dependent function my_getline2
Finalizing my_getline1
Mark Input dependent function my_getline1
Finalizing my_getline0
Mark Input dependent function my_getline0
Finalizing correct17
Mark Input dependent function correct17
Finalizing correct16
Mark Input dependent function correct16
Finalizing correct15
Mark Input dependent function correct15
Finalizing correct14
Mark Input dependent function correct14
Finalizing correct13
Mark Input dependent function correct13
Finalizing correct12
Mark Input dependent function correct12
Finalizing correct11
Mark Input dependent function correct11
Finalizing correct10
Mark Input dependent function correct10
Finalizing correct9
Mark Input dependent function correct9
Finalizing correct8
Mark Input dependent function correct8
Finalizing line_size
Mark Input dependent function line_size
Finalizing line_size0
Mark Input dependent function line_size0
Finalizing correct7
Mark Input dependent function correct7
Finalizing show_line
Mark Input dependent function show_line
Finalizing show_line3
Mark Input dependent function show_line3
Finalizing show_line2
Mark Input dependent function show_line2
Finalizing show_line1
Mark Input dependent function show_line1
Finalizing show_line0
Mark Input dependent function show_line0
Finalizing show_char
Mark Input dependent function show_char
Finalizing show_char14
Mark Input dependent function show_char14
Finalizing show_char13
Mark Input dependent function show_char13
Finalizing show_char12
Mark Input dependent function show_char12
Finalizing show_char11
Mark Input dependent function show_char11
Finalizing show_char10
Mark Input dependent function show_char10
Finalizing show_char9
Mark Input dependent function show_char9
Finalizing show_char8
Mark Input dependent function show_char8
Finalizing show_char7
Mark Input dependent function show_char7
Finalizing show_char6
Mark Input dependent function show_char6
Finalizing show_char5
Mark Input dependent function show_char5
Finalizing show_char4
Mark Input dependent function show_char4
Finalizing show_char3
Mark Input dependent function show_char3
Finalizing show_char2
Mark Input dependent function show_char2
Finalizing show_char1
Mark Input dependent function show_char1
Finalizing show_char0
Mark Input dependent function show_char0
Finalizing correct6
Mark Input dependent function correct6
Finalizing correct5
Mark Input dependent function correct5
Finalizing correct4
Mark Input dependent function correct4
Finalizing correct3
Mark Input dependent function correct3
Finalizing correct2
Mark Input dependent function correct2
Finalizing correct1
Mark Input dependent function correct1
Finalizing correct0
Mark Input dependent function correct0
Finalizing checkline18
Mark Input dependent function checkline18
Finalizing checkline17
Mark Input dependent function checkline17
Finalizing checkline16
Mark Input dependent function checkline16
Finalizing checkline15
Mark Input dependent function checkline15
Finalizing checkline14
Mark Input dependent function checkline14
Finalizing makepossibilities
Mark Input dependent function makepossibilities
Finalizing makepossibilities8
Mark Input dependent function makepossibilities8
Finalizing makepossibilities7
Mark Input dependent function makepossibilities7
Finalizing makepossibilities6
Mark Input dependent function makepossibilities6
Finalizing tryveryhard
Mark Input dependent function tryveryhard
Finalizing tryveryhard0
Mark Input dependent function tryveryhard0
Finalizing makepossibilities5
Mark Input dependent function makepossibilities5
Finalizing missingspace
Mark Input dependent function missingspace
Finalizing missingspace2
Mark Input dependent function missingspace2
Finalizing missingspace1
Mark Input dependent function missingspace1
Finalizing missingspace0
Mark Input dependent function missingspace0
Finalizing makepossibilities4
Mark Input dependent function makepossibilities4
Finalizing wrongletter
Mark Input dependent function wrongletter
Finalizing wrongletter1
Mark Input dependent function wrongletter1
Finalizing wrongletter0
Mark Input dependent function wrongletter0
Finalizing makepossibilities3
Mark Input dependent function makepossibilities3
Finalizing extraletter
Mark Input dependent function extraletter
Finalizing extraletter0
Mark Input dependent function extraletter0
Finalizing makepossibilities2
Mark Input dependent function makepossibilities2
Finalizing transposedletter
Mark Input dependent function transposedletter
Finalizing transposedletter1
Mark Input dependent function transposedletter1
Finalizing transposedletter0
Mark Input dependent function transposedletter0
Finalizing makepossibilities1
Mark Input dependent function makepossibilities1
Finalizing missingletter
Mark Input dependent function missingletter
Finalizing missingletter2
Mark Input dependent function missingletter2
Finalizing missingletter1
Mark Input dependent function missingletter1
Finalizing missingletter0
Mark Input dependent function missingletter0
Finalizing wrongcapital
Mark Input dependent function wrongcapital
Finalizing ins_cap
Mark Input dependent function ins_cap
Finalizing ins_cap0
Mark Input dependent function ins_cap0
Finalizing save_cap
Mark Input dependent function save_cap
Finalizing save_cap4
Mark Input dependent function save_cap4
Finalizing save_cap3
Mark Input dependent function save_cap3
Finalizing save_cap2
Mark Input dependent function save_cap2
Finalizing save_cap1
Mark Input dependent function save_cap1
Finalizing save_cap0
Mark Input dependent function save_cap0
Finalizing makepossibilities0
Mark Input dependent function makepossibilities0
Finalizing checkline13
Mark Input dependent function checkline13
Finalizing checkline12
Mark Input dependent function checkline12
Finalizing checkline11
Mark Input dependent function checkline11
Finalizing checkline10
Mark Input dependent function checkline10
Finalizing checkline9
Mark Input dependent function checkline9
Finalizing compoundgood
Mark Input dependent function compoundgood
Finalizing compoundgood3
Mark Input dependent function compoundgood3
Finalizing compoundgood2
Mark Input dependent function compoundgood2
Finalizing compoundgood1
Mark Input dependent function compoundgood1
Finalizing compoundgood0
Mark Input dependent function compoundgood0
Finalizing good
Mark Input dependent function good
Finalizing good4
Mark Input dependent function good4
Finalizing chk_aff
Mark Input dependent function chk_aff
Finalizing chk_aff2
Mark Input dependent function chk_aff2
Finalizing chk_aff1
Mark Input dependent function chk_aff1
Finalizing chk_aff0
Mark Input dependent function chk_aff0
Finalizing pfx_list_chk
Mark Input dependent function pfx_list_chk
Finalizing pfx_list_chk5
Mark Input dependent function pfx_list_chk5
Finalizing chk_suf
Mark Input dependent function chk_suf
Finalizing chk_suf2
Mark Input dependent function chk_suf2
Finalizing chk_suf1
Mark Input dependent function chk_suf1
Finalizing chk_suf0
Mark Input dependent function chk_suf0
Finalizing suf_list_chk
Mark Input dependent function suf_list_chk
Finalizing suf_list_chk7
Mark Input dependent function suf_list_chk7
Finalizing suf_list_chk6
Mark Input dependent function suf_list_chk6
Finalizing suf_list_chk5
Mark Input dependent function suf_list_chk5
Finalizing suf_list_chk4
Mark Input dependent function suf_list_chk4
Finalizing suf_list_chk3
Mark Input dependent function suf_list_chk3
Finalizing suf_list_chk2
Mark Input dependent function suf_list_chk2
Finalizing suf_list_chk1
Mark Input dependent function suf_list_chk1
Finalizing suf_list_chk0
Mark Input dependent function suf_list_chk0
Finalizing pfx_list_chk4
Mark Input dependent function pfx_list_chk4
Finalizing ins_root_cap
Mark Input dependent function ins_root_cap
Finalizing ins_root_cap0
Mark Input dependent function ins_root_cap0
Finalizing insert
Mark Input dependent function insert
Finalizing insert2
Mark Input dependent function insert2
Finalizing insert1
Mark Input dependent function insert1
Finalizing insert0
Mark Input dependent function insert0
Finalizing save_root_cap
Mark Input dependent function save_root_cap
Finalizing save_root_cap11
Mark Input dependent function save_root_cap11
Finalizing save_root_cap10
Mark Input dependent function save_root_cap10
Finalizing save_root_cap9
Mark Input dependent function save_root_cap9
Finalizing save_root_cap8
Mark Input dependent function save_root_cap8
Finalizing save_root_cap7
Mark Input dependent function save_root_cap7
Finalizing save_root_cap6
Mark Input dependent function save_root_cap6
Finalizing save_root_cap5
Mark Input dependent function save_root_cap5
Finalizing save_root_cap4
Mark Input dependent function save_root_cap4
Finalizing lowcase
Mark Input dependent function lowcase
Finalizing lowcase0
Mark Input dependent function lowcase0
Finalizing save_root_cap3
Mark Input dependent function save_root_cap3
Finalizing save_root_cap2
Mark Input dependent function save_root_cap2
Finalizing save_root_cap1
Mark Input dependent function save_root_cap1
Finalizing save_root_cap0
Mark Input dependent function save_root_cap0
Finalizing pfx_list_chk3
Mark Input dependent function pfx_list_chk3
Finalizing pfx_list_chk2
Mark Input dependent function pfx_list_chk2
Finalizing flagpr
Mark Input dependent function flagpr
Finalizing flagpr16
Mark Input dependent function flagpr16
Finalizing flagpr15
Mark Input dependent function flagpr15
Finalizing flagpr14
Mark Input dependent function flagpr14
Finalizing flagpr13
Mark Input dependent function flagpr13
Finalizing flagpr12
Mark Input dependent function flagpr12
Finalizing flagpr11
Mark Input dependent function flagpr11
Finalizing flagpr10
Mark Input dependent function flagpr10
Finalizing flagpr9
Mark Input dependent function flagpr9
Finalizing flagpr8
Mark Input dependent function flagpr8
Finalizing flagpr7
Mark Input dependent function flagpr7
Finalizing printichar
Mark Input dependent function printichar
Finalizing printichar1
Mark Input dependent function printichar1
Finalizing printichar0
Mark Input dependent function printichar0
Finalizing flagpr6
Mark Input dependent function flagpr6
Finalizing flagpr5
Mark Input dependent function flagpr5
Finalizing flagpr4
Mark Input dependent function flagpr4
Finalizing flagpr3
Mark Input dependent function flagpr3
Finalizing flagpr2
Mark Input dependent function flagpr2
Finalizing flagpr1
Mark Input dependent function flagpr1
Finalizing flagpr0
Mark Input dependent function flagpr0
Finalizing pfx_list_chk1
Mark Input dependent function pfx_list_chk1
Finalizing pfx_list_chk0
Mark Input dependent function pfx_list_chk0
Finalizing cap_ok
Mark Input dependent function cap_ok
Finalizing cap_ok10
Mark Input dependent function cap_ok10
Finalizing cap_ok9
Mark Input dependent function cap_ok9
Finalizing cap_ok8
Mark Input dependent function cap_ok8
Finalizing cap_ok7
Mark Input dependent function cap_ok7
Finalizing cap_ok6
Mark Input dependent function cap_ok6
Finalizing cap_ok5
Mark Input dependent function cap_ok5
Finalizing cap_ok4
Mark Input dependent function cap_ok4
Finalizing cap_ok3
Mark Input dependent function cap_ok3
Finalizing entryhasaffixes
Mark Input dependent function entryhasaffixes
Finalizing cap_ok2
Mark Input dependent function cap_ok2
Finalizing cap_ok1
Mark Input dependent function cap_ok1
Finalizing cap_ok0
Mark Input dependent function cap_ok0
Finalizing good3
Mark Input dependent function good3
Finalizing good2
Mark Input dependent function good2
Finalizing ichartosstr
Mark Input dependent function ichartosstr
Finalizing ichartosstr0
Mark Input dependent function ichartosstr0
Finalizing good1
Mark Input dependent function good1
Finalizing good0
Mark Input dependent function good0
Finalizing checkline8
Mark Input dependent function checkline8
Finalizing checkline7
Mark Input dependent function checkline7
Finalizing checkline6
Mark Input dependent function checkline6
Finalizing skipoverword
Mark Input dependent function skipoverword
Finalizing skipoverword4
Mark Input dependent function skipoverword4
Finalizing skipoverword3
Mark Input dependent function skipoverword3
Finalizing skipoverword2
Mark Input dependent function skipoverword2
Finalizing skipoverword1
Mark Input dependent function skipoverword1
Finalizing skipoverword0
Mark Input dependent function skipoverword0
Finalizing checkline5
Mark Input dependent function checkline5
Finalizing skiptoword
Mark Input dependent function skiptoword
Finalizing skiptoword19
Mark Input dependent function skiptoword19
Finalizing skiptoword18
Mark Input dependent function skiptoword18
Finalizing skiptoword17
Mark Input dependent function skiptoword17
Finalizing skiptoword16
Mark Input dependent function skiptoword16
Finalizing skiptoword15
Mark Input dependent function skiptoword15
Finalizing skiptoword14
Mark Input dependent function skiptoword14
Finalizing skiptoword13
Mark Input dependent function skiptoword13
Finalizing skiptoword12
Mark Input dependent function skiptoword12
Finalizing skiptoword11
Mark Input dependent function skiptoword11
Finalizing skiptoword10
Mark Input dependent function skiptoword10
Finalizing skiptoword9
Mark Input dependent function skiptoword9
Finalizing skiptoword8
Mark Input dependent function skiptoword8
Finalizing TeX_math_begin
Mark Input dependent function TeX_math_begin
Finalizing TeX_math_begin4
Mark Input dependent function TeX_math_begin4
Finalizing TeX_math_begin3
Mark Input dependent function TeX_math_begin3
Finalizing TeX_skip_check
Mark Input dependent function TeX_skip_check
Finalizing TeX_skip_check3
Mark Input dependent function TeX_skip_check3
Finalizing TeX_skip_check2
Mark Input dependent function TeX_skip_check2
Finalizing TeX_skip_check1
Mark Input dependent function TeX_skip_check1
Finalizing TeX_skip_check0
Mark Input dependent function TeX_skip_check0
Finalizing TeX_math_begin2
Mark Input dependent function TeX_math_begin2
Finalizing TeX_math_begin1
Mark Input dependent function TeX_math_begin1
Finalizing TeX_math_begin0
Mark Input dependent function TeX_math_begin0
Finalizing skiptoword7
Mark Input dependent function skiptoword7
Finalizing skiptoword6
Mark Input dependent function skiptoword6
Finalizing skiptoword5
Mark Input dependent function skiptoword5
Finalizing skiptoword4
Mark Input dependent function skiptoword4
Finalizing skiptoword3
Mark Input dependent function skiptoword3
Finalizing TeX_math_end
Mark Input dependent function TeX_math_end
Finalizing TeX_math_end2
Mark Input dependent function TeX_math_end2
Finalizing TeX_LR_begin
Mark Input dependent function TeX_LR_begin
Finalizing TeX_LR_begin2
Mark Input dependent function TeX_LR_begin2
Finalizing TeX_LR_begin1
Mark Input dependent function TeX_LR_begin1
Finalizing TeX_LR_begin0
Mark Input dependent function TeX_LR_begin0
Finalizing TeX_strncmp
Mark Input dependent function TeX_strncmp
Finalizing TeX_strncmp0
Mark Input dependent function TeX_strncmp0
Finalizing TeX_math_end1
Mark Input dependent function TeX_math_end1
Finalizing TeX_math_end0
Mark Input dependent function TeX_math_end0
Finalizing skiptoword2
Mark Input dependent function skiptoword2
Finalizing skiptoword1
Mark Input dependent function skiptoword1
Finalizing TeX_LR_check
Mark Input dependent function TeX_LR_check
Finalizing TeX_LR_check4
Mark Input dependent function TeX_LR_check4
Finalizing TeX_LR_check3
Mark Input dependent function TeX_LR_check3
Finalizing TeX_LR_check2
Mark Input dependent function TeX_LR_check2
Finalizing TeX_LR_check1
Mark Input dependent function TeX_LR_check1
Finalizing TeX_LR_check0
Mark Input dependent function TeX_LR_check0
Finalizing TeX_math_check
Mark Input dependent function TeX_math_check
Finalizing TeX_math_check3
Mark Input dependent function TeX_math_check3
Finalizing TeX_math_check2
Mark Input dependent function TeX_math_check2
Finalizing TeX_skip_args
Mark Input dependent function TeX_skip_args
Finalizing TeX_skip_args3
Mark Input dependent function TeX_skip_args3
Finalizing TeX_skip_args2
Mark Input dependent function TeX_skip_args2
Finalizing TeX_skip_args1
Mark Input dependent function TeX_skip_args1
Finalizing TeX_skip_args0
Mark Input dependent function TeX_skip_args0
Finalizing TeX_math_check1
Mark Input dependent function TeX_math_check1
Finalizing TeX_skip_parens
Mark Input dependent function TeX_skip_parens
Finalizing TeX_skip_parens0
Mark Input dependent function TeX_skip_parens0
Finalizing TeX_math_check0
Mark Input dependent function TeX_math_check0
Finalizing TeX_open_paren
Mark Input dependent function TeX_open_paren
Finalizing TeX_open_paren0
Mark Input dependent function TeX_open_paren0
Finalizing skiptoword0
Mark Input dependent function skiptoword0
Finalizing checkline4
Mark Input dependent function checkline4
Finalizing checkline3
Mark Input dependent function checkline3
Finalizing checkline2
Mark Input dependent function checkline2
Finalizing checkline1
Mark Input dependent function checkline1
Finalizing copyout
Mark Input dependent function copyout
Finalizing copyout1
Mark Input dependent function copyout1
Finalizing copyout0
Mark Input dependent function copyout0
Finalizing checkline0
Mark Input dependent function checkline0
Finalizing askmode4
Mark Input dependent function askmode4
Finalizing askmode3
Mark Input dependent function askmode3
Finalizing askmode2
Mark Input dependent function askmode2
Finalizing xgets
Mark Input dependent function xgets
Finalizing xgets4
Mark Input dependent function xgets4
Finalizing xgets3
Mark Input dependent function xgets3
Finalizing xgets2
Mark Input dependent function xgets2
Finalizing xgets1
Mark Input dependent function xgets1
Finalizing xgets0
Mark Input dependent function xgets0
Finalizing askmode1
Mark Input dependent function askmode1
Finalizing askmode0
Mark Input dependent function askmode0
Finalizing main38
Mark Input dependent function main38
Finalizing treeinit
Mark Input dependent function treeinit
Finalizing treeinit8
Mark Input dependent function treeinit8
Finalizing treeinit7
Mark Input dependent function treeinit7
Finalizing treeinit6
Mark Input dependent function treeinit6
Finalizing treeinit5
Mark Input dependent function treeinit5
Finalizing treeinit4
Mark Input dependent function treeinit4
Finalizing treeinit3
Mark Input dependent function treeinit3
Finalizing treeinit2
Mark Input dependent function treeinit2
Finalizing treeload
Mark Input dependent function treeload
Finalizing treeinsert
Mark Input dependent function treeinsert
Finalizing treeinsert13
Mark Input dependent function treeinsert13
Finalizing treeinsert12
Mark Input dependent function treeinsert12
Finalizing treeinsert11
Mark Input dependent function treeinsert11
Finalizing combinecaps
Mark Input dependent function combinecaps
Finalizing combinecaps3
Mark Input dependent function combinecaps3
Finalizing combinecaps2
Mark Input dependent function combinecaps2
Finalizing combinecaps1
Mark Input dependent function combinecaps1
Finalizing forcevheader
Mark Input dependent function forcevheader
Finalizing forcevheader0
Mark Input dependent function forcevheader0
Finalizing combinecaps0
Mark Input dependent function combinecaps0
Finalizing combine_two_entries
Mark Input dependent function combine_two_entries
Finalizing combine_two_entries2
Mark Input dependent function combine_two_entries2
Finalizing addvheader
Mark Input dependent function addvheader
Finalizing addvheader4
Mark Input dependent function addvheader4
Finalizing addvheader3
Mark Input dependent function addvheader3
Finalizing addvheader2
Mark Input dependent function addvheader2
Finalizing addvheader1
Mark Input dependent function addvheader1
Finalizing addvheader0
Mark Input dependent function addvheader0
Finalizing combine_two_entries1
Mark Input dependent function combine_two_entries1
Finalizing combine_two_entries0
Mark Input dependent function combine_two_entries0
Finalizing myfree
Mark Input dependent function myfree
Finalizing myfree0
Mark Input dependent function myfree0
Finalizing combineaffixes
Mark Input dependent function combineaffixes
Finalizing combineaffixes0
Mark Input dependent function combineaffixes0
Finalizing acoversb
Mark Input dependent function acoversb
Finalizing issubset
Mark Input dependent function issubset
Finalizing lookup
Mark Input dependent function lookup
Finalizing lookup3
Mark Input dependent function lookup3
Finalizing treelookup
Mark Input dependent function treelookup
Finalizing treelookup2
Mark Input dependent function treelookup2
Finalizing treelookup1
Mark Input dependent function treelookup1
Finalizing treelookup0
Mark Input dependent function treelookup0
Finalizing lookup2
Mark Input dependent function lookup2
Finalizing lookup1
Mark Input dependent function lookup1
Finalizing lookup0
Mark Input dependent function lookup0
Finalizing treeinsert10
Mark Input dependent function treeinsert10
Finalizing makedent
Mark Input dependent function makedent
Finalizing makedent10
Mark Input dependent function makedent10
Finalizing makedent9
Mark Input dependent function makedent9
Finalizing makedent8
Mark Input dependent function makedent8
Finalizing makedent7
Mark Input dependent function makedent7
Finalizing chupcase
Mark Input dependent function chupcase
Finalizing chupcase0
Mark Input dependent function chupcase0
Finalizing upcase
Mark Input dependent function upcase
Finalizing upcase0
Mark Input dependent function upcase0
Finalizing strtosichar
Mark Input dependent function strtosichar
Finalizing strtosichar0
Mark Input dependent function strtosichar0
Finalizing makedent6
Mark Input dependent function makedent6
Finalizing mymalloc
Mark Input dependent function mymalloc
Finalizing makedent5
Mark Input dependent function makedent5
Finalizing whatcap
Mark Input dependent function whatcap
Finalizing whatcap4
Mark Input dependent function whatcap4
Finalizing whatcap3
Mark Input dependent function whatcap3
Finalizing whatcap2
Mark Input dependent function whatcap2
Finalizing whatcap1
Mark Input dependent function whatcap1
Finalizing whatcap0
Mark Input dependent function whatcap0
Finalizing makedent4
Mark Input dependent function makedent4
Finalizing makedent3
Mark Input dependent function makedent3
Finalizing makedent2
Mark Input dependent function makedent2
Finalizing ichartostr
Mark Input dependent function ichartostr
Finalizing ichartostr4
Mark Input dependent function ichartostr4
Finalizing ichartostr3
Mark Input dependent function ichartostr3
Finalizing ichartostr2
Mark Input dependent function ichartostr2
Finalizing ichartostr1
Mark Input dependent function ichartostr1
Finalizing ichartostr0
Mark Input dependent function ichartostr0
Finalizing makedent1
Mark Input dependent function makedent1
Finalizing makedent0
Mark Input dependent function makedent0
Finalizing treeinsert9
Mark Input dependent function treeinsert9
Finalizing treeinsert8
Mark Input dependent function treeinsert8
Finalizing treeinsert7
Mark Input dependent function treeinsert7
Finalizing treeinsert6
Mark Input dependent function treeinsert6
Finalizing treeinsert5
Mark Input dependent function treeinsert5
Finalizing tinsert
Mark Input dependent function tinsert
Finalizing tinsert3
Mark Input dependent function tinsert3
Finalizing tinsert2
Mark Input dependent function tinsert2
Finalizing tinsert1
Mark Input dependent function tinsert1
Finalizing hash
Mark Input dependent function hash
Finalizing hash1
Mark Input dependent function hash1
Finalizing hash0
Mark Input dependent function hash0
Finalizing tinsert0
Mark Input dependent function tinsert0
Finalizing strtoichar
Mark Input dependent function strtoichar
Finalizing strtoichar3
Mark Input dependent function strtoichar3
Finalizing strtoichar2
Mark Input dependent function strtoichar2
Finalizing strtoichar1
Mark Input dependent function strtoichar1
Finalizing stringcharlen
Mark Input dependent function stringcharlen
Finalizing stringcharlen8
Mark Input dependent function stringcharlen8
Finalizing stringcharlen7
Mark Input dependent function stringcharlen7
Finalizing stringcharlen6
Mark Input dependent function stringcharlen6
Finalizing stringcharlen5
Mark Input dependent function stringcharlen5
Finalizing stringcharlen4
Mark Input dependent function stringcharlen4
Finalizing stringcharlen3
Mark Input dependent function stringcharlen3
Finalizing stringcharlen2
Mark Input dependent function stringcharlen2
Finalizing stringcharlen1
Mark Input dependent function stringcharlen1
Finalizing stringcharlen0
Mark Input dependent function stringcharlen0
Finalizing strtoichar0
Mark Input dependent function strtoichar0
Finalizing treeinsert4
Mark Input dependent function treeinsert4
Finalizing treeinsert3
Mark Input dependent function treeinsert3
Finalizing treeinsert2
Mark Input dependent function treeinsert2
Finalizing treeinsert1
Mark Input dependent function treeinsert1
Finalizing treeinsert0
Mark Input dependent function treeinsert0
Finalizing treeinit1
Mark Input dependent function treeinit1
Finalizing trydict
Mark Input dependent function trydict
Finalizing trydict2
Mark Input dependent function trydict2
Finalizing trydict1
Mark Input dependent function trydict1
Finalizing trydict0
Mark Input dependent function trydict0
Finalizing treeinit0
Mark Input dependent function treeinit0
Finalizing main37
Mark Input dependent function main37
Finalizing initckch
Mark Input dependent function initckch
Finalizing initckch2
Mark Input dependent function initckch2
Finalizing initckch1
Mark Input dependent function initckch1
Finalizing initckch0
Mark Input dependent function initckch0
Finalizing main36
Mark Input dependent function main36
Finalizing main35
Mark Input dependent function main35
Finalizing main34
Mark Input dependent function main34
Finalizing main33
Mark Input dependent function main33
Finalizing findfiletype
Mark Input dependent function findfiletype
Finalizing findfiletype7
Mark Input dependent function findfiletype7
Finalizing findfiletype6
Mark Input dependent function findfiletype6
Finalizing findfiletype5
Mark Input dependent function findfiletype5
Finalizing findfiletype4
Mark Input dependent function findfiletype4
Finalizing findfiletype3
Mark Input dependent function findfiletype3
Finalizing findfiletype2
Mark Input dependent function findfiletype2
Finalizing findfiletype1
Mark Input dependent function findfiletype1
Finalizing findfiletype0
Mark Input dependent function findfiletype0
Finalizing linit
Mark Input dependent function linit
Finalizing linit49
Mark Input dependent function linit49
Finalizing linit48
Mark Input dependent function linit48
Finalizing linit47
Mark Input dependent function linit47
Finalizing linit46
Mark Input dependent function linit46
Finalizing linit45
Mark Input dependent function linit45
Finalizing linit44
Mark Input dependent function linit44
Finalizing linit43
Mark Input dependent function linit43
Finalizing linit42
Mark Input dependent function linit42
Finalizing linit41
Mark Input dependent function linit41
Finalizing linit40
Mark Input dependent function linit40
Finalizing linit39
Mark Input dependent function linit39
Finalizing linit38
Mark Input dependent function linit38
Finalizing linit37
Mark Input dependent function linit37
Finalizing linit36
Mark Input dependent function linit36
Finalizing linit35
Mark Input dependent function linit35
Finalizing linit34
Mark Input dependent function linit34
Finalizing linit33
Mark Input dependent function linit33
Finalizing linit32
Mark Input dependent function linit32
Finalizing linit31
Mark Input dependent function linit31
Finalizing linit30
Mark Input dependent function linit30
Finalizing linit29
Mark Input dependent function linit29
Finalizing linit28
Mark Input dependent function linit28
Finalizing linit27
Mark Input dependent function linit27
Finalizing linit26
Mark Input dependent function linit26
Finalizing linit25
Mark Input dependent function linit25
Finalizing linit24
Mark Input dependent function linit24
Finalizing linit23
Mark Input dependent function linit23
Finalizing linit22
Mark Input dependent function linit22
Finalizing linit21
Mark Input dependent function linit21
Finalizing linit20
Mark Input dependent function linit20
Finalizing linit19
Mark Input dependent function linit19
Finalizing linit18
Mark Input dependent function linit18
Finalizing linit17
Mark Input dependent function linit17
Finalizing linit16
Mark Input dependent function linit16
Finalizing linit15
Mark Input dependent function linit15
Finalizing linit14
Mark Input dependent function linit14
Finalizing linit13
Mark Input dependent function linit13
Finalizing linit12
Mark Input dependent function linit12
Finalizing linit11
Mark Input dependent function linit11
Finalizing linit10
Mark Input dependent function linit10
Finalizing linit9
Mark Input dependent function linit9
Finalizing linit8
Mark Input dependent function linit8
Finalizing linit7
Mark Input dependent function linit7
Finalizing linit6
Mark Input dependent function linit6
Finalizing linit5
Mark Input dependent function linit5
Finalizing linit4
Mark Input dependent function linit4
Finalizing linit3
Mark Input dependent function linit3
Finalizing linit2
Mark Input dependent function linit2
Finalizing linit1
Mark Input dependent function linit1
Finalizing linit0
Mark Input dependent function linit0
Finalizing main32
Mark Input dependent function main32
Finalizing main31
Mark Input dependent function main31
Finalizing main30
Mark Input dependent function main30
Finalizing main29
Mark Input dependent function main29
Finalizing main28
Mark Input dependent function main28
Finalizing main27
Mark Input dependent function main27
Finalizing main26
Mark Input dependent function main26
Finalizing main25
Mark Input dependent function main25
Finalizing main24
Mark Input dependent function main24
Finalizing main23
Mark Input dependent function main23
Finalizing main22
Mark Input dependent function main22
Finalizing main21
Mark Input dependent function main21
Finalizing main20
Mark Input dependent function main20
Finalizing main19
Mark Input dependent function main19
Finalizing main18
Mark Input dependent function main18
Finalizing main17
Mark Input dependent function main17
Finalizing main16
Mark Input dependent function main16
Finalizing main15
Mark Input dependent function main15
Finalizing main14
Mark Input dependent function main14
Finalizing main13
Mark Input dependent function main13
Finalizing main12
Mark Input dependent function main12
Finalizing main11
Mark Input dependent function main11
Finalizing main10
Mark Input dependent function main10
Finalizing main9
Mark Input dependent function main9
Finalizing main8
Mark Input dependent function main8
Finalizing main7
Mark Input dependent function main7
Finalizing main6
Mark Input dependent function main6
Finalizing usage
Mark Input dependent function usage
Finalizing givehelp
Mark Input dependent function givehelp
Finalizing givehelp2
Mark Input dependent function givehelp2
Finalizing givehelp1
Mark Input dependent function givehelp1
Finalizing givehelp0
Mark Input dependent function givehelp0
Finalizing usage0
Mark Input dependent function usage0
Finalizing main5
Finalizing main4
Mark Input dependent function main4
Finalizing main3
Mark Input dependent function main3
Finalizing main2
Mark Input dependent function main2
Finalizing main1
Mark Input dependent function main1
Finalizing main0
Finalizing shellescape
Mark Input dependent function shellescape
Finalizing shellescape5
Mark Input dependent function shellescape5
Finalizing shellescape4
Mark Input dependent function shellescape4
Finalizing shellescape3
Mark Input dependent function shellescape3
Finalizing shellescape2
Mark Input dependent function shellescape2
Finalizing shellescape1
Mark Input dependent function shellescape1
Finalizing shellescape0
Mark Input dependent function shellescape0
Finalizing stop
Mark Input dependent function stop
Finalizing onstop
Mark Input dependent function onstop
Finalizing onstop0
Mark Input dependent function onstop0
Finalizing done
Mark Input dependent function done
Finalizing terminit
Mark Input dependent function terminit
Finalizing terminit5
Mark Input dependent function terminit5
Finalizing terminit4
Mark Input dependent function terminit4
Finalizing terminit3
Mark Input dependent function terminit3
Finalizing terminit2
Mark Input dependent function terminit2
Finalizing terminit1
Mark Input dependent function terminit1
Finalizing terminit0
Mark Input dependent function terminit0
Finalizing backup
Mark Input dependent function backup
Finalizing normal
Mark Input dependent function normal
Finalizing inverse
Mark Input dependent function inverse
Finalizing move
Mark Input dependent function move
Finalizing erase
Mark Input dependent function erase
Finished input dependency analysis

In  mark function pass 
In  filter function pass 
Filter file:/home/anahitik/SIP/sip-eval/combination/ispell.x.bc/10/0
here!:linit3
here!:flagpr7
here!:inserttoken
here!:flagpr14
here!:save_root_cap2
here!:pr_pre_expansion2
here!:linit27
here!:correct6
here!:skiptoword5
here!:casecmp
here!:correct8
here!:pr_pre_expansion
here!:linit5
here!:myfree
here!:combine_two_entries1
here!:askmode7
here!:chupcase0
here!:good2
here!:findfiletype2
here!:treeinsert4
here!:linit33
here!:TeX_LR_check0
here!:wrongletter
here!:treeoutput23
here!:combinecaps1
here!:combine_two_entries2
here!:show_char4
here!:strtoichar0
here!:terminit5
here!:entdump4
here!:treeoutput16
here!:ichartosstr0
here!:main32
here!:treeoutput32
here!:askmode6
here!:flagpr16
here!:suf_list_chk6
here!:pdictcmp
here!:treeinsert12
here!:lookharder2
here!:main19
here!:checkline20
here!:suf_list_chk0
here!:correct20
here!:correct25
here!:expand_suf
here!:treeinsert5
here!:treeinsert
here!:tryveryhard
here!:good3
here!:linit12
here!:tbldump
here!:dumpmode1
here!:skipoverword4
here!:expand_suf2
here!:treeoutput7
here!:main34
here!:extraletter
here!:TeX_math_check1
here!:main3
here!:suf_list_chk2
here!:strtoichar3
here!:terminit2
here!:correct26
here!:missingspace0
here!:correct
here!:compoundgood3
here!:missingletter2
here!:linit4
here!:TeX_math_check0
here!:TeX_math_check0
got filter function names
did not find erase demangled to erase
did not find move demangled to move
did not find inverse demangled to inverse
did not find normal demangled to normal
did not find backup demangled to backup
did not find terminit demangled to terminit
did not find getenv demangled to getenv
did not find atoi demangled to atoi
did not find fprintf demangled to fprintf
did not find isatty demangled to isatty
did not find exit demangled to exit
did not find tcgetattr demangled to tcgetattr
did not find llvm.memcpy.p0i8.p0i8.i64 demangled to llvm.memcpy.p0i8.p0i8.i64
did not find tcsetattr demangled to tcsetattr
did not find signal demangled to signal
did not find done demangled to done
did not find onstop demangled to onstop
did not find kill demangled to kill
did not find unlink demangled to unlink
did not find stop demangled to stop
did not find shellescape demangled to shellescape
did not find fork demangled to fork
did not find execvp demangled to execvp
did not find _exit demangled to _exit
did not find wait demangled to wait
did not find printf demangled to printf
did not find fflush demangled to fflush
did not find getchar demangled to getchar
did not find main demangled to main
did not find index demangled to index
did not find strcpy demangled to strcpy
did not find sprintf demangled to sprintf
did not find rindex demangled to rindex
did not find strcmp demangled to strcmp
did not find strcat demangled to strcat
did not find strlen demangled to strlen
did not find usage demangled to usage
did not find strncmp demangled to strncmp
did not find access demangled to access
did not find initckch demangled to initckch
did not find expandmode demangled to expandmode
did not find setbuf demangled to setbuf
did not find dofile demangled to dofile
did not find fopen demangled to fopen
did not find sleep demangled to sleep
did not find fileno demangled to fileno
did not find fstat demangled to fstat
did not find mktemp demangled to mktemp
did not find chmod demangled to chmod
did not find fclose demangled to fclose
did not find update_file demangled to update_file
did not find link demangled to link
did not find _IO_getc demangled to _IO_getc
did not find _IO_putc demangled to _IO_putc
did not find fputs demangled to fputs
did not find llvm.memset.p0i8.i64 demangled to llvm.memset.p0i8.i64
did not find putchar demangled to putchar
did not find __ctype_b_loc demangled to __ctype_b_loc
did not find givehelp demangled to givehelp
did not find checkfile demangled to checkfile
did not find fgets demangled to fgets
Add filter function correct
FunctionInfo. Adding function:correct
did not find compoundgood demangled to compoundgood
did not find makepossibilities demangled to makepossibilities
did not find show_line demangled to show_line
did not find line_size demangled to line_size
did not find my_getline demangled to my_getline
Add filter function inserttoken
FunctionInfo. Adding function:inserttoken
did not find lookharder demangled to lookharder
did not find show_char demangled to show_char
did not find wrongcapital demangled to wrongcapital
did not find missingletter demangled to missingletter
did not find transposedletter demangled to transposedletter
Add filter function extraletter
FunctionInfo. Adding function:extraletter
Add filter function wrongletter
FunctionInfo. Adding function:wrongletter
did not find missingspace demangled to missingspace
Add filter function tryveryhard
FunctionInfo. Adding function:tryveryhard
did not find posscmp demangled to posscmp
did not find qsort demangled to qsort
Add filter function casecmp
FunctionInfo. Adding function:casecmp
did not find save_cap demangled to save_cap
did not find insert demangled to insert
did not find save_root_cap demangled to save_root_cap
did not find bcopy demangled to bcopy
did not find ins_cap demangled to ins_cap
did not find ins_root_cap demangled to ins_root_cap
did not find askmode demangled to askmode
did not find freopen demangled to freopen
did not find rewind demangled to rewind
did not find creat demangled to creat
did not find copyout demangled to copyout
did not find skipoverword demangled to skipoverword
did not find checkline demangled to checkline
did not find skiptoword demangled to skiptoword
did not find TeX_math_check demangled to TeX_math_check
did not find TeX_LR_check demangled to TeX_LR_check
did not find TeX_math_end demangled to TeX_math_end
did not find TeX_strncmp demangled to TeX_strncmp
did not find TeX_skip_parens demangled to TeX_skip_parens
did not find TeX_math_begin demangled to TeX_math_begin
did not find TeX_skip_check demangled to TeX_skip_check
did not find TeX_LR_begin demangled to TeX_LR_begin
did not find TeX_open_paren demangled to TeX_open_paren
did not find TeX_skip_args demangled to TeX_skip_args
did not find dumpmode demangled to dumpmode
Add filter function tbldump
FunctionInfo. Adding function:tbldump
did not find entdump demangled to entdump
did not find setdump demangled to setdump
did not find subsetdump demangled to subsetdump
did not find good demangled to good
did not find cap_ok demangled to cap_ok
did not find entryhasaffixes demangled to entryhasaffixes
did not find flagpr demangled to flagpr
did not find linit demangled to linit
did not find open demangled to open
did not find read demangled to read
did not find calloc demangled to calloc
did not find malloc demangled to malloc
did not find lseek demangled to lseek
did not find close demangled to close
did not find lookup demangled to lookup
did not find hash demangled to hash
did not find makedent demangled to makedent
did not find strtoichar demangled to strtoichar
did not find ichartostr demangled to ichartostr
did not find whatcap demangled to whatcap
did not find chupcase demangled to chupcase
did not find strtosichar demangled to strtosichar
did not find upcase demangled to upcase
did not find stringcharlen demangled to stringcharlen
did not find addvheader demangled to addvheader
did not find combinecaps demangled to combinecaps
did not find combine_two_entries demangled to combine_two_entries
did not find forcevheader demangled to forcevheader
did not find combineaffixes demangled to combineaffixes
did not find acoversb demangled to acoversb
did not find issubset demangled to issubset
did not find lowcase demangled to lowcase
did not find toutent demangled to toutent
did not find ichartosstr demangled to ichartosstr
did not find toutword demangled to toutword
did not find flagout demangled to flagout
did not find printichar demangled to printichar
did not find findfiletype demangled to findfiletype
did not find chk_aff demangled to chk_aff
did not find pfx_list_chk demangled to pfx_list_chk
did not find chk_suf demangled to chk_suf
did not find suf_list_chk demangled to suf_list_chk
did not find expand_pre demangled to expand_pre
Add filter function pr_pre_expansion
FunctionInfo. Adding function:pr_pre_expansion
did not find forcelc demangled to forcelc
Add filter function expand_suf
FunctionInfo. Adding function:expand_suf
did not find pr_suf_expansion demangled to pr_suf_expansion
did not find treeinit demangled to treeinit
did not find trydict demangled to trydict
did not find treeload demangled to treeload
did not find perror demangled to perror
did not find __errno_location demangled to __errno_location
Add filter function treeinsert
FunctionInfo. Adding function:treeinsert
did not find tinsert demangled to tinsert
did not find free demangled to free
did not find treelookup demangled to treelookup
did not find treeoutput demangled to treeoutput
Add filter function pdictcmp
FunctionInfo. Adding function:pdictcmp
did not find mymalloc demangled to mymalloc
Add filter function myfree
FunctionInfo. Adding function:myfree
did not find xgets demangled to xgets
did not find terminit0 demangled to terminit0
did not find terminit1 demangled to terminit1
Add filter function terminit2
FunctionInfo. Adding function:terminit2
did not find terminit3 demangled to terminit3
did not find terminit4 demangled to terminit4
Add filter function terminit5
FunctionInfo. Adding function:terminit5
did not find onstop0 demangled to onstop0
did not find shellescape0 demangled to shellescape0
did not find shellescape1 demangled to shellescape1
did not find shellescape2 demangled to shellescape2
did not find shellescape3 demangled to shellescape3
did not find shellescape4 demangled to shellescape4
did not find shellescape5 demangled to shellescape5
did not find main0 demangled to main0
did not find main1 demangled to main1
did not find main2 demangled to main2
Add filter function main3
FunctionInfo. Adding function:main3
did not find main4 demangled to main4
did not find main5 demangled to main5
did not find main6 demangled to main6
did not find main7 demangled to main7
did not find main8 demangled to main8
did not find main9 demangled to main9
did not find main10 demangled to main10
did not find main11 demangled to main11
did not find main12 demangled to main12
did not find main13 demangled to main13
did not find main14 demangled to main14
did not find main15 demangled to main15
did not find main16 demangled to main16
did not find main17 demangled to main17
did not find main18 demangled to main18
Add filter function main19
FunctionInfo. Adding function:main19
did not find main20 demangled to main20
did not find main21 demangled to main21
did not find main22 demangled to main22
did not find main23 demangled to main23
did not find main24 demangled to main24
did not find main25 demangled to main25
did not find main26 demangled to main26
did not find main27 demangled to main27
did not find main28 demangled to main28
did not find main29 demangled to main29
did not find main30 demangled to main30
did not find main31 demangled to main31
Add filter function main32
FunctionInfo. Adding function:main32
did not find main33 demangled to main33
Add filter function main34
FunctionInfo. Adding function:main34
did not find main35 demangled to main35
did not find main36 demangled to main36
did not find main37 demangled to main37
did not find main38 demangled to main38
did not find main39 demangled to main39
did not find main40 demangled to main40
did not find main41 demangled to main41
did not find main42 demangled to main42
did not find main43 demangled to main43
did not find usage0 demangled to usage0
did not find initckch0 demangled to initckch0
did not find initckch1 demangled to initckch1
did not find initckch2 demangled to initckch2
did not find expandmode0 demangled to expandmode0
did not find expandmode1 demangled to expandmode1
did not find dofile0 demangled to dofile0
did not find dofile1 demangled to dofile1
did not find dofile2 demangled to dofile2
did not find dofile3 demangled to dofile3
did not find update_file0 demangled to update_file0
did not find update_file1 demangled to update_file1
did not find update_file2 demangled to update_file2
did not find update_file3 demangled to update_file3
did not find update_file4 demangled to update_file4
did not find update_file5 demangled to update_file5
did not find givehelp0 demangled to givehelp0
did not find givehelp1 demangled to givehelp1
did not find givehelp2 demangled to givehelp2
did not find checkfile0 demangled to checkfile0
did not find checkfile1 demangled to checkfile1
did not find checkfile2 demangled to checkfile2
did not find checkfile3 demangled to checkfile3
did not find checkfile4 demangled to checkfile4
did not find checkfile5 demangled to checkfile5
did not find checkfile6 demangled to checkfile6
did not find checkfile7 demangled to checkfile7
did not find correct0 demangled to correct0
did not find correct1 demangled to correct1
did not find correct2 demangled to correct2
did not find correct3 demangled to correct3
did not find correct4 demangled to correct4
did not find correct5 demangled to correct5
Add filter function correct6
FunctionInfo. Adding function:correct6
did not find correct7 demangled to correct7
Add filter function correct8
FunctionInfo. Adding function:correct8
did not find correct9 demangled to correct9
did not find correct10 demangled to correct10
did not find correct11 demangled to correct11
did not find correct12 demangled to correct12
did not find correct13 demangled to correct13
did not find correct14 demangled to correct14
did not find correct15 demangled to correct15
did not find correct16 demangled to correct16
did not find correct17 demangled to correct17
did not find correct18 demangled to correct18
did not find correct19 demangled to correct19
Add filter function correct20
FunctionInfo. Adding function:correct20
did not find correct21 demangled to correct21
did not find correct22 demangled to correct22
did not find correct23 demangled to correct23
did not find correct24 demangled to correct24
Add filter function correct25
FunctionInfo. Adding function:correct25
Add filter function correct26
FunctionInfo. Adding function:correct26
did not find compoundgood0 demangled to compoundgood0
did not find compoundgood1 demangled to compoundgood1
did not find compoundgood2 demangled to compoundgood2
Add filter function compoundgood3
FunctionInfo. Adding function:compoundgood3
did not find makepossibilities0 demangled to makepossibilities0
did not find makepossibilities1 demangled to makepossibilities1
did not find makepossibilities2 demangled to makepossibilities2
did not find makepossibilities3 demangled to makepossibilities3
did not find makepossibilities4 demangled to makepossibilities4
did not find makepossibilities5 demangled to makepossibilities5
did not find makepossibilities6 demangled to makepossibilities6
did not find makepossibilities7 demangled to makepossibilities7
did not find makepossibilities8 demangled to makepossibilities8
did not find show_line0 demangled to show_line0
did not find show_line1 demangled to show_line1
did not find show_line2 demangled to show_line2
did not find show_line3 demangled to show_line3
did not find line_size0 demangled to line_size0
did not find my_getline0 demangled to my_getline0
did not find my_getline1 demangled to my_getline1
did not find my_getline2 demangled to my_getline2
did not find my_getline3 demangled to my_getline3
did not find my_getline4 demangled to my_getline4
did not find my_getline5 demangled to my_getline5
did not find my_getline6 demangled to my_getline6
did not find inserttoken0 demangled to inserttoken0
did not find inserttoken1 demangled to inserttoken1
did not find inserttoken2 demangled to inserttoken2
did not find inserttoken3 demangled to inserttoken3
did not find inserttoken4 demangled to inserttoken4
did not find inserttoken5 demangled to inserttoken5
did not find inserttoken6 demangled to inserttoken6
did not find lookharder0 demangled to lookharder0
did not find lookharder1 demangled to lookharder1
Add filter function lookharder2
FunctionInfo. Adding function:lookharder2
did not find show_char0 demangled to show_char0
did not find show_char1 demangled to show_char1
did not find show_char2 demangled to show_char2
did not find show_char3 demangled to show_char3
Add filter function show_char4
FunctionInfo. Adding function:show_char4
did not find show_char5 demangled to show_char5
did not find show_char6 demangled to show_char6
did not find show_char7 demangled to show_char7
did not find show_char8 demangled to show_char8
did not find show_char9 demangled to show_char9
did not find show_char10 demangled to show_char10
did not find show_char11 demangled to show_char11
did not find show_char12 demangled to show_char12
did not find show_char13 demangled to show_char13
did not find show_char14 demangled to show_char14
did not find missingletter0 demangled to missingletter0
did not find missingletter1 demangled to missingletter1
Add filter function missingletter2
FunctionInfo. Adding function:missingletter2
did not find transposedletter0 demangled to transposedletter0
did not find transposedletter1 demangled to transposedletter1
did not find extraletter0 demangled to extraletter0
did not find wrongletter0 demangled to wrongletter0
did not find wrongletter1 demangled to wrongletter1
Add filter function missingspace0
FunctionInfo. Adding function:missingspace0
did not find missingspace1 demangled to missingspace1
did not find missingspace2 demangled to missingspace2
did not find tryveryhard0 demangled to tryveryhard0
did not find casecmp0 demangled to casecmp0
did not find casecmp1 demangled to casecmp1
did not find casecmp2 demangled to casecmp2
did not find casecmp3 demangled to casecmp3
did not find casecmp4 demangled to casecmp4
did not find casecmp5 demangled to casecmp5
did not find casecmp6 demangled to casecmp6
did not find save_cap0 demangled to save_cap0
did not find save_cap1 demangled to save_cap1
did not find save_cap2 demangled to save_cap2
did not find save_cap3 demangled to save_cap3
did not find save_cap4 demangled to save_cap4
did not find insert0 demangled to insert0
did not find insert1 demangled to insert1
did not find insert2 demangled to insert2
did not find save_root_cap0 demangled to save_root_cap0
did not find save_root_cap1 demangled to save_root_cap1
Add filter function save_root_cap2
FunctionInfo. Adding function:save_root_cap2
did not find save_root_cap3 demangled to save_root_cap3
did not find save_root_cap4 demangled to save_root_cap4
did not find save_root_cap5 demangled to save_root_cap5
did not find save_root_cap6 demangled to save_root_cap6
did not find save_root_cap7 demangled to save_root_cap7
did not find save_root_cap8 demangled to save_root_cap8
did not find save_root_cap9 demangled to save_root_cap9
did not find save_root_cap10 demangled to save_root_cap10
did not find save_root_cap11 demangled to save_root_cap11
did not find ins_cap0 demangled to ins_cap0
did not find ins_root_cap0 demangled to ins_root_cap0
did not find askmode0 demangled to askmode0
did not find askmode1 demangled to askmode1
did not find askmode2 demangled to askmode2
did not find askmode3 demangled to askmode3
did not find askmode4 demangled to askmode4
did not find askmode5 demangled to askmode5
Add filter function askmode6
FunctionInfo. Adding function:askmode6
Add filter function askmode7
FunctionInfo. Adding function:askmode7
did not find askmode8 demangled to askmode8
did not find askmode9 demangled to askmode9
did not find askmode10 demangled to askmode10
did not find copyout0 demangled to copyout0
did not find copyout1 demangled to copyout1
did not find skipoverword0 demangled to skipoverword0
did not find skipoverword1 demangled to skipoverword1
did not find skipoverword2 demangled to skipoverword2
did not find skipoverword3 demangled to skipoverword3
Add filter function skipoverword4
FunctionInfo. Adding function:skipoverword4
did not find checkline0 demangled to checkline0
did not find checkline1 demangled to checkline1
did not find checkline2 demangled to checkline2
did not find checkline3 demangled to checkline3
did not find checkline4 demangled to checkline4
did not find checkline5 demangled to checkline5
did not find checkline6 demangled to checkline6
did not find checkline7 demangled to checkline7
did not find checkline8 demangled to checkline8
did not find checkline9 demangled to checkline9
did not find checkline10 demangled to checkline10
did not find checkline11 demangled to checkline11
did not find checkline12 demangled to checkline12
did not find checkline13 demangled to checkline13
did not find checkline14 demangled to checkline14
did not find checkline15 demangled to checkline15
did not find checkline16 demangled to checkline16
did not find checkline17 demangled to checkline17
did not find checkline18 demangled to checkline18
did not find checkline19 demangled to checkline19
Add filter function checkline20
FunctionInfo. Adding function:checkline20
did not find skiptoword0 demangled to skiptoword0
did not find skiptoword1 demangled to skiptoword1
did not find skiptoword2 demangled to skiptoword2
did not find skiptoword3 demangled to skiptoword3
did not find skiptoword4 demangled to skiptoword4
Add filter function skiptoword5
FunctionInfo. Adding function:skiptoword5
did not find skiptoword6 demangled to skiptoword6
did not find skiptoword7 demangled to skiptoword7
did not find skiptoword8 demangled to skiptoword8
did not find skiptoword9 demangled to skiptoword9
did not find skiptoword10 demangled to skiptoword10
did not find skiptoword11 demangled to skiptoword11
did not find skiptoword12 demangled to skiptoword12
did not find skiptoword13 demangled to skiptoword13
did not find skiptoword14 demangled to skiptoword14
did not find skiptoword15 demangled to skiptoword15
did not find skiptoword16 demangled to skiptoword16
did not find skiptoword17 demangled to skiptoword17
did not find skiptoword18 demangled to skiptoword18
did not find skiptoword19 demangled to skiptoword19
Add filter function TeX_math_check0
FunctionInfo. Adding function:TeX_math_check0
Add filter function TeX_math_check1
FunctionInfo. Adding function:TeX_math_check1
did not find TeX_math_check2 demangled to TeX_math_check2
did not find TeX_math_check3 demangled to TeX_math_check3
Add filter function TeX_LR_check0
FunctionInfo. Adding function:TeX_LR_check0
did not find TeX_LR_check1 demangled to TeX_LR_check1
did not find TeX_LR_check2 demangled to TeX_LR_check2
did not find TeX_LR_check3 demangled to TeX_LR_check3
did not find TeX_LR_check4 demangled to TeX_LR_check4
did not find TeX_math_end0 demangled to TeX_math_end0
did not find TeX_math_end1 demangled to TeX_math_end1
did not find TeX_math_end2 demangled to TeX_math_end2
did not find TeX_strncmp0 demangled to TeX_strncmp0
did not find TeX_skip_parens0 demangled to TeX_skip_parens0
did not find TeX_math_begin0 demangled to TeX_math_begin0
did not find TeX_math_begin1 demangled to TeX_math_begin1
did not find TeX_math_begin2 demangled to TeX_math_begin2
did not find TeX_math_begin3 demangled to TeX_math_begin3
did not find TeX_math_begin4 demangled to TeX_math_begin4
did not find TeX_skip_check0 demangled to TeX_skip_check0
did not find TeX_skip_check1 demangled to TeX_skip_check1
did not find TeX_skip_check2 demangled to TeX_skip_check2
did not find TeX_skip_check3 demangled to TeX_skip_check3
did not find TeX_LR_begin0 demangled to TeX_LR_begin0
did not find TeX_LR_begin1 demangled to TeX_LR_begin1
did not find TeX_LR_begin2 demangled to TeX_LR_begin2
did not find TeX_open_paren0 demangled to TeX_open_paren0
did not find TeX_skip_args0 demangled to TeX_skip_args0
did not find TeX_skip_args1 demangled to TeX_skip_args1
did not find TeX_skip_args2 demangled to TeX_skip_args2
did not find TeX_skip_args3 demangled to TeX_skip_args3
did not find dumpmode0 demangled to dumpmode0
Add filter function dumpmode1
FunctionInfo. Adding function:dumpmode1
did not find dumpmode2 demangled to dumpmode2
did not find dumpmode3 demangled to dumpmode3
did not find dumpmode4 demangled to dumpmode4
did not find tbldump0 demangled to tbldump0
did not find entdump0 demangled to entdump0
did not find entdump1 demangled to entdump1
did not find entdump2 demangled to entdump2
did not find entdump3 demangled to entdump3
Add filter function entdump4
FunctionInfo. Adding function:entdump4
did not find setdump0 demangled to setdump0
did not find setdump1 demangled to setdump1
did not find setdump2 demangled to setdump2
did not find setdump3 demangled to setdump3
did not find setdump4 demangled to setdump4
did not find subsetdump0 demangled to subsetdump0
did not find subsetdump1 demangled to subsetdump1
did not find subsetdump2 demangled to subsetdump2
did not find subsetdump3 demangled to subsetdump3
did not find subsetdump4 demangled to subsetdump4
did not find subsetdump5 demangled to subsetdump5
did not find good0 demangled to good0
did not find good1 demangled to good1
Add filter function good2
FunctionInfo. Adding function:good2
Add filter function good3
FunctionInfo. Adding function:good3
did not find good4 demangled to good4
did not find cap_ok0 demangled to cap_ok0
did not find cap_ok1 demangled to cap_ok1
did not find cap_ok2 demangled to cap_ok2
did not find cap_ok3 demangled to cap_ok3
did not find cap_ok4 demangled to cap_ok4
did not find cap_ok5 demangled to cap_ok5
did not find cap_ok6 demangled to cap_ok6
did not find cap_ok7 demangled to cap_ok7
did not find cap_ok8 demangled to cap_ok8
did not find cap_ok9 demangled to cap_ok9
did not find cap_ok10 demangled to cap_ok10
did not find flagpr0 demangled to flagpr0
did not find flagpr1 demangled to flagpr1
did not find flagpr2 demangled to flagpr2
did not find flagpr3 demangled to flagpr3
did not find flagpr4 demangled to flagpr4
did not find flagpr5 demangled to flagpr5
did not find flagpr6 demangled to flagpr6
Add filter function flagpr7
FunctionInfo. Adding function:flagpr7
did not find flagpr8 demangled to flagpr8
did not find flagpr9 demangled to flagpr9
did not find flagpr10 demangled to flagpr10
did not find flagpr11 demangled to flagpr11
did not find flagpr12 demangled to flagpr12
did not find flagpr13 demangled to flagpr13
Add filter function flagpr14
FunctionInfo. Adding function:flagpr14
did not find flagpr15 demangled to flagpr15
Add filter function flagpr16
FunctionInfo. Adding function:flagpr16
did not find linit0 demangled to linit0
did not find linit1 demangled to linit1
did not find linit2 demangled to linit2
Add filter function linit3
FunctionInfo. Adding function:linit3
Add filter function linit4
FunctionInfo. Adding function:linit4
Add filter function linit5
FunctionInfo. Adding function:linit5
did not find linit6 demangled to linit6
did not find linit7 demangled to linit7
did not find linit8 demangled to linit8
did not find linit9 demangled to linit9
did not find linit10 demangled to linit10
did not find linit11 demangled to linit11
Add filter function linit12
FunctionInfo. Adding function:linit12
did not find linit13 demangled to linit13
did not find linit14 demangled to linit14
did not find linit15 demangled to linit15
did not find linit16 demangled to linit16
did not find linit17 demangled to linit17
did not find linit18 demangled to linit18
did not find linit19 demangled to linit19
did not find linit20 demangled to linit20
did not find linit21 demangled to linit21
did not find linit22 demangled to linit22
did not find linit23 demangled to linit23
did not find linit24 demangled to linit24
did not find linit25 demangled to linit25
did not find linit26 demangled to linit26
Add filter function linit27
FunctionInfo. Adding function:linit27
did not find linit28 demangled to linit28
did not find linit29 demangled to linit29
did not find linit30 demangled to linit30
did not find linit31 demangled to linit31
did not find linit32 demangled to linit32
Add filter function linit33
FunctionInfo. Adding function:linit33
did not find linit34 demangled to linit34
did not find linit35 demangled to linit35
did not find linit36 demangled to linit36
did not find linit37 demangled to linit37
did not find linit38 demangled to linit38
did not find linit39 demangled to linit39
did not find linit40 demangled to linit40
did not find linit41 demangled to linit41
did not find linit42 demangled to linit42
did not find linit43 demangled to linit43
did not find linit44 demangled to linit44
did not find linit45 demangled to linit45
did not find linit46 demangled to linit46
did not find linit47 demangled to linit47
did not find linit48 demangled to linit48
did not find linit49 demangled to linit49
did not find lookup0 demangled to lookup0
did not find lookup1 demangled to lookup1
did not find lookup2 demangled to lookup2
did not find lookup3 demangled to lookup3
did not find hash0 demangled to hash0
did not find hash1 demangled to hash1
did not find makedent0 demangled to makedent0
did not find makedent1 demangled to makedent1
did not find makedent2 demangled to makedent2
did not find makedent3 demangled to makedent3
did not find makedent4 demangled to makedent4
did not find makedent5 demangled to makedent5
did not find makedent6 demangled to makedent6
did not find makedent7 demangled to makedent7
did not find makedent8 demangled to makedent8
did not find makedent9 demangled to makedent9
did not find makedent10 demangled to makedent10
Add filter function strtoichar0
FunctionInfo. Adding function:strtoichar0
did not find strtoichar1 demangled to strtoichar1
did not find strtoichar2 demangled to strtoichar2
Add filter function strtoichar3
FunctionInfo. Adding function:strtoichar3
did not find ichartostr0 demangled to ichartostr0
did not find ichartostr1 demangled to ichartostr1
did not find ichartostr2 demangled to ichartostr2
did not find ichartostr3 demangled to ichartostr3
did not find ichartostr4 demangled to ichartostr4
did not find whatcap0 demangled to whatcap0
did not find whatcap1 demangled to whatcap1
did not find whatcap2 demangled to whatcap2
did not find whatcap3 demangled to whatcap3
did not find whatcap4 demangled to whatcap4
Add filter function chupcase0
FunctionInfo. Adding function:chupcase0
did not find strtosichar0 demangled to strtosichar0
did not find upcase0 demangled to upcase0
did not find stringcharlen0 demangled to stringcharlen0
did not find stringcharlen1 demangled to stringcharlen1
did not find stringcharlen2 demangled to stringcharlen2
did not find stringcharlen3 demangled to stringcharlen3
did not find stringcharlen4 demangled to stringcharlen4
did not find stringcharlen5 demangled to stringcharlen5
did not find stringcharlen6 demangled to stringcharlen6
did not find stringcharlen7 demangled to stringcharlen7
did not find stringcharlen8 demangled to stringcharlen8
did not find addvheader0 demangled to addvheader0
did not find addvheader1 demangled to addvheader1
did not find addvheader2 demangled to addvheader2
did not find addvheader3 demangled to addvheader3
did not find addvheader4 demangled to addvheader4
did not find combinecaps0 demangled to combinecaps0
Add filter function combinecaps1
FunctionInfo. Adding function:combinecaps1
did not find combinecaps2 demangled to combinecaps2
did not find combinecaps3 demangled to combinecaps3
did not find combine_two_entries0 demangled to combine_two_entries0
Add filter function combine_two_entries1
FunctionInfo. Adding function:combine_two_entries1
Add filter function combine_two_entries2
FunctionInfo. Adding function:combine_two_entries2
did not find forcevheader0 demangled to forcevheader0
did not find combineaffixes0 demangled to combineaffixes0
did not find lowcase0 demangled to lowcase0
did not find toutent0 demangled to toutent0
did not find toutent1 demangled to toutent1
did not find toutent2 demangled to toutent2
Add filter function ichartosstr0
FunctionInfo. Adding function:ichartosstr0
did not find toutword0 demangled to toutword0
did not find toutword1 demangled to toutword1
did not find toutword2 demangled to toutword2
did not find flagout0 demangled to flagout0
did not find flagout1 demangled to flagout1
did not find printichar0 demangled to printichar0
did not find printichar1 demangled to printichar1
did not find findfiletype0 demangled to findfiletype0
did not find findfiletype1 demangled to findfiletype1
Add filter function findfiletype2
FunctionInfo. Adding function:findfiletype2
did not find findfiletype3 demangled to findfiletype3
did not find findfiletype4 demangled to findfiletype4
did not find findfiletype5 demangled to findfiletype5
did not find findfiletype6 demangled to findfiletype6
did not find findfiletype7 demangled to findfiletype7
did not find chk_aff0 demangled to chk_aff0
did not find chk_aff1 demangled to chk_aff1
did not find chk_aff2 demangled to chk_aff2
did not find pfx_list_chk0 demangled to pfx_list_chk0
did not find pfx_list_chk1 demangled to pfx_list_chk1
did not find pfx_list_chk2 demangled to pfx_list_chk2
did not find pfx_list_chk3 demangled to pfx_list_chk3
did not find pfx_list_chk4 demangled to pfx_list_chk4
did not find pfx_list_chk5 demangled to pfx_list_chk5
did not find chk_suf0 demangled to chk_suf0
did not find chk_suf1 demangled to chk_suf1
did not find chk_suf2 demangled to chk_suf2
Add filter function suf_list_chk0
FunctionInfo. Adding function:suf_list_chk0
did not find suf_list_chk1 demangled to suf_list_chk1
Add filter function suf_list_chk2
FunctionInfo. Adding function:suf_list_chk2
did not find suf_list_chk3 demangled to suf_list_chk3
did not find suf_list_chk4 demangled to suf_list_chk4
did not find suf_list_chk5 demangled to suf_list_chk5
Add filter function suf_list_chk6
FunctionInfo. Adding function:suf_list_chk6
did not find suf_list_chk7 demangled to suf_list_chk7
did not find expand_pre0 demangled to expand_pre0
did not find expand_pre1 demangled to expand_pre1
did not find expand_pre2 demangled to expand_pre2
did not find pr_pre_expansion0 demangled to pr_pre_expansion0
did not find pr_pre_expansion1 demangled to pr_pre_expansion1
Add filter function pr_pre_expansion2
FunctionInfo. Adding function:pr_pre_expansion2
did not find pr_pre_expansion3 demangled to pr_pre_expansion3
did not find pr_pre_expansion4 demangled to pr_pre_expansion4
did not find pr_pre_expansion5 demangled to pr_pre_expansion5
did not find pr_pre_expansion6 demangled to pr_pre_expansion6
did not find forcelc0 demangled to forcelc0
did not find forcelc1 demangled to forcelc1
did not find expand_suf0 demangled to expand_suf0
did not find expand_suf1 demangled to expand_suf1
Add filter function expand_suf2
FunctionInfo. Adding function:expand_suf2
did not find pr_suf_expansion0 demangled to pr_suf_expansion0
did not find pr_suf_expansion1 demangled to pr_suf_expansion1
did not find pr_suf_expansion2 demangled to pr_suf_expansion2
did not find pr_suf_expansion3 demangled to pr_suf_expansion3
did not find pr_suf_expansion4 demangled to pr_suf_expansion4
did not find treeinit0 demangled to treeinit0
did not find treeinit1 demangled to treeinit1
did not find treeinit2 demangled to treeinit2
did not find treeinit3 demangled to treeinit3
did not find treeinit4 demangled to treeinit4
did not find treeinit5 demangled to treeinit5
did not find treeinit6 demangled to treeinit6
did not find treeinit7 demangled to treeinit7
did not find treeinit8 demangled to treeinit8
did not find trydict0 demangled to trydict0
did not find trydict1 demangled to trydict1
did not find trydict2 demangled to trydict2
did not find treeinsert0 demangled to treeinsert0
did not find treeinsert1 demangled to treeinsert1
did not find treeinsert2 demangled to treeinsert2
did not find treeinsert3 demangled to treeinsert3
Add filter function treeinsert4
FunctionInfo. Adding function:treeinsert4
Add filter function treeinsert5
FunctionInfo. Adding function:treeinsert5
did not find treeinsert6 demangled to treeinsert6
did not find treeinsert7 demangled to treeinsert7
did not find treeinsert8 demangled to treeinsert8
did not find treeinsert9 demangled to treeinsert9
did not find treeinsert10 demangled to treeinsert10
did not find treeinsert11 demangled to treeinsert11
Add filter function treeinsert12
FunctionInfo. Adding function:treeinsert12
did not find treeinsert13 demangled to treeinsert13
did not find tinsert0 demangled to tinsert0
did not find tinsert1 demangled to tinsert1
did not find tinsert2 demangled to tinsert2
did not find tinsert3 demangled to tinsert3
did not find treelookup0 demangled to treelookup0
did not find treelookup1 demangled to treelookup1
did not find treelookup2 demangled to treelookup2
did not find treeoutput0 demangled to treeoutput0
did not find treeoutput1 demangled to treeoutput1
did not find treeoutput2 demangled to treeoutput2
did not find treeoutput3 demangled to treeoutput3
did not find treeoutput4 demangled to treeoutput4
did not find treeoutput5 demangled to treeoutput5
did not find treeoutput6 demangled to treeoutput6
Add filter function treeoutput7
FunctionInfo. Adding function:treeoutput7
did not find treeoutput8 demangled to treeoutput8
did not find treeoutput9 demangled to treeoutput9
did not find treeoutput10 demangled to treeoutput10
did not find treeoutput11 demangled to treeoutput11
did not find treeoutput12 demangled to treeoutput12
did not find treeoutput13 demangled to treeoutput13
did not find treeoutput14 demangled to treeoutput14
did not find treeoutput15 demangled to treeoutput15
Add filter function treeoutput16
FunctionInfo. Adding function:treeoutput16
did not find treeoutput17 demangled to treeoutput17
did not find treeoutput18 demangled to treeoutput18
did not find treeoutput19 demangled to treeoutput19
did not find treeoutput20 demangled to treeoutput20
did not find treeoutput21 demangled to treeoutput21
did not find treeoutput22 demangled to treeoutput22
Add filter function treeoutput23
FunctionInfo. Adding function:treeoutput23
did not find treeoutput24 demangled to treeoutput24
did not find treeoutput25 demangled to treeoutput25
did not find treeoutput26 demangled to treeoutput26
did not find treeoutput27 demangled to treeoutput27
did not find treeoutput28 demangled to treeoutput28
did not find treeoutput29 demangled to treeoutput29
did not find treeoutput30 demangled to treeoutput30
did not find treeoutput31 demangled to treeoutput31
Add filter function treeoutput32
FunctionInfo. Adding function:treeoutput32
did not find myfree0 demangled to myfree0
did not find xgets0 demangled to xgets0
did not find xgets1 demangled to xgets1
did not find xgets2 demangled to xgets2
did not find xgets3 demangled to xgets3
did not find xgets4 demangled to xgets4
Adding erase other functions, ExtractedOnly mode uses other functions
Adding move other functions, ExtractedOnly mode uses other functions
Adding inverse other functions, ExtractedOnly mode uses other functions
Adding normal other functions, ExtractedOnly mode uses other functions
Adding backup other functions, ExtractedOnly mode uses other functions
Adding terminit other functions, ExtractedOnly mode uses other functions
Adding done other functions, ExtractedOnly mode uses other functions
Adding onstop other functions, ExtractedOnly mode uses other functions
Adding stop other functions, ExtractedOnly mode uses other functions
Adding shellescape other functions, ExtractedOnly mode uses other functions
Adding main other functions, ExtractedOnly mode uses other functions
Adding usage other functions, ExtractedOnly mode uses other functions
Adding initckch other functions, ExtractedOnly mode uses other functions
Adding expandmode other functions, ExtractedOnly mode uses other functions
Adding dofile other functions, ExtractedOnly mode uses other functions
Adding update_file other functions, ExtractedOnly mode uses other functions
Adding givehelp other functions, ExtractedOnly mode uses other functions
Adding checkfile other functions, ExtractedOnly mode uses other functions
Adding correct other functions, ExtractedOnly mode uses other functions
Adding compoundgood other functions, ExtractedOnly mode uses other functions
Adding makepossibilities other functions, ExtractedOnly mode uses other functions
Adding show_line other functions, ExtractedOnly mode uses other functions
Adding line_size other functions, ExtractedOnly mode uses other functions
Adding my_getline other functions, ExtractedOnly mode uses other functions
Adding inserttoken other functions, ExtractedOnly mode uses other functions
Adding lookharder other functions, ExtractedOnly mode uses other functions
Adding show_char other functions, ExtractedOnly mode uses other functions
Adding wrongcapital other functions, ExtractedOnly mode uses other functions
Adding missingletter other functions, ExtractedOnly mode uses other functions
Adding transposedletter other functions, ExtractedOnly mode uses other functions
Adding extraletter other functions, ExtractedOnly mode uses other functions
Adding wrongletter other functions, ExtractedOnly mode uses other functions
Adding missingspace other functions, ExtractedOnly mode uses other functions
Adding tryveryhard other functions, ExtractedOnly mode uses other functions
Adding posscmp other functions, ExtractedOnly mode uses other functions
Adding casecmp other functions, ExtractedOnly mode uses other functions
Adding save_cap other functions, ExtractedOnly mode uses other functions
Adding insert other functions, ExtractedOnly mode uses other functions
Adding save_root_cap other functions, ExtractedOnly mode uses other functions
Adding ins_cap other functions, ExtractedOnly mode uses other functions
Adding ins_root_cap other functions, ExtractedOnly mode uses other functions
Adding askmode other functions, ExtractedOnly mode uses other functions
Adding copyout other functions, ExtractedOnly mode uses other functions
Adding skipoverword other functions, ExtractedOnly mode uses other functions
Adding checkline other functions, ExtractedOnly mode uses other functions
Adding skiptoword other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check other functions, ExtractedOnly mode uses other functions
Adding TeX_math_end other functions, ExtractedOnly mode uses other functions
Adding TeX_strncmp other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_parens other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_begin other functions, ExtractedOnly mode uses other functions
Adding TeX_open_paren other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args other functions, ExtractedOnly mode uses other functions
Adding dumpmode other functions, ExtractedOnly mode uses other functions
Adding tbldump other functions, ExtractedOnly mode uses other functions
Adding entdump other functions, ExtractedOnly mode uses other functions
Adding setdump other functions, ExtractedOnly mode uses other functions
Adding subsetdump other functions, ExtractedOnly mode uses other functions
Adding good other functions, ExtractedOnly mode uses other functions
Adding cap_ok other functions, ExtractedOnly mode uses other functions
Adding entryhasaffixes other functions, ExtractedOnly mode uses other functions
Adding flagpr other functions, ExtractedOnly mode uses other functions
Adding linit other functions, ExtractedOnly mode uses other functions
Adding lookup other functions, ExtractedOnly mode uses other functions
Adding hash other functions, ExtractedOnly mode uses other functions
Adding makedent other functions, ExtractedOnly mode uses other functions
Adding strtoichar other functions, ExtractedOnly mode uses other functions
Adding ichartostr other functions, ExtractedOnly mode uses other functions
Adding whatcap other functions, ExtractedOnly mode uses other functions
Adding chupcase other functions, ExtractedOnly mode uses other functions
Adding strtosichar other functions, ExtractedOnly mode uses other functions
Adding upcase other functions, ExtractedOnly mode uses other functions
Adding stringcharlen other functions, ExtractedOnly mode uses other functions
Adding addvheader other functions, ExtractedOnly mode uses other functions
Adding combinecaps other functions, ExtractedOnly mode uses other functions
Adding combine_two_entries other functions, ExtractedOnly mode uses other functions
Adding forcevheader other functions, ExtractedOnly mode uses other functions
Adding combineaffixes other functions, ExtractedOnly mode uses other functions
Adding acoversb other functions, ExtractedOnly mode uses other functions
Adding issubset other functions, ExtractedOnly mode uses other functions
Adding lowcase other functions, ExtractedOnly mode uses other functions
Adding toutent other functions, ExtractedOnly mode uses other functions
Adding ichartosstr other functions, ExtractedOnly mode uses other functions
Adding toutword other functions, ExtractedOnly mode uses other functions
Adding flagout other functions, ExtractedOnly mode uses other functions
Adding printichar other functions, ExtractedOnly mode uses other functions
Adding findfiletype other functions, ExtractedOnly mode uses other functions
Adding chk_aff other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk other functions, ExtractedOnly mode uses other functions
Adding chk_suf other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk other functions, ExtractedOnly mode uses other functions
Adding expand_pre other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion other functions, ExtractedOnly mode uses other functions
Adding forcelc other functions, ExtractedOnly mode uses other functions
Adding expand_suf other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion other functions, ExtractedOnly mode uses other functions
Adding treeinit other functions, ExtractedOnly mode uses other functions
Adding trydict other functions, ExtractedOnly mode uses other functions
Adding treeload other functions, ExtractedOnly mode uses other functions
Adding treeinsert other functions, ExtractedOnly mode uses other functions
Adding tinsert other functions, ExtractedOnly mode uses other functions
Adding treelookup other functions, ExtractedOnly mode uses other functions
Adding treeoutput other functions, ExtractedOnly mode uses other functions
Adding pdictcmp other functions, ExtractedOnly mode uses other functions
Adding mymalloc other functions, ExtractedOnly mode uses other functions
Adding myfree other functions, ExtractedOnly mode uses other functions
Adding xgets other functions, ExtractedOnly mode uses other functions
Adding terminit0 other functions, ExtractedOnly mode uses other functions
Adding terminit1 other functions, ExtractedOnly mode uses other functions
Adding terminit2 other functions, ExtractedOnly mode uses other functions
Adding terminit3 other functions, ExtractedOnly mode uses other functions
Adding terminit4 other functions, ExtractedOnly mode uses other functions
Adding terminit5 other functions, ExtractedOnly mode uses other functions
Adding onstop0 other functions, ExtractedOnly mode uses other functions
Adding shellescape0 other functions, ExtractedOnly mode uses other functions
Adding shellescape1 other functions, ExtractedOnly mode uses other functions
Adding shellescape2 other functions, ExtractedOnly mode uses other functions
Adding shellescape3 other functions, ExtractedOnly mode uses other functions
Adding shellescape4 other functions, ExtractedOnly mode uses other functions
Adding shellescape5 other functions, ExtractedOnly mode uses other functions
Adding main0 other functions, ExtractedOnly mode uses other functions
Adding main1 other functions, ExtractedOnly mode uses other functions
Adding main2 other functions, ExtractedOnly mode uses other functions
Adding main3 other functions, ExtractedOnly mode uses other functions
Adding main4 other functions, ExtractedOnly mode uses other functions
Adding main5 other functions, ExtractedOnly mode uses other functions
Adding main6 other functions, ExtractedOnly mode uses other functions
Adding main7 other functions, ExtractedOnly mode uses other functions
Adding main8 other functions, ExtractedOnly mode uses other functions
Adding main9 other functions, ExtractedOnly mode uses other functions
Adding main10 other functions, ExtractedOnly mode uses other functions
Adding main11 other functions, ExtractedOnly mode uses other functions
Adding main12 other functions, ExtractedOnly mode uses other functions
Adding main13 other functions, ExtractedOnly mode uses other functions
Adding main14 other functions, ExtractedOnly mode uses other functions
Adding main15 other functions, ExtractedOnly mode uses other functions
Adding main16 other functions, ExtractedOnly mode uses other functions
Adding main17 other functions, ExtractedOnly mode uses other functions
Adding main18 other functions, ExtractedOnly mode uses other functions
Adding main19 other functions, ExtractedOnly mode uses other functions
Adding main20 other functions, ExtractedOnly mode uses other functions
Adding main21 other functions, ExtractedOnly mode uses other functions
Adding main22 other functions, ExtractedOnly mode uses other functions
Adding main23 other functions, ExtractedOnly mode uses other functions
Adding main24 other functions, ExtractedOnly mode uses other functions
Adding main25 other functions, ExtractedOnly mode uses other functions
Adding main26 other functions, ExtractedOnly mode uses other functions
Adding main27 other functions, ExtractedOnly mode uses other functions
Adding main28 other functions, ExtractedOnly mode uses other functions
Adding main29 other functions, ExtractedOnly mode uses other functions
Adding main30 other functions, ExtractedOnly mode uses other functions
Adding main31 other functions, ExtractedOnly mode uses other functions
Adding main32 other functions, ExtractedOnly mode uses other functions
Adding main33 other functions, ExtractedOnly mode uses other functions
Adding main34 other functions, ExtractedOnly mode uses other functions
Adding main35 other functions, ExtractedOnly mode uses other functions
Adding main36 other functions, ExtractedOnly mode uses other functions
Adding main37 other functions, ExtractedOnly mode uses other functions
Adding main38 other functions, ExtractedOnly mode uses other functions
Adding main39 other functions, ExtractedOnly mode uses other functions
Adding main40 other functions, ExtractedOnly mode uses other functions
Adding main41 other functions, ExtractedOnly mode uses other functions
Adding main42 other functions, ExtractedOnly mode uses other functions
Adding main43 other functions, ExtractedOnly mode uses other functions
Adding usage0 other functions, ExtractedOnly mode uses other functions
Adding initckch0 other functions, ExtractedOnly mode uses other functions
Adding initckch1 other functions, ExtractedOnly mode uses other functions
Adding initckch2 other functions, ExtractedOnly mode uses other functions
Adding expandmode0 other functions, ExtractedOnly mode uses other functions
Adding expandmode1 other functions, ExtractedOnly mode uses other functions
Adding dofile0 other functions, ExtractedOnly mode uses other functions
Adding dofile1 other functions, ExtractedOnly mode uses other functions
Adding dofile2 other functions, ExtractedOnly mode uses other functions
Adding dofile3 other functions, ExtractedOnly mode uses other functions
Adding update_file0 other functions, ExtractedOnly mode uses other functions
Adding update_file1 other functions, ExtractedOnly mode uses other functions
Adding update_file2 other functions, ExtractedOnly mode uses other functions
Adding update_file3 other functions, ExtractedOnly mode uses other functions
Adding update_file4 other functions, ExtractedOnly mode uses other functions
Adding update_file5 other functions, ExtractedOnly mode uses other functions
Adding givehelp0 other functions, ExtractedOnly mode uses other functions
Adding givehelp1 other functions, ExtractedOnly mode uses other functions
Adding givehelp2 other functions, ExtractedOnly mode uses other functions
Adding checkfile0 other functions, ExtractedOnly mode uses other functions
Adding checkfile1 other functions, ExtractedOnly mode uses other functions
Adding checkfile2 other functions, ExtractedOnly mode uses other functions
Adding checkfile3 other functions, ExtractedOnly mode uses other functions
Adding checkfile4 other functions, ExtractedOnly mode uses other functions
Adding checkfile5 other functions, ExtractedOnly mode uses other functions
Adding checkfile6 other functions, ExtractedOnly mode uses other functions
Adding checkfile7 other functions, ExtractedOnly mode uses other functions
Adding correct0 other functions, ExtractedOnly mode uses other functions
Adding correct1 other functions, ExtractedOnly mode uses other functions
Adding correct2 other functions, ExtractedOnly mode uses other functions
Adding correct3 other functions, ExtractedOnly mode uses other functions
Adding correct4 other functions, ExtractedOnly mode uses other functions
Adding correct5 other functions, ExtractedOnly mode uses other functions
Adding correct6 other functions, ExtractedOnly mode uses other functions
Adding correct7 other functions, ExtractedOnly mode uses other functions
Adding correct8 other functions, ExtractedOnly mode uses other functions
Adding correct9 other functions, ExtractedOnly mode uses other functions
Adding correct10 other functions, ExtractedOnly mode uses other functions
Adding correct11 other functions, ExtractedOnly mode uses other functions
Adding correct12 other functions, ExtractedOnly mode uses other functions
Adding correct13 other functions, ExtractedOnly mode uses other functions
Adding correct14 other functions, ExtractedOnly mode uses other functions
Adding correct15 other functions, ExtractedOnly mode uses other functions
Adding correct16 other functions, ExtractedOnly mode uses other functions
Adding correct17 other functions, ExtractedOnly mode uses other functions
Adding correct18 other functions, ExtractedOnly mode uses other functions
Adding correct19 other functions, ExtractedOnly mode uses other functions
Adding correct20 other functions, ExtractedOnly mode uses other functions
Adding correct21 other functions, ExtractedOnly mode uses other functions
Adding correct22 other functions, ExtractedOnly mode uses other functions
Adding correct23 other functions, ExtractedOnly mode uses other functions
Adding correct24 other functions, ExtractedOnly mode uses other functions
Adding correct25 other functions, ExtractedOnly mode uses other functions
Adding correct26 other functions, ExtractedOnly mode uses other functions
Adding compoundgood0 other functions, ExtractedOnly mode uses other functions
Adding compoundgood1 other functions, ExtractedOnly mode uses other functions
Adding compoundgood2 other functions, ExtractedOnly mode uses other functions
Adding compoundgood3 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities0 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities1 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities2 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities3 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities4 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities5 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities6 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities7 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities8 other functions, ExtractedOnly mode uses other functions
Adding show_line0 other functions, ExtractedOnly mode uses other functions
Adding show_line1 other functions, ExtractedOnly mode uses other functions
Adding show_line2 other functions, ExtractedOnly mode uses other functions
Adding show_line3 other functions, ExtractedOnly mode uses other functions
Adding line_size0 other functions, ExtractedOnly mode uses other functions
Adding my_getline0 other functions, ExtractedOnly mode uses other functions
Adding my_getline1 other functions, ExtractedOnly mode uses other functions
Adding my_getline2 other functions, ExtractedOnly mode uses other functions
Adding my_getline3 other functions, ExtractedOnly mode uses other functions
Adding my_getline4 other functions, ExtractedOnly mode uses other functions
Adding my_getline5 other functions, ExtractedOnly mode uses other functions
Adding my_getline6 other functions, ExtractedOnly mode uses other functions
Adding inserttoken0 other functions, ExtractedOnly mode uses other functions
Adding inserttoken1 other functions, ExtractedOnly mode uses other functions
Adding inserttoken2 other functions, ExtractedOnly mode uses other functions
Adding inserttoken3 other functions, ExtractedOnly mode uses other functions
Adding inserttoken4 other functions, ExtractedOnly mode uses other functions
Adding inserttoken5 other functions, ExtractedOnly mode uses other functions
Adding inserttoken6 other functions, ExtractedOnly mode uses other functions
Adding lookharder0 other functions, ExtractedOnly mode uses other functions
Adding lookharder1 other functions, ExtractedOnly mode uses other functions
Adding lookharder2 other functions, ExtractedOnly mode uses other functions
Adding show_char0 other functions, ExtractedOnly mode uses other functions
Adding show_char1 other functions, ExtractedOnly mode uses other functions
Adding show_char2 other functions, ExtractedOnly mode uses other functions
Adding show_char3 other functions, ExtractedOnly mode uses other functions
Adding show_char4 other functions, ExtractedOnly mode uses other functions
Adding show_char5 other functions, ExtractedOnly mode uses other functions
Adding show_char6 other functions, ExtractedOnly mode uses other functions
Adding show_char7 other functions, ExtractedOnly mode uses other functions
Adding show_char8 other functions, ExtractedOnly mode uses other functions
Adding show_char9 other functions, ExtractedOnly mode uses other functions
Adding show_char10 other functions, ExtractedOnly mode uses other functions
Adding show_char11 other functions, ExtractedOnly mode uses other functions
Adding show_char12 other functions, ExtractedOnly mode uses other functions
Adding show_char13 other functions, ExtractedOnly mode uses other functions
Adding show_char14 other functions, ExtractedOnly mode uses other functions
Adding missingletter0 other functions, ExtractedOnly mode uses other functions
Adding missingletter1 other functions, ExtractedOnly mode uses other functions
Adding missingletter2 other functions, ExtractedOnly mode uses other functions
Adding transposedletter0 other functions, ExtractedOnly mode uses other functions
Adding transposedletter1 other functions, ExtractedOnly mode uses other functions
Adding extraletter0 other functions, ExtractedOnly mode uses other functions
Adding wrongletter0 other functions, ExtractedOnly mode uses other functions
Adding wrongletter1 other functions, ExtractedOnly mode uses other functions
Adding missingspace0 other functions, ExtractedOnly mode uses other functions
Adding missingspace1 other functions, ExtractedOnly mode uses other functions
Adding missingspace2 other functions, ExtractedOnly mode uses other functions
Adding tryveryhard0 other functions, ExtractedOnly mode uses other functions
Adding casecmp0 other functions, ExtractedOnly mode uses other functions
Adding casecmp1 other functions, ExtractedOnly mode uses other functions
Adding casecmp2 other functions, ExtractedOnly mode uses other functions
Adding casecmp3 other functions, ExtractedOnly mode uses other functions
Adding casecmp4 other functions, ExtractedOnly mode uses other functions
Adding casecmp5 other functions, ExtractedOnly mode uses other functions
Adding casecmp6 other functions, ExtractedOnly mode uses other functions
Adding save_cap0 other functions, ExtractedOnly mode uses other functions
Adding save_cap1 other functions, ExtractedOnly mode uses other functions
Adding save_cap2 other functions, ExtractedOnly mode uses other functions
Adding save_cap3 other functions, ExtractedOnly mode uses other functions
Adding save_cap4 other functions, ExtractedOnly mode uses other functions
Adding insert0 other functions, ExtractedOnly mode uses other functions
Adding insert1 other functions, ExtractedOnly mode uses other functions
Adding insert2 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap0 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap1 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap2 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap3 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap4 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap5 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap6 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap7 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap8 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap9 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap10 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap11 other functions, ExtractedOnly mode uses other functions
Adding ins_cap0 other functions, ExtractedOnly mode uses other functions
Adding ins_root_cap0 other functions, ExtractedOnly mode uses other functions
Adding askmode0 other functions, ExtractedOnly mode uses other functions
Adding askmode1 other functions, ExtractedOnly mode uses other functions
Adding askmode2 other functions, ExtractedOnly mode uses other functions
Adding askmode3 other functions, ExtractedOnly mode uses other functions
Adding askmode4 other functions, ExtractedOnly mode uses other functions
Adding askmode5 other functions, ExtractedOnly mode uses other functions
Adding askmode6 other functions, ExtractedOnly mode uses other functions
Adding askmode7 other functions, ExtractedOnly mode uses other functions
Adding askmode8 other functions, ExtractedOnly mode uses other functions
Adding askmode9 other functions, ExtractedOnly mode uses other functions
Adding askmode10 other functions, ExtractedOnly mode uses other functions
Adding copyout0 other functions, ExtractedOnly mode uses other functions
Adding copyout1 other functions, ExtractedOnly mode uses other functions
Adding skipoverword0 other functions, ExtractedOnly mode uses other functions
Adding skipoverword1 other functions, ExtractedOnly mode uses other functions
Adding skipoverword2 other functions, ExtractedOnly mode uses other functions
Adding skipoverword3 other functions, ExtractedOnly mode uses other functions
Adding skipoverword4 other functions, ExtractedOnly mode uses other functions
Adding checkline0 other functions, ExtractedOnly mode uses other functions
Adding checkline1 other functions, ExtractedOnly mode uses other functions
Adding checkline2 other functions, ExtractedOnly mode uses other functions
Adding checkline3 other functions, ExtractedOnly mode uses other functions
Adding checkline4 other functions, ExtractedOnly mode uses other functions
Adding checkline5 other functions, ExtractedOnly mode uses other functions
Adding checkline6 other functions, ExtractedOnly mode uses other functions
Adding checkline7 other functions, ExtractedOnly mode uses other functions
Adding checkline8 other functions, ExtractedOnly mode uses other functions
Adding checkline9 other functions, ExtractedOnly mode uses other functions
Adding checkline10 other functions, ExtractedOnly mode uses other functions
Adding checkline11 other functions, ExtractedOnly mode uses other functions
Adding checkline12 other functions, ExtractedOnly mode uses other functions
Adding checkline13 other functions, ExtractedOnly mode uses other functions
Adding checkline14 other functions, ExtractedOnly mode uses other functions
Adding checkline15 other functions, ExtractedOnly mode uses other functions
Adding checkline16 other functions, ExtractedOnly mode uses other functions
Adding checkline17 other functions, ExtractedOnly mode uses other functions
Adding checkline18 other functions, ExtractedOnly mode uses other functions
Adding checkline19 other functions, ExtractedOnly mode uses other functions
Adding checkline20 other functions, ExtractedOnly mode uses other functions
Adding skiptoword0 other functions, ExtractedOnly mode uses other functions
Adding skiptoword1 other functions, ExtractedOnly mode uses other functions
Adding skiptoword2 other functions, ExtractedOnly mode uses other functions
Adding skiptoword3 other functions, ExtractedOnly mode uses other functions
Adding skiptoword4 other functions, ExtractedOnly mode uses other functions
Adding skiptoword5 other functions, ExtractedOnly mode uses other functions
Adding skiptoword6 other functions, ExtractedOnly mode uses other functions
Adding skiptoword7 other functions, ExtractedOnly mode uses other functions
Adding skiptoword8 other functions, ExtractedOnly mode uses other functions
Adding skiptoword9 other functions, ExtractedOnly mode uses other functions
Adding skiptoword10 other functions, ExtractedOnly mode uses other functions
Adding skiptoword11 other functions, ExtractedOnly mode uses other functions
Adding skiptoword12 other functions, ExtractedOnly mode uses other functions
Adding skiptoword13 other functions, ExtractedOnly mode uses other functions
Adding skiptoword14 other functions, ExtractedOnly mode uses other functions
Adding skiptoword15 other functions, ExtractedOnly mode uses other functions
Adding skiptoword16 other functions, ExtractedOnly mode uses other functions
Adding skiptoword17 other functions, ExtractedOnly mode uses other functions
Adding skiptoword18 other functions, ExtractedOnly mode uses other functions
Adding skiptoword19 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check0 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check1 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check2 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check3 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check0 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check1 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check2 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check3 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check4 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_end0 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_end1 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_end2 other functions, ExtractedOnly mode uses other functions
Adding TeX_strncmp0 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_parens0 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin0 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin1 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin2 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin3 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin4 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check0 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check1 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check2 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check3 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_begin0 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_begin1 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_begin2 other functions, ExtractedOnly mode uses other functions
Adding TeX_open_paren0 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args0 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args1 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args2 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args3 other functions, ExtractedOnly mode uses other functions
Adding dumpmode0 other functions, ExtractedOnly mode uses other functions
Adding dumpmode1 other functions, ExtractedOnly mode uses other functions
Adding dumpmode2 other functions, ExtractedOnly mode uses other functions
Adding dumpmode3 other functions, ExtractedOnly mode uses other functions
Adding dumpmode4 other functions, ExtractedOnly mode uses other functions
Adding tbldump0 other functions, ExtractedOnly mode uses other functions
Adding entdump0 other functions, ExtractedOnly mode uses other functions
Adding entdump1 other functions, ExtractedOnly mode uses other functions
Adding entdump2 other functions, ExtractedOnly mode uses other functions
Adding entdump3 other functions, ExtractedOnly mode uses other functions
Adding entdump4 other functions, ExtractedOnly mode uses other functions
Adding setdump0 other functions, ExtractedOnly mode uses other functions
Adding setdump1 other functions, ExtractedOnly mode uses other functions
Adding setdump2 other functions, ExtractedOnly mode uses other functions
Adding setdump3 other functions, ExtractedOnly mode uses other functions
Adding setdump4 other functions, ExtractedOnly mode uses other functions
Adding subsetdump0 other functions, ExtractedOnly mode uses other functions
Adding subsetdump1 other functions, ExtractedOnly mode uses other functions
Adding subsetdump2 other functions, ExtractedOnly mode uses other functions
Adding subsetdump3 other functions, ExtractedOnly mode uses other functions
Adding subsetdump4 other functions, ExtractedOnly mode uses other functions
Adding subsetdump5 other functions, ExtractedOnly mode uses other functions
Adding good0 other functions, ExtractedOnly mode uses other functions
Adding good1 other functions, ExtractedOnly mode uses other functions
Adding good2 other functions, ExtractedOnly mode uses other functions
Adding good3 other functions, ExtractedOnly mode uses other functions
Adding good4 other functions, ExtractedOnly mode uses other functions
Adding cap_ok0 other functions, ExtractedOnly mode uses other functions
Adding cap_ok1 other functions, ExtractedOnly mode uses other functions
Adding cap_ok2 other functions, ExtractedOnly mode uses other functions
Adding cap_ok3 other functions, ExtractedOnly mode uses other functions
Adding cap_ok4 other functions, ExtractedOnly mode uses other functions
Adding cap_ok5 other functions, ExtractedOnly mode uses other functions
Adding cap_ok6 other functions, ExtractedOnly mode uses other functions
Adding cap_ok7 other functions, ExtractedOnly mode uses other functions
Adding cap_ok8 other functions, ExtractedOnly mode uses other functions
Adding cap_ok9 other functions, ExtractedOnly mode uses other functions
Adding cap_ok10 other functions, ExtractedOnly mode uses other functions
Adding flagpr0 other functions, ExtractedOnly mode uses other functions
Adding flagpr1 other functions, ExtractedOnly mode uses other functions
Adding flagpr2 other functions, ExtractedOnly mode uses other functions
Adding flagpr3 other functions, ExtractedOnly mode uses other functions
Adding flagpr4 other functions, ExtractedOnly mode uses other functions
Adding flagpr5 other functions, ExtractedOnly mode uses other functions
Adding flagpr6 other functions, ExtractedOnly mode uses other functions
Adding flagpr7 other functions, ExtractedOnly mode uses other functions
Adding flagpr8 other functions, ExtractedOnly mode uses other functions
Adding flagpr9 other functions, ExtractedOnly mode uses other functions
Adding flagpr10 other functions, ExtractedOnly mode uses other functions
Adding flagpr11 other functions, ExtractedOnly mode uses other functions
Adding flagpr12 other functions, ExtractedOnly mode uses other functions
Adding flagpr13 other functions, ExtractedOnly mode uses other functions
Adding flagpr14 other functions, ExtractedOnly mode uses other functions
Adding flagpr15 other functions, ExtractedOnly mode uses other functions
Adding flagpr16 other functions, ExtractedOnly mode uses other functions
Adding linit0 other functions, ExtractedOnly mode uses other functions
Adding linit1 other functions, ExtractedOnly mode uses other functions
Adding linit2 other functions, ExtractedOnly mode uses other functions
Adding linit3 other functions, ExtractedOnly mode uses other functions
Adding linit4 other functions, ExtractedOnly mode uses other functions
Adding linit5 other functions, ExtractedOnly mode uses other functions
Adding linit6 other functions, ExtractedOnly mode uses other functions
Adding linit7 other functions, ExtractedOnly mode uses other functions
Adding linit8 other functions, ExtractedOnly mode uses other functions
Adding linit9 other functions, ExtractedOnly mode uses other functions
Adding linit10 other functions, ExtractedOnly mode uses other functions
Adding linit11 other functions, ExtractedOnly mode uses other functions
Adding linit12 other functions, ExtractedOnly mode uses other functions
Adding linit13 other functions, ExtractedOnly mode uses other functions
Adding linit14 other functions, ExtractedOnly mode uses other functions
Adding linit15 other functions, ExtractedOnly mode uses other functions
Adding linit16 other functions, ExtractedOnly mode uses other functions
Adding linit17 other functions, ExtractedOnly mode uses other functions
Adding linit18 other functions, ExtractedOnly mode uses other functions
Adding linit19 other functions, ExtractedOnly mode uses other functions
Adding linit20 other functions, ExtractedOnly mode uses other functions
Adding linit21 other functions, ExtractedOnly mode uses other functions
Adding linit22 other functions, ExtractedOnly mode uses other functions
Adding linit23 other functions, ExtractedOnly mode uses other functions
Adding linit24 other functions, ExtractedOnly mode uses other functions
Adding linit25 other functions, ExtractedOnly mode uses other functions
Adding linit26 other functions, ExtractedOnly mode uses other functions
Adding linit27 other functions, ExtractedOnly mode uses other functions
Adding linit28 other functions, ExtractedOnly mode uses other functions
Adding linit29 other functions, ExtractedOnly mode uses other functions
Adding linit30 other functions, ExtractedOnly mode uses other functions
Adding linit31 other functions, ExtractedOnly mode uses other functions
Adding linit32 other functions, ExtractedOnly mode uses other functions
Adding linit33 other functions, ExtractedOnly mode uses other functions
Adding linit34 other functions, ExtractedOnly mode uses other functions
Adding linit35 other functions, ExtractedOnly mode uses other functions
Adding linit36 other functions, ExtractedOnly mode uses other functions
Adding linit37 other functions, ExtractedOnly mode uses other functions
Adding linit38 other functions, ExtractedOnly mode uses other functions
Adding linit39 other functions, ExtractedOnly mode uses other functions
Adding linit40 other functions, ExtractedOnly mode uses other functions
Adding linit41 other functions, ExtractedOnly mode uses other functions
Adding linit42 other functions, ExtractedOnly mode uses other functions
Adding linit43 other functions, ExtractedOnly mode uses other functions
Adding linit44 other functions, ExtractedOnly mode uses other functions
Adding linit45 other functions, ExtractedOnly mode uses other functions
Adding linit46 other functions, ExtractedOnly mode uses other functions
Adding linit47 other functions, ExtractedOnly mode uses other functions
Adding linit48 other functions, ExtractedOnly mode uses other functions
Adding linit49 other functions, ExtractedOnly mode uses other functions
Adding lookup0 other functions, ExtractedOnly mode uses other functions
Adding lookup1 other functions, ExtractedOnly mode uses other functions
Adding lookup2 other functions, ExtractedOnly mode uses other functions
Adding lookup3 other functions, ExtractedOnly mode uses other functions
Adding hash0 other functions, ExtractedOnly mode uses other functions
Adding hash1 other functions, ExtractedOnly mode uses other functions
Adding makedent0 other functions, ExtractedOnly mode uses other functions
Adding makedent1 other functions, ExtractedOnly mode uses other functions
Adding makedent2 other functions, ExtractedOnly mode uses other functions
Adding makedent3 other functions, ExtractedOnly mode uses other functions
Adding makedent4 other functions, ExtractedOnly mode uses other functions
Adding makedent5 other functions, ExtractedOnly mode uses other functions
Adding makedent6 other functions, ExtractedOnly mode uses other functions
Adding makedent7 other functions, ExtractedOnly mode uses other functions
Adding makedent8 other functions, ExtractedOnly mode uses other functions
Adding makedent9 other functions, ExtractedOnly mode uses other functions
Adding makedent10 other functions, ExtractedOnly mode uses other functions
Adding strtoichar0 other functions, ExtractedOnly mode uses other functions
Adding strtoichar1 other functions, ExtractedOnly mode uses other functions
Adding strtoichar2 other functions, ExtractedOnly mode uses other functions
Adding strtoichar3 other functions, ExtractedOnly mode uses other functions
Adding ichartostr0 other functions, ExtractedOnly mode uses other functions
Adding ichartostr1 other functions, ExtractedOnly mode uses other functions
Adding ichartostr2 other functions, ExtractedOnly mode uses other functions
Adding ichartostr3 other functions, ExtractedOnly mode uses other functions
Adding ichartostr4 other functions, ExtractedOnly mode uses other functions
Adding whatcap0 other functions, ExtractedOnly mode uses other functions
Adding whatcap1 other functions, ExtractedOnly mode uses other functions
Adding whatcap2 other functions, ExtractedOnly mode uses other functions
Adding whatcap3 other functions, ExtractedOnly mode uses other functions
Adding whatcap4 other functions, ExtractedOnly mode uses other functions
Adding chupcase0 other functions, ExtractedOnly mode uses other functions
Adding strtosichar0 other functions, ExtractedOnly mode uses other functions
Adding upcase0 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen0 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen1 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen2 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen3 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen4 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen5 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen6 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen7 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen8 other functions, ExtractedOnly mode uses other functions
Adding addvheader0 other functions, ExtractedOnly mode uses other functions
Adding addvheader1 other functions, ExtractedOnly mode uses other functions
Adding addvheader2 other functions, ExtractedOnly mode uses other functions
Adding addvheader3 other functions, ExtractedOnly mode uses other functions
Adding addvheader4 other functions, ExtractedOnly mode uses other functions
Adding combinecaps0 other functions, ExtractedOnly mode uses other functions
Adding combinecaps1 other functions, ExtractedOnly mode uses other functions
Adding combinecaps2 other functions, ExtractedOnly mode uses other functions
Adding combinecaps3 other functions, ExtractedOnly mode uses other functions
Adding combine_two_entries0 other functions, ExtractedOnly mode uses other functions
Adding combine_two_entries1 other functions, ExtractedOnly mode uses other functions
Adding combine_two_entries2 other functions, ExtractedOnly mode uses other functions
Adding forcevheader0 other functions, ExtractedOnly mode uses other functions
Adding combineaffixes0 other functions, ExtractedOnly mode uses other functions
Adding lowcase0 other functions, ExtractedOnly mode uses other functions
Adding toutent0 other functions, ExtractedOnly mode uses other functions
Adding toutent1 other functions, ExtractedOnly mode uses other functions
Adding toutent2 other functions, ExtractedOnly mode uses other functions
Adding ichartosstr0 other functions, ExtractedOnly mode uses other functions
Adding toutword0 other functions, ExtractedOnly mode uses other functions
Adding toutword1 other functions, ExtractedOnly mode uses other functions
Adding toutword2 other functions, ExtractedOnly mode uses other functions
Adding flagout0 other functions, ExtractedOnly mode uses other functions
Adding flagout1 other functions, ExtractedOnly mode uses other functions
Adding printichar0 other functions, ExtractedOnly mode uses other functions
Adding printichar1 other functions, ExtractedOnly mode uses other functions
Adding findfiletype0 other functions, ExtractedOnly mode uses other functions
Adding findfiletype1 other functions, ExtractedOnly mode uses other functions
Adding findfiletype2 other functions, ExtractedOnly mode uses other functions
Adding findfiletype3 other functions, ExtractedOnly mode uses other functions
Adding findfiletype4 other functions, ExtractedOnly mode uses other functions
Adding findfiletype5 other functions, ExtractedOnly mode uses other functions
Adding findfiletype6 other functions, ExtractedOnly mode uses other functions
Adding findfiletype7 other functions, ExtractedOnly mode uses other functions
Adding chk_aff0 other functions, ExtractedOnly mode uses other functions
Adding chk_aff1 other functions, ExtractedOnly mode uses other functions
Adding chk_aff2 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk0 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk1 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk2 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk3 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk4 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk5 other functions, ExtractedOnly mode uses other functions
Adding chk_suf0 other functions, ExtractedOnly mode uses other functions
Adding chk_suf1 other functions, ExtractedOnly mode uses other functions
Adding chk_suf2 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk0 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk1 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk2 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk3 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk4 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk5 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk6 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk7 other functions, ExtractedOnly mode uses other functions
Adding expand_pre0 other functions, ExtractedOnly mode uses other functions
Adding expand_pre1 other functions, ExtractedOnly mode uses other functions
Adding expand_pre2 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion0 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion1 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion2 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion3 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion4 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion5 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion6 other functions, ExtractedOnly mode uses other functions
Adding forcelc0 other functions, ExtractedOnly mode uses other functions
Adding forcelc1 other functions, ExtractedOnly mode uses other functions
Adding expand_suf0 other functions, ExtractedOnly mode uses other functions
Adding expand_suf1 other functions, ExtractedOnly mode uses other functions
Adding expand_suf2 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion0 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion1 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion2 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion3 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion4 other functions, ExtractedOnly mode uses other functions
Adding treeinit0 other functions, ExtractedOnly mode uses other functions
Adding treeinit1 other functions, ExtractedOnly mode uses other functions
Adding treeinit2 other functions, ExtractedOnly mode uses other functions
Adding treeinit3 other functions, ExtractedOnly mode uses other functions
Adding treeinit4 other functions, ExtractedOnly mode uses other functions
Adding treeinit5 other functions, ExtractedOnly mode uses other functions
Adding treeinit6 other functions, ExtractedOnly mode uses other functions
Adding treeinit7 other functions, ExtractedOnly mode uses other functions
Adding treeinit8 other functions, ExtractedOnly mode uses other functions
Adding trydict0 other functions, ExtractedOnly mode uses other functions
Adding trydict1 other functions, ExtractedOnly mode uses other functions
Adding trydict2 other functions, ExtractedOnly mode uses other functions
Adding treeinsert0 other functions, ExtractedOnly mode uses other functions
Adding treeinsert1 other functions, ExtractedOnly mode uses other functions
Adding treeinsert2 other functions, ExtractedOnly mode uses other functions
Adding treeinsert3 other functions, ExtractedOnly mode uses other functions
Adding treeinsert4 other functions, ExtractedOnly mode uses other functions
Adding treeinsert5 other functions, ExtractedOnly mode uses other functions
Adding treeinsert6 other functions, ExtractedOnly mode uses other functions
Adding treeinsert7 other functions, ExtractedOnly mode uses other functions
Adding treeinsert8 other functions, ExtractedOnly mode uses other functions
Adding treeinsert9 other functions, ExtractedOnly mode uses other functions
Adding treeinsert10 other functions, ExtractedOnly mode uses other functions
Adding treeinsert11 other functions, ExtractedOnly mode uses other functions
Adding treeinsert12 other functions, ExtractedOnly mode uses other functions
Adding treeinsert13 other functions, ExtractedOnly mode uses other functions
Adding tinsert0 other functions, ExtractedOnly mode uses other functions
Adding tinsert1 other functions, ExtractedOnly mode uses other functions
Adding tinsert2 other functions, ExtractedOnly mode uses other functions
Adding tinsert3 other functions, ExtractedOnly mode uses other functions
Adding treelookup0 other functions, ExtractedOnly mode uses other functions
Adding treelookup1 other functions, ExtractedOnly mode uses other functions
Adding treelookup2 other functions, ExtractedOnly mode uses other functions
Adding treeoutput0 other functions, ExtractedOnly mode uses other functions
Adding treeoutput1 other functions, ExtractedOnly mode uses other functions
Adding treeoutput2 other functions, ExtractedOnly mode uses other functions
Adding treeoutput3 other functions, ExtractedOnly mode uses other functions
Adding treeoutput4 other functions, ExtractedOnly mode uses other functions
Adding treeoutput5 other functions, ExtractedOnly mode uses other functions
Adding treeoutput6 other functions, ExtractedOnly mode uses other functions
Adding treeoutput7 other functions, ExtractedOnly mode uses other functions
Adding treeoutput8 other functions, ExtractedOnly mode uses other functions
Adding treeoutput9 other functions, ExtractedOnly mode uses other functions
Adding treeoutput10 other functions, ExtractedOnly mode uses other functions
Adding treeoutput11 other functions, ExtractedOnly mode uses other functions
Adding treeoutput12 other functions, ExtractedOnly mode uses other functions
Adding treeoutput13 other functions, ExtractedOnly mode uses other functions
Adding treeoutput14 other functions, ExtractedOnly mode uses other functions
Adding treeoutput15 other functions, ExtractedOnly mode uses other functions
Adding treeoutput16 other functions, ExtractedOnly mode uses other functions
Adding treeoutput17 other functions, ExtractedOnly mode uses other functions
Adding treeoutput18 other functions, ExtractedOnly mode uses other functions
Adding treeoutput19 other functions, ExtractedOnly mode uses other functions
Adding treeoutput20 other functions, ExtractedOnly mode uses other functions
Adding treeoutput21 other functions, ExtractedOnly mode uses other functions
Adding treeoutput22 other functions, ExtractedOnly mode uses other functions
Adding treeoutput23 other functions, ExtractedOnly mode uses other functions
Adding treeoutput24 other functions, ExtractedOnly mode uses other functions
Adding treeoutput25 other functions, ExtractedOnly mode uses other functions
Adding treeoutput26 other functions, ExtractedOnly mode uses other functions
Adding treeoutput27 other functions, ExtractedOnly mode uses other functions
Adding treeoutput28 other functions, ExtractedOnly mode uses other functions
Adding treeoutput29 other functions, ExtractedOnly mode uses other functions
Adding treeoutput30 other functions, ExtractedOnly mode uses other functions
Adding treeoutput31 other functions, ExtractedOnly mode uses other functions
Adding treeoutput32 other functions, ExtractedOnly mode uses other functions
Adding myfree0 other functions, ExtractedOnly mode uses other functions
Adding xgets0 other functions, ExtractedOnly mode uses other functions
Adding xgets1 other functions, ExtractedOnly mode uses other functions
Adding xgets2 other functions, ExtractedOnly mode uses other functions
Adding xgets3 other functions, ExtractedOnly mode uses other functions
Adding xgets4 other functions, ExtractedOnly mode uses other functions
Sensitive functions:0 other functions:696
DesiredConnectivity is :1
Other functions to be fed to the network of checkers
cap_ok7
findfiletype4
linit16
entdump3
correct26
skiptoword11
makedent
compoundgood
TeX_math_check3
makedent3
issubset
shellescape4
cap_ok9
TeX_strncmp
treeoutput1
treeoutput8
dofile0
treeoutput19
linit39
treeinit2
main34
treeinit0
expandmode0
setdump3
suf_list_chk6
shellescape1
tinsert3
suf_list_chk5
dofile1
setdump4
insert1
TeX_math_begin3
show_line0
main41
strtoichar0
addvheader
ins_cap0
expand_pre1
linit27
linit20
checkfile0
main7
entdump4
TeX_math_end
treeoutput12
askmode5
printichar1
checkfile3
treeinsert
main32
lookharder
askmode6
treeoutput23
linit14
pr_pre_expansion3
terminit0
pr_pre_expansion
stringcharlen1
xgets
toutent0
TeX_LR_check0
pdictcmp
combineaffixes
treelookup2
good2
insert2
chupcase0
subsetdump0
main14
save_root_cap9
initckch2
usage0
treelookup1
main27
transposedletter0
save_cap4
my_getline
main39
chk_aff2
missingspace1
main20
lookup1
update_file5
linit17
linit49
checkline1
upcase0
correct16
flagout
my_getline6
checkfile5
ichartostr4
suf_list_chk7
dofile
treeoutput13
treeinsert4
askmode
checkfile6
linit13
skiptoword12
pfx_list_chk2
tinsert2
copyout1
treeinsert13
askmode3
show_char14
missingletter2
TeX_strncmp0
combine_two_entries
chk_aff0
linit41
xgets1
checkline19
treeoutput18
linit40
linit2
checkfile7
compoundgood1
linit47
main17
main4
givehelp2
toutent1
expand_suf1
pr_pre_expansion2
subsetdump2
skipoverword
entdump2
treeoutput9
main37
checkline6
checkline3
mymalloc
strtosichar
pr_pre_expansion1
entdump
whatcap3
upcase
main10
toutword2
update_file2
pr_suf_expansion
skiptoword2
expand_suf2
pfx_list_chk
chk_aff
treeinit7
main29
correct1
treeoutput15
main43
flagout1
entdump0
expandmode1
findfiletype5
TeX_skip_args3
makepossibilities3
inserttoken3
flagpr9
checkline5
forcelc0
checkline20
flagpr15
lowcase0
askmode0
TeX_LR_check3
cap_ok10
transposedletter
show_char10
TeX_math_check1
skipoverword4
TeX_skip_check3
skipoverword1
chk_suf0
ichartostr0
correct11
linit32
save_root_cap
stringcharlen5
askmode10
linit22
main40
skiptoword0
save_root_cap8
inverse
askmode2
linit45
correct21
skiptoword9
save_root_cap0
xgets4
transposedletter1
TeX_math_begin2
subsetdump5
casecmp
linit3
lookharder0
suf_list_chk2
whatcap0
treeinsert3
stringcharlen3
combinecaps1
subsetdump4
save_root_cap5
givehelp0
TeX_LR_begin2
pfx_list_chk5
treeinit6
save_root_cap1
main21
save_root_cap3
linit9
main38
my_getline2
onstop0
addvheader3
save_root_cap11
TeX_skip_args0
dumpmode3
terminit3
printichar0
TeX_LR_check4
askmode4
main35
combine_two_entries0
treelookup0
done
main15
save_root_cap4
checkline11
makedent8
treeoutput11
strtoichar1
expand_suf0
skiptoword13
casecmp3
ichartostr1
forcevheader0
flagpr4
skiptoword6
linit28
save_cap1
line_size0
expand_pre
TeX_skip_parens
linit34
strtoichar3
inserttoken1
findfiletype7
cap_ok1
flagpr13
checkline14
dumpmode0
compoundgood0
combinecaps3
missingletter
treeoutput16
printichar
makedent6
main13
main5
askmode9
chk_suf
update_file1
correct15
findfiletype0
combineaffixes0
TeX_LR_check2
show_char11
show_char8
pr_suf_expansion0
makedent9
missingletter0
trydict0
flagpr11
main3
flagpr10
pr_suf_expansion4
show_char4
TeX_skip_check
stringcharlen0
linit42
main2
missingspace2
findfiletype3
linit18
TeX_math_end0
dumpmode2
tbldump
correct23
TeX_skip_parens0
pr_suf_expansion1
terminit
TeX_skip_check2
treeoutput27
casecmp2
main31
linit
givehelp
cap_ok0
ichartosstr0
treeinsert7
correct20
pr_pre_expansion6
posscmp
TeX_math_check2
TeX_skip_check1
makedent4
main33
linit44
whatcap
main1
linit11
skiptoword19
show_char5
expand_pre2
stringcharlen7
makepossibilities4
save_cap0
makedent1
subsetdump
setdump1
initckch
linit8
terminit4
erase
linit43
treeinit1
checkline18
linit21
linit48
linit36
tbldump0
treelookup
onstop
correct0
combinecaps0
linit37
lookup3
xgets0
main9
treeoutput0
treeoutput4
show_char2
main0
main24
toutword
treeoutput28
save_root_cap6
missingspace
treeinsert11
skiptoword4
checkfile1
linit7
wrongletter0
update_file3
show_char3
good4
myfree0
correct10
correct3
show_char
ichartostr
main36
show_line2
TeX_skip_args
trydict
save_root_cap10
copyout0
linit35
treeoutput2
treeinsert12
treeinit4
shellescape
makedent5
linit38
insert
linit33
lookup0
suf_list_chk4
show_line
toutword0
TeX_LR_check1
flagpr16
save_cap3
strtoichar
addvheader2
findfiletype6
cap_ok
update_file4
checkline0
stringcharlen6
show_line3
checkfile2
ichartostr2
treeoutput17
TeX_LR_begin
checkline8
show_char6
xgets3
checkline10
TeX_skip_args1
treeoutput24
TeX_math_end2
makedent10
wrongletter1
my_getline4
flagout0
makepossibilities2
treeload
makepossibilities8
treeinsert6
copyout
skiptoword3
treeoutput31
linit5
main6
addvheader0
acoversb
show_char9
checkline9
show_char13
save_cap
skipoverword3
main42
shellescape5
dofile3
correct17
pr_pre_expansion4
cap_ok5
checkline15
my_getline0
main22
pr_pre_expansion5
suf_list_chk1
suf_list_chk
flagpr7
main23
forcelc1
combinecaps
setdump0
expandmode
checkline16
correct5
show_line1
shellescape3
treeinsert9
treeoutput5
treeoutput10
skiptoword
askmode8
ichartosstr
show_char12
correct24
terminit1
toutent2
show_char0
stringcharlen2
missingspace0
casecmp5
findfiletype2
addvheader1
skiptoword18
checkline
treeoutput7
save_root_cap2
makepossibilities5
pfx_list_chk0
treeoutput20
flagpr6
linit25
makedent2
treeinit3
TeX_LR_begin0
main18
entryhasaffixes
line_size
casecmp4
main28
stringcharlen8
inserttoken5
suf_list_chk3
skiptoword16
compoundgood3
inserttoken2
treeoutput22
hash1
flagpr
good3
treeoutput6
update_file
findfiletype
chk_suf2
toutword1
correct19
linit4
shellescape0
dumpmode4
suf_list_chk0
treeoutput32
givehelp1
move
whatcap1
linit6
linit1
correct8
flagpr8
TeX_math_end1
lookharder2
cap_ok4
treeinit
TeX_math_begin4
tryveryhard
wrongletter
strtoichar2
skiptoword5
dumpmode
treeoutput21
treeinit5
addvheader4
backup
lookup
show_char1
TeX_math_begin
makepossibilities
setdump
correct22
treeinsert10
casecmp6
cap_ok6
wrongcapital
toutent
setdump2
myfree
correct18
tinsert1
main19
main26
TeX_math_begin0
TeX_math_check
TeX_skip_args2
casecmp1
treeinsert1
casecmp0
makepossibilities6
TeX_LR_begin1
initckch0
terminit2
main8
main16
tinsert
cap_ok8
lowcase
flagpr0
treeinsert2
skiptoword15
correct9
pfx_list_chk1
flagpr1
ins_root_cap
extraletter
save_cap2
ins_root_cap0
dumpmode1
pr_pre_expansion0
linit24
treeoutput3
linit30
skiptoword10
correct6
shellescape2
treeoutput29
correct
normal
good0
combine_two_entries2
forcelc
combine_two_entries1
skiptoword8
strtosichar0
TeX_math_begin1
inserttoken4
stringcharlen
makedent0
ichartostr3
correct25
extraletter0
skiptoword7
flagpr3
main
checkline2
whatcap4
linit19
askmode1
subsetdump1
correct2
makepossibilities1
flagpr14
my_getline5
correct12
main11
treeinsert8
lookup2
chupcase
TeX_skip_check0
pfx_list_chk4
hash
chk_aff1
pr_suf_expansion3
my_getline1
linit12
skiptoword17
show_char7
chk_suf1
checkline17
tinsert0
skiptoword1
linit10
treeoutput14
stop
checkfile
insert0
findfiletype1
TeX_open_paren
subsetdump3
flagpr2
main30
trydict2
expand_suf
linit29
makepossibilities7
forcevheader
treeoutput30
my_getline3
correct14
treeoutput26
dofile2
flagpr12
linit15
skiptoword14
treeinsert5
good
tryveryhard0
combinecaps2
makedent7
linit0
main12
makepossibilities0
missingletter1
compoundgood2
treeinsert0
pr_suf_expansion2
skipoverword2
TeX_open_paren0
initckch1
terminit5
hash0
update_file0
linit26
treeoutput
linit31
usage
inserttoken6
checkline13
expand_pre0
flagpr5
TeX_LR_check
main25
stringcharlen4
skipoverword0
checkline7
cap_ok3
checkline4
trydict1
checkline12
linit46
save_root_cap7
xgets2
whatcap2
ins_cap
inserttoken0
linit23
correct4
TeX_math_check0
cap_ok2
inserttoken
correct7
treeoutput25
lookharder1
entdump1
pfx_list_chk3
treeinit8
correct13
checkfile4
askmode7
good1
***
Sensitive functions to be fed to the network of checkers
***
Sensitive functions only checked:0
DAGCheckersNetwork::getReverseTopologicalSort freed visited
Constructed the network of checkers!
Sensitive functions are never checkers as SensitiveOnlyChecked is set to:0
Dumping checkers network info
{
    "allCheckees": [],
    "topologicalsort": []
}
SC stats is requested, dumping stat file...
{
    "avgConnectivity": -nan.0,
    "desiredConnectivity": 1,
    "numberOfGuardInstructions": 0,
    "numberOfGuards": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveInstructions": 0,
    "stdConnectivity": -nan.0
}
Recieved marked functions 0
ERR. processed 696 function, while filter count is 70
Functions called in loop
Function call numbers
main5 -- 1
main0 -- 1
main -- 0
Insert hash computation
Pointer Subgraph is broken!
Invalid number of operands for PSNodeType::PHI with ID 14317
  - operands: []
No reaching definition for: @stdout = external global %struct._IO_FILE*, align 8 off: 0
No reaching definition for: @stderr = external global %struct._IO_FILE*, align 8 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
DEF-USE: no information for: pdictcmp
DEF-USE: no information for: onstop
DEF-USE: no information for: done
No reaching definition for:   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %cp.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %p.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %6 = alloca [8192 x i8], align 16, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 in:   store i8* %incdec.ptr16, i8** %q, align 8, !control_dep_instr !7, !data_dep_instr !8 off: 18446744073709551615
No reaching definition for:   %ew = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %ew.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %helpout = alloca %struct._IO_FILE*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %helpout.el = alloca %struct._IO_FILE*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca %struct.dent*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca %struct.dent*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %p.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %ichar = alloca i8, align 1, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %ichar.el = alloca i8, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
DEF-USE: no information for: posscmp
No reaching definition for:   %realword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %realword.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %skip_ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %skip_ch.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
IntToPtr with constant:   <badref> = inttoptr i64 1 to void (i32)*
No reaching definition for: @stdin = external global %struct._IO_FILE*, align 8 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %nextchar = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %nextchar.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %entry1.el = alloca %struct.flagent*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %dp.el = alloca %struct.dent*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %i.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %call57 = call noalias i8* @calloc(i64 1, i64 24) #8, !control_dep_instr !7, !data_indep_instr !10, !global_dep_instr !9 in:   store %struct.dent* null, %struct.dent** %5, align 8, !control_dep_instr !8, !input_indep_instr !11, !data_indep_instr !12 off: 16
No tags were supplied to be skipped! 
'guard' metadata was found in the input bitcode
Recieved marked functions 0
Recieved filter functions 70
 Skipping function per FilterFunctionPass:erase
 Skipping function per FilterFunctionPass:move
 Skipping function per FilterFunctionPass:inverse
 Skipping function per FilterFunctionPass:normal
 Skipping function per FilterFunctionPass:backup
 Skipping function per FilterFunctionPass:terminit
 Skipping function per FilterFunctionPass:done
 Skipping function per FilterFunctionPass:onstop
 Skipping function per FilterFunctionPass:stop
 Skipping function per FilterFunctionPass:shellescape
 Skipping function per FilterFunctionPass:main
 Skipping function per FilterFunctionPass:usage
 Skipping function per FilterFunctionPass:initckch
 Skipping function per FilterFunctionPass:expandmode
 Skipping function per FilterFunctionPass:dofile
 Skipping function per FilterFunctionPass:update_file
 Skipping function per FilterFunctionPass:givehelp
 Skipping function per FilterFunctionPass:checkfile
Collecting defining blocks for correct
 Skipping function per FilterFunctionPass:compoundgood
 Skipping function per FilterFunctionPass:makepossibilities
 Skipping function per FilterFunctionPass:show_line
 Skipping function per FilterFunctionPass:line_size
 Skipping function per FilterFunctionPass:my_getline
Collecting defining blocks for inserttoken
 Skipping function per FilterFunctionPass:lookharder
 Skipping function per FilterFunctionPass:show_char
 Skipping function per FilterFunctionPass:wrongcapital
 Skipping function per FilterFunctionPass:missingletter
 Skipping function per FilterFunctionPass:transposedletter
Collecting defining blocks for extraletter
Collecting defining blocks for wrongletter
 Skipping function per FilterFunctionPass:missingspace
Collecting defining blocks for tryveryhard
 Skipping function per FilterFunctionPass:posscmp
Skip. No dependence graph for function casecmp
 Skipping function per FilterFunctionPass:save_cap
 Skipping function per FilterFunctionPass:insert
 Skipping function per FilterFunctionPass:save_root_cap
 Skipping function per FilterFunctionPass:ins_cap
 Skipping function per FilterFunctionPass:ins_root_cap
 Skipping function per FilterFunctionPass:askmode
 Skipping function per FilterFunctionPass:copyout
 Skipping function per FilterFunctionPass:skipoverword
 Skipping function per FilterFunctionPass:checkline
 Skipping function per FilterFunctionPass:skiptoword
 Skipping function per FilterFunctionPass:TeX_math_check
 Skipping function per FilterFunctionPass:TeX_LR_check
 Skipping function per FilterFunctionPass:TeX_math_end
 Skipping function per FilterFunctionPass:TeX_strncmp
 Skipping function per FilterFunctionPass:TeX_skip_parens
 Skipping function per FilterFunctionPass:TeX_math_begin
 Skipping function per FilterFunctionPass:TeX_skip_check
 Skipping function per FilterFunctionPass:TeX_LR_begin
 Skipping function per FilterFunctionPass:TeX_open_paren
 Skipping function per FilterFunctionPass:TeX_skip_args
 Skipping function per FilterFunctionPass:dumpmode
Collecting defining blocks for tbldump
 Skipping function per FilterFunctionPass:entdump
 Skipping function per FilterFunctionPass:setdump
 Skipping function per FilterFunctionPass:subsetdump
 Skipping function per FilterFunctionPass:good
 Skipping function per FilterFunctionPass:cap_ok
 Skipping function per FilterFunctionPass:entryhasaffixes
 Skipping function per FilterFunctionPass:flagpr
 Skipping function per FilterFunctionPass:linit
 Skipping function per FilterFunctionPass:lookup
 Skipping function per FilterFunctionPass:hash
 Skipping function per FilterFunctionPass:makedent
 Skipping function per FilterFunctionPass:strtoichar
 Skipping function per FilterFunctionPass:ichartostr
 Skipping function per FilterFunctionPass:whatcap
 Skipping function per FilterFunctionPass:chupcase
 Skipping function per FilterFunctionPass:strtosichar
 Skipping function per FilterFunctionPass:upcase
 Skipping function per FilterFunctionPass:stringcharlen
 Skipping function per FilterFunctionPass:addvheader
 Skipping function per FilterFunctionPass:combinecaps
 Skipping function per FilterFunctionPass:combine_two_entries
 Skipping function per FilterFunctionPass:forcevheader
 Skipping function per FilterFunctionPass:combineaffixes
 Skipping function per FilterFunctionPass:acoversb
 Skipping function per FilterFunctionPass:issubset
 Skipping function per FilterFunctionPass:lowcase
 Skipping function per FilterFunctionPass:toutent
 Skipping function per FilterFunctionPass:ichartosstr
 Skipping function per FilterFunctionPass:toutword
 Skipping function per FilterFunctionPass:flagout
 Skipping function per FilterFunctionPass:printichar
 Skipping function per FilterFunctionPass:findfiletype
 Skipping function per FilterFunctionPass:chk_aff
 Skipping function per FilterFunctionPass:pfx_list_chk
 Skipping function per FilterFunctionPass:chk_suf
 Skipping function per FilterFunctionPass:suf_list_chk
 Skipping function per FilterFunctionPass:expand_pre
Collecting defining blocks for pr_pre_expansion
 Skipping function per FilterFunctionPass:forcelc
Collecting defining blocks for expand_suf
 Skipping function per FilterFunctionPass:pr_suf_expansion
 Skipping function per FilterFunctionPass:treeinit
 Skipping function per FilterFunctionPass:trydict
 Skipping function per FilterFunctionPass:treeload
Collecting defining blocks for treeinsert
 Skipping function per FilterFunctionPass:tinsert
 Skipping function per FilterFunctionPass:treelookup
 Skipping function per FilterFunctionPass:treeoutput
Skip. No dependence graph for function pdictcmp
 Skipping function per FilterFunctionPass:mymalloc
Collecting defining blocks for myfree
 Skipping function per FilterFunctionPass:xgets
 Skipping function per FilterFunctionPass:erase
 Skipping function per FilterFunctionPass:move
 Skipping function per FilterFunctionPass:inverse
 Skipping function per FilterFunctionPass:normal
 Skipping function per FilterFunctionPass:backup
 Skipping function per FilterFunctionPass:terminit
 Skipping function per FilterFunctionPass:done
 Skipping function per FilterFunctionPass:onstop
 Skipping function per FilterFunctionPass:stop
 Skipping function per FilterFunctionPass:shellescape
 Skipping function per FilterFunctionPass:main
 Skipping function per FilterFunctionPass:usage
 Skipping function per FilterFunctionPass:initckch
 Skipping function per FilterFunctionPass:expandmode
 Skipping function per FilterFunctionPass:dofile
 Skipping function per FilterFunctionPass:update_file
 Skipping function per FilterFunctionPass:givehelp
 Skipping function per FilterFunctionPass:checkfile
 Processing function:correct
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  checkagain  if.then6  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  
After path modifications process path
entry  if.end  if.then6  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.then10  
After path modifications process path
if.end7  if.then10  
Hash path invariants only
Invariants are
  br label %if.end12, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  call void @correct0(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !12
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.then14  
After path modifications process path
if.end7  if.end12  if.then14  
Hash path invariants only
Invariants are
  br label %if.end16, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.then22  
After path modifications process path
if.end7  if.end12  if.end16  if.then22  
Hash path invariants only
Invariants are
  call void @correct1(i32* %col_ht, i32* %ncols), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
Can't handle this operand   %col_ht = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct1(i32* %col_ht, i32* %ncols), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %ncols = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct1(i32* %col_ht, i32* %ncols), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.then34  
After path modifications process path
for.body  if.then34  
Hash path invariants only
Invariants are
  br label %if.end51, !control_dep_instr !7, !data_indep_instr !11
  call void @correct2(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct2(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.end51  for.inc  
After path modifications process path
for.body  if.end51  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !12
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.else  land.lhs.true  if.then40  
After path modifications process path
for.body  if.else  land.lhs.true  if.then40  
Hash path invariants only
Invariants are
  br label %if.end50, !control_dep_instr !7, !data_indep_instr !11
  call void @correct3(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct3(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.else  if.end50  
After path modifications process path
for.body  if.else  if.end50  
Hash path invariants only
Invariants are
  br label %if.end51, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !12
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.else  if.else45  
After path modifications process path
for.body  if.else  if.else45  
Hash path invariants only
Invariants are
  br label %if.end50, !control_dep_instr !7, !data_indep_instr !11
  call void @correct4(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct4(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond52  for.body55  
After path modifications process path is empty
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  
Hash path invariants only
Invariants are
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  if.then80  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  if.then80  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  while.body  if.end81  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.then87  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.then87  
Hash path invariants only
Invariants are
  br label %if.end88, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @correct10(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct10(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct10(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.end88  if.then91  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.end88  if.then91  
Hash path invariants only
Invariants are
  br label %if.end92, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.end88  if.end92  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.end88  if.end92  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end93, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.then98  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.then98  
Hash path invariants only
Invariants are
  call void @correct11(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %if.end101, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond102  sw.default  
After path modifications process path
sw.default  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  %call242 = call i32 @putchar(i32 7), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.epilog  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb105  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb105  
After path modifications process path
entry  if.end  sw.bb105  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb105  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  sw.bb105  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  sw.bb105  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.then109  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.then109  
Hash path invariants only
Invariants are
  call void @correct13(i32* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  br label %if.end115, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %c = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct13(i32* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  if.then121  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  if.then121  
Hash path invariants only
Invariants are
  br label %if.end123, !control_dep_instr !7, !data_indep_instr !11
  call void @done(i32 0), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct14(), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  if.end123  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  lor.lhs.false118  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  lor.lhs.false118  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.else114  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.else114  
Hash path invariants only
Invariants are
  br label %if.end115, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i32 121, i32* %c, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb124  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb124  
After path modifications process path
entry  if.end  sw.bb124  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb124  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  sw.bb124  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  sw.bb124  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb128  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb128  
After path modifications process path
entry  if.end  sw.bb128  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb128  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  sw.bb128  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  sw.bb128  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb132  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb132  
After path modifications process path
entry  if.end  sw.bb132  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb132  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  sw.bb132  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  sw.bb132  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb136  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb137  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb138  if.then145  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb138  
Hash path invariants only
Invariants are
  %arraydecay141 = getelementptr inbounds [200 x i8], [200 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  %call140 = call i32 @putchar(i32 33), !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb138  if.end148  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb138  
Hash path invariants only
Invariants are
  %arraydecay141 = getelementptr inbounds [200 x i8], [200 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  %call140 = call i32 @putchar(i32 33), !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.then156  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.then156  
Hash path invariants only
Invariants are
  br label %if.end159, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  call void @correct19(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !12
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.then164  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.then164  
Hash path invariants only
Invariants are
  br label %if.end174, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct20(i32* %ctokl.addr, i8** %itok.addr, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %ctokl.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct20(i32* %ctokl.addr, i8** %itok.addr, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %itok.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct20(i32* %ctokl.addr, i8** %itok.addr, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %ctok.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct20(i32* %ctokl.addr, i8** %itok.addr, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  if.then179  
After path modifications process path is empty
Processing path: entry  if.end  if.then179  
After path modifications process path
entry  if.end  if.then179  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.end174  if.then179  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  if.then179  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  if.then179  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.end174  if.end180  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.else167  if.then170  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.else167  if.then170  
Hash path invariants only
Invariants are
  br label %if.end173, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct21(i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %ctok.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct21(i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.else167  if.end173  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.else167  if.end173  
Hash path invariants only
Invariants are
  br label %if.end174, !control_dep_instr !7, !data_indep_instr !11
  store i32 1, i32* @changes, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.then185  land.lhs.true190  if.then193  
After path modifications process path
sw.bb181  if.then185  land.lhs.true190  if.then193  
Hash path invariants only
Invariants are
  %call186 = call i32 @getchar(), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  br label %if.end206, !control_dep_instr !7, !data_indep_instr !11
  store i32 %and187, i32* %c, align 4, !control_dep_instr !7, !data_dep_instr !8
  %and187 = and i32 %call186, 127, !control_dep_instr !7, !data_dep_instr !8
  call void @correct22(i32* %c, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %c = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct22(i32* %c, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct22(i32* %c, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.then185  if.end206  
After path modifications process path
sw.bb181  if.then185  if.end206  
Hash path invariants only
Invariants are
  %call186 = call i32 @getchar(), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  br label %if.end207, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %and187 = and i32 %call186, 127, !control_dep_instr !7, !data_dep_instr !8
  store i32 %and187, i32* %c, align 4, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.then185  if.else197  land.lhs.true200  if.then203  
After path modifications process path
sw.bb181  if.then185  if.else197  land.lhs.true200  if.then203  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11
  store i32 %and187, i32* %c, align 4, !control_dep_instr !7, !data_dep_instr !8
  %and187 = and i32 %call186, 127, !control_dep_instr !7, !data_dep_instr !8
  %call186 = call i32 @getchar(), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %call204 = call i32 @putchar(i32 7), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.then185  if.else197  if.end205  
After path modifications process path
sw.bb181  if.then185  if.else197  if.end205  
Hash path invariants only
Invariants are
  br label %if.end206, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %call186 = call i32 @getchar(), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %and187 = and i32 %call186, 127, !control_dep_instr !7, !data_dep_instr !8
  store i32 %and187, i32* %c, align 4, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.end207  if.then210  if.then216  
After path modifications process path
sw.bb181  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.then210  if.then216  
After path modifications process path
entry  if.end  if.then210  if.then216  
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct23(i32* %i, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %ctok.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct23(i32* %i, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %curchar.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct24(i8*** %curchar.addr, i8** %ctok.addr, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11
Can't handle this operand   %ctok.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct24(i8*** %curchar.addr, i8** %ctok.addr, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct24(i8*** %curchar.addr, i8** %ctok.addr, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  if.then210  if.then216  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  if.then210  if.then216  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  if.then210  if.then216  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.end207  if.then210  if.end222  
After path modifications process path
sw.bb181  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.then210  if.end222  
After path modifications process path
entry  if.end  if.then210  if.end222  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  if.then210  if.end222  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  if.then210  if.end222  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  if.then210  if.end222  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.end207  if.end223  
After path modifications process path
sw.bb181  if.end223  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  %call224 = call i32 @putchar(i32 7), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb225  
After path modifications process path
sw.bb225  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb226  if.then234  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb226  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %arraydecay230 = getelementptr inbounds [100 x i8], [100 x i8]* %buf227, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb226  if.end236  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb226  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %arraydecay230 = getelementptr inbounds [100 x i8], [100 x i8]* %buf227, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb240  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb240  
After path modifications process path
entry  if.end  sw.bb240  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb240  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  sw.bb240  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  sw.bb240  
After path modifications process path is empty
 Skipping function per FilterFunctionPass:compoundgood
 Skipping function per FilterFunctionPass:makepossibilities
 Skipping function per FilterFunctionPass:show_line
 Skipping function per FilterFunctionPass:line_size
 Skipping function per FilterFunctionPass:my_getline
 Processing function:inserttoken
Short range hashing enabled.
Processing path: entry  for.cond  for.body  for.inc  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11
  call void @inserttoken1(i8** %p, i8** %q), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken1(i8** %p, i8** %q), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %q = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken1(i8** %p, i8** %q), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %q = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken0(i8** %q, i8** %p, i8** %buf.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken0(i8** %q, i8** %p, i8** %buf.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %buf.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken0(i8** %q, i8** %p, i8** %buf.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  for.end  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing call instruction..
Can't handle this operand   %ew = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %curchar.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %start.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %q = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %tok.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  for.end  while.end  if.then  while.cond9  while.body11  
After path modifications process path is empty
Processing path: entry  for.end  while.cond  while.end  if.then  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  while.end  if.then  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.then  
After path modifications process path
entry  for.end  while.end  if.then  
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken5(i8** %p, i8** %tok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %tok.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken5(i8** %p, i8** %tok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.end  while.end  if.then  while.cond9  while.end14  
After path modifications process path is empty
Processing path: entry  for.end  while.cond  while.end  if.then  while.end14  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  while.end  if.then  while.end14  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.then  while.end14  
After path modifications process path
entry  for.end  while.end  if.then  while.end14  
Processing path: entry  for.end  while.cond  while.end  if.end  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  while.end  if.end  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.end  while.cond15  while.body20  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.end  
After path modifications process path
entry  for.end  while.end  if.end  
Processing path: entry  for.end  while.cond  while.end  if.end  while.end21  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  while.end  if.end  while.end21  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.end  while.cond15  while.end21  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.end  while.end21  
After path modifications process path
entry  for.end  while.end  if.end  while.end21  
 Skipping function per FilterFunctionPass:lookharder
 Skipping function per FilterFunctionPass:show_char
 Skipping function per FilterFunctionPass:wrongcapital
 Skipping function per FilterFunctionPass:missingletter
 Skipping function per FilterFunctionPass:transposedletter
 Processing function:extraletter
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing path: entry  if.end  for.cond  for.body  if.then7  if.then12  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  %arraydecay5 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  if.end  if.then12  
After path modifications process path
entry  if.end  if.then12  
Processing path: entry  if.end  for.cond  for.body  if.then7  if.end13  
After path modifications process path
for.body  if.end13  
Hash path invariants only
Invariants are
  br label %if.end14, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay5 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.end14  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  %arraydecay5 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
 Processing function:wrongletter
Short range hashing enabled.
Processing path: entry  for.cond4  for.body7  if.then  
After path modifications process path
for.body7  if.then  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  for.body7  for.inc  
After path modifications process path
for.body7  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  for.body7  if.else  land.lhs.true  if.then23  
After path modifications process path
for.body7  if.else  land.lhs.true  if.then23  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  for.body7  if.else  land.lhs.true  lor.lhs.false  
After path modifications process path
for.body7  if.else  land.lhs.true  lor.lhs.false  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  for.body7  if.else  if.end  if.end24  if.then32  if.then37  
After path modifications process path
for.body7  if.else  if.end  if.end24  
Hash path invariants only
Invariants are
  %arraydecay29 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond  for.body  if.then37  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.then37  
After path modifications process path
entry  if.then37  
Processing path: entry  for.cond4  for.body7  if.else  if.end  if.end24  if.then32  if.end38  
After path modifications process path
for.body7  if.else  if.end  if.end24  if.end38  
Hash path invariants only
Invariants are
  br label %if.end39, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay29 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  for.body7  if.else  if.end  if.end24  if.end39  
After path modifications process path
for.body7  if.else  if.end  if.end24  if.end39  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay29 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  for.end  for.inc42  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc42, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end44  
After path modifications process path is empty
Processing path: entry  for.end44  
After path modifications process path
entry  for.end44  
 Skipping function per FilterFunctionPass:missingspace
 Processing function:tryveryhard
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @tryveryhard0(i8** %word.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
 Skipping function per FilterFunctionPass:posscmp
Skip. No dependence graph for function casecmp
 Skipping function per FilterFunctionPass:save_cap
 Skipping function per FilterFunctionPass:insert
 Skipping function per FilterFunctionPass:save_root_cap
 Skipping function per FilterFunctionPass:ins_cap
 Skipping function per FilterFunctionPass:ins_root_cap
 Skipping function per FilterFunctionPass:askmode
 Skipping function per FilterFunctionPass:copyout
 Skipping function per FilterFunctionPass:skipoverword
 Skipping function per FilterFunctionPass:checkline
 Skipping function per FilterFunctionPass:skiptoword
 Skipping function per FilterFunctionPass:TeX_math_check
 Skipping function per FilterFunctionPass:TeX_LR_check
 Skipping function per FilterFunctionPass:TeX_math_end
 Skipping function per FilterFunctionPass:TeX_strncmp
 Skipping function per FilterFunctionPass:TeX_skip_parens
 Skipping function per FilterFunctionPass:TeX_math_begin
 Skipping function per FilterFunctionPass:TeX_skip_check
 Skipping function per FilterFunctionPass:TeX_LR_begin
 Skipping function per FilterFunctionPass:TeX_open_paren
 Skipping function per FilterFunctionPass:TeX_skip_args
 Skipping function per FilterFunctionPass:dumpmode
 Processing function:tbldump
Short range hashing enabled.
Processing path: entry  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
No oh has been applied in the path
 Skipping function per FilterFunctionPass:entdump
 Skipping function per FilterFunctionPass:setdump
 Skipping function per FilterFunctionPass:subsetdump
 Skipping function per FilterFunctionPass:good
 Skipping function per FilterFunctionPass:cap_ok
 Skipping function per FilterFunctionPass:entryhasaffixes
 Skipping function per FilterFunctionPass:flagpr
 Skipping function per FilterFunctionPass:linit
 Skipping function per FilterFunctionPass:lookup
 Skipping function per FilterFunctionPass:hash
 Skipping function per FilterFunctionPass:makedent
 Skipping function per FilterFunctionPass:strtoichar
 Skipping function per FilterFunctionPass:ichartostr
 Skipping function per FilterFunctionPass:whatcap
 Skipping function per FilterFunctionPass:chupcase
 Skipping function per FilterFunctionPass:strtosichar
 Skipping function per FilterFunctionPass:upcase
 Skipping function per FilterFunctionPass:stringcharlen
 Skipping function per FilterFunctionPass:addvheader
 Skipping function per FilterFunctionPass:combinecaps
 Skipping function per FilterFunctionPass:combine_two_entries
 Skipping function per FilterFunctionPass:forcevheader
 Skipping function per FilterFunctionPass:combineaffixes
 Skipping function per FilterFunctionPass:acoversb
 Skipping function per FilterFunctionPass:issubset
 Skipping function per FilterFunctionPass:lowcase
 Skipping function per FilterFunctionPass:toutent
 Skipping function per FilterFunctionPass:ichartosstr
 Skipping function per FilterFunctionPass:toutword
 Skipping function per FilterFunctionPass:flagout
 Skipping function per FilterFunctionPass:printichar
 Skipping function per FilterFunctionPass:findfiletype
 Skipping function per FilterFunctionPass:chk_aff
 Skipping function per FilterFunctionPass:pfx_list_chk
 Skipping function per FilterFunctionPass:chk_suf
 Skipping function per FilterFunctionPass:suf_list_chk
 Skipping function per FilterFunctionPass:expand_pre
 Processing function:pr_pre_expansion
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then6  
After path modifications process path
entry  if.end  if.then6  
Processing path: entry  if.end  if.end7  for.cond  for.body  if.then18  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  if.then18  
After path modifications process path
entry  if.end  if.end7  if.then18  
Processing path: entry  if.end  if.end7  for.cond  for.body  if.end19  for.inc  
After path modifications process path
if.end19  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  
After path modifications process path
entry  if.end  if.end7  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.then21  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.then21  
After path modifications process path
entry  if.end  if.end7  for.end  if.then21  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.body40  if.end45  for.inc46  
After path modifications process path
if.end45  
Hash path invariants only
Invariants are
  br label %for.inc46, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  
Processing call instruction..
Can't handle this operand   %nextc = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion2(i8** %nextc, i8** %rootword.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %rootword.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion2(i8** %nextc, i8** %rootword.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  if.then44  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.body40  if.then44  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  if.then44  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  if.then44  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.body53  if.then57  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  if.then57  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  if.then57  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  if.then57  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  if.then57  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.body53  if.end58  for.inc59  
After path modifications process path
if.end58  
Hash path invariants only
Invariants are
  br label %for.inc59, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.end61  if.then63  if.end74  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.end74  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  for.end61  if.then63  if.end74  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.end74  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.end74  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.end61  if.then63  if.then70  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.then70  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  for.end61  if.then63  if.then70  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.then70  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.then70  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.end61  if.end78  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.end78  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  for.end61  if.end78  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.end78  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.end78  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.end61  if.else  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.else  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  for.end61  if.else  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.else  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.else  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.end79  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.end79  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.end79  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.end79  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.end89  if.then92  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.end89  if.then92  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.end89  if.then92  
Processing call instruction..
Can't handle this operand   %croot.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion5(i8** %croot.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.end89  if.end94  if.then97  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.then97  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.then97  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.end89  if.end94  if.end101  if.then105  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.end101  if.then105  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.end101  if.then105  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.end89  if.end94  if.end101  if.else109  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.end101  if.else109  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.end101  if.else109  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion6(i32* %retval, i32* %tlen), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %tlen = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion6(i32* %retval, i32* %tlen), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.else80  if.end88  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.else80  if.end88  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.else80  if.end88  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.else80  if.then84  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.else80  if.then84  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.else80  if.then84  
 Skipping function per FilterFunctionPass:forcelc
 Processing function:expand_suf
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  if.then7  
After path modifications process path
for.body  if.then  if.then7  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
  call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %explength = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %croot.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %extra.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %rootword.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %option.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %entcount = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf0(i32* %entcount, %struct.flagent** %flent), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf0(i32* %entcount, %struct.flagent** %flent), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  for.cond  for.body  if.then  if.end  
After path modifications process path
for.body  if.then  if.end  
Hash path invariants only
Invariants are
  br label %if.end8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.then  lor.lhs.false  
After path modifications process path
for.body  if.then  lor.lhs.false  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end8  for.inc  
After path modifications process path
for.body  if.end8  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
 Skipping function per FilterFunctionPass:pr_suf_expansion
 Skipping function per FilterFunctionPass:treeinit
 Skipping function per FilterFunctionPass:trydict
 Skipping function per FilterFunctionPass:treeload
 Processing function:treeinsert
Short range hashing enabled.
Processing path: entry  if.end68  if.then72  
After path modifications process path
entry  if.end68  if.then72  
Processing path: entry  if.end68  return  
After path modifications process path
entry  if.end68  return  
Processing path: entry  if.end68  if.end73  if.then75  
After path modifications process path
entry  if.end68  if.end73  if.then75  
Processing path: entry  if.end68  if.end73  if.end78  if.then85  if.then89  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.then85  if.then89  
Processing path: entry  if.end68  if.end73  if.end78  if.then85  if.end91  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.then85  if.end91  
Processing path: entry  if.end68  if.end73  if.end78  if.end102  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.end102  
Processing path: entry  if.end68  if.end73  if.end78  if.else92  if.then99  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.else92  if.then99  
Processing path: entry  if.end68  if.end73  if.end78  if.else92  if.end101  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.else92  if.end101  
Processing path: entry  land.lhs.true  if.then  for.cond  for.body  if.then5  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  if.then5  
After path modifications process path
entry  land.lhs.true  if.then  if.then5  
Processing path: entry  land.lhs.true  if.then  for.cond  for.body  if.end  for.inc  
After path modifications process path
if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !12
Processing path: entry  land.lhs.true  if.then  
After path modifications process path
entry  land.lhs.true  if.then  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.then9  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.then9  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.then9  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.then17  if.then21  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.then17  if.then21  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.then17  if.then21  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.then17  if.end22  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.then17  if.end22  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.then17  if.end22  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.end67  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.end67  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.end67  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  while.cond  while.body  if.then42  
After path modifications process path
while.body  if.then42  
Hash path invariants only
Invariants are
  br label %if.end58, !control_dep_instr !7, !data_indep_instr !11
  call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %olddp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.then33  
After path modifications process path
for.body28  if.then33  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  while.cond  while.body  if.end58  
After path modifications process path
while.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.then33  
After path modifications process path
for.body28  if.then33  
Hash path invariants only
Invariants are
  call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  while.cond  while.body  if.else51  
After path modifications process path
while.body  if.else51  
Hash path invariants only
Invariants are
  br label %if.end58, !control_dep_instr !7, !data_indep_instr !11
  call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %olddp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.then33  
After path modifications process path
for.body28  if.then33  
Hash path invariants only
Invariants are
  call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  while.cond  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.then33  while.end  
After path modifications process path
for.body28  if.then33  while.end  
Hash path invariants only
Invariants are
  br label %if.end59, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.end59  for.inc60  
After path modifications process path
for.body28  if.end59  
Hash path invariants only
Invariants are
  br label %for.inc60, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  for.end62  if.then65  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.end62  if.then65  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.end62  if.then65  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.end62  if.then65  
Processing call instruction..
Can't handle this operand   %oldhtab = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert9(%struct.dent** %oldhtab), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  for.end62  if.end66  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.end62  if.end66  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.end62  if.end66  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.end62  if.end66  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.else  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.else  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.else  
 Skipping function per FilterFunctionPass:tinsert
 Skipping function per FilterFunctionPass:treelookup
 Skipping function per FilterFunctionPass:treeoutput
Skip. No dependence graph for function pdictcmp
 Skipping function per FilterFunctionPass:mymalloc
 Processing function:myfree
Short range hashing enabled.
Processing path: entry  land.lhs.true  land.lhs.true2  if.then  
After path modifications process path
entry  land.lhs.true  land.lhs.true2  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
 Skipping function per FilterFunctionPass:xgets
Extract path function for assertion assert_treeinsert_path_0
Extract path function for assertion assert_treeinsert_path_1
Extract path function for assertion assert_treeinsert_path_2
Extract path function for assertion assert_treeinsert_path_3
Extract path function for assertion assert_treeinsert_path_4
Extract path function for assertion assert_treeinsert_path_5
Extract path function for assertion assert_treeinsert_path_6
Extract path function for assertion assert_treeinsert_path_7
Extract path function for assertion assert_treeinsert_path_9
Extract path function for assertion assert_treeinsert_path_10
Extract path function for assertion assert_treeinsert_path_11
Extract path function for assertion assert_treeinsert_path_13
Extract path function for assertion assert_treeinsert_path_15
Extract path function for assertion assert_treeinsert_path_17
Extract path function for assertion assert_treeinsert_path_19
Extract path function for assertion assert_treeinsert_path_20
Extract path function for assertion assert_treeinsert_path_22
Extract path function for assertion assert_treeinsert_path_23
Extract path function for assertion assert_treeinsert_path_26
Extract path function for assertion assert_treeinsert_path_27
Extract path function for assertion assert_treeinsert_path_28
Extract path function for assertion assert_treeinsert_path_30
Extract path function for assertion assert_treeinsert_path_31
Extract path function for assertion assert_treeinsert_path_34
Extract path function for assertion assert_treeinsert_path_35
Extract path function for assertion assert_treeinsert_path_37
Extract path function for assertion assert_treeinsert_path_38
Extract path function for assertion assert_treeinsert_path_41
Extract path function for assertion assert_treeinsert_path_44
Extract path function for assertion assert_treeinsert_path_46
Extract path function for assertion assert_expand_suf_path_0
Extract path function for assertion assert_expand_suf_path_1
Extract path function for assertion assert_expand_suf_path_2
Extract path function for assertion assert_expand_suf_path_3
Extract path function for assertion assert_expand_suf_path_5
Extract path function for assertion assert_expand_suf_path_6
Extract path function for assertion assert_expand_suf_path_7
Extract path function for assertion assert_expand_suf_path_9
Extract path function for assertion assert_correct_path_0
Extract path function for assertion assert_correct_path_1
Extract path function for assertion assert_correct_path_3
Extract path function for assertion assert_correct_path_4
Extract path function for assertion assert_correct_path_5
Extract path function for assertion assert_correct_path_6
Extract path function for assertion assert_correct_path_7
Extract path function for assertion assert_correct_path_8
Extract path function for assertion assert_correct_path_9
Extract path function for assertion assert_correct_path_10
Extract path function for assertion assert_correct_path_11
Extract path function for assertion assert_correct_path_12
Extract path function for assertion assert_correct_path_13
Extract path function for assertion assert_correct_path_14
Extract path function for assertion assert_correct_path_15
Extract path function for assertion assert_correct_path_16
Extract path function for assertion assert_correct_path_17
Extract path function for assertion assert_correct_path_18
Extract path function for assertion assert_correct_path_19
Extract path function for assertion assert_correct_path_20
Extract path function for assertion assert_correct_path_21
Extract path function for assertion assert_correct_path_22
Extract path function for assertion assert_correct_path_23
Extract path function for assertion assert_correct_path_24
Extract path function for assertion assert_correct_path_27
Extract path function for assertion assert_correct_path_28
Extract path function for assertion assert_correct_path_30
Extract path function for assertion assert_correct_path_31
Extract path function for assertion assert_correct_path_35
Extract path function for assertion assert_correct_path_36
Extract path function for assertion assert_correct_path_40
Extract path function for assertion assert_correct_path_41
Extract path function for assertion assert_correct_path_45
Extract path function for assertion assert_correct_path_46
Extract path function for assertion assert_correct_path_50
Extract path function for assertion assert_correct_path_51
Extract path function for assertion assert_correct_path_56
Extract path function for assertion assert_correct_path_57
Extract path function for assertion assert_correct_path_58
Extract path function for assertion assert_correct_path_59
Extract path function for assertion assert_correct_path_60
Extract path function for assertion assert_correct_path_64
Extract path function for assertion assert_correct_path_65
Extract path function for assertion assert_correct_path_69
Extract path function for assertion assert_correct_path_70
Extract path function for assertion assert_correct_path_74
Extract path function for assertion assert_correct_path_75
Extract path function for assertion assert_correct_path_79
Extract path function for assertion assert_correct_path_80
Extract path function for assertion assert_correct_path_84
Extract path function for assertion assert_correct_path_85
Extract path function for assertion assert_correct_path_89
Extract path function for assertion assert_correct_path_90
Extract path function for assertion assert_correct_path_94
Extract path function for assertion assert_correct_path_95
Extract path function for assertion assert_correct_path_99
Extract path function for assertion assert_correct_path_100
Extract path function for assertion assert_correct_path_104
Extract path function for assertion assert_correct_path_105
Extract path function for assertion assert_correct_path_109
Extract path function for assertion assert_correct_path_110
Extract path function for assertion assert_correct_path_114
Extract path function for assertion assert_correct_path_115
Extract path function for assertion assert_correct_path_119
Extract path function for assertion assert_correct_path_120
Extract path function for assertion assert_correct_path_124
Extract path function for assertion assert_correct_path_125
Extract path function for assertion assert_correct_path_129
Extract path function for assertion assert_correct_path_130
Extract path function for assertion assert_correct_path_134
Extract path function for assertion assert_correct_path_135
Extract path function for assertion assert_correct_path_139
Extract path function for assertion assert_correct_path_140
Extract path function for assertion assert_correct_path_144
Extract path function for assertion assert_correct_path_145
Extract path function for assertion assert_correct_path_149
Extract path function for assertion assert_correct_path_150
Extract path function for assertion assert_correct_path_154
Extract path function for assertion assert_correct_path_155
Extract path function for assertion assert_correct_path_159
Extract path function for assertion assert_correct_path_160
Extract path function for assertion assert_correct_path_164
Extract path function for assertion assert_correct_path_165
Extract path function for assertion assert_correct_path_168
Extract path function for assertion assert_correct_path_169
Extract path function for assertion assert_correct_path_170
Extract path function for assertion assert_correct_path_173
Extract path function for assertion assert_correct_path_174
Extract path function for assertion assert_correct_path_175
Extract path function for assertion assert_correct_path_178
Extract path function for assertion assert_correct_path_179
Extract path function for assertion assert_correct_path_180
Extract path function for assertion assert_correct_path_183
Extract path function for assertion assert_correct_path_184
Extract path function for assertion assert_correct_path_185
Extract path function for assertion assert_correct_path_189
Extract path function for assertion assert_correct_path_190
Extract path function for assertion assert_correct_path_194
Extract path function for assertion assert_correct_path_195
Extract path function for assertion assert_correct_path_198
Extract path function for assertion assert_correct_path_199
Extract path function for assertion assert_correct_path_200
Extract path function for assertion assert_correct_path_203
Extract path function for assertion assert_correct_path_204
Extract path function for assertion assert_correct_path_205
Extract path function for assertion assert_correct_path_209
Extract path function for assertion assert_correct_path_210
Extract path function for assertion assert_correct_path_214
Extract path function for assertion assert_correct_path_215
Extract path function for assertion assert_correct_path_219
Extract path function for assertion assert_correct_path_220
Extract path function for assertion assert_myfree_path_0
Extract path function for assertion assert_myfree_path_1
Extract path function for assertion assert_myfree_path_2
Extract path function for assertion assert_pr_pre_expansion_path_0
Extract path function for assertion assert_pr_pre_expansion_path_1
Extract path function for assertion assert_pr_pre_expansion_path_2
Extract path function for assertion assert_pr_pre_expansion_path_4
Extract path function for assertion assert_pr_pre_expansion_path_5
Extract path function for assertion assert_pr_pre_expansion_path_6
Extract path function for assertion assert_pr_pre_expansion_path_8
Extract path function for assertion assert_pr_pre_expansion_path_10
Extract path function for assertion assert_pr_pre_expansion_path_11
Extract path function for assertion assert_pr_pre_expansion_path_14
Extract path function for assertion assert_pr_pre_expansion_path_18
Extract path function for assertion assert_pr_pre_expansion_path_19
Extract path function for assertion assert_pr_pre_expansion_path_22
Extract path function for assertion assert_pr_pre_expansion_path_26
Extract path function for assertion assert_pr_pre_expansion_path_30
Extract path function for assertion assert_pr_pre_expansion_path_34
Extract path function for assertion assert_pr_pre_expansion_path_38
Extract path function for assertion assert_pr_pre_expansion_path_41
Extract path function for assertion assert_pr_pre_expansion_path_43
Extract path function for assertion assert_pr_pre_expansion_path_45
Extract path function for assertion assert_pr_pre_expansion_path_47
Extract path function for assertion assert_pr_pre_expansion_path_49
Extract path function for assertion assert_pr_pre_expansion_path_51
Extract path function for assertion assert_pr_pre_expansion_path_53
Extract path function for assertion assert_inserttoken_path_8
Extract path function for assertion assert_inserttoken_path_12
Extract path function for assertion assert_inserttoken_path_16
Extract path function for assertion assert_inserttoken_path_20
Extract path function for assertion assert_extraletter_path_0
Extract path function for assertion assert_extraletter_path_1
Extract path function for assertion assert_extraletter_path_2
Extract path function for assertion assert_extraletter_path_3
Extract path function for assertion assert_extraletter_path_4
Extract path function for assertion assert_extraletter_path_5
Extract path function for assertion assert_extraletter_path_6
Extract path function for assertion assert_extraletter_path_7
Extract path function for assertion assert_wrongletter_path_0
Extract path function for assertion assert_wrongletter_path_1
Extract path function for assertion assert_wrongletter_path_2
Extract path function for assertion assert_wrongletter_path_4
Extract path function for assertion assert_wrongletter_path_5
Extract path function for assertion assert_wrongletter_path_6
Extract path function for assertion assert_wrongletter_path_7
Extract path function for assertion assert_wrongletter_path_8
Extract path function for assertion assert_wrongletter_path_10
Extract path function for assertion assert_wrongletter_path_11
Extract path function for assertion assert_wrongletter_path_12
Extract path function for assertion assert_wrongletter_path_13
Extract path function for assertion assert_wrongletter_path_14
Extract path function for assertion assert_wrongletter_path_15
Extract path function for assertion assert_wrongletter_path_16
Extract path function for assertion assert_wrongletter_path_17
Extract path function for assertion assert_wrongletter_path_18
Extract path function for assertion assert_wrongletter_path_19
Extract path function for assertion assert_wrongletter_path_20
Extract path function for assertion assert_wrongletter_path_22
Extract path function for assertion assert_wrongletter_path_23
Extract path function for assertion assert_wrongletter_path_25
OH stats is requested, dumping stat file...
Processed instructions number 11014
{
    "numberOfAssertCalls": 0,
    "numberOfBlocksInFunctionsWithNoDG": 29,
    "numberOfDataDependentInstructions": 437,
    "numberOfHashVariables": 1,
    "numberOfImplicitlyProtectedInstructions": 0,
    "numberOfInstructionsInFilteredFunctions": 9838,
    "numberOfInstructionsInFunctionsWithNoDG": 147,
    "numberOfNonHashableBlocks": 9,
    "numberOfNonHashableInstructions": 142,
    "numberOfOHProcessedInstr": 1029,
    "numberOfOtherUnprotectedInstructions": 2,
    "numberOfOtherUnprotectedLoopVariantInstructions": 17,
    "numberOfProtectedArguments": 0,
    "numberOfProtectedBlocks": 0,
    "numberOfProtectedFunctions": 8,
    "numberOfProtectedGuardArguments": 0,
    "numberOfProtectedGuardInstructions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveBlocks": 245,
    "numberOfSensitiveFunctions": 10,
    "numberOfShortRangeAssertCalls": 210,
    "numberOfShortRangeImplicitlyProtectedInstructions": 0,
    "numberOfShortRangeProtectedArguments": 81,
    "numberOfShortRangeProtectedBlocks": 176,
    "numberOfShortRangeProtectedGuardArguments": 0,
    "numberOfShortRangeProtectedGuardInstructions": 0,
    "numberOfShortRangeProtectedInstructions": 117,
    "numberOfUnprotectedArgumentReachableInstructions": 24,
    "numberOfUnprotectedArgumentReachableLoopBlocks": 0,
    "numberOfUnprotectedDataDependentBlocks": 0,
    "numberOfUnprotectedDataDependentLoopBlocks": 60,
    "numberOfUnprotectedGlobalReachableInstructions": 44,
    "numberOfUnprotectedGlobalReachableLoopBlocks": 0,
    "numberOfUnprotectedInputDependentInstructions": 0,
    "numberOfUnprotectedLoopInstructions": 246
}
ERR. processed 10 function, while filter count is 70
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 178.6318 seconds (179.1700 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
  157.1028 ( 88.8%)   1.3881 ( 78.9%)  158.4908 ( 88.7%)  158.9204 ( 88.7%)  Instruments bitcode with hashing and logging functions
  19.2567 ( 10.9%)   0.3642 ( 20.7%)  19.6209 ( 11.0%)  19.6388 ( 11.0%)  runs input dependency analysis
   0.3101 (  0.2%)   0.0015 (  0.1%)   0.3116 (  0.2%)   0.3233 (  0.2%)  Memory SSA
   0.0689 (  0.0%)   0.0039 (  0.2%)   0.0728 (  0.0%)   0.0836 (  0.0%)  Bitcode Writer
   0.0046 (  0.0%)   0.0000 (  0.0%)   0.0046 (  0.0%)   0.0662 (  0.0%)  Instruments bitcode with guards
   0.0389 (  0.0%)   0.0001 (  0.0%)   0.0390 (  0.0%)   0.0394 (  0.0%)  Dominator Tree Construction
   0.0279 (  0.0%)   0.0001 (  0.0%)   0.0280 (  0.0%)   0.0279 (  0.0%)  Natural Loop Information
   0.0207 (  0.0%)   0.0000 (  0.0%)   0.0207 (  0.0%)   0.0257 (  0.0%)  Module Verifier
   0.0113 (  0.0%)   0.0001 (  0.0%)   0.0114 (  0.0%)   0.0113 (  0.0%)  Post-Dominator Tree Construction
   0.0108 (  0.0%)   0.0001 (  0.0%)   0.0108 (  0.0%)   0.0111 (  0.0%)  Dominator Tree Construction
   0.0072 (  0.0%)   0.0000 (  0.0%)   0.0073 (  0.0%)   0.0072 (  0.0%)  Natural Loop Information
   0.0034 (  0.0%)   0.0000 (  0.0%)   0.0034 (  0.0%)   0.0034 (  0.0%)  Call site information
   0.0029 (  0.0%)   0.0000 (  0.0%)   0.0029 (  0.0%)   0.0029 (  0.0%)  Include functions in a given file in any transformation
   0.0016 (  0.0%)   0.0000 (  0.0%)   0.0016 (  0.0%)   0.0022 (  0.0%)  Basic Alias Analysis (stateless AA impl)
   0.0017 (  0.0%)   0.0000 (  0.0%)   0.0017 (  0.0%)   0.0022 (  0.0%)  Function Alias Analysis Results
   0.0009 (  0.0%)   0.0000 (  0.0%)   0.0009 (  0.0%)   0.0011 (  0.0%)  runs indirect and virtual calls analysis
   0.0008 (  0.0%)   0.0003 (  0.0%)   0.0011 (  0.0%)   0.0011 (  0.0%)  Remove unreachable blocks from the CFG
   0.0009 (  0.0%)   0.0000 (  0.0%)   0.0009 (  0.0%)   0.0009 (  0.0%)  CallGraph Construction
   0.0005 (  0.0%)   0.0002 (  0.0%)   0.0007 (  0.0%)   0.0007 (  0.0%)  Dead Global Elimination
   0.0003 (  0.0%)   0.0000 (  0.0%)   0.0003 (  0.0%)   0.0003 (  0.0%)  Dominator Tree Construction
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Natural Loop Information
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Marks functions in a given file as assert functions
  176.8732 (100.0%)   1.7586 (100.0%)  178.6318 (100.0%)  179.1700 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0369 seconds (0.0369 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.0359 (100.0%)   0.0011 (100.0%)   0.0369 (100.0%)   0.0369 (100.0%)  Parse IR
   0.0359 (100.0%)   0.0011 (100.0%)   0.0369 (100.0%)   0.0369 (100.0%)  Total

Running input dependency analysis pass
Processing function erase
Processing function move
Processing function inverse
Processing function normal
Processing function backup
Processing function terminit0
Processing function terminit1
Processing function terminit2
Processing function terminit3
Processing function terminit4
Processing function terminit5
Processing function terminit
Did not find function assigned   store void (...)* %11, void (...)** @oldint, align 8, !control_dep_instr !7, !data_dep_instr !8
Did not find function assigned   store void (...)* %12, void (...)** @oldterm, align 8, !control_dep_instr !7, !data_dep_instr !8
Did not find function assigned   store void (...)* %13, void (...)** @oldttin, align 8, !control_dep_instr !7, !data_dep_instr !8
Did not find function assigned   store void (...)* %14, void (...)** @oldttou, align 8, !control_dep_instr !7, !data_dep_instr !8
Did not find function assigned   store void (...)* %15, void (...)** @oldtstp, align 8, !control_dep_instr !7, !data_dep_instr !8
Processing function done
Processing function onstop0
Processing function onstop
Processing function stop
Processing function shellescape0
Processing function shellescape1
Processing function shellescape2
Processing function shellescape3
Processing function shellescape4
Processing function shellescape5
Processing function shellescape
Processing function main0
Processing function main1
Processing function main2
Processing function main3
Processing function main4
Processing function main5
Processing function usage0
Processing function givehelp0
Processing function givehelp1
Processing function givehelp2
Processing function givehelp
Processing function usage
Processing function main6
Processing function main7
Processing function main8
Processing function main9
Processing function main10
Processing function main11
Processing function main12
Processing function main13
Processing function main14
Processing function main15
Processing function main16
Processing function main17
Processing function main18
Processing function main19
Processing function main20
Processing function main21
Processing function main22
Processing function main23
Processing function main24
Processing function main25
Processing function main26
Processing function main27
Processing function main28
Processing function main29
Processing function main30
Processing function main31
Processing function main32
Processing function linit0
Processing function linit1
Processing function linit2
Processing function linit3
Processing function linit4
Processing function linit5
Processing function linit6
Processing function linit7
Processing function linit8
Processing function linit9
Processing function linit10
Processing function linit11
Processing function linit12
Processing function linit13
Processing function linit14
Processing function linit15
Processing function linit16
Processing function linit17
Processing function linit18
Processing function linit19
Processing function linit20
Processing function linit21
Processing function linit22
Processing function linit23
Processing function linit24
Processing function linit25
Processing function linit26
Processing function linit27
Processing function linit28
Processing function linit29
Processing function linit30
Processing function linit31
Processing function linit32
Processing function linit33
Processing function linit34
Processing function linit35
Processing function linit36
Processing function linit37
Processing function linit38
Processing function linit39
Processing function linit40
Processing function linit41
Processing function linit42
Processing function linit43
Processing function linit44
Processing function linit45
Processing function linit46
Processing function linit47
Processing function linit48
Processing function linit49
Processing function linit
Processing function findfiletype0
Processing function findfiletype1
Processing function findfiletype2
Processing function findfiletype3
Processing function findfiletype4
Processing function findfiletype5
Processing function findfiletype6
Processing function findfiletype7
Processing function findfiletype
Processing function main33
Processing function main34
Processing function main35
Processing function main36
Processing function initckch0
Processing function initckch1
Processing function initckch2
Processing function initckch
Processing function main37
Processing function treeinit0
Processing function trydict0
Processing function trydict1
Processing function trydict2
Processing function trydict
Processing function treeinit1
Processing function treeinsert0
Processing function treeinsert1
Processing function treeinsert2
Processing function treeinsert3
Processing function treeinsert4
Processing function strtoichar0
Processing function stringcharlen0
Processing function stringcharlen1
Processing function stringcharlen2
Processing function stringcharlen3
Processing function stringcharlen4
Processing function stringcharlen5
Processing function stringcharlen6
Processing function stringcharlen7
Processing function stringcharlen8
Processing function stringcharlen
Processing function strtoichar1
Processing function strtoichar2
Processing function strtoichar3
Processing function strtoichar
Processing function tinsert0
Processing function hash0
Processing function hash1
Processing function hash
Processing function tinsert1
Processing function tinsert2
Processing function tinsert3
Processing function tinsert
Processing function treeinsert5
Processing function treeinsert6
Processing function treeinsert7
Processing function treeinsert8
Processing function treeinsert9
Processing function makedent0
Processing function makedent1
Processing function ichartostr0
Processing function ichartostr1
Processing function ichartostr2
Processing function ichartostr3
Processing function ichartostr4
Processing function ichartostr
Processing function makedent2
Processing function makedent3
Processing function makedent4
Processing function whatcap0
Processing function whatcap1
Processing function whatcap2
Processing function whatcap3
Processing function whatcap4
Processing function whatcap
Processing function makedent5
Processing function mymalloc
Processing function makedent6
Processing function strtosichar0
Processing function strtosichar
Processing function upcase0
Processing function upcase
Processing function chupcase0
Processing function chupcase
Processing function makedent7
Processing function makedent8
Processing function makedent9
Processing function makedent10
Processing function makedent
Processing function treeinsert10
Processing function lookup0
Processing function lookup1
Processing function lookup2
Processing function treelookup0
Processing function treelookup1
Processing function treelookup2
Processing function treelookup
Processing function lookup3
Processing function lookup
Processing function issubset
Processing function acoversb
Processing function combineaffixes0
Processing function combineaffixes
Processing function myfree0
Processing function myfree
Processing function combine_two_entries0
Processing function combine_two_entries1
Processing function addvheader0
Processing function addvheader1
Processing function addvheader2
Processing function addvheader3
Processing function addvheader4
Processing function addvheader
Processing function combine_two_entries2
Processing function combine_two_entries
Processing function combinecaps0
Processing function forcevheader0
Processing function forcevheader
Processing function combinecaps1
Processing function combinecaps2
Processing function combinecaps3
Processing function combinecaps
Processing function treeinsert11
Processing function treeinsert12
Processing function treeinsert13
Processing function treeinsert
Processing function treeload
Processing function treeinit2
Processing function treeinit3
Processing function treeinit4
Processing function treeinit5
Processing function treeinit6
Processing function treeinit7
Processing function treeinit8
Processing function treeinit
Processing function main38
Processing function askmode0
Processing function askmode1
Processing function xgets0
Processing function xgets1
Processing function xgets2
Processing function xgets3
Processing function xgets4
Processing function xgets
Processing function askmode2
Processing function askmode3
Processing function askmode4
Processing function checkline0
Processing function copyout0
Processing function copyout1
Processing function copyout
Processing function checkline1
Processing function checkline2
Processing function checkline3
Processing function checkline4
Processing function skiptoword0
Processing function TeX_open_paren0
Processing function TeX_open_paren
Processing function TeX_math_check0
Processing function TeX_skip_parens0
Processing function TeX_skip_parens
Processing function TeX_math_check1
Processing function TeX_skip_args0
Processing function TeX_skip_args1
Processing function TeX_skip_args2
Processing function TeX_skip_args3
Processing function TeX_skip_args
Processing function TeX_math_check2
Processing function TeX_math_check3
Processing function TeX_math_check
Processing function TeX_LR_check0
Processing function TeX_LR_check1
Processing function TeX_LR_check2
Processing function TeX_LR_check3
Processing function TeX_LR_check4
Processing function TeX_LR_check
Processing function skiptoword1
Processing function skiptoword2
Processing function TeX_math_end0
Processing function TeX_math_end1
Processing function TeX_strncmp0
Processing function TeX_strncmp
Processing function TeX_LR_begin0
Processing function TeX_LR_begin1
Processing function TeX_LR_begin2
Processing function TeX_LR_begin
Processing function TeX_math_end2
Processing function TeX_math_end
Processing function skiptoword3
Processing function skiptoword4
Processing function skiptoword5
Processing function skiptoword6
Processing function skiptoword7
Processing function TeX_math_begin0
Processing function TeX_math_begin1
Processing function TeX_math_begin2
Processing function TeX_skip_check0
Processing function TeX_skip_check1
Processing function TeX_skip_check2
Processing function TeX_skip_check3
Processing function TeX_skip_check
Processing function TeX_math_begin3
Processing function TeX_math_begin4
Processing function TeX_math_begin
Processing function skiptoword8
Processing function skiptoword9
Processing function skiptoword10
Processing function skiptoword11
Processing function skiptoword12
Processing function skiptoword13
Processing function skiptoword14
Processing function skiptoword15
Processing function skiptoword16
Processing function skiptoword17
Processing function skiptoword18
Processing function skiptoword19
Processing function skiptoword
Processing function checkline5
Processing function skipoverword0
Processing function skipoverword1
Processing function skipoverword2
Processing function skipoverword3
Processing function skipoverword4
Processing function skipoverword
Processing function checkline6
Processing function checkline7
Processing function checkline8
Processing function good0
Processing function good1
Processing function ichartosstr0
Processing function ichartosstr
Processing function good2
Processing function good3
Processing function cap_ok0
Processing function cap_ok1
Processing function cap_ok2
Processing function entryhasaffixes
Processing function cap_ok3
Processing function cap_ok4
Processing function cap_ok5
Processing function cap_ok6
Processing function cap_ok7
Processing function cap_ok8
Processing function cap_ok9
Processing function cap_ok10
Processing function cap_ok
Processing function pfx_list_chk0
Processing function pfx_list_chk1
Processing function flagpr0
Processing function flagpr1
Processing function flagpr2
Processing function flagpr3
Processing function flagpr4
Processing function flagpr5
Processing function flagpr6
Processing function printichar0
Processing function printichar1
Processing function printichar
Processing function flagpr7
Processing function flagpr8
Processing function flagpr9
Processing function flagpr10
Processing function flagpr11
Processing function flagpr12
Processing function flagpr13
Processing function flagpr14
Processing function flagpr15
Processing function flagpr16
Processing function flagpr
Processing function pfx_list_chk2
Processing function pfx_list_chk3
Processing function save_root_cap0
Processing function save_root_cap1
Processing function save_root_cap2
Processing function save_root_cap3
Processing function lowcase0
Processing function lowcase
Processing function save_root_cap4
Processing function save_root_cap5
Processing function save_root_cap6
Processing function save_root_cap7
Processing function save_root_cap8
Processing function save_root_cap9
Processing function save_root_cap10
Processing function save_root_cap11
Processing function save_root_cap
Processing function insert0
Processing function insert1
Processing function insert2
Processing function insert
Processing function ins_root_cap0
Processing function ins_root_cap
Processing function pfx_list_chk4
Processing function suf_list_chk0
Processing function suf_list_chk1
Processing function suf_list_chk2
Processing function suf_list_chk3
Processing function suf_list_chk4
Processing function suf_list_chk5
Processing function suf_list_chk6
Processing function suf_list_chk7
Processing function suf_list_chk
Processing function chk_suf0
Processing function chk_suf1
Processing function chk_suf2
Processing function chk_suf
Processing function pfx_list_chk5
Processing function pfx_list_chk
Processing function chk_aff0
Processing function chk_aff1
Processing function chk_aff2
Processing function chk_aff
Processing function good4
Processing function good
Processing function compoundgood0
Processing function compoundgood1
Processing function compoundgood2
Processing function compoundgood3
Processing function compoundgood
Processing function checkline9
Processing function checkline10
Processing function checkline11
Processing function checkline12
Processing function checkline13
Processing function makepossibilities0
Processing function save_cap0
Processing function save_cap1
Processing function save_cap2
Processing function save_cap3
Processing function save_cap4
Processing function save_cap
Processing function ins_cap0
Processing function ins_cap
Processing function wrongcapital
Processing function missingletter0
Processing function missingletter1
Processing function missingletter2
Processing function missingletter
Processing function makepossibilities1
Processing function transposedletter0
Processing function transposedletter1
Processing function transposedletter
Processing function makepossibilities2
Processing function extraletter0
Processing function extraletter
Processing function makepossibilities3
Processing function wrongletter0
Processing function wrongletter1
Processing function wrongletter
Processing function makepossibilities4
Processing function missingspace0
Processing function missingspace1
Processing function missingspace2
Processing function missingspace
Processing function makepossibilities5
Processing function tryveryhard0
Processing function tryveryhard
Processing function makepossibilities6
Processing function makepossibilities7
Processing function makepossibilities8
Processing function makepossibilities
Processing function checkline14
Processing function checkline15
Processing function checkline16
Processing function checkline17
Processing function checkline18
Processing function correct0
Processing function correct1
Processing function correct2
Processing function correct3
Processing function correct4
Processing function correct5
Processing function correct6
Processing function show_char0
Processing function show_char1
Processing function show_char2
Processing function show_char3
Processing function show_char4
Processing function show_char5
Processing function show_char6
Processing function show_char7
Processing function show_char8
Processing function show_char9
Processing function show_char10
Processing function show_char11
Processing function show_char12
Processing function show_char13
Processing function show_char14
Processing function show_char
Processing function show_line0
Processing function show_line1
Processing function show_line2
Processing function show_line3
Processing function show_line
Processing function correct7
Processing function line_size0
Processing function line_size
Processing function correct8
Processing function correct9
Processing function correct10
Processing function correct11
Processing function correct12
Processing function correct13
Processing function correct14
Processing function correct15
Processing function correct16
Processing function correct17
Processing function my_getline0
Processing function my_getline1
Processing function my_getline2
Processing function my_getline3
Processing function my_getline4
Processing function my_getline5
Processing function my_getline6
Processing function my_getline
Processing function correct18
Processing function correct19
Processing function correct20
Processing function inserttoken0
Processing function inserttoken1
Processing function inserttoken2
Processing function inserttoken3
Processing function inserttoken4
Processing function inserttoken5
Processing function inserttoken6
Processing function inserttoken
Processing function correct21
Processing function correct22
Processing function correct23
Processing function correct24
Processing function correct25
Processing function lookharder0
Processing function lookharder1
Processing function lookharder2
Processing function lookharder
Processing function correct26
Processing function correct
Processing function checkline19
Processing function checkline20
Processing function checkline
Processing function askmode5
Processing function askmode6
Processing function treeoutput0
Processing function treeoutput1
Processing function treeoutput2
Processing function treeoutput3
Processing function treeoutput4
Processing function treeoutput5
Processing function treeoutput6
Processing function treeoutput7
Processing function treeoutput8
Processing function treeoutput9
Processing function treeoutput10
Processing function treeoutput11
Processing function treeoutput12
Processing function toutent0
Processing function toutword0
Processing function flagout0
Processing function flagout1
Processing function flagout
Processing function toutword1
Processing function toutword2
Processing function toutword
Processing function toutent1
Processing function toutent2
Processing function toutent
Processing function treeoutput13
Processing function treeoutput14
Processing function treeoutput15
Processing function treeoutput16
Processing function treeoutput17
Processing function treeoutput18
Processing function treeoutput19
Processing function treeoutput20
Processing function treeoutput21
Processing function treeoutput22
Processing function treeoutput23
Processing function treeoutput24
Processing function treeoutput25
Processing function treeoutput26
Processing function treeoutput27
Processing function treeoutput28
Processing function treeoutput29
Processing function treeoutput30
Processing function treeoutput31
Processing function treeoutput32
Processing function treeoutput
Processing function askmode7
Processing function askmode8
Processing function askmode9
Processing function askmode10
Processing function askmode
Processing function main39
Processing function expandmode0
Processing function expandmode1
Processing function expand_pre0
Processing function pr_pre_expansion0
Processing function pr_pre_expansion1
Processing function pr_pre_expansion2
Processing function pr_pre_expansion3
Processing function pr_pre_expansion4
Processing function forcelc0
Processing function forcelc1
Processing function forcelc
Processing function pr_pre_expansion5
Processing function expand_suf0
Processing function pr_suf_expansion0
Processing function pr_suf_expansion1
Processing function pr_suf_expansion2
Processing function pr_suf_expansion3
Processing function pr_suf_expansion4
Processing function pr_suf_expansion
Processing function expand_suf1
Processing function expand_suf2
Processing function expand_suf
Processing function pr_pre_expansion6
Processing function pr_pre_expansion
Processing function expand_pre1
Processing function expand_pre2
Processing function expand_pre
Processing function expandmode
Processing function main40
Processing function dumpmode0
Processing function dumpmode1
Processing function dumpmode2
Processing function entdump0
Processing function setdump0
Processing function setdump1
Processing function setdump2
Processing function subsetdump0
Processing function subsetdump1
Processing function subsetdump2
Processing function subsetdump3
Processing function subsetdump4
Processing function subsetdump5
Processing function subsetdump
Processing function setdump3
Processing function setdump4
Processing function setdump
Processing function entdump1
Processing function entdump2
Processing function entdump3
Processing function entdump4
Processing function entdump
Processing function tbldump0
Processing function tbldump
Processing function dumpmode3
Processing function dumpmode4
Processing function dumpmode
Processing function main41
Processing function checkfile0
Processing function checkfile1
Processing function checkfile2
Processing function checkfile3
Processing function checkfile4
Processing function checkfile5
Processing function checkfile6
Processing function checkfile7
Processing function checkfile
Processing function main42
Processing function dofile0
Processing function dofile1
Processing function dofile2
Processing function update_file0
Processing function update_file1
Processing function update_file2
Processing function update_file3
Processing function update_file4
Processing function update_file5
Processing function update_file
Processing function dofile3
Processing function dofile
Processing function main43
Processing function main
Processing function casecmp0
Processing function casecmp1
Processing function casecmp2
Processing function casecmp3
Processing function casecmp4
Processing function casecmp5
Processing function casecmp6
Processing function casecmp
Processing function posscmp
Processing function pdictcmp
Finalizing pdictcmp
Finalizing posscmp
Finalizing casecmp
Mark Input dependent function casecmp
Finalizing casecmp6
Mark Input dependent function casecmp6
Finalizing casecmp5
Mark Input dependent function casecmp5
Finalizing casecmp4
Mark Input dependent function casecmp4
Finalizing casecmp3
Mark Input dependent function casecmp3
Finalizing casecmp2
Mark Input dependent function casecmp2
Finalizing casecmp1
Mark Input dependent function casecmp1
Finalizing casecmp0
Mark Input dependent function casecmp0
Finalizing main
Finalizing main43
Mark Input dependent function main43
Finalizing dofile
Mark Input dependent function dofile
Finalizing dofile3
Mark Input dependent function dofile3
Finalizing update_file
Mark Input dependent function update_file
Finalizing update_file5
Mark Input dependent function update_file5
Finalizing update_file4
Mark Input dependent function update_file4
Finalizing update_file3
Mark Input dependent function update_file3
Finalizing update_file2
Mark Input dependent function update_file2
Finalizing update_file1
Mark Input dependent function update_file1
Finalizing update_file0
Mark Input dependent function update_file0
Finalizing dofile2
Mark Input dependent function dofile2
Finalizing dofile1
Mark Input dependent function dofile1
Finalizing dofile0
Mark Input dependent function dofile0
Finalizing main42
Mark Input dependent function main42
Finalizing checkfile
Mark Input dependent function checkfile
Finalizing checkfile7
Mark Input dependent function checkfile7
Finalizing checkfile6
Mark Input dependent function checkfile6
Finalizing checkfile5
Mark Input dependent function checkfile5
Finalizing checkfile4
Mark Input dependent function checkfile4
Finalizing checkfile3
Mark Input dependent function checkfile3
Finalizing checkfile2
Mark Input dependent function checkfile2
Finalizing checkfile1
Mark Input dependent function checkfile1
Finalizing checkfile0
Mark Input dependent function checkfile0
Finalizing main41
Mark Input dependent function main41
Finalizing dumpmode
Mark Input dependent function dumpmode
Finalizing dumpmode4
Mark Input dependent function dumpmode4
Finalizing dumpmode3
Mark Input dependent function dumpmode3
Finalizing tbldump
Mark Input dependent function tbldump
Finalizing tbldump0
Mark Input dependent function tbldump0
Finalizing entdump
Mark Input dependent function entdump
Finalizing entdump4
Mark Input dependent function entdump4
Finalizing entdump3
Mark Input dependent function entdump3
Finalizing entdump2
Mark Input dependent function entdump2
Finalizing entdump1
Mark Input dependent function entdump1
Finalizing setdump
Mark Input dependent function setdump
Finalizing setdump4
Mark Input dependent function setdump4
Finalizing setdump3
Mark Input dependent function setdump3
Finalizing subsetdump
Mark Input dependent function subsetdump
Finalizing subsetdump5
Mark Input dependent function subsetdump5
Finalizing subsetdump4
Mark Input dependent function subsetdump4
Finalizing subsetdump3
Mark Input dependent function subsetdump3
Finalizing subsetdump2
Mark Input dependent function subsetdump2
Finalizing subsetdump1
Mark Input dependent function subsetdump1
Finalizing subsetdump0
Mark Input dependent function subsetdump0
Finalizing setdump2
Mark Input dependent function setdump2
Finalizing setdump1
Mark Input dependent function setdump1
Finalizing setdump0
Mark Input dependent function setdump0
Finalizing entdump0
Mark Input dependent function entdump0
Finalizing dumpmode2
Mark Input dependent function dumpmode2
Finalizing dumpmode1
Mark Input dependent function dumpmode1
Finalizing dumpmode0
Mark Input dependent function dumpmode0
Finalizing main40
Mark Input dependent function main40
Finalizing expandmode
Mark Input dependent function expandmode
Finalizing expand_pre
Mark Input dependent function expand_pre
Finalizing expand_pre2
Mark Input dependent function expand_pre2
Finalizing expand_pre1
Mark Input dependent function expand_pre1
Finalizing pr_pre_expansion
Mark Input dependent function pr_pre_expansion
Finalizing pr_pre_expansion6
Mark Input dependent function pr_pre_expansion6
Finalizing expand_suf
Mark Input dependent function expand_suf
Finalizing expand_suf2
Mark Input dependent function expand_suf2
Finalizing expand_suf1
Mark Input dependent function expand_suf1
Finalizing pr_suf_expansion
Mark Input dependent function pr_suf_expansion
Finalizing pr_suf_expansion4
Mark Input dependent function pr_suf_expansion4
Finalizing pr_suf_expansion3
Mark Input dependent function pr_suf_expansion3
Finalizing pr_suf_expansion2
Mark Input dependent function pr_suf_expansion2
Finalizing pr_suf_expansion1
Mark Input dependent function pr_suf_expansion1
Finalizing pr_suf_expansion0
Mark Input dependent function pr_suf_expansion0
Finalizing expand_suf0
Mark Input dependent function expand_suf0
Finalizing pr_pre_expansion5
Mark Input dependent function pr_pre_expansion5
Finalizing forcelc
Mark Input dependent function forcelc
Finalizing forcelc1
Mark Input dependent function forcelc1
Finalizing forcelc0
Mark Input dependent function forcelc0
Finalizing pr_pre_expansion4
Mark Input dependent function pr_pre_expansion4
Finalizing pr_pre_expansion3
Mark Input dependent function pr_pre_expansion3
Finalizing pr_pre_expansion2
Mark Input dependent function pr_pre_expansion2
Finalizing pr_pre_expansion1
Mark Input dependent function pr_pre_expansion1
Finalizing pr_pre_expansion0
Mark Input dependent function pr_pre_expansion0
Finalizing expand_pre0
Mark Input dependent function expand_pre0
Finalizing expandmode1
Mark Input dependent function expandmode1
Finalizing expandmode0
Mark Input dependent function expandmode0
Finalizing main39
Mark Input dependent function main39
Finalizing askmode
Mark Input dependent function askmode
Finalizing askmode10
Mark Input dependent function askmode10
Finalizing askmode9
Mark Input dependent function askmode9
Finalizing askmode8
Mark Input dependent function askmode8
Finalizing askmode7
Mark Input dependent function askmode7
Finalizing treeoutput
Mark Input dependent function treeoutput
Finalizing treeoutput32
Mark Input dependent function treeoutput32
Finalizing treeoutput31
Mark Input dependent function treeoutput31
Finalizing treeoutput30
Mark Input dependent function treeoutput30
Finalizing treeoutput29
Mark Input dependent function treeoutput29
Finalizing treeoutput28
Mark Input dependent function treeoutput28
Finalizing treeoutput27
Mark Input dependent function treeoutput27
Finalizing treeoutput26
Mark Input dependent function treeoutput26
Finalizing treeoutput25
Mark Input dependent function treeoutput25
Finalizing treeoutput24
Mark Input dependent function treeoutput24
Finalizing treeoutput23
Mark Input dependent function treeoutput23
Finalizing treeoutput22
Mark Input dependent function treeoutput22
Finalizing treeoutput21
Mark Input dependent function treeoutput21
Finalizing treeoutput20
Mark Input dependent function treeoutput20
Finalizing treeoutput19
Mark Input dependent function treeoutput19
Finalizing treeoutput18
Mark Input dependent function treeoutput18
Finalizing treeoutput17
Mark Input dependent function treeoutput17
Finalizing treeoutput16
Mark Input dependent function treeoutput16
Finalizing treeoutput15
Mark Input dependent function treeoutput15
Finalizing treeoutput14
Mark Input dependent function treeoutput14
Finalizing treeoutput13
Mark Input dependent function treeoutput13
Finalizing toutent
Mark Input dependent function toutent
Finalizing toutent2
Mark Input dependent function toutent2
Finalizing toutent1
Mark Input dependent function toutent1
Finalizing toutword
Mark Input dependent function toutword
Finalizing toutword2
Mark Input dependent function toutword2
Finalizing toutword1
Mark Input dependent function toutword1
Finalizing flagout
Mark Input dependent function flagout
Finalizing flagout1
Mark Input dependent function flagout1
Finalizing flagout0
Mark Input dependent function flagout0
Finalizing toutword0
Mark Input dependent function toutword0
Finalizing toutent0
Mark Input dependent function toutent0
Finalizing treeoutput12
Mark Input dependent function treeoutput12
Finalizing treeoutput11
Mark Input dependent function treeoutput11
Finalizing treeoutput10
Mark Input dependent function treeoutput10
Finalizing treeoutput9
Mark Input dependent function treeoutput9
Finalizing treeoutput8
Mark Input dependent function treeoutput8
Finalizing treeoutput7
Mark Input dependent function treeoutput7
Finalizing treeoutput6
Mark Input dependent function treeoutput6
Finalizing treeoutput5
Mark Input dependent function treeoutput5
Finalizing treeoutput4
Mark Input dependent function treeoutput4
Finalizing treeoutput3
Mark Input dependent function treeoutput3
Finalizing treeoutput2
Mark Input dependent function treeoutput2
Finalizing treeoutput1
Mark Input dependent function treeoutput1
Finalizing treeoutput0
Mark Input dependent function treeoutput0
Finalizing askmode6
Mark Input dependent function askmode6
Finalizing askmode5
Mark Input dependent function askmode5
Finalizing checkline
Mark Input dependent function checkline
Finalizing checkline20
Mark Input dependent function checkline20
Finalizing checkline19
Mark Input dependent function checkline19
Finalizing correct
Mark Input dependent function correct
Finalizing correct26
Mark Input dependent function correct26
Finalizing lookharder
Mark Input dependent function lookharder
Finalizing lookharder2
Mark Input dependent function lookharder2
Finalizing lookharder1
Mark Input dependent function lookharder1
Finalizing lookharder0
Mark Input dependent function lookharder0
Finalizing correct25
Mark Input dependent function correct25
Finalizing correct24
Mark Input dependent function correct24
Finalizing correct23
Mark Input dependent function correct23
Finalizing correct22
Mark Input dependent function correct22
Finalizing correct21
Mark Input dependent function correct21
Finalizing inserttoken
Mark Input dependent function inserttoken
Finalizing inserttoken6
Mark Input dependent function inserttoken6
Finalizing inserttoken5
Mark Input dependent function inserttoken5
Finalizing inserttoken4
Mark Input dependent function inserttoken4
Finalizing inserttoken3
Mark Input dependent function inserttoken3
Finalizing inserttoken2
Mark Input dependent function inserttoken2
Finalizing inserttoken1
Mark Input dependent function inserttoken1
Finalizing inserttoken0
Mark Input dependent function inserttoken0
Finalizing correct20
Mark Input dependent function correct20
Finalizing correct19
Mark Input dependent function correct19
Finalizing correct18
Mark Input dependent function correct18
Finalizing my_getline
Mark Input dependent function my_getline
Finalizing my_getline6
Mark Input dependent function my_getline6
Finalizing my_getline5
Mark Input dependent function my_getline5
Finalizing my_getline4
Mark Input dependent function my_getline4
Finalizing my_getline3
Mark Input dependent function my_getline3
Finalizing my_getline2
Mark Input dependent function my_getline2
Finalizing my_getline1
Mark Input dependent function my_getline1
Finalizing my_getline0
Mark Input dependent function my_getline0
Finalizing correct17
Mark Input dependent function correct17
Finalizing correct16
Mark Input dependent function correct16
Finalizing correct15
Mark Input dependent function correct15
Finalizing correct14
Mark Input dependent function correct14
Finalizing correct13
Mark Input dependent function correct13
Finalizing correct12
Mark Input dependent function correct12
Finalizing correct11
Mark Input dependent function correct11
Finalizing correct10
Mark Input dependent function correct10
Finalizing correct9
Mark Input dependent function correct9
Finalizing correct8
Mark Input dependent function correct8
Finalizing line_size
Mark Input dependent function line_size
Finalizing line_size0
Mark Input dependent function line_size0
Finalizing correct7
Mark Input dependent function correct7
Finalizing show_line
Mark Input dependent function show_line
Finalizing show_line3
Mark Input dependent function show_line3
Finalizing show_line2
Mark Input dependent function show_line2
Finalizing show_line1
Mark Input dependent function show_line1
Finalizing show_line0
Mark Input dependent function show_line0
Finalizing show_char
Mark Input dependent function show_char
Finalizing show_char14
Mark Input dependent function show_char14
Finalizing show_char13
Mark Input dependent function show_char13
Finalizing show_char12
Mark Input dependent function show_char12
Finalizing show_char11
Mark Input dependent function show_char11
Finalizing show_char10
Mark Input dependent function show_char10
Finalizing show_char9
Mark Input dependent function show_char9
Finalizing show_char8
Mark Input dependent function show_char8
Finalizing show_char7
Mark Input dependent function show_char7
Finalizing show_char6
Mark Input dependent function show_char6
Finalizing show_char5
Mark Input dependent function show_char5
Finalizing show_char4
Mark Input dependent function show_char4
Finalizing show_char3
Mark Input dependent function show_char3
Finalizing show_char2
Mark Input dependent function show_char2
Finalizing show_char1
Mark Input dependent function show_char1
Finalizing show_char0
Mark Input dependent function show_char0
Finalizing correct6
Mark Input dependent function correct6
Finalizing correct5
Mark Input dependent function correct5
Finalizing correct4
Mark Input dependent function correct4
Finalizing correct3
Mark Input dependent function correct3
Finalizing correct2
Mark Input dependent function correct2
Finalizing correct1
Mark Input dependent function correct1
Finalizing correct0
Mark Input dependent function correct0
Finalizing checkline18
Mark Input dependent function checkline18
Finalizing checkline17
Mark Input dependent function checkline17
Finalizing checkline16
Mark Input dependent function checkline16
Finalizing checkline15
Mark Input dependent function checkline15
Finalizing checkline14
Mark Input dependent function checkline14
Finalizing makepossibilities
Mark Input dependent function makepossibilities
Finalizing makepossibilities8
Mark Input dependent function makepossibilities8
Finalizing makepossibilities7
Mark Input dependent function makepossibilities7
Finalizing makepossibilities6
Mark Input dependent function makepossibilities6
Finalizing tryveryhard
Mark Input dependent function tryveryhard
Finalizing tryveryhard0
Mark Input dependent function tryveryhard0
Finalizing makepossibilities5
Mark Input dependent function makepossibilities5
Finalizing missingspace
Mark Input dependent function missingspace
Finalizing missingspace2
Mark Input dependent function missingspace2
Finalizing missingspace1
Mark Input dependent function missingspace1
Finalizing missingspace0
Mark Input dependent function missingspace0
Finalizing makepossibilities4
Mark Input dependent function makepossibilities4
Finalizing wrongletter
Mark Input dependent function wrongletter
Finalizing wrongletter1
Mark Input dependent function wrongletter1
Finalizing wrongletter0
Mark Input dependent function wrongletter0
Finalizing makepossibilities3
Mark Input dependent function makepossibilities3
Finalizing extraletter
Mark Input dependent function extraletter
Finalizing extraletter0
Mark Input dependent function extraletter0
Finalizing makepossibilities2
Mark Input dependent function makepossibilities2
Finalizing transposedletter
Mark Input dependent function transposedletter
Finalizing transposedletter1
Mark Input dependent function transposedletter1
Finalizing transposedletter0
Mark Input dependent function transposedletter0
Finalizing makepossibilities1
Mark Input dependent function makepossibilities1
Finalizing missingletter
Mark Input dependent function missingletter
Finalizing missingletter2
Mark Input dependent function missingletter2
Finalizing missingletter1
Mark Input dependent function missingletter1
Finalizing missingletter0
Mark Input dependent function missingletter0
Finalizing wrongcapital
Mark Input dependent function wrongcapital
Finalizing ins_cap
Mark Input dependent function ins_cap
Finalizing ins_cap0
Mark Input dependent function ins_cap0
Finalizing save_cap
Mark Input dependent function save_cap
Finalizing save_cap4
Mark Input dependent function save_cap4
Finalizing save_cap3
Mark Input dependent function save_cap3
Finalizing save_cap2
Mark Input dependent function save_cap2
Finalizing save_cap1
Mark Input dependent function save_cap1
Finalizing save_cap0
Mark Input dependent function save_cap0
Finalizing makepossibilities0
Mark Input dependent function makepossibilities0
Finalizing checkline13
Mark Input dependent function checkline13
Finalizing checkline12
Mark Input dependent function checkline12
Finalizing checkline11
Mark Input dependent function checkline11
Finalizing checkline10
Mark Input dependent function checkline10
Finalizing checkline9
Mark Input dependent function checkline9
Finalizing compoundgood
Mark Input dependent function compoundgood
Finalizing compoundgood3
Mark Input dependent function compoundgood3
Finalizing compoundgood2
Mark Input dependent function compoundgood2
Finalizing compoundgood1
Mark Input dependent function compoundgood1
Finalizing compoundgood0
Mark Input dependent function compoundgood0
Finalizing good
Mark Input dependent function good
Finalizing good4
Mark Input dependent function good4
Finalizing chk_aff
Mark Input dependent function chk_aff
Finalizing chk_aff2
Mark Input dependent function chk_aff2
Finalizing chk_aff1
Mark Input dependent function chk_aff1
Finalizing chk_aff0
Mark Input dependent function chk_aff0
Finalizing pfx_list_chk
Mark Input dependent function pfx_list_chk
Finalizing pfx_list_chk5
Mark Input dependent function pfx_list_chk5
Finalizing chk_suf
Mark Input dependent function chk_suf
Finalizing chk_suf2
Mark Input dependent function chk_suf2
Finalizing chk_suf1
Mark Input dependent function chk_suf1
Finalizing chk_suf0
Mark Input dependent function chk_suf0
Finalizing suf_list_chk
Mark Input dependent function suf_list_chk
Finalizing suf_list_chk7
Mark Input dependent function suf_list_chk7
Finalizing suf_list_chk6
Mark Input dependent function suf_list_chk6
Finalizing suf_list_chk5
Mark Input dependent function suf_list_chk5
Finalizing suf_list_chk4
Mark Input dependent function suf_list_chk4
Finalizing suf_list_chk3
Mark Input dependent function suf_list_chk3
Finalizing suf_list_chk2
Mark Input dependent function suf_list_chk2
Finalizing suf_list_chk1
Mark Input dependent function suf_list_chk1
Finalizing suf_list_chk0
Mark Input dependent function suf_list_chk0
Finalizing pfx_list_chk4
Mark Input dependent function pfx_list_chk4
Finalizing ins_root_cap
Mark Input dependent function ins_root_cap
Finalizing ins_root_cap0
Mark Input dependent function ins_root_cap0
Finalizing insert
Mark Input dependent function insert
Finalizing insert2
Mark Input dependent function insert2
Finalizing insert1
Mark Input dependent function insert1
Finalizing insert0
Mark Input dependent function insert0
Finalizing save_root_cap
Mark Input dependent function save_root_cap
Finalizing save_root_cap11
Mark Input dependent function save_root_cap11
Finalizing save_root_cap10
Mark Input dependent function save_root_cap10
Finalizing save_root_cap9
Mark Input dependent function save_root_cap9
Finalizing save_root_cap8
Mark Input dependent function save_root_cap8
Finalizing save_root_cap7
Mark Input dependent function save_root_cap7
Finalizing save_root_cap6
Mark Input dependent function save_root_cap6
Finalizing save_root_cap5
Mark Input dependent function save_root_cap5
Finalizing save_root_cap4
Mark Input dependent function save_root_cap4
Finalizing lowcase
Mark Input dependent function lowcase
Finalizing lowcase0
Mark Input dependent function lowcase0
Finalizing save_root_cap3
Mark Input dependent function save_root_cap3
Finalizing save_root_cap2
Mark Input dependent function save_root_cap2
Finalizing save_root_cap1
Mark Input dependent function save_root_cap1
Finalizing save_root_cap0
Mark Input dependent function save_root_cap0
Finalizing pfx_list_chk3
Mark Input dependent function pfx_list_chk3
Finalizing pfx_list_chk2
Mark Input dependent function pfx_list_chk2
Finalizing flagpr
Mark Input dependent function flagpr
Finalizing flagpr16
Mark Input dependent function flagpr16
Finalizing flagpr15
Mark Input dependent function flagpr15
Finalizing flagpr14
Mark Input dependent function flagpr14
Finalizing flagpr13
Mark Input dependent function flagpr13
Finalizing flagpr12
Mark Input dependent function flagpr12
Finalizing flagpr11
Mark Input dependent function flagpr11
Finalizing flagpr10
Mark Input dependent function flagpr10
Finalizing flagpr9
Mark Input dependent function flagpr9
Finalizing flagpr8
Mark Input dependent function flagpr8
Finalizing flagpr7
Mark Input dependent function flagpr7
Finalizing printichar
Mark Input dependent function printichar
Finalizing printichar1
Mark Input dependent function printichar1
Finalizing printichar0
Mark Input dependent function printichar0
Finalizing flagpr6
Mark Input dependent function flagpr6
Finalizing flagpr5
Mark Input dependent function flagpr5
Finalizing flagpr4
Mark Input dependent function flagpr4
Finalizing flagpr3
Mark Input dependent function flagpr3
Finalizing flagpr2
Mark Input dependent function flagpr2
Finalizing flagpr1
Mark Input dependent function flagpr1
Finalizing flagpr0
Mark Input dependent function flagpr0
Finalizing pfx_list_chk1
Mark Input dependent function pfx_list_chk1
Finalizing pfx_list_chk0
Mark Input dependent function pfx_list_chk0
Finalizing cap_ok
Mark Input dependent function cap_ok
Finalizing cap_ok10
Mark Input dependent function cap_ok10
Finalizing cap_ok9
Mark Input dependent function cap_ok9
Finalizing cap_ok8
Mark Input dependent function cap_ok8
Finalizing cap_ok7
Mark Input dependent function cap_ok7
Finalizing cap_ok6
Mark Input dependent function cap_ok6
Finalizing cap_ok5
Mark Input dependent function cap_ok5
Finalizing cap_ok4
Mark Input dependent function cap_ok4
Finalizing cap_ok3
Mark Input dependent function cap_ok3
Finalizing entryhasaffixes
Mark Input dependent function entryhasaffixes
Finalizing cap_ok2
Mark Input dependent function cap_ok2
Finalizing cap_ok1
Mark Input dependent function cap_ok1
Finalizing cap_ok0
Mark Input dependent function cap_ok0
Finalizing good3
Mark Input dependent function good3
Finalizing good2
Mark Input dependent function good2
Finalizing ichartosstr
Mark Input dependent function ichartosstr
Finalizing ichartosstr0
Mark Input dependent function ichartosstr0
Finalizing good1
Mark Input dependent function good1
Finalizing good0
Mark Input dependent function good0
Finalizing checkline8
Mark Input dependent function checkline8
Finalizing checkline7
Mark Input dependent function checkline7
Finalizing checkline6
Mark Input dependent function checkline6
Finalizing skipoverword
Mark Input dependent function skipoverword
Finalizing skipoverword4
Mark Input dependent function skipoverword4
Finalizing skipoverword3
Mark Input dependent function skipoverword3
Finalizing skipoverword2
Mark Input dependent function skipoverword2
Finalizing skipoverword1
Mark Input dependent function skipoverword1
Finalizing skipoverword0
Mark Input dependent function skipoverword0
Finalizing checkline5
Mark Input dependent function checkline5
Finalizing skiptoword
Mark Input dependent function skiptoword
Finalizing skiptoword19
Mark Input dependent function skiptoword19
Finalizing skiptoword18
Mark Input dependent function skiptoword18
Finalizing skiptoword17
Mark Input dependent function skiptoword17
Finalizing skiptoword16
Mark Input dependent function skiptoword16
Finalizing skiptoword15
Mark Input dependent function skiptoword15
Finalizing skiptoword14
Mark Input dependent function skiptoword14
Finalizing skiptoword13
Mark Input dependent function skiptoword13
Finalizing skiptoword12
Mark Input dependent function skiptoword12
Finalizing skiptoword11
Mark Input dependent function skiptoword11
Finalizing skiptoword10
Mark Input dependent function skiptoword10
Finalizing skiptoword9
Mark Input dependent function skiptoword9
Finalizing skiptoword8
Mark Input dependent function skiptoword8
Finalizing TeX_math_begin
Mark Input dependent function TeX_math_begin
Finalizing TeX_math_begin4
Mark Input dependent function TeX_math_begin4
Finalizing TeX_math_begin3
Mark Input dependent function TeX_math_begin3
Finalizing TeX_skip_check
Mark Input dependent function TeX_skip_check
Finalizing TeX_skip_check3
Mark Input dependent function TeX_skip_check3
Finalizing TeX_skip_check2
Mark Input dependent function TeX_skip_check2
Finalizing TeX_skip_check1
Mark Input dependent function TeX_skip_check1
Finalizing TeX_skip_check0
Mark Input dependent function TeX_skip_check0
Finalizing TeX_math_begin2
Mark Input dependent function TeX_math_begin2
Finalizing TeX_math_begin1
Mark Input dependent function TeX_math_begin1
Finalizing TeX_math_begin0
Mark Input dependent function TeX_math_begin0
Finalizing skiptoword7
Mark Input dependent function skiptoword7
Finalizing skiptoword6
Mark Input dependent function skiptoword6
Finalizing skiptoword5
Mark Input dependent function skiptoword5
Finalizing skiptoword4
Mark Input dependent function skiptoword4
Finalizing skiptoword3
Mark Input dependent function skiptoword3
Finalizing TeX_math_end
Mark Input dependent function TeX_math_end
Finalizing TeX_math_end2
Mark Input dependent function TeX_math_end2
Finalizing TeX_LR_begin
Mark Input dependent function TeX_LR_begin
Finalizing TeX_LR_begin2
Mark Input dependent function TeX_LR_begin2
Finalizing TeX_LR_begin1
Mark Input dependent function TeX_LR_begin1
Finalizing TeX_LR_begin0
Mark Input dependent function TeX_LR_begin0
Finalizing TeX_strncmp
Mark Input dependent function TeX_strncmp
Finalizing TeX_strncmp0
Mark Input dependent function TeX_strncmp0
Finalizing TeX_math_end1
Mark Input dependent function TeX_math_end1
Finalizing TeX_math_end0
Mark Input dependent function TeX_math_end0
Finalizing skiptoword2
Mark Input dependent function skiptoword2
Finalizing skiptoword1
Mark Input dependent function skiptoword1
Finalizing TeX_LR_check
Mark Input dependent function TeX_LR_check
Finalizing TeX_LR_check4
Mark Input dependent function TeX_LR_check4
Finalizing TeX_LR_check3
Mark Input dependent function TeX_LR_check3
Finalizing TeX_LR_check2
Mark Input dependent function TeX_LR_check2
Finalizing TeX_LR_check1
Mark Input dependent function TeX_LR_check1
Finalizing TeX_LR_check0
Mark Input dependent function TeX_LR_check0
Finalizing TeX_math_check
Mark Input dependent function TeX_math_check
Finalizing TeX_math_check3
Mark Input dependent function TeX_math_check3
Finalizing TeX_math_check2
Mark Input dependent function TeX_math_check2
Finalizing TeX_skip_args
Mark Input dependent function TeX_skip_args
Finalizing TeX_skip_args3
Mark Input dependent function TeX_skip_args3
Finalizing TeX_skip_args2
Mark Input dependent function TeX_skip_args2
Finalizing TeX_skip_args1
Mark Input dependent function TeX_skip_args1
Finalizing TeX_skip_args0
Mark Input dependent function TeX_skip_args0
Finalizing TeX_math_check1
Mark Input dependent function TeX_math_check1
Finalizing TeX_skip_parens
Mark Input dependent function TeX_skip_parens
Finalizing TeX_skip_parens0
Mark Input dependent function TeX_skip_parens0
Finalizing TeX_math_check0
Mark Input dependent function TeX_math_check0
Finalizing TeX_open_paren
Mark Input dependent function TeX_open_paren
Finalizing TeX_open_paren0
Mark Input dependent function TeX_open_paren0
Finalizing skiptoword0
Mark Input dependent function skiptoword0
Finalizing checkline4
Mark Input dependent function checkline4
Finalizing checkline3
Mark Input dependent function checkline3
Finalizing checkline2
Mark Input dependent function checkline2
Finalizing checkline1
Mark Input dependent function checkline1
Finalizing copyout
Mark Input dependent function copyout
Finalizing copyout1
Mark Input dependent function copyout1
Finalizing copyout0
Mark Input dependent function copyout0
Finalizing checkline0
Mark Input dependent function checkline0
Finalizing askmode4
Mark Input dependent function askmode4
Finalizing askmode3
Mark Input dependent function askmode3
Finalizing askmode2
Mark Input dependent function askmode2
Finalizing xgets
Mark Input dependent function xgets
Finalizing xgets4
Mark Input dependent function xgets4
Finalizing xgets3
Mark Input dependent function xgets3
Finalizing xgets2
Mark Input dependent function xgets2
Finalizing xgets1
Mark Input dependent function xgets1
Finalizing xgets0
Mark Input dependent function xgets0
Finalizing askmode1
Mark Input dependent function askmode1
Finalizing askmode0
Mark Input dependent function askmode0
Finalizing main38
Mark Input dependent function main38
Finalizing treeinit
Mark Input dependent function treeinit
Finalizing treeinit8
Mark Input dependent function treeinit8
Finalizing treeinit7
Mark Input dependent function treeinit7
Finalizing treeinit6
Mark Input dependent function treeinit6
Finalizing treeinit5
Mark Input dependent function treeinit5
Finalizing treeinit4
Mark Input dependent function treeinit4
Finalizing treeinit3
Mark Input dependent function treeinit3
Finalizing treeinit2
Mark Input dependent function treeinit2
Finalizing treeload
Mark Input dependent function treeload
Finalizing treeinsert
Mark Input dependent function treeinsert
Finalizing treeinsert13
Mark Input dependent function treeinsert13
Finalizing treeinsert12
Mark Input dependent function treeinsert12
Finalizing treeinsert11
Mark Input dependent function treeinsert11
Finalizing combinecaps
Mark Input dependent function combinecaps
Finalizing combinecaps3
Mark Input dependent function combinecaps3
Finalizing combinecaps2
Mark Input dependent function combinecaps2
Finalizing combinecaps1
Mark Input dependent function combinecaps1
Finalizing forcevheader
Mark Input dependent function forcevheader
Finalizing forcevheader0
Mark Input dependent function forcevheader0
Finalizing combinecaps0
Mark Input dependent function combinecaps0
Finalizing combine_two_entries
Mark Input dependent function combine_two_entries
Finalizing combine_two_entries2
Mark Input dependent function combine_two_entries2
Finalizing addvheader
Mark Input dependent function addvheader
Finalizing addvheader4
Mark Input dependent function addvheader4
Finalizing addvheader3
Mark Input dependent function addvheader3
Finalizing addvheader2
Mark Input dependent function addvheader2
Finalizing addvheader1
Mark Input dependent function addvheader1
Finalizing addvheader0
Mark Input dependent function addvheader0
Finalizing combine_two_entries1
Mark Input dependent function combine_two_entries1
Finalizing combine_two_entries0
Mark Input dependent function combine_two_entries0
Finalizing myfree
Mark Input dependent function myfree
Finalizing myfree0
Mark Input dependent function myfree0
Finalizing combineaffixes
Mark Input dependent function combineaffixes
Finalizing combineaffixes0
Mark Input dependent function combineaffixes0
Finalizing acoversb
Mark Input dependent function acoversb
Finalizing issubset
Mark Input dependent function issubset
Finalizing lookup
Mark Input dependent function lookup
Finalizing lookup3
Mark Input dependent function lookup3
Finalizing treelookup
Mark Input dependent function treelookup
Finalizing treelookup2
Mark Input dependent function treelookup2
Finalizing treelookup1
Mark Input dependent function treelookup1
Finalizing treelookup0
Mark Input dependent function treelookup0
Finalizing lookup2
Mark Input dependent function lookup2
Finalizing lookup1
Mark Input dependent function lookup1
Finalizing lookup0
Mark Input dependent function lookup0
Finalizing treeinsert10
Mark Input dependent function treeinsert10
Finalizing makedent
Mark Input dependent function makedent
Finalizing makedent10
Mark Input dependent function makedent10
Finalizing makedent9
Mark Input dependent function makedent9
Finalizing makedent8
Mark Input dependent function makedent8
Finalizing makedent7
Mark Input dependent function makedent7
Finalizing chupcase
Mark Input dependent function chupcase
Finalizing chupcase0
Mark Input dependent function chupcase0
Finalizing upcase
Mark Input dependent function upcase
Finalizing upcase0
Mark Input dependent function upcase0
Finalizing strtosichar
Mark Input dependent function strtosichar
Finalizing strtosichar0
Mark Input dependent function strtosichar0
Finalizing makedent6
Mark Input dependent function makedent6
Finalizing mymalloc
Mark Input dependent function mymalloc
Finalizing makedent5
Mark Input dependent function makedent5
Finalizing whatcap
Mark Input dependent function whatcap
Finalizing whatcap4
Mark Input dependent function whatcap4
Finalizing whatcap3
Mark Input dependent function whatcap3
Finalizing whatcap2
Mark Input dependent function whatcap2
Finalizing whatcap1
Mark Input dependent function whatcap1
Finalizing whatcap0
Mark Input dependent function whatcap0
Finalizing makedent4
Mark Input dependent function makedent4
Finalizing makedent3
Mark Input dependent function makedent3
Finalizing makedent2
Mark Input dependent function makedent2
Finalizing ichartostr
Mark Input dependent function ichartostr
Finalizing ichartostr4
Mark Input dependent function ichartostr4
Finalizing ichartostr3
Mark Input dependent function ichartostr3
Finalizing ichartostr2
Mark Input dependent function ichartostr2
Finalizing ichartostr1
Mark Input dependent function ichartostr1
Finalizing ichartostr0
Mark Input dependent function ichartostr0
Finalizing makedent1
Mark Input dependent function makedent1
Finalizing makedent0
Mark Input dependent function makedent0
Finalizing treeinsert9
Mark Input dependent function treeinsert9
Finalizing treeinsert8
Mark Input dependent function treeinsert8
Finalizing treeinsert7
Mark Input dependent function treeinsert7
Finalizing treeinsert6
Mark Input dependent function treeinsert6
Finalizing treeinsert5
Mark Input dependent function treeinsert5
Finalizing tinsert
Mark Input dependent function tinsert
Finalizing tinsert3
Mark Input dependent function tinsert3
Finalizing tinsert2
Mark Input dependent function tinsert2
Finalizing tinsert1
Mark Input dependent function tinsert1
Finalizing hash
Mark Input dependent function hash
Finalizing hash1
Mark Input dependent function hash1
Finalizing hash0
Mark Input dependent function hash0
Finalizing tinsert0
Mark Input dependent function tinsert0
Finalizing strtoichar
Mark Input dependent function strtoichar
Finalizing strtoichar3
Mark Input dependent function strtoichar3
Finalizing strtoichar2
Mark Input dependent function strtoichar2
Finalizing strtoichar1
Mark Input dependent function strtoichar1
Finalizing stringcharlen
Mark Input dependent function stringcharlen
Finalizing stringcharlen8
Mark Input dependent function stringcharlen8
Finalizing stringcharlen7
Mark Input dependent function stringcharlen7
Finalizing stringcharlen6
Mark Input dependent function stringcharlen6
Finalizing stringcharlen5
Mark Input dependent function stringcharlen5
Finalizing stringcharlen4
Mark Input dependent function stringcharlen4
Finalizing stringcharlen3
Mark Input dependent function stringcharlen3
Finalizing stringcharlen2
Mark Input dependent function stringcharlen2
Finalizing stringcharlen1
Mark Input dependent function stringcharlen1
Finalizing stringcharlen0
Mark Input dependent function stringcharlen0
Finalizing strtoichar0
Mark Input dependent function strtoichar0
Finalizing treeinsert4
Mark Input dependent function treeinsert4
Finalizing treeinsert3
Mark Input dependent function treeinsert3
Finalizing treeinsert2
Mark Input dependent function treeinsert2
Finalizing treeinsert1
Mark Input dependent function treeinsert1
Finalizing treeinsert0
Mark Input dependent function treeinsert0
Finalizing treeinit1
Mark Input dependent function treeinit1
Finalizing trydict
Mark Input dependent function trydict
Finalizing trydict2
Mark Input dependent function trydict2
Finalizing trydict1
Mark Input dependent function trydict1
Finalizing trydict0
Mark Input dependent function trydict0
Finalizing treeinit0
Mark Input dependent function treeinit0
Finalizing main37
Mark Input dependent function main37
Finalizing initckch
Mark Input dependent function initckch
Finalizing initckch2
Mark Input dependent function initckch2
Finalizing initckch1
Mark Input dependent function initckch1
Finalizing initckch0
Mark Input dependent function initckch0
Finalizing main36
Mark Input dependent function main36
Finalizing main35
Mark Input dependent function main35
Finalizing main34
Mark Input dependent function main34
Finalizing main33
Mark Input dependent function main33
Finalizing findfiletype
Mark Input dependent function findfiletype
Finalizing findfiletype7
Mark Input dependent function findfiletype7
Finalizing findfiletype6
Mark Input dependent function findfiletype6
Finalizing findfiletype5
Mark Input dependent function findfiletype5
Finalizing findfiletype4
Mark Input dependent function findfiletype4
Finalizing findfiletype3
Mark Input dependent function findfiletype3
Finalizing findfiletype2
Mark Input dependent function findfiletype2
Finalizing findfiletype1
Mark Input dependent function findfiletype1
Finalizing findfiletype0
Mark Input dependent function findfiletype0
Finalizing linit
Mark Input dependent function linit
Finalizing linit49
Mark Input dependent function linit49
Finalizing linit48
Mark Input dependent function linit48
Finalizing linit47
Mark Input dependent function linit47
Finalizing linit46
Mark Input dependent function linit46
Finalizing linit45
Mark Input dependent function linit45
Finalizing linit44
Mark Input dependent function linit44
Finalizing linit43
Mark Input dependent function linit43
Finalizing linit42
Mark Input dependent function linit42
Finalizing linit41
Mark Input dependent function linit41
Finalizing linit40
Mark Input dependent function linit40
Finalizing linit39
Mark Input dependent function linit39
Finalizing linit38
Mark Input dependent function linit38
Finalizing linit37
Mark Input dependent function linit37
Finalizing linit36
Mark Input dependent function linit36
Finalizing linit35
Mark Input dependent function linit35
Finalizing linit34
Mark Input dependent function linit34
Finalizing linit33
Mark Input dependent function linit33
Finalizing linit32
Mark Input dependent function linit32
Finalizing linit31
Mark Input dependent function linit31
Finalizing linit30
Mark Input dependent function linit30
Finalizing linit29
Mark Input dependent function linit29
Finalizing linit28
Mark Input dependent function linit28
Finalizing linit27
Mark Input dependent function linit27
Finalizing linit26
Mark Input dependent function linit26
Finalizing linit25
Mark Input dependent function linit25
Finalizing linit24
Mark Input dependent function linit24
Finalizing linit23
Mark Input dependent function linit23
Finalizing linit22
Mark Input dependent function linit22
Finalizing linit21
Mark Input dependent function linit21
Finalizing linit20
Mark Input dependent function linit20
Finalizing linit19
Mark Input dependent function linit19
Finalizing linit18
Mark Input dependent function linit18
Finalizing linit17
Mark Input dependent function linit17
Finalizing linit16
Mark Input dependent function linit16
Finalizing linit15
Mark Input dependent function linit15
Finalizing linit14
Mark Input dependent function linit14
Finalizing linit13
Mark Input dependent function linit13
Finalizing linit12
Mark Input dependent function linit12
Finalizing linit11
Mark Input dependent function linit11
Finalizing linit10
Mark Input dependent function linit10
Finalizing linit9
Mark Input dependent function linit9
Finalizing linit8
Mark Input dependent function linit8
Finalizing linit7
Mark Input dependent function linit7
Finalizing linit6
Mark Input dependent function linit6
Finalizing linit5
Mark Input dependent function linit5
Finalizing linit4
Mark Input dependent function linit4
Finalizing linit3
Mark Input dependent function linit3
Finalizing linit2
Mark Input dependent function linit2
Finalizing linit1
Mark Input dependent function linit1
Finalizing linit0
Mark Input dependent function linit0
Finalizing main32
Mark Input dependent function main32
Finalizing main31
Mark Input dependent function main31
Finalizing main30
Mark Input dependent function main30
Finalizing main29
Mark Input dependent function main29
Finalizing main28
Mark Input dependent function main28
Finalizing main27
Mark Input dependent function main27
Finalizing main26
Mark Input dependent function main26
Finalizing main25
Mark Input dependent function main25
Finalizing main24
Mark Input dependent function main24
Finalizing main23
Mark Input dependent function main23
Finalizing main22
Mark Input dependent function main22
Finalizing main21
Mark Input dependent function main21
Finalizing main20
Mark Input dependent function main20
Finalizing main19
Mark Input dependent function main19
Finalizing main18
Mark Input dependent function main18
Finalizing main17
Mark Input dependent function main17
Finalizing main16
Mark Input dependent function main16
Finalizing main15
Mark Input dependent function main15
Finalizing main14
Mark Input dependent function main14
Finalizing main13
Mark Input dependent function main13
Finalizing main12
Mark Input dependent function main12
Finalizing main11
Mark Input dependent function main11
Finalizing main10
Mark Input dependent function main10
Finalizing main9
Mark Input dependent function main9
Finalizing main8
Mark Input dependent function main8
Finalizing main7
Mark Input dependent function main7
Finalizing main6
Mark Input dependent function main6
Finalizing usage
Mark Input dependent function usage
Finalizing givehelp
Mark Input dependent function givehelp
Finalizing givehelp2
Mark Input dependent function givehelp2
Finalizing givehelp1
Mark Input dependent function givehelp1
Finalizing givehelp0
Mark Input dependent function givehelp0
Finalizing usage0
Mark Input dependent function usage0
Finalizing main5
Finalizing main4
Mark Input dependent function main4
Finalizing main3
Mark Input dependent function main3
Finalizing main2
Mark Input dependent function main2
Finalizing main1
Mark Input dependent function main1
Finalizing main0
Finalizing shellescape
Mark Input dependent function shellescape
Finalizing shellescape5
Mark Input dependent function shellescape5
Finalizing shellescape4
Mark Input dependent function shellescape4
Finalizing shellescape3
Mark Input dependent function shellescape3
Finalizing shellescape2
Mark Input dependent function shellescape2
Finalizing shellescape1
Mark Input dependent function shellescape1
Finalizing shellescape0
Mark Input dependent function shellescape0
Finalizing stop
Mark Input dependent function stop
Finalizing onstop
Mark Input dependent function onstop
Finalizing onstop0
Mark Input dependent function onstop0
Finalizing done
Mark Input dependent function done
Finalizing terminit
Mark Input dependent function terminit
Finalizing terminit5
Mark Input dependent function terminit5
Finalizing terminit4
Mark Input dependent function terminit4
Finalizing terminit3
Mark Input dependent function terminit3
Finalizing terminit2
Mark Input dependent function terminit2
Finalizing terminit1
Mark Input dependent function terminit1
Finalizing terminit0
Mark Input dependent function terminit0
Finalizing backup
Mark Input dependent function backup
Finalizing normal
Mark Input dependent function normal
Finalizing inverse
Mark Input dependent function inverse
Finalizing move
Mark Input dependent function move
Finalizing erase
Mark Input dependent function erase
Finished input dependency analysis

In  mark function pass 
In  filter function pass 
Filter file:/home/anahitik/SIP/sip-eval/combination/ispell.x.bc/100/0
here!:erase
here!:move
here!:inverse
here!:normal
here!:backup
here!:terminit
here!:done
here!:onstop
here!:stop
here!:shellescape
here!:main
here!:usage
here!:initckch
here!:expandmode
here!:dofile
here!:update_file
here!:givehelp
here!:checkfile
here!:correct
here!:compoundgood
here!:makepossibilities
here!:show_line
here!:line_size
here!:my_getline
here!:inserttoken
here!:lookharder
here!:show_char
here!:wrongcapital
here!:missingletter
here!:transposedletter
here!:extraletter
here!:wrongletter
here!:missingspace
here!:tryveryhard
here!:posscmp
here!:casecmp
here!:save_cap
here!:insert
here!:save_root_cap
here!:ins_cap
here!:ins_root_cap
here!:askmode
here!:copyout
here!:skipoverword
here!:checkline
here!:skiptoword
here!:TeX_math_check
here!:TeX_LR_check
here!:TeX_math_end
here!:TeX_strncmp
here!:TeX_skip_parens
here!:TeX_math_begin
here!:TeX_skip_check
here!:TeX_LR_begin
here!:TeX_open_paren
here!:TeX_skip_args
here!:dumpmode
here!:tbldump
here!:entdump
here!:setdump
here!:subsetdump
here!:good
here!:cap_ok
here!:entryhasaffixes
here!:flagpr
here!:linit
here!:lookup
here!:hash
here!:makedent
here!:strtoichar
here!:ichartostr
here!:whatcap
here!:chupcase
here!:strtosichar
here!:upcase
here!:stringcharlen
here!:addvheader
here!:combinecaps
here!:combine_two_entries
here!:forcevheader
here!:combineaffixes
here!:acoversb
here!:issubset
here!:lowcase
here!:toutent
here!:ichartosstr
here!:toutword
here!:flagout
here!:printichar
here!:findfiletype
here!:chk_aff
here!:pfx_list_chk
here!:chk_suf
here!:suf_list_chk
here!:expand_pre
here!:pr_pre_expansion
here!:forcelc
here!:expand_suf
here!:pr_suf_expansion
here!:treeinit
here!:trydict
here!:treeload
here!:treeinsert
here!:tinsert
here!:treelookup
here!:treeoutput
here!:pdictcmp
here!:mymalloc
here!:myfree
here!:xgets
here!:terminit0
here!:terminit1
here!:terminit2
here!:terminit3
here!:terminit4
here!:terminit5
here!:onstop0
here!:shellescape0
here!:shellescape1
here!:shellescape2
here!:shellescape3
here!:shellescape4
here!:shellescape5
here!:main0
here!:main1
here!:main2
here!:main3
here!:main4
here!:main5
here!:main6
here!:main7
here!:main8
here!:main9
here!:main10
here!:main11
here!:main12
here!:main13
here!:main14
here!:main15
here!:main16
here!:main17
here!:main18
here!:main19
here!:main20
here!:main21
here!:main22
here!:main23
here!:main24
here!:main25
here!:main26
here!:main27
here!:main28
here!:main29
here!:main30
here!:main31
here!:main32
here!:main33
here!:main34
here!:main35
here!:main36
here!:main37
here!:main38
here!:main39
here!:main40
here!:main41
here!:main42
here!:main43
here!:usage0
here!:initckch0
here!:initckch1
here!:initckch2
here!:expandmode0
here!:expandmode1
here!:dofile0
here!:dofile1
here!:dofile2
here!:dofile3
here!:update_file0
here!:update_file1
here!:update_file2
here!:update_file3
here!:update_file4
here!:update_file5
here!:givehelp0
here!:givehelp1
here!:givehelp2
here!:checkfile0
here!:checkfile1
here!:checkfile2
here!:checkfile3
here!:checkfile4
here!:checkfile5
here!:checkfile6
here!:checkfile7
here!:correct0
here!:correct1
here!:correct2
here!:correct3
here!:correct4
here!:correct5
here!:correct6
here!:correct7
here!:correct8
here!:correct9
here!:correct10
here!:correct11
here!:correct12
here!:correct13
here!:correct14
here!:correct15
here!:correct16
here!:correct17
here!:correct18
here!:correct19
here!:correct20
here!:correct21
here!:correct22
here!:correct23
here!:correct24
here!:correct25
here!:correct26
here!:compoundgood0
here!:compoundgood1
here!:compoundgood2
here!:compoundgood3
here!:makepossibilities0
here!:makepossibilities1
here!:makepossibilities2
here!:makepossibilities3
here!:makepossibilities4
here!:makepossibilities5
here!:makepossibilities6
here!:makepossibilities7
here!:makepossibilities8
here!:show_line0
here!:show_line1
here!:show_line2
here!:show_line3
here!:line_size0
here!:my_getline0
here!:my_getline1
here!:my_getline2
here!:my_getline3
here!:my_getline4
here!:my_getline5
here!:my_getline6
here!:inserttoken0
here!:inserttoken1
here!:inserttoken2
here!:inserttoken3
here!:inserttoken4
here!:inserttoken5
here!:inserttoken6
here!:lookharder0
here!:lookharder1
here!:lookharder2
here!:show_char0
here!:show_char1
here!:show_char2
here!:show_char3
here!:show_char4
here!:show_char5
here!:show_char6
here!:show_char7
here!:show_char8
here!:show_char9
here!:show_char10
here!:show_char11
here!:show_char12
here!:show_char13
here!:show_char14
here!:missingletter0
here!:missingletter1
here!:missingletter2
here!:transposedletter0
here!:transposedletter1
here!:extraletter0
here!:wrongletter0
here!:wrongletter1
here!:missingspace0
here!:missingspace1
here!:missingspace2
here!:tryveryhard0
here!:casecmp0
here!:casecmp1
here!:casecmp2
here!:casecmp3
here!:casecmp4
here!:casecmp5
here!:casecmp6
here!:save_cap0
here!:save_cap1
here!:save_cap2
here!:save_cap3
here!:save_cap4
here!:insert0
here!:insert1
here!:insert2
here!:save_root_cap0
here!:save_root_cap1
here!:save_root_cap2
here!:save_root_cap3
here!:save_root_cap4
here!:save_root_cap5
here!:save_root_cap6
here!:save_root_cap7
here!:save_root_cap8
here!:save_root_cap9
here!:save_root_cap10
here!:save_root_cap11
here!:ins_cap0
here!:ins_root_cap0
here!:askmode0
here!:askmode1
here!:askmode2
here!:askmode3
here!:askmode4
here!:askmode5
here!:askmode6
here!:askmode7
here!:askmode8
here!:askmode9
here!:askmode10
here!:copyout0
here!:copyout1
here!:skipoverword0
here!:skipoverword1
here!:skipoverword2
here!:skipoverword3
here!:skipoverword4
here!:checkline0
here!:checkline1
here!:checkline2
here!:checkline3
here!:checkline4
here!:checkline5
here!:checkline6
here!:checkline7
here!:checkline8
here!:checkline9
here!:checkline10
here!:checkline11
here!:checkline12
here!:checkline13
here!:checkline14
here!:checkline15
here!:checkline16
here!:checkline17
here!:checkline18
here!:checkline19
here!:checkline20
here!:skiptoword0
here!:skiptoword1
here!:skiptoword2
here!:skiptoword3
here!:skiptoword4
here!:skiptoword5
here!:skiptoword6
here!:skiptoword7
here!:skiptoword8
here!:skiptoword9
here!:skiptoword10
here!:skiptoword11
here!:skiptoword12
here!:skiptoword13
here!:skiptoword14
here!:skiptoword15
here!:skiptoword16
here!:skiptoword17
here!:skiptoword18
here!:skiptoword19
here!:TeX_math_check0
here!:TeX_math_check1
here!:TeX_math_check2
here!:TeX_math_check3
here!:TeX_LR_check0
here!:TeX_LR_check1
here!:TeX_LR_check2
here!:TeX_LR_check3
here!:TeX_LR_check4
here!:TeX_math_end0
here!:TeX_math_end1
here!:TeX_math_end2
here!:TeX_strncmp0
here!:TeX_skip_parens0
here!:TeX_math_begin0
here!:TeX_math_begin1
here!:TeX_math_begin2
here!:TeX_math_begin3
here!:TeX_math_begin4
here!:TeX_skip_check0
here!:TeX_skip_check1
here!:TeX_skip_check2
here!:TeX_skip_check3
here!:TeX_LR_begin0
here!:TeX_LR_begin1
here!:TeX_LR_begin2
here!:TeX_open_paren0
here!:TeX_skip_args0
here!:TeX_skip_args1
here!:TeX_skip_args2
here!:TeX_skip_args3
here!:dumpmode0
here!:dumpmode1
here!:dumpmode2
here!:dumpmode3
here!:dumpmode4
here!:tbldump0
here!:entdump0
here!:entdump1
here!:entdump2
here!:entdump3
here!:entdump4
here!:setdump0
here!:setdump1
here!:setdump2
here!:setdump3
here!:setdump4
here!:subsetdump0
here!:subsetdump1
here!:subsetdump2
here!:subsetdump3
here!:subsetdump4
here!:subsetdump5
here!:good0
here!:good1
here!:good2
here!:good3
here!:good4
here!:cap_ok0
here!:cap_ok1
here!:cap_ok2
here!:cap_ok3
here!:cap_ok4
here!:cap_ok5
here!:cap_ok6
here!:cap_ok7
here!:cap_ok8
here!:cap_ok9
here!:cap_ok10
here!:flagpr0
here!:flagpr1
here!:flagpr2
here!:flagpr3
here!:flagpr4
here!:flagpr5
here!:flagpr6
here!:flagpr7
here!:flagpr8
here!:flagpr9
here!:flagpr10
here!:flagpr11
here!:flagpr12
here!:flagpr13
here!:flagpr14
here!:flagpr15
here!:flagpr16
here!:linit0
here!:linit1
here!:linit2
here!:linit3
here!:linit4
here!:linit5
here!:linit6
here!:linit7
here!:linit8
here!:linit9
here!:linit10
here!:linit11
here!:linit12
here!:linit13
here!:linit14
here!:linit15
here!:linit16
here!:linit17
here!:linit18
here!:linit19
here!:linit20
here!:linit21
here!:linit22
here!:linit23
here!:linit24
here!:linit25
here!:linit26
here!:linit27
here!:linit28
here!:linit29
here!:linit30
here!:linit31
here!:linit32
here!:linit33
here!:linit34
here!:linit35
here!:linit36
here!:linit37
here!:linit38
here!:linit39
here!:linit40
here!:linit41
here!:linit42
here!:linit43
here!:linit44
here!:linit45
here!:linit46
here!:linit47
here!:linit48
here!:linit49
here!:lookup0
here!:lookup1
here!:lookup2
here!:lookup3
here!:hash0
here!:hash1
here!:makedent0
here!:makedent1
here!:makedent2
here!:makedent3
here!:makedent4
here!:makedent5
here!:makedent6
here!:makedent7
here!:makedent8
here!:makedent9
here!:makedent10
here!:strtoichar0
here!:strtoichar1
here!:strtoichar2
here!:strtoichar3
here!:ichartostr0
here!:ichartostr1
here!:ichartostr2
here!:ichartostr3
here!:ichartostr4
here!:whatcap0
here!:whatcap1
here!:whatcap2
here!:whatcap3
here!:whatcap4
here!:chupcase0
here!:strtosichar0
here!:upcase0
here!:stringcharlen0
here!:stringcharlen1
here!:stringcharlen2
here!:stringcharlen3
here!:stringcharlen4
here!:stringcharlen5
here!:stringcharlen6
here!:stringcharlen7
here!:stringcharlen8
here!:addvheader0
here!:addvheader1
here!:addvheader2
here!:addvheader3
here!:addvheader4
here!:combinecaps0
here!:combinecaps1
here!:combinecaps2
here!:combinecaps3
here!:combine_two_entries0
here!:combine_two_entries1
here!:combine_two_entries2
here!:forcevheader0
here!:combineaffixes0
here!:lowcase0
here!:toutent0
here!:toutent1
here!:toutent2
here!:ichartosstr0
here!:toutword0
here!:toutword1
here!:toutword2
here!:flagout0
here!:flagout1
here!:printichar0
here!:printichar1
here!:findfiletype0
here!:findfiletype1
here!:findfiletype2
here!:findfiletype3
here!:findfiletype4
here!:findfiletype5
here!:findfiletype6
here!:findfiletype7
here!:chk_aff0
here!:chk_aff1
here!:chk_aff2
here!:pfx_list_chk0
here!:pfx_list_chk1
here!:pfx_list_chk2
here!:pfx_list_chk3
here!:pfx_list_chk4
here!:pfx_list_chk5
here!:chk_suf0
here!:chk_suf1
here!:chk_suf2
here!:suf_list_chk0
here!:suf_list_chk1
here!:suf_list_chk2
here!:suf_list_chk3
here!:suf_list_chk4
here!:suf_list_chk5
here!:suf_list_chk6
here!:suf_list_chk7
here!:expand_pre0
here!:expand_pre1
here!:expand_pre2
here!:pr_pre_expansion0
here!:pr_pre_expansion1
here!:pr_pre_expansion2
here!:pr_pre_expansion3
here!:pr_pre_expansion4
here!:pr_pre_expansion5
here!:pr_pre_expansion6
here!:forcelc0
here!:forcelc1
here!:expand_suf0
here!:expand_suf1
here!:expand_suf2
here!:pr_suf_expansion0
here!:pr_suf_expansion1
here!:pr_suf_expansion2
here!:pr_suf_expansion3
here!:pr_suf_expansion4
here!:treeinit0
here!:treeinit1
here!:treeinit2
here!:treeinit3
here!:treeinit4
here!:treeinit5
here!:treeinit6
here!:treeinit7
here!:treeinit8
here!:trydict0
here!:trydict1
here!:trydict2
here!:treeinsert0
here!:treeinsert1
here!:treeinsert2
here!:treeinsert3
here!:treeinsert4
here!:treeinsert5
here!:treeinsert6
here!:treeinsert7
here!:treeinsert8
here!:treeinsert9
here!:treeinsert10
here!:treeinsert11
here!:treeinsert12
here!:treeinsert13
here!:tinsert0
here!:tinsert1
here!:tinsert2
here!:tinsert3
here!:treelookup0
here!:treelookup1
here!:treelookup2
here!:treeoutput0
here!:treeoutput1
here!:treeoutput2
here!:treeoutput3
here!:treeoutput4
here!:treeoutput5
here!:treeoutput6
here!:treeoutput7
here!:treeoutput8
here!:treeoutput9
here!:treeoutput10
here!:treeoutput11
here!:treeoutput12
here!:treeoutput13
here!:treeoutput14
here!:treeoutput15
here!:treeoutput16
here!:treeoutput17
here!:treeoutput18
here!:treeoutput19
here!:treeoutput20
here!:treeoutput21
here!:treeoutput22
here!:treeoutput23
here!:treeoutput24
here!:treeoutput25
here!:treeoutput26
here!:treeoutput27
here!:treeoutput28
here!:treeoutput29
here!:treeoutput30
here!:treeoutput31
here!:treeoutput32
here!:myfree0
here!:xgets0
here!:xgets1
here!:xgets2
here!:xgets3
here!:xgets4
here!:xgets4
got filter function names
Add filter function erase
FunctionInfo. Adding function:erase
Add filter function move
FunctionInfo. Adding function:move
Add filter function inverse
FunctionInfo. Adding function:inverse
Add filter function normal
FunctionInfo. Adding function:normal
Add filter function backup
FunctionInfo. Adding function:backup
Add filter function terminit
FunctionInfo. Adding function:terminit
did not find getenv demangled to getenv
did not find atoi demangled to atoi
did not find fprintf demangled to fprintf
did not find isatty demangled to isatty
did not find exit demangled to exit
did not find tcgetattr demangled to tcgetattr
did not find llvm.memcpy.p0i8.p0i8.i64 demangled to llvm.memcpy.p0i8.p0i8.i64
did not find tcsetattr demangled to tcsetattr
did not find signal demangled to signal
Add filter function done
FunctionInfo. Adding function:done
Add filter function onstop
FunctionInfo. Adding function:onstop
did not find kill demangled to kill
did not find unlink demangled to unlink
Add filter function stop
FunctionInfo. Adding function:stop
Add filter function shellescape
FunctionInfo. Adding function:shellescape
did not find fork demangled to fork
did not find execvp demangled to execvp
did not find _exit demangled to _exit
did not find wait demangled to wait
did not find printf demangled to printf
did not find fflush demangled to fflush
did not find getchar demangled to getchar
Add filter function main
FunctionInfo. Adding function:main
did not find index demangled to index
did not find strcpy demangled to strcpy
did not find sprintf demangled to sprintf
did not find rindex demangled to rindex
did not find strcmp demangled to strcmp
did not find strcat demangled to strcat
did not find strlen demangled to strlen
Add filter function usage
FunctionInfo. Adding function:usage
did not find strncmp demangled to strncmp
did not find access demangled to access
Add filter function initckch
FunctionInfo. Adding function:initckch
Add filter function expandmode
FunctionInfo. Adding function:expandmode
did not find setbuf demangled to setbuf
Add filter function dofile
FunctionInfo. Adding function:dofile
did not find fopen demangled to fopen
did not find sleep demangled to sleep
did not find fileno demangled to fileno
did not find fstat demangled to fstat
did not find mktemp demangled to mktemp
did not find chmod demangled to chmod
did not find fclose demangled to fclose
Add filter function update_file
FunctionInfo. Adding function:update_file
did not find link demangled to link
did not find _IO_getc demangled to _IO_getc
did not find _IO_putc demangled to _IO_putc
did not find fputs demangled to fputs
did not find llvm.memset.p0i8.i64 demangled to llvm.memset.p0i8.i64
did not find putchar demangled to putchar
did not find __ctype_b_loc demangled to __ctype_b_loc
Add filter function givehelp
FunctionInfo. Adding function:givehelp
Add filter function checkfile
FunctionInfo. Adding function:checkfile
did not find fgets demangled to fgets
Add filter function correct
FunctionInfo. Adding function:correct
Add filter function compoundgood
FunctionInfo. Adding function:compoundgood
Add filter function makepossibilities
FunctionInfo. Adding function:makepossibilities
Add filter function show_line
FunctionInfo. Adding function:show_line
Add filter function line_size
FunctionInfo. Adding function:line_size
Add filter function my_getline
FunctionInfo. Adding function:my_getline
Add filter function inserttoken
FunctionInfo. Adding function:inserttoken
Add filter function lookharder
FunctionInfo. Adding function:lookharder
Add filter function show_char
FunctionInfo. Adding function:show_char
Add filter function wrongcapital
FunctionInfo. Adding function:wrongcapital
Add filter function missingletter
FunctionInfo. Adding function:missingletter
Add filter function transposedletter
FunctionInfo. Adding function:transposedletter
Add filter function extraletter
FunctionInfo. Adding function:extraletter
Add filter function wrongletter
FunctionInfo. Adding function:wrongletter
Add filter function missingspace
FunctionInfo. Adding function:missingspace
Add filter function tryveryhard
FunctionInfo. Adding function:tryveryhard
Add filter function posscmp
FunctionInfo. Adding function:posscmp
did not find qsort demangled to qsort
Add filter function casecmp
FunctionInfo. Adding function:casecmp
Add filter function save_cap
FunctionInfo. Adding function:save_cap
Add filter function insert
FunctionInfo. Adding function:insert
Add filter function save_root_cap
FunctionInfo. Adding function:save_root_cap
did not find bcopy demangled to bcopy
Add filter function ins_cap
FunctionInfo. Adding function:ins_cap
Add filter function ins_root_cap
FunctionInfo. Adding function:ins_root_cap
Add filter function askmode
FunctionInfo. Adding function:askmode
did not find freopen demangled to freopen
did not find rewind demangled to rewind
did not find creat demangled to creat
Add filter function copyout
FunctionInfo. Adding function:copyout
Add filter function skipoverword
FunctionInfo. Adding function:skipoverword
Add filter function checkline
FunctionInfo. Adding function:checkline
Add filter function skiptoword
FunctionInfo. Adding function:skiptoword
Add filter function TeX_math_check
FunctionInfo. Adding function:TeX_math_check
Add filter function TeX_LR_check
FunctionInfo. Adding function:TeX_LR_check
Add filter function TeX_math_end
FunctionInfo. Adding function:TeX_math_end
Add filter function TeX_strncmp
FunctionInfo. Adding function:TeX_strncmp
Add filter function TeX_skip_parens
FunctionInfo. Adding function:TeX_skip_parens
Add filter function TeX_math_begin
FunctionInfo. Adding function:TeX_math_begin
Add filter function TeX_skip_check
FunctionInfo. Adding function:TeX_skip_check
Add filter function TeX_LR_begin
FunctionInfo. Adding function:TeX_LR_begin
Add filter function TeX_open_paren
FunctionInfo. Adding function:TeX_open_paren
Add filter function TeX_skip_args
FunctionInfo. Adding function:TeX_skip_args
Add filter function dumpmode
FunctionInfo. Adding function:dumpmode
Add filter function tbldump
FunctionInfo. Adding function:tbldump
Add filter function entdump
FunctionInfo. Adding function:entdump
Add filter function setdump
FunctionInfo. Adding function:setdump
Add filter function subsetdump
FunctionInfo. Adding function:subsetdump
Add filter function good
FunctionInfo. Adding function:good
Add filter function cap_ok
FunctionInfo. Adding function:cap_ok
Add filter function entryhasaffixes
FunctionInfo. Adding function:entryhasaffixes
Add filter function flagpr
FunctionInfo. Adding function:flagpr
Add filter function linit
FunctionInfo. Adding function:linit
did not find open demangled to open
did not find read demangled to read
did not find calloc demangled to calloc
did not find malloc demangled to malloc
did not find lseek demangled to lseek
did not find close demangled to close
Add filter function lookup
FunctionInfo. Adding function:lookup
Add filter function hash
FunctionInfo. Adding function:hash
Add filter function makedent
FunctionInfo. Adding function:makedent
Add filter function strtoichar
FunctionInfo. Adding function:strtoichar
Add filter function ichartostr
FunctionInfo. Adding function:ichartostr
Add filter function whatcap
FunctionInfo. Adding function:whatcap
Add filter function chupcase
FunctionInfo. Adding function:chupcase
Add filter function strtosichar
FunctionInfo. Adding function:strtosichar
Add filter function upcase
FunctionInfo. Adding function:upcase
Add filter function stringcharlen
FunctionInfo. Adding function:stringcharlen
Add filter function addvheader
FunctionInfo. Adding function:addvheader
Add filter function combinecaps
FunctionInfo. Adding function:combinecaps
Add filter function combine_two_entries
FunctionInfo. Adding function:combine_two_entries
Add filter function forcevheader
FunctionInfo. Adding function:forcevheader
Add filter function combineaffixes
FunctionInfo. Adding function:combineaffixes
Add filter function acoversb
FunctionInfo. Adding function:acoversb
Add filter function issubset
FunctionInfo. Adding function:issubset
Add filter function lowcase
FunctionInfo. Adding function:lowcase
Add filter function toutent
FunctionInfo. Adding function:toutent
Add filter function ichartosstr
FunctionInfo. Adding function:ichartosstr
Add filter function toutword
FunctionInfo. Adding function:toutword
Add filter function flagout
FunctionInfo. Adding function:flagout
Add filter function printichar
FunctionInfo. Adding function:printichar
Add filter function findfiletype
FunctionInfo. Adding function:findfiletype
Add filter function chk_aff
FunctionInfo. Adding function:chk_aff
Add filter function pfx_list_chk
FunctionInfo. Adding function:pfx_list_chk
Add filter function chk_suf
FunctionInfo. Adding function:chk_suf
Add filter function suf_list_chk
FunctionInfo. Adding function:suf_list_chk
Add filter function expand_pre
FunctionInfo. Adding function:expand_pre
Add filter function pr_pre_expansion
FunctionInfo. Adding function:pr_pre_expansion
Add filter function forcelc
FunctionInfo. Adding function:forcelc
Add filter function expand_suf
FunctionInfo. Adding function:expand_suf
Add filter function pr_suf_expansion
FunctionInfo. Adding function:pr_suf_expansion
Add filter function treeinit
FunctionInfo. Adding function:treeinit
Add filter function trydict
FunctionInfo. Adding function:trydict
Add filter function treeload
FunctionInfo. Adding function:treeload
did not find perror demangled to perror
did not find __errno_location demangled to __errno_location
Add filter function treeinsert
FunctionInfo. Adding function:treeinsert
Add filter function tinsert
FunctionInfo. Adding function:tinsert
did not find free demangled to free
Add filter function treelookup
FunctionInfo. Adding function:treelookup
Add filter function treeoutput
FunctionInfo. Adding function:treeoutput
Add filter function pdictcmp
FunctionInfo. Adding function:pdictcmp
Add filter function mymalloc
FunctionInfo. Adding function:mymalloc
Add filter function myfree
FunctionInfo. Adding function:myfree
Add filter function xgets
FunctionInfo. Adding function:xgets
Add filter function terminit0
FunctionInfo. Adding function:terminit0
Add filter function terminit1
FunctionInfo. Adding function:terminit1
Add filter function terminit2
FunctionInfo. Adding function:terminit2
Add filter function terminit3
FunctionInfo. Adding function:terminit3
Add filter function terminit4
FunctionInfo. Adding function:terminit4
Add filter function terminit5
FunctionInfo. Adding function:terminit5
Add filter function onstop0
FunctionInfo. Adding function:onstop0
Add filter function shellescape0
FunctionInfo. Adding function:shellescape0
Add filter function shellescape1
FunctionInfo. Adding function:shellescape1
Add filter function shellescape2
FunctionInfo. Adding function:shellescape2
Add filter function shellescape3
FunctionInfo. Adding function:shellescape3
Add filter function shellescape4
FunctionInfo. Adding function:shellescape4
Add filter function shellescape5
FunctionInfo. Adding function:shellescape5
Add filter function main0
FunctionInfo. Adding function:main0
Add filter function main1
FunctionInfo. Adding function:main1
Add filter function main2
FunctionInfo. Adding function:main2
Add filter function main3
FunctionInfo. Adding function:main3
Add filter function main4
FunctionInfo. Adding function:main4
Add filter function main5
FunctionInfo. Adding function:main5
Add filter function main6
FunctionInfo. Adding function:main6
Add filter function main7
FunctionInfo. Adding function:main7
Add filter function main8
FunctionInfo. Adding function:main8
Add filter function main9
FunctionInfo. Adding function:main9
Add filter function main10
FunctionInfo. Adding function:main10
Add filter function main11
FunctionInfo. Adding function:main11
Add filter function main12
FunctionInfo. Adding function:main12
Add filter function main13
FunctionInfo. Adding function:main13
Add filter function main14
FunctionInfo. Adding function:main14
Add filter function main15
FunctionInfo. Adding function:main15
Add filter function main16
FunctionInfo. Adding function:main16
Add filter function main17
FunctionInfo. Adding function:main17
Add filter function main18
FunctionInfo. Adding function:main18
Add filter function main19
FunctionInfo. Adding function:main19
Add filter function main20
FunctionInfo. Adding function:main20
Add filter function main21
FunctionInfo. Adding function:main21
Add filter function main22
FunctionInfo. Adding function:main22
Add filter function main23
FunctionInfo. Adding function:main23
Add filter function main24
FunctionInfo. Adding function:main24
Add filter function main25
FunctionInfo. Adding function:main25
Add filter function main26
FunctionInfo. Adding function:main26
Add filter function main27
FunctionInfo. Adding function:main27
Add filter function main28
FunctionInfo. Adding function:main28
Add filter function main29
FunctionInfo. Adding function:main29
Add filter function main30
FunctionInfo. Adding function:main30
Add filter function main31
FunctionInfo. Adding function:main31
Add filter function main32
FunctionInfo. Adding function:main32
Add filter function main33
FunctionInfo. Adding function:main33
Add filter function main34
FunctionInfo. Adding function:main34
Add filter function main35
FunctionInfo. Adding function:main35
Add filter function main36
FunctionInfo. Adding function:main36
Add filter function main37
FunctionInfo. Adding function:main37
Add filter function main38
FunctionInfo. Adding function:main38
Add filter function main39
FunctionInfo. Adding function:main39
Add filter function main40
FunctionInfo. Adding function:main40
Add filter function main41
FunctionInfo. Adding function:main41
Add filter function main42
FunctionInfo. Adding function:main42
Add filter function main43
FunctionInfo. Adding function:main43
Add filter function usage0
FunctionInfo. Adding function:usage0
Add filter function initckch0
FunctionInfo. Adding function:initckch0
Add filter function initckch1
FunctionInfo. Adding function:initckch1
Add filter function initckch2
FunctionInfo. Adding function:initckch2
Add filter function expandmode0
FunctionInfo. Adding function:expandmode0
Add filter function expandmode1
FunctionInfo. Adding function:expandmode1
Add filter function dofile0
FunctionInfo. Adding function:dofile0
Add filter function dofile1
FunctionInfo. Adding function:dofile1
Add filter function dofile2
FunctionInfo. Adding function:dofile2
Add filter function dofile3
FunctionInfo. Adding function:dofile3
Add filter function update_file0
FunctionInfo. Adding function:update_file0
Add filter function update_file1
FunctionInfo. Adding function:update_file1
Add filter function update_file2
FunctionInfo. Adding function:update_file2
Add filter function update_file3
FunctionInfo. Adding function:update_file3
Add filter function update_file4
FunctionInfo. Adding function:update_file4
Add filter function update_file5
FunctionInfo. Adding function:update_file5
Add filter function givehelp0
FunctionInfo. Adding function:givehelp0
Add filter function givehelp1
FunctionInfo. Adding function:givehelp1
Add filter function givehelp2
FunctionInfo. Adding function:givehelp2
Add filter function checkfile0
FunctionInfo. Adding function:checkfile0
Add filter function checkfile1
FunctionInfo. Adding function:checkfile1
Add filter function checkfile2
FunctionInfo. Adding function:checkfile2
Add filter function checkfile3
FunctionInfo. Adding function:checkfile3
Add filter function checkfile4
FunctionInfo. Adding function:checkfile4
Add filter function checkfile5
FunctionInfo. Adding function:checkfile5
Add filter function checkfile6
FunctionInfo. Adding function:checkfile6
Add filter function checkfile7
FunctionInfo. Adding function:checkfile7
Add filter function correct0
FunctionInfo. Adding function:correct0
Add filter function correct1
FunctionInfo. Adding function:correct1
Add filter function correct2
FunctionInfo. Adding function:correct2
Add filter function correct3
FunctionInfo. Adding function:correct3
Add filter function correct4
FunctionInfo. Adding function:correct4
Add filter function correct5
FunctionInfo. Adding function:correct5
Add filter function correct6
FunctionInfo. Adding function:correct6
Add filter function correct7
FunctionInfo. Adding function:correct7
Add filter function correct8
FunctionInfo. Adding function:correct8
Add filter function correct9
FunctionInfo. Adding function:correct9
Add filter function correct10
FunctionInfo. Adding function:correct10
Add filter function correct11
FunctionInfo. Adding function:correct11
Add filter function correct12
FunctionInfo. Adding function:correct12
Add filter function correct13
FunctionInfo. Adding function:correct13
Add filter function correct14
FunctionInfo. Adding function:correct14
Add filter function correct15
FunctionInfo. Adding function:correct15
Add filter function correct16
FunctionInfo. Adding function:correct16
Add filter function correct17
FunctionInfo. Adding function:correct17
Add filter function correct18
FunctionInfo. Adding function:correct18
Add filter function correct19
FunctionInfo. Adding function:correct19
Add filter function correct20
FunctionInfo. Adding function:correct20
Add filter function correct21
FunctionInfo. Adding function:correct21
Add filter function correct22
FunctionInfo. Adding function:correct22
Add filter function correct23
FunctionInfo. Adding function:correct23
Add filter function correct24
FunctionInfo. Adding function:correct24
Add filter function correct25
FunctionInfo. Adding function:correct25
Add filter function correct26
FunctionInfo. Adding function:correct26
Add filter function compoundgood0
FunctionInfo. Adding function:compoundgood0
Add filter function compoundgood1
FunctionInfo. Adding function:compoundgood1
Add filter function compoundgood2
FunctionInfo. Adding function:compoundgood2
Add filter function compoundgood3
FunctionInfo. Adding function:compoundgood3
Add filter function makepossibilities0
FunctionInfo. Adding function:makepossibilities0
Add filter function makepossibilities1
FunctionInfo. Adding function:makepossibilities1
Add filter function makepossibilities2
FunctionInfo. Adding function:makepossibilities2
Add filter function makepossibilities3
FunctionInfo. Adding function:makepossibilities3
Add filter function makepossibilities4
FunctionInfo. Adding function:makepossibilities4
Add filter function makepossibilities5
FunctionInfo. Adding function:makepossibilities5
Add filter function makepossibilities6
FunctionInfo. Adding function:makepossibilities6
Add filter function makepossibilities7
FunctionInfo. Adding function:makepossibilities7
Add filter function makepossibilities8
FunctionInfo. Adding function:makepossibilities8
Add filter function show_line0
FunctionInfo. Adding function:show_line0
Add filter function show_line1
FunctionInfo. Adding function:show_line1
Add filter function show_line2
FunctionInfo. Adding function:show_line2
Add filter function show_line3
FunctionInfo. Adding function:show_line3
Add filter function line_size0
FunctionInfo. Adding function:line_size0
Add filter function my_getline0
FunctionInfo. Adding function:my_getline0
Add filter function my_getline1
FunctionInfo. Adding function:my_getline1
Add filter function my_getline2
FunctionInfo. Adding function:my_getline2
Add filter function my_getline3
FunctionInfo. Adding function:my_getline3
Add filter function my_getline4
FunctionInfo. Adding function:my_getline4
Add filter function my_getline5
FunctionInfo. Adding function:my_getline5
Add filter function my_getline6
FunctionInfo. Adding function:my_getline6
Add filter function inserttoken0
FunctionInfo. Adding function:inserttoken0
Add filter function inserttoken1
FunctionInfo. Adding function:inserttoken1
Add filter function inserttoken2
FunctionInfo. Adding function:inserttoken2
Add filter function inserttoken3
FunctionInfo. Adding function:inserttoken3
Add filter function inserttoken4
FunctionInfo. Adding function:inserttoken4
Add filter function inserttoken5
FunctionInfo. Adding function:inserttoken5
Add filter function inserttoken6
FunctionInfo. Adding function:inserttoken6
Add filter function lookharder0
FunctionInfo. Adding function:lookharder0
Add filter function lookharder1
FunctionInfo. Adding function:lookharder1
Add filter function lookharder2
FunctionInfo. Adding function:lookharder2
Add filter function show_char0
FunctionInfo. Adding function:show_char0
Add filter function show_char1
FunctionInfo. Adding function:show_char1
Add filter function show_char2
FunctionInfo. Adding function:show_char2
Add filter function show_char3
FunctionInfo. Adding function:show_char3
Add filter function show_char4
FunctionInfo. Adding function:show_char4
Add filter function show_char5
FunctionInfo. Adding function:show_char5
Add filter function show_char6
FunctionInfo. Adding function:show_char6
Add filter function show_char7
FunctionInfo. Adding function:show_char7
Add filter function show_char8
FunctionInfo. Adding function:show_char8
Add filter function show_char9
FunctionInfo. Adding function:show_char9
Add filter function show_char10
FunctionInfo. Adding function:show_char10
Add filter function show_char11
FunctionInfo. Adding function:show_char11
Add filter function show_char12
FunctionInfo. Adding function:show_char12
Add filter function show_char13
FunctionInfo. Adding function:show_char13
Add filter function show_char14
FunctionInfo. Adding function:show_char14
Add filter function missingletter0
FunctionInfo. Adding function:missingletter0
Add filter function missingletter1
FunctionInfo. Adding function:missingletter1
Add filter function missingletter2
FunctionInfo. Adding function:missingletter2
Add filter function transposedletter0
FunctionInfo. Adding function:transposedletter0
Add filter function transposedletter1
FunctionInfo. Adding function:transposedletter1
Add filter function extraletter0
FunctionInfo. Adding function:extraletter0
Add filter function wrongletter0
FunctionInfo. Adding function:wrongletter0
Add filter function wrongletter1
FunctionInfo. Adding function:wrongletter1
Add filter function missingspace0
FunctionInfo. Adding function:missingspace0
Add filter function missingspace1
FunctionInfo. Adding function:missingspace1
Add filter function missingspace2
FunctionInfo. Adding function:missingspace2
Add filter function tryveryhard0
FunctionInfo. Adding function:tryveryhard0
Add filter function casecmp0
FunctionInfo. Adding function:casecmp0
Add filter function casecmp1
FunctionInfo. Adding function:casecmp1
Add filter function casecmp2
FunctionInfo. Adding function:casecmp2
Add filter function casecmp3
FunctionInfo. Adding function:casecmp3
Add filter function casecmp4
FunctionInfo. Adding function:casecmp4
Add filter function casecmp5
FunctionInfo. Adding function:casecmp5
Add filter function casecmp6
FunctionInfo. Adding function:casecmp6
Add filter function save_cap0
FunctionInfo. Adding function:save_cap0
Add filter function save_cap1
FunctionInfo. Adding function:save_cap1
Add filter function save_cap2
FunctionInfo. Adding function:save_cap2
Add filter function save_cap3
FunctionInfo. Adding function:save_cap3
Add filter function save_cap4
FunctionInfo. Adding function:save_cap4
Add filter function insert0
FunctionInfo. Adding function:insert0
Add filter function insert1
FunctionInfo. Adding function:insert1
Add filter function insert2
FunctionInfo. Adding function:insert2
Add filter function save_root_cap0
FunctionInfo. Adding function:save_root_cap0
Add filter function save_root_cap1
FunctionInfo. Adding function:save_root_cap1
Add filter function save_root_cap2
FunctionInfo. Adding function:save_root_cap2
Add filter function save_root_cap3
FunctionInfo. Adding function:save_root_cap3
Add filter function save_root_cap4
FunctionInfo. Adding function:save_root_cap4
Add filter function save_root_cap5
FunctionInfo. Adding function:save_root_cap5
Add filter function save_root_cap6
FunctionInfo. Adding function:save_root_cap6
Add filter function save_root_cap7
FunctionInfo. Adding function:save_root_cap7
Add filter function save_root_cap8
FunctionInfo. Adding function:save_root_cap8
Add filter function save_root_cap9
FunctionInfo. Adding function:save_root_cap9
Add filter function save_root_cap10
FunctionInfo. Adding function:save_root_cap10
Add filter function save_root_cap11
FunctionInfo. Adding function:save_root_cap11
Add filter function ins_cap0
FunctionInfo. Adding function:ins_cap0
Add filter function ins_root_cap0
FunctionInfo. Adding function:ins_root_cap0
Add filter function askmode0
FunctionInfo. Adding function:askmode0
Add filter function askmode1
FunctionInfo. Adding function:askmode1
Add filter function askmode2
FunctionInfo. Adding function:askmode2
Add filter function askmode3
FunctionInfo. Adding function:askmode3
Add filter function askmode4
FunctionInfo. Adding function:askmode4
Add filter function askmode5
FunctionInfo. Adding function:askmode5
Add filter function askmode6
FunctionInfo. Adding function:askmode6
Add filter function askmode7
FunctionInfo. Adding function:askmode7
Add filter function askmode8
FunctionInfo. Adding function:askmode8
Add filter function askmode9
FunctionInfo. Adding function:askmode9
Add filter function askmode10
FunctionInfo. Adding function:askmode10
Add filter function copyout0
FunctionInfo. Adding function:copyout0
Add filter function copyout1
FunctionInfo. Adding function:copyout1
Add filter function skipoverword0
FunctionInfo. Adding function:skipoverword0
Add filter function skipoverword1
FunctionInfo. Adding function:skipoverword1
Add filter function skipoverword2
FunctionInfo. Adding function:skipoverword2
Add filter function skipoverword3
FunctionInfo. Adding function:skipoverword3
Add filter function skipoverword4
FunctionInfo. Adding function:skipoverword4
Add filter function checkline0
FunctionInfo. Adding function:checkline0
Add filter function checkline1
FunctionInfo. Adding function:checkline1
Add filter function checkline2
FunctionInfo. Adding function:checkline2
Add filter function checkline3
FunctionInfo. Adding function:checkline3
Add filter function checkline4
FunctionInfo. Adding function:checkline4
Add filter function checkline5
FunctionInfo. Adding function:checkline5
Add filter function checkline6
FunctionInfo. Adding function:checkline6
Add filter function checkline7
FunctionInfo. Adding function:checkline7
Add filter function checkline8
FunctionInfo. Adding function:checkline8
Add filter function checkline9
FunctionInfo. Adding function:checkline9
Add filter function checkline10
FunctionInfo. Adding function:checkline10
Add filter function checkline11
FunctionInfo. Adding function:checkline11
Add filter function checkline12
FunctionInfo. Adding function:checkline12
Add filter function checkline13
FunctionInfo. Adding function:checkline13
Add filter function checkline14
FunctionInfo. Adding function:checkline14
Add filter function checkline15
FunctionInfo. Adding function:checkline15
Add filter function checkline16
FunctionInfo. Adding function:checkline16
Add filter function checkline17
FunctionInfo. Adding function:checkline17
Add filter function checkline18
FunctionInfo. Adding function:checkline18
Add filter function checkline19
FunctionInfo. Adding function:checkline19
Add filter function checkline20
FunctionInfo. Adding function:checkline20
Add filter function skiptoword0
FunctionInfo. Adding function:skiptoword0
Add filter function skiptoword1
FunctionInfo. Adding function:skiptoword1
Add filter function skiptoword2
FunctionInfo. Adding function:skiptoword2
Add filter function skiptoword3
FunctionInfo. Adding function:skiptoword3
Add filter function skiptoword4
FunctionInfo. Adding function:skiptoword4
Add filter function skiptoword5
FunctionInfo. Adding function:skiptoword5
Add filter function skiptoword6
FunctionInfo. Adding function:skiptoword6
Add filter function skiptoword7
FunctionInfo. Adding function:skiptoword7
Add filter function skiptoword8
FunctionInfo. Adding function:skiptoword8
Add filter function skiptoword9
FunctionInfo. Adding function:skiptoword9
Add filter function skiptoword10
FunctionInfo. Adding function:skiptoword10
Add filter function skiptoword11
FunctionInfo. Adding function:skiptoword11
Add filter function skiptoword12
FunctionInfo. Adding function:skiptoword12
Add filter function skiptoword13
FunctionInfo. Adding function:skiptoword13
Add filter function skiptoword14
FunctionInfo. Adding function:skiptoword14
Add filter function skiptoword15
FunctionInfo. Adding function:skiptoword15
Add filter function skiptoword16
FunctionInfo. Adding function:skiptoword16
Add filter function skiptoword17
FunctionInfo. Adding function:skiptoword17
Add filter function skiptoword18
FunctionInfo. Adding function:skiptoword18
Add filter function skiptoword19
FunctionInfo. Adding function:skiptoword19
Add filter function TeX_math_check0
FunctionInfo. Adding function:TeX_math_check0
Add filter function TeX_math_check1
FunctionInfo. Adding function:TeX_math_check1
Add filter function TeX_math_check2
FunctionInfo. Adding function:TeX_math_check2
Add filter function TeX_math_check3
FunctionInfo. Adding function:TeX_math_check3
Add filter function TeX_LR_check0
FunctionInfo. Adding function:TeX_LR_check0
Add filter function TeX_LR_check1
FunctionInfo. Adding function:TeX_LR_check1
Add filter function TeX_LR_check2
FunctionInfo. Adding function:TeX_LR_check2
Add filter function TeX_LR_check3
FunctionInfo. Adding function:TeX_LR_check3
Add filter function TeX_LR_check4
FunctionInfo. Adding function:TeX_LR_check4
Add filter function TeX_math_end0
FunctionInfo. Adding function:TeX_math_end0
Add filter function TeX_math_end1
FunctionInfo. Adding function:TeX_math_end1
Add filter function TeX_math_end2
FunctionInfo. Adding function:TeX_math_end2
Add filter function TeX_strncmp0
FunctionInfo. Adding function:TeX_strncmp0
Add filter function TeX_skip_parens0
FunctionInfo. Adding function:TeX_skip_parens0
Add filter function TeX_math_begin0
FunctionInfo. Adding function:TeX_math_begin0
Add filter function TeX_math_begin1
FunctionInfo. Adding function:TeX_math_begin1
Add filter function TeX_math_begin2
FunctionInfo. Adding function:TeX_math_begin2
Add filter function TeX_math_begin3
FunctionInfo. Adding function:TeX_math_begin3
Add filter function TeX_math_begin4
FunctionInfo. Adding function:TeX_math_begin4
Add filter function TeX_skip_check0
FunctionInfo. Adding function:TeX_skip_check0
Add filter function TeX_skip_check1
FunctionInfo. Adding function:TeX_skip_check1
Add filter function TeX_skip_check2
FunctionInfo. Adding function:TeX_skip_check2
Add filter function TeX_skip_check3
FunctionInfo. Adding function:TeX_skip_check3
Add filter function TeX_LR_begin0
FunctionInfo. Adding function:TeX_LR_begin0
Add filter function TeX_LR_begin1
FunctionInfo. Adding function:TeX_LR_begin1
Add filter function TeX_LR_begin2
FunctionInfo. Adding function:TeX_LR_begin2
Add filter function TeX_open_paren0
FunctionInfo. Adding function:TeX_open_paren0
Add filter function TeX_skip_args0
FunctionInfo. Adding function:TeX_skip_args0
Add filter function TeX_skip_args1
FunctionInfo. Adding function:TeX_skip_args1
Add filter function TeX_skip_args2
FunctionInfo. Adding function:TeX_skip_args2
Add filter function TeX_skip_args3
FunctionInfo. Adding function:TeX_skip_args3
Add filter function dumpmode0
FunctionInfo. Adding function:dumpmode0
Add filter function dumpmode1
FunctionInfo. Adding function:dumpmode1
Add filter function dumpmode2
FunctionInfo. Adding function:dumpmode2
Add filter function dumpmode3
FunctionInfo. Adding function:dumpmode3
Add filter function dumpmode4
FunctionInfo. Adding function:dumpmode4
Add filter function tbldump0
FunctionInfo. Adding function:tbldump0
Add filter function entdump0
FunctionInfo. Adding function:entdump0
Add filter function entdump1
FunctionInfo. Adding function:entdump1
Add filter function entdump2
FunctionInfo. Adding function:entdump2
Add filter function entdump3
FunctionInfo. Adding function:entdump3
Add filter function entdump4
FunctionInfo. Adding function:entdump4
Add filter function setdump0
FunctionInfo. Adding function:setdump0
Add filter function setdump1
FunctionInfo. Adding function:setdump1
Add filter function setdump2
FunctionInfo. Adding function:setdump2
Add filter function setdump3
FunctionInfo. Adding function:setdump3
Add filter function setdump4
FunctionInfo. Adding function:setdump4
Add filter function subsetdump0
FunctionInfo. Adding function:subsetdump0
Add filter function subsetdump1
FunctionInfo. Adding function:subsetdump1
Add filter function subsetdump2
FunctionInfo. Adding function:subsetdump2
Add filter function subsetdump3
FunctionInfo. Adding function:subsetdump3
Add filter function subsetdump4
FunctionInfo. Adding function:subsetdump4
Add filter function subsetdump5
FunctionInfo. Adding function:subsetdump5
Add filter function good0
FunctionInfo. Adding function:good0
Add filter function good1
FunctionInfo. Adding function:good1
Add filter function good2
FunctionInfo. Adding function:good2
Add filter function good3
FunctionInfo. Adding function:good3
Add filter function good4
FunctionInfo. Adding function:good4
Add filter function cap_ok0
FunctionInfo. Adding function:cap_ok0
Add filter function cap_ok1
FunctionInfo. Adding function:cap_ok1
Add filter function cap_ok2
FunctionInfo. Adding function:cap_ok2
Add filter function cap_ok3
FunctionInfo. Adding function:cap_ok3
Add filter function cap_ok4
FunctionInfo. Adding function:cap_ok4
Add filter function cap_ok5
FunctionInfo. Adding function:cap_ok5
Add filter function cap_ok6
FunctionInfo. Adding function:cap_ok6
Add filter function cap_ok7
FunctionInfo. Adding function:cap_ok7
Add filter function cap_ok8
FunctionInfo. Adding function:cap_ok8
Add filter function cap_ok9
FunctionInfo. Adding function:cap_ok9
Add filter function cap_ok10
FunctionInfo. Adding function:cap_ok10
Add filter function flagpr0
FunctionInfo. Adding function:flagpr0
Add filter function flagpr1
FunctionInfo. Adding function:flagpr1
Add filter function flagpr2
FunctionInfo. Adding function:flagpr2
Add filter function flagpr3
FunctionInfo. Adding function:flagpr3
Add filter function flagpr4
FunctionInfo. Adding function:flagpr4
Add filter function flagpr5
FunctionInfo. Adding function:flagpr5
Add filter function flagpr6
FunctionInfo. Adding function:flagpr6
Add filter function flagpr7
FunctionInfo. Adding function:flagpr7
Add filter function flagpr8
FunctionInfo. Adding function:flagpr8
Add filter function flagpr9
FunctionInfo. Adding function:flagpr9
Add filter function flagpr10
FunctionInfo. Adding function:flagpr10
Add filter function flagpr11
FunctionInfo. Adding function:flagpr11
Add filter function flagpr12
FunctionInfo. Adding function:flagpr12
Add filter function flagpr13
FunctionInfo. Adding function:flagpr13
Add filter function flagpr14
FunctionInfo. Adding function:flagpr14
Add filter function flagpr15
FunctionInfo. Adding function:flagpr15
Add filter function flagpr16
FunctionInfo. Adding function:flagpr16
Add filter function linit0
FunctionInfo. Adding function:linit0
Add filter function linit1
FunctionInfo. Adding function:linit1
Add filter function linit2
FunctionInfo. Adding function:linit2
Add filter function linit3
FunctionInfo. Adding function:linit3
Add filter function linit4
FunctionInfo. Adding function:linit4
Add filter function linit5
FunctionInfo. Adding function:linit5
Add filter function linit6
FunctionInfo. Adding function:linit6
Add filter function linit7
FunctionInfo. Adding function:linit7
Add filter function linit8
FunctionInfo. Adding function:linit8
Add filter function linit9
FunctionInfo. Adding function:linit9
Add filter function linit10
FunctionInfo. Adding function:linit10
Add filter function linit11
FunctionInfo. Adding function:linit11
Add filter function linit12
FunctionInfo. Adding function:linit12
Add filter function linit13
FunctionInfo. Adding function:linit13
Add filter function linit14
FunctionInfo. Adding function:linit14
Add filter function linit15
FunctionInfo. Adding function:linit15
Add filter function linit16
FunctionInfo. Adding function:linit16
Add filter function linit17
FunctionInfo. Adding function:linit17
Add filter function linit18
FunctionInfo. Adding function:linit18
Add filter function linit19
FunctionInfo. Adding function:linit19
Add filter function linit20
FunctionInfo. Adding function:linit20
Add filter function linit21
FunctionInfo. Adding function:linit21
Add filter function linit22
FunctionInfo. Adding function:linit22
Add filter function linit23
FunctionInfo. Adding function:linit23
Add filter function linit24
FunctionInfo. Adding function:linit24
Add filter function linit25
FunctionInfo. Adding function:linit25
Add filter function linit26
FunctionInfo. Adding function:linit26
Add filter function linit27
FunctionInfo. Adding function:linit27
Add filter function linit28
FunctionInfo. Adding function:linit28
Add filter function linit29
FunctionInfo. Adding function:linit29
Add filter function linit30
FunctionInfo. Adding function:linit30
Add filter function linit31
FunctionInfo. Adding function:linit31
Add filter function linit32
FunctionInfo. Adding function:linit32
Add filter function linit33
FunctionInfo. Adding function:linit33
Add filter function linit34
FunctionInfo. Adding function:linit34
Add filter function linit35
FunctionInfo. Adding function:linit35
Add filter function linit36
FunctionInfo. Adding function:linit36
Add filter function linit37
FunctionInfo. Adding function:linit37
Add filter function linit38
FunctionInfo. Adding function:linit38
Add filter function linit39
FunctionInfo. Adding function:linit39
Add filter function linit40
FunctionInfo. Adding function:linit40
Add filter function linit41
FunctionInfo. Adding function:linit41
Add filter function linit42
FunctionInfo. Adding function:linit42
Add filter function linit43
FunctionInfo. Adding function:linit43
Add filter function linit44
FunctionInfo. Adding function:linit44
Add filter function linit45
FunctionInfo. Adding function:linit45
Add filter function linit46
FunctionInfo. Adding function:linit46
Add filter function linit47
FunctionInfo. Adding function:linit47
Add filter function linit48
FunctionInfo. Adding function:linit48
Add filter function linit49
FunctionInfo. Adding function:linit49
Add filter function lookup0
FunctionInfo. Adding function:lookup0
Add filter function lookup1
FunctionInfo. Adding function:lookup1
Add filter function lookup2
FunctionInfo. Adding function:lookup2
Add filter function lookup3
FunctionInfo. Adding function:lookup3
Add filter function hash0
FunctionInfo. Adding function:hash0
Add filter function hash1
FunctionInfo. Adding function:hash1
Add filter function makedent0
FunctionInfo. Adding function:makedent0
Add filter function makedent1
FunctionInfo. Adding function:makedent1
Add filter function makedent2
FunctionInfo. Adding function:makedent2
Add filter function makedent3
FunctionInfo. Adding function:makedent3
Add filter function makedent4
FunctionInfo. Adding function:makedent4
Add filter function makedent5
FunctionInfo. Adding function:makedent5
Add filter function makedent6
FunctionInfo. Adding function:makedent6
Add filter function makedent7
FunctionInfo. Adding function:makedent7
Add filter function makedent8
FunctionInfo. Adding function:makedent8
Add filter function makedent9
FunctionInfo. Adding function:makedent9
Add filter function makedent10
FunctionInfo. Adding function:makedent10
Add filter function strtoichar0
FunctionInfo. Adding function:strtoichar0
Add filter function strtoichar1
FunctionInfo. Adding function:strtoichar1
Add filter function strtoichar2
FunctionInfo. Adding function:strtoichar2
Add filter function strtoichar3
FunctionInfo. Adding function:strtoichar3
Add filter function ichartostr0
FunctionInfo. Adding function:ichartostr0
Add filter function ichartostr1
FunctionInfo. Adding function:ichartostr1
Add filter function ichartostr2
FunctionInfo. Adding function:ichartostr2
Add filter function ichartostr3
FunctionInfo. Adding function:ichartostr3
Add filter function ichartostr4
FunctionInfo. Adding function:ichartostr4
Add filter function whatcap0
FunctionInfo. Adding function:whatcap0
Add filter function whatcap1
FunctionInfo. Adding function:whatcap1
Add filter function whatcap2
FunctionInfo. Adding function:whatcap2
Add filter function whatcap3
FunctionInfo. Adding function:whatcap3
Add filter function whatcap4
FunctionInfo. Adding function:whatcap4
Add filter function chupcase0
FunctionInfo. Adding function:chupcase0
Add filter function strtosichar0
FunctionInfo. Adding function:strtosichar0
Add filter function upcase0
FunctionInfo. Adding function:upcase0
Add filter function stringcharlen0
FunctionInfo. Adding function:stringcharlen0
Add filter function stringcharlen1
FunctionInfo. Adding function:stringcharlen1
Add filter function stringcharlen2
FunctionInfo. Adding function:stringcharlen2
Add filter function stringcharlen3
FunctionInfo. Adding function:stringcharlen3
Add filter function stringcharlen4
FunctionInfo. Adding function:stringcharlen4
Add filter function stringcharlen5
FunctionInfo. Adding function:stringcharlen5
Add filter function stringcharlen6
FunctionInfo. Adding function:stringcharlen6
Add filter function stringcharlen7
FunctionInfo. Adding function:stringcharlen7
Add filter function stringcharlen8
FunctionInfo. Adding function:stringcharlen8
Add filter function addvheader0
FunctionInfo. Adding function:addvheader0
Add filter function addvheader1
FunctionInfo. Adding function:addvheader1
Add filter function addvheader2
FunctionInfo. Adding function:addvheader2
Add filter function addvheader3
FunctionInfo. Adding function:addvheader3
Add filter function addvheader4
FunctionInfo. Adding function:addvheader4
Add filter function combinecaps0
FunctionInfo. Adding function:combinecaps0
Add filter function combinecaps1
FunctionInfo. Adding function:combinecaps1
Add filter function combinecaps2
FunctionInfo. Adding function:combinecaps2
Add filter function combinecaps3
FunctionInfo. Adding function:combinecaps3
Add filter function combine_two_entries0
FunctionInfo. Adding function:combine_two_entries0
Add filter function combine_two_entries1
FunctionInfo. Adding function:combine_two_entries1
Add filter function combine_two_entries2
FunctionInfo. Adding function:combine_two_entries2
Add filter function forcevheader0
FunctionInfo. Adding function:forcevheader0
Add filter function combineaffixes0
FunctionInfo. Adding function:combineaffixes0
Add filter function lowcase0
FunctionInfo. Adding function:lowcase0
Add filter function toutent0
FunctionInfo. Adding function:toutent0
Add filter function toutent1
FunctionInfo. Adding function:toutent1
Add filter function toutent2
FunctionInfo. Adding function:toutent2
Add filter function ichartosstr0
FunctionInfo. Adding function:ichartosstr0
Add filter function toutword0
FunctionInfo. Adding function:toutword0
Add filter function toutword1
FunctionInfo. Adding function:toutword1
Add filter function toutword2
FunctionInfo. Adding function:toutword2
Add filter function flagout0
FunctionInfo. Adding function:flagout0
Add filter function flagout1
FunctionInfo. Adding function:flagout1
Add filter function printichar0
FunctionInfo. Adding function:printichar0
Add filter function printichar1
FunctionInfo. Adding function:printichar1
Add filter function findfiletype0
FunctionInfo. Adding function:findfiletype0
Add filter function findfiletype1
FunctionInfo. Adding function:findfiletype1
Add filter function findfiletype2
FunctionInfo. Adding function:findfiletype2
Add filter function findfiletype3
FunctionInfo. Adding function:findfiletype3
Add filter function findfiletype4
FunctionInfo. Adding function:findfiletype4
Add filter function findfiletype5
FunctionInfo. Adding function:findfiletype5
Add filter function findfiletype6
FunctionInfo. Adding function:findfiletype6
Add filter function findfiletype7
FunctionInfo. Adding function:findfiletype7
Add filter function chk_aff0
FunctionInfo. Adding function:chk_aff0
Add filter function chk_aff1
FunctionInfo. Adding function:chk_aff1
Add filter function chk_aff2
FunctionInfo. Adding function:chk_aff2
Add filter function pfx_list_chk0
FunctionInfo. Adding function:pfx_list_chk0
Add filter function pfx_list_chk1
FunctionInfo. Adding function:pfx_list_chk1
Add filter function pfx_list_chk2
FunctionInfo. Adding function:pfx_list_chk2
Add filter function pfx_list_chk3
FunctionInfo. Adding function:pfx_list_chk3
Add filter function pfx_list_chk4
FunctionInfo. Adding function:pfx_list_chk4
Add filter function pfx_list_chk5
FunctionInfo. Adding function:pfx_list_chk5
Add filter function chk_suf0
FunctionInfo. Adding function:chk_suf0
Add filter function chk_suf1
FunctionInfo. Adding function:chk_suf1
Add filter function chk_suf2
FunctionInfo. Adding function:chk_suf2
Add filter function suf_list_chk0
FunctionInfo. Adding function:suf_list_chk0
Add filter function suf_list_chk1
FunctionInfo. Adding function:suf_list_chk1
Add filter function suf_list_chk2
FunctionInfo. Adding function:suf_list_chk2
Add filter function suf_list_chk3
FunctionInfo. Adding function:suf_list_chk3
Add filter function suf_list_chk4
FunctionInfo. Adding function:suf_list_chk4
Add filter function suf_list_chk5
FunctionInfo. Adding function:suf_list_chk5
Add filter function suf_list_chk6
FunctionInfo. Adding function:suf_list_chk6
Add filter function suf_list_chk7
FunctionInfo. Adding function:suf_list_chk7
Add filter function expand_pre0
FunctionInfo. Adding function:expand_pre0
Add filter function expand_pre1
FunctionInfo. Adding function:expand_pre1
Add filter function expand_pre2
FunctionInfo. Adding function:expand_pre2
Add filter function pr_pre_expansion0
FunctionInfo. Adding function:pr_pre_expansion0
Add filter function pr_pre_expansion1
FunctionInfo. Adding function:pr_pre_expansion1
Add filter function pr_pre_expansion2
FunctionInfo. Adding function:pr_pre_expansion2
Add filter function pr_pre_expansion3
FunctionInfo. Adding function:pr_pre_expansion3
Add filter function pr_pre_expansion4
FunctionInfo. Adding function:pr_pre_expansion4
Add filter function pr_pre_expansion5
FunctionInfo. Adding function:pr_pre_expansion5
Add filter function pr_pre_expansion6
FunctionInfo. Adding function:pr_pre_expansion6
Add filter function forcelc0
FunctionInfo. Adding function:forcelc0
Add filter function forcelc1
FunctionInfo. Adding function:forcelc1
Add filter function expand_suf0
FunctionInfo. Adding function:expand_suf0
Add filter function expand_suf1
FunctionInfo. Adding function:expand_suf1
Add filter function expand_suf2
FunctionInfo. Adding function:expand_suf2
Add filter function pr_suf_expansion0
FunctionInfo. Adding function:pr_suf_expansion0
Add filter function pr_suf_expansion1
FunctionInfo. Adding function:pr_suf_expansion1
Add filter function pr_suf_expansion2
FunctionInfo. Adding function:pr_suf_expansion2
Add filter function pr_suf_expansion3
FunctionInfo. Adding function:pr_suf_expansion3
Add filter function pr_suf_expansion4
FunctionInfo. Adding function:pr_suf_expansion4
Add filter function treeinit0
FunctionInfo. Adding function:treeinit0
Add filter function treeinit1
FunctionInfo. Adding function:treeinit1
Add filter function treeinit2
FunctionInfo. Adding function:treeinit2
Add filter function treeinit3
FunctionInfo. Adding function:treeinit3
Add filter function treeinit4
FunctionInfo. Adding function:treeinit4
Add filter function treeinit5
FunctionInfo. Adding function:treeinit5
Add filter function treeinit6
FunctionInfo. Adding function:treeinit6
Add filter function treeinit7
FunctionInfo. Adding function:treeinit7
Add filter function treeinit8
FunctionInfo. Adding function:treeinit8
Add filter function trydict0
FunctionInfo. Adding function:trydict0
Add filter function trydict1
FunctionInfo. Adding function:trydict1
Add filter function trydict2
FunctionInfo. Adding function:trydict2
Add filter function treeinsert0
FunctionInfo. Adding function:treeinsert0
Add filter function treeinsert1
FunctionInfo. Adding function:treeinsert1
Add filter function treeinsert2
FunctionInfo. Adding function:treeinsert2
Add filter function treeinsert3
FunctionInfo. Adding function:treeinsert3
Add filter function treeinsert4
FunctionInfo. Adding function:treeinsert4
Add filter function treeinsert5
FunctionInfo. Adding function:treeinsert5
Add filter function treeinsert6
FunctionInfo. Adding function:treeinsert6
Add filter function treeinsert7
FunctionInfo. Adding function:treeinsert7
Add filter function treeinsert8
FunctionInfo. Adding function:treeinsert8
Add filter function treeinsert9
FunctionInfo. Adding function:treeinsert9
Add filter function treeinsert10
FunctionInfo. Adding function:treeinsert10
Add filter function treeinsert11
FunctionInfo. Adding function:treeinsert11
Add filter function treeinsert12
FunctionInfo. Adding function:treeinsert12
Add filter function treeinsert13
FunctionInfo. Adding function:treeinsert13
Add filter function tinsert0
FunctionInfo. Adding function:tinsert0
Add filter function tinsert1
FunctionInfo. Adding function:tinsert1
Add filter function tinsert2
FunctionInfo. Adding function:tinsert2
Add filter function tinsert3
FunctionInfo. Adding function:tinsert3
Add filter function treelookup0
FunctionInfo. Adding function:treelookup0
Add filter function treelookup1
FunctionInfo. Adding function:treelookup1
Add filter function treelookup2
FunctionInfo. Adding function:treelookup2
Add filter function treeoutput0
FunctionInfo. Adding function:treeoutput0
Add filter function treeoutput1
FunctionInfo. Adding function:treeoutput1
Add filter function treeoutput2
FunctionInfo. Adding function:treeoutput2
Add filter function treeoutput3
FunctionInfo. Adding function:treeoutput3
Add filter function treeoutput4
FunctionInfo. Adding function:treeoutput4
Add filter function treeoutput5
FunctionInfo. Adding function:treeoutput5
Add filter function treeoutput6
FunctionInfo. Adding function:treeoutput6
Add filter function treeoutput7
FunctionInfo. Adding function:treeoutput7
Add filter function treeoutput8
FunctionInfo. Adding function:treeoutput8
Add filter function treeoutput9
FunctionInfo. Adding function:treeoutput9
Add filter function treeoutput10
FunctionInfo. Adding function:treeoutput10
Add filter function treeoutput11
FunctionInfo. Adding function:treeoutput11
Add filter function treeoutput12
FunctionInfo. Adding function:treeoutput12
Add filter function treeoutput13
FunctionInfo. Adding function:treeoutput13
Add filter function treeoutput14
FunctionInfo. Adding function:treeoutput14
Add filter function treeoutput15
FunctionInfo. Adding function:treeoutput15
Add filter function treeoutput16
FunctionInfo. Adding function:treeoutput16
Add filter function treeoutput17
FunctionInfo. Adding function:treeoutput17
Add filter function treeoutput18
FunctionInfo. Adding function:treeoutput18
Add filter function treeoutput19
FunctionInfo. Adding function:treeoutput19
Add filter function treeoutput20
FunctionInfo. Adding function:treeoutput20
Add filter function treeoutput21
FunctionInfo. Adding function:treeoutput21
Add filter function treeoutput22
FunctionInfo. Adding function:treeoutput22
Add filter function treeoutput23
FunctionInfo. Adding function:treeoutput23
Add filter function treeoutput24
FunctionInfo. Adding function:treeoutput24
Add filter function treeoutput25
FunctionInfo. Adding function:treeoutput25
Add filter function treeoutput26
FunctionInfo. Adding function:treeoutput26
Add filter function treeoutput27
FunctionInfo. Adding function:treeoutput27
Add filter function treeoutput28
FunctionInfo. Adding function:treeoutput28
Add filter function treeoutput29
FunctionInfo. Adding function:treeoutput29
Add filter function treeoutput30
FunctionInfo. Adding function:treeoutput30
Add filter function treeoutput31
FunctionInfo. Adding function:treeoutput31
Add filter function treeoutput32
FunctionInfo. Adding function:treeoutput32
Add filter function myfree0
FunctionInfo. Adding function:myfree0
Add filter function xgets0
FunctionInfo. Adding function:xgets0
Add filter function xgets1
FunctionInfo. Adding function:xgets1
Add filter function xgets2
FunctionInfo. Adding function:xgets2
Add filter function xgets3
FunctionInfo. Adding function:xgets3
Add filter function xgets4
FunctionInfo. Adding function:xgets4
Adding erase other functions, ExtractedOnly mode uses other functions
Adding move other functions, ExtractedOnly mode uses other functions
Adding inverse other functions, ExtractedOnly mode uses other functions
Adding normal other functions, ExtractedOnly mode uses other functions
Adding backup other functions, ExtractedOnly mode uses other functions
Adding terminit other functions, ExtractedOnly mode uses other functions
Adding done other functions, ExtractedOnly mode uses other functions
Adding onstop other functions, ExtractedOnly mode uses other functions
Adding stop other functions, ExtractedOnly mode uses other functions
Adding shellescape other functions, ExtractedOnly mode uses other functions
Adding main other functions, ExtractedOnly mode uses other functions
Adding usage other functions, ExtractedOnly mode uses other functions
Adding initckch other functions, ExtractedOnly mode uses other functions
Adding expandmode other functions, ExtractedOnly mode uses other functions
Adding dofile other functions, ExtractedOnly mode uses other functions
Adding update_file other functions, ExtractedOnly mode uses other functions
Adding givehelp other functions, ExtractedOnly mode uses other functions
Adding checkfile other functions, ExtractedOnly mode uses other functions
Adding correct other functions, ExtractedOnly mode uses other functions
Adding compoundgood other functions, ExtractedOnly mode uses other functions
Adding makepossibilities other functions, ExtractedOnly mode uses other functions
Adding show_line other functions, ExtractedOnly mode uses other functions
Adding line_size other functions, ExtractedOnly mode uses other functions
Adding my_getline other functions, ExtractedOnly mode uses other functions
Adding inserttoken other functions, ExtractedOnly mode uses other functions
Adding lookharder other functions, ExtractedOnly mode uses other functions
Adding show_char other functions, ExtractedOnly mode uses other functions
Adding wrongcapital other functions, ExtractedOnly mode uses other functions
Adding missingletter other functions, ExtractedOnly mode uses other functions
Adding transposedletter other functions, ExtractedOnly mode uses other functions
Adding extraletter other functions, ExtractedOnly mode uses other functions
Adding wrongletter other functions, ExtractedOnly mode uses other functions
Adding missingspace other functions, ExtractedOnly mode uses other functions
Adding tryveryhard other functions, ExtractedOnly mode uses other functions
Adding posscmp other functions, ExtractedOnly mode uses other functions
Adding casecmp other functions, ExtractedOnly mode uses other functions
Adding save_cap other functions, ExtractedOnly mode uses other functions
Adding insert other functions, ExtractedOnly mode uses other functions
Adding save_root_cap other functions, ExtractedOnly mode uses other functions
Adding ins_cap other functions, ExtractedOnly mode uses other functions
Adding ins_root_cap other functions, ExtractedOnly mode uses other functions
Adding askmode other functions, ExtractedOnly mode uses other functions
Adding copyout other functions, ExtractedOnly mode uses other functions
Adding skipoverword other functions, ExtractedOnly mode uses other functions
Adding checkline other functions, ExtractedOnly mode uses other functions
Adding skiptoword other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check other functions, ExtractedOnly mode uses other functions
Adding TeX_math_end other functions, ExtractedOnly mode uses other functions
Adding TeX_strncmp other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_parens other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_begin other functions, ExtractedOnly mode uses other functions
Adding TeX_open_paren other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args other functions, ExtractedOnly mode uses other functions
Adding dumpmode other functions, ExtractedOnly mode uses other functions
Adding tbldump other functions, ExtractedOnly mode uses other functions
Adding entdump other functions, ExtractedOnly mode uses other functions
Adding setdump other functions, ExtractedOnly mode uses other functions
Adding subsetdump other functions, ExtractedOnly mode uses other functions
Adding good other functions, ExtractedOnly mode uses other functions
Adding cap_ok other functions, ExtractedOnly mode uses other functions
Adding entryhasaffixes other functions, ExtractedOnly mode uses other functions
Adding flagpr other functions, ExtractedOnly mode uses other functions
Adding linit other functions, ExtractedOnly mode uses other functions
Adding lookup other functions, ExtractedOnly mode uses other functions
Adding hash other functions, ExtractedOnly mode uses other functions
Adding makedent other functions, ExtractedOnly mode uses other functions
Adding strtoichar other functions, ExtractedOnly mode uses other functions
Adding ichartostr other functions, ExtractedOnly mode uses other functions
Adding whatcap other functions, ExtractedOnly mode uses other functions
Adding chupcase other functions, ExtractedOnly mode uses other functions
Adding strtosichar other functions, ExtractedOnly mode uses other functions
Adding upcase other functions, ExtractedOnly mode uses other functions
Adding stringcharlen other functions, ExtractedOnly mode uses other functions
Adding addvheader other functions, ExtractedOnly mode uses other functions
Adding combinecaps other functions, ExtractedOnly mode uses other functions
Adding combine_two_entries other functions, ExtractedOnly mode uses other functions
Adding forcevheader other functions, ExtractedOnly mode uses other functions
Adding combineaffixes other functions, ExtractedOnly mode uses other functions
Adding acoversb other functions, ExtractedOnly mode uses other functions
Adding issubset other functions, ExtractedOnly mode uses other functions
Adding lowcase other functions, ExtractedOnly mode uses other functions
Adding toutent other functions, ExtractedOnly mode uses other functions
Adding ichartosstr other functions, ExtractedOnly mode uses other functions
Adding toutword other functions, ExtractedOnly mode uses other functions
Adding flagout other functions, ExtractedOnly mode uses other functions
Adding printichar other functions, ExtractedOnly mode uses other functions
Adding findfiletype other functions, ExtractedOnly mode uses other functions
Adding chk_aff other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk other functions, ExtractedOnly mode uses other functions
Adding chk_suf other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk other functions, ExtractedOnly mode uses other functions
Adding expand_pre other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion other functions, ExtractedOnly mode uses other functions
Adding forcelc other functions, ExtractedOnly mode uses other functions
Adding expand_suf other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion other functions, ExtractedOnly mode uses other functions
Adding treeinit other functions, ExtractedOnly mode uses other functions
Adding trydict other functions, ExtractedOnly mode uses other functions
Adding treeload other functions, ExtractedOnly mode uses other functions
Adding treeinsert other functions, ExtractedOnly mode uses other functions
Adding tinsert other functions, ExtractedOnly mode uses other functions
Adding treelookup other functions, ExtractedOnly mode uses other functions
Adding treeoutput other functions, ExtractedOnly mode uses other functions
Adding pdictcmp other functions, ExtractedOnly mode uses other functions
Adding mymalloc other functions, ExtractedOnly mode uses other functions
Adding myfree other functions, ExtractedOnly mode uses other functions
Adding xgets other functions, ExtractedOnly mode uses other functions
Adding terminit0 other functions, ExtractedOnly mode uses other functions
Adding terminit1 other functions, ExtractedOnly mode uses other functions
Adding terminit2 other functions, ExtractedOnly mode uses other functions
Adding terminit3 other functions, ExtractedOnly mode uses other functions
Adding terminit4 other functions, ExtractedOnly mode uses other functions
Adding terminit5 other functions, ExtractedOnly mode uses other functions
Adding onstop0 other functions, ExtractedOnly mode uses other functions
Adding shellescape0 other functions, ExtractedOnly mode uses other functions
Adding shellescape1 other functions, ExtractedOnly mode uses other functions
Adding shellescape2 other functions, ExtractedOnly mode uses other functions
Adding shellescape3 other functions, ExtractedOnly mode uses other functions
Adding shellescape4 other functions, ExtractedOnly mode uses other functions
Adding shellescape5 other functions, ExtractedOnly mode uses other functions
Adding main0 other functions, ExtractedOnly mode uses other functions
Adding main1 other functions, ExtractedOnly mode uses other functions
Adding main2 other functions, ExtractedOnly mode uses other functions
Adding main3 other functions, ExtractedOnly mode uses other functions
Adding main4 other functions, ExtractedOnly mode uses other functions
Adding main5 other functions, ExtractedOnly mode uses other functions
Adding main6 other functions, ExtractedOnly mode uses other functions
Adding main7 other functions, ExtractedOnly mode uses other functions
Adding main8 other functions, ExtractedOnly mode uses other functions
Adding main9 other functions, ExtractedOnly mode uses other functions
Adding main10 other functions, ExtractedOnly mode uses other functions
Adding main11 other functions, ExtractedOnly mode uses other functions
Adding main12 other functions, ExtractedOnly mode uses other functions
Adding main13 other functions, ExtractedOnly mode uses other functions
Adding main14 other functions, ExtractedOnly mode uses other functions
Adding main15 other functions, ExtractedOnly mode uses other functions
Adding main16 other functions, ExtractedOnly mode uses other functions
Adding main17 other functions, ExtractedOnly mode uses other functions
Adding main18 other functions, ExtractedOnly mode uses other functions
Adding main19 other functions, ExtractedOnly mode uses other functions
Adding main20 other functions, ExtractedOnly mode uses other functions
Adding main21 other functions, ExtractedOnly mode uses other functions
Adding main22 other functions, ExtractedOnly mode uses other functions
Adding main23 other functions, ExtractedOnly mode uses other functions
Adding main24 other functions, ExtractedOnly mode uses other functions
Adding main25 other functions, ExtractedOnly mode uses other functions
Adding main26 other functions, ExtractedOnly mode uses other functions
Adding main27 other functions, ExtractedOnly mode uses other functions
Adding main28 other functions, ExtractedOnly mode uses other functions
Adding main29 other functions, ExtractedOnly mode uses other functions
Adding main30 other functions, ExtractedOnly mode uses other functions
Adding main31 other functions, ExtractedOnly mode uses other functions
Adding main32 other functions, ExtractedOnly mode uses other functions
Adding main33 other functions, ExtractedOnly mode uses other functions
Adding main34 other functions, ExtractedOnly mode uses other functions
Adding main35 other functions, ExtractedOnly mode uses other functions
Adding main36 other functions, ExtractedOnly mode uses other functions
Adding main37 other functions, ExtractedOnly mode uses other functions
Adding main38 other functions, ExtractedOnly mode uses other functions
Adding main39 other functions, ExtractedOnly mode uses other functions
Adding main40 other functions, ExtractedOnly mode uses other functions
Adding main41 other functions, ExtractedOnly mode uses other functions
Adding main42 other functions, ExtractedOnly mode uses other functions
Adding main43 other functions, ExtractedOnly mode uses other functions
Adding usage0 other functions, ExtractedOnly mode uses other functions
Adding initckch0 other functions, ExtractedOnly mode uses other functions
Adding initckch1 other functions, ExtractedOnly mode uses other functions
Adding initckch2 other functions, ExtractedOnly mode uses other functions
Adding expandmode0 other functions, ExtractedOnly mode uses other functions
Adding expandmode1 other functions, ExtractedOnly mode uses other functions
Adding dofile0 other functions, ExtractedOnly mode uses other functions
Adding dofile1 other functions, ExtractedOnly mode uses other functions
Adding dofile2 other functions, ExtractedOnly mode uses other functions
Adding dofile3 other functions, ExtractedOnly mode uses other functions
Adding update_file0 other functions, ExtractedOnly mode uses other functions
Adding update_file1 other functions, ExtractedOnly mode uses other functions
Adding update_file2 other functions, ExtractedOnly mode uses other functions
Adding update_file3 other functions, ExtractedOnly mode uses other functions
Adding update_file4 other functions, ExtractedOnly mode uses other functions
Adding update_file5 other functions, ExtractedOnly mode uses other functions
Adding givehelp0 other functions, ExtractedOnly mode uses other functions
Adding givehelp1 other functions, ExtractedOnly mode uses other functions
Adding givehelp2 other functions, ExtractedOnly mode uses other functions
Adding checkfile0 other functions, ExtractedOnly mode uses other functions
Adding checkfile1 other functions, ExtractedOnly mode uses other functions
Adding checkfile2 other functions, ExtractedOnly mode uses other functions
Adding checkfile3 other functions, ExtractedOnly mode uses other functions
Adding checkfile4 other functions, ExtractedOnly mode uses other functions
Adding checkfile5 other functions, ExtractedOnly mode uses other functions
Adding checkfile6 other functions, ExtractedOnly mode uses other functions
Adding checkfile7 other functions, ExtractedOnly mode uses other functions
Adding correct0 other functions, ExtractedOnly mode uses other functions
Adding correct1 other functions, ExtractedOnly mode uses other functions
Adding correct2 other functions, ExtractedOnly mode uses other functions
Adding correct3 other functions, ExtractedOnly mode uses other functions
Adding correct4 other functions, ExtractedOnly mode uses other functions
Adding correct5 other functions, ExtractedOnly mode uses other functions
Adding correct6 other functions, ExtractedOnly mode uses other functions
Adding correct7 other functions, ExtractedOnly mode uses other functions
Adding correct8 other functions, ExtractedOnly mode uses other functions
Adding correct9 other functions, ExtractedOnly mode uses other functions
Adding correct10 other functions, ExtractedOnly mode uses other functions
Adding correct11 other functions, ExtractedOnly mode uses other functions
Adding correct12 other functions, ExtractedOnly mode uses other functions
Adding correct13 other functions, ExtractedOnly mode uses other functions
Adding correct14 other functions, ExtractedOnly mode uses other functions
Adding correct15 other functions, ExtractedOnly mode uses other functions
Adding correct16 other functions, ExtractedOnly mode uses other functions
Adding correct17 other functions, ExtractedOnly mode uses other functions
Adding correct18 other functions, ExtractedOnly mode uses other functions
Adding correct19 other functions, ExtractedOnly mode uses other functions
Adding correct20 other functions, ExtractedOnly mode uses other functions
Adding correct21 other functions, ExtractedOnly mode uses other functions
Adding correct22 other functions, ExtractedOnly mode uses other functions
Adding correct23 other functions, ExtractedOnly mode uses other functions
Adding correct24 other functions, ExtractedOnly mode uses other functions
Adding correct25 other functions, ExtractedOnly mode uses other functions
Adding correct26 other functions, ExtractedOnly mode uses other functions
Adding compoundgood0 other functions, ExtractedOnly mode uses other functions
Adding compoundgood1 other functions, ExtractedOnly mode uses other functions
Adding compoundgood2 other functions, ExtractedOnly mode uses other functions
Adding compoundgood3 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities0 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities1 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities2 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities3 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities4 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities5 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities6 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities7 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities8 other functions, ExtractedOnly mode uses other functions
Adding show_line0 other functions, ExtractedOnly mode uses other functions
Adding show_line1 other functions, ExtractedOnly mode uses other functions
Adding show_line2 other functions, ExtractedOnly mode uses other functions
Adding show_line3 other functions, ExtractedOnly mode uses other functions
Adding line_size0 other functions, ExtractedOnly mode uses other functions
Adding my_getline0 other functions, ExtractedOnly mode uses other functions
Adding my_getline1 other functions, ExtractedOnly mode uses other functions
Adding my_getline2 other functions, ExtractedOnly mode uses other functions
Adding my_getline3 other functions, ExtractedOnly mode uses other functions
Adding my_getline4 other functions, ExtractedOnly mode uses other functions
Adding my_getline5 other functions, ExtractedOnly mode uses other functions
Adding my_getline6 other functions, ExtractedOnly mode uses other functions
Adding inserttoken0 other functions, ExtractedOnly mode uses other functions
Adding inserttoken1 other functions, ExtractedOnly mode uses other functions
Adding inserttoken2 other functions, ExtractedOnly mode uses other functions
Adding inserttoken3 other functions, ExtractedOnly mode uses other functions
Adding inserttoken4 other functions, ExtractedOnly mode uses other functions
Adding inserttoken5 other functions, ExtractedOnly mode uses other functions
Adding inserttoken6 other functions, ExtractedOnly mode uses other functions
Adding lookharder0 other functions, ExtractedOnly mode uses other functions
Adding lookharder1 other functions, ExtractedOnly mode uses other functions
Adding lookharder2 other functions, ExtractedOnly mode uses other functions
Adding show_char0 other functions, ExtractedOnly mode uses other functions
Adding show_char1 other functions, ExtractedOnly mode uses other functions
Adding show_char2 other functions, ExtractedOnly mode uses other functions
Adding show_char3 other functions, ExtractedOnly mode uses other functions
Adding show_char4 other functions, ExtractedOnly mode uses other functions
Adding show_char5 other functions, ExtractedOnly mode uses other functions
Adding show_char6 other functions, ExtractedOnly mode uses other functions
Adding show_char7 other functions, ExtractedOnly mode uses other functions
Adding show_char8 other functions, ExtractedOnly mode uses other functions
Adding show_char9 other functions, ExtractedOnly mode uses other functions
Adding show_char10 other functions, ExtractedOnly mode uses other functions
Adding show_char11 other functions, ExtractedOnly mode uses other functions
Adding show_char12 other functions, ExtractedOnly mode uses other functions
Adding show_char13 other functions, ExtractedOnly mode uses other functions
Adding show_char14 other functions, ExtractedOnly mode uses other functions
Adding missingletter0 other functions, ExtractedOnly mode uses other functions
Adding missingletter1 other functions, ExtractedOnly mode uses other functions
Adding missingletter2 other functions, ExtractedOnly mode uses other functions
Adding transposedletter0 other functions, ExtractedOnly mode uses other functions
Adding transposedletter1 other functions, ExtractedOnly mode uses other functions
Adding extraletter0 other functions, ExtractedOnly mode uses other functions
Adding wrongletter0 other functions, ExtractedOnly mode uses other functions
Adding wrongletter1 other functions, ExtractedOnly mode uses other functions
Adding missingspace0 other functions, ExtractedOnly mode uses other functions
Adding missingspace1 other functions, ExtractedOnly mode uses other functions
Adding missingspace2 other functions, ExtractedOnly mode uses other functions
Adding tryveryhard0 other functions, ExtractedOnly mode uses other functions
Adding casecmp0 other functions, ExtractedOnly mode uses other functions
Adding casecmp1 other functions, ExtractedOnly mode uses other functions
Adding casecmp2 other functions, ExtractedOnly mode uses other functions
Adding casecmp3 other functions, ExtractedOnly mode uses other functions
Adding casecmp4 other functions, ExtractedOnly mode uses other functions
Adding casecmp5 other functions, ExtractedOnly mode uses other functions
Adding casecmp6 other functions, ExtractedOnly mode uses other functions
Adding save_cap0 other functions, ExtractedOnly mode uses other functions
Adding save_cap1 other functions, ExtractedOnly mode uses other functions
Adding save_cap2 other functions, ExtractedOnly mode uses other functions
Adding save_cap3 other functions, ExtractedOnly mode uses other functions
Adding save_cap4 other functions, ExtractedOnly mode uses other functions
Adding insert0 other functions, ExtractedOnly mode uses other functions
Adding insert1 other functions, ExtractedOnly mode uses other functions
Adding insert2 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap0 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap1 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap2 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap3 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap4 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap5 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap6 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap7 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap8 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap9 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap10 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap11 other functions, ExtractedOnly mode uses other functions
Adding ins_cap0 other functions, ExtractedOnly mode uses other functions
Adding ins_root_cap0 other functions, ExtractedOnly mode uses other functions
Adding askmode0 other functions, ExtractedOnly mode uses other functions
Adding askmode1 other functions, ExtractedOnly mode uses other functions
Adding askmode2 other functions, ExtractedOnly mode uses other functions
Adding askmode3 other functions, ExtractedOnly mode uses other functions
Adding askmode4 other functions, ExtractedOnly mode uses other functions
Adding askmode5 other functions, ExtractedOnly mode uses other functions
Adding askmode6 other functions, ExtractedOnly mode uses other functions
Adding askmode7 other functions, ExtractedOnly mode uses other functions
Adding askmode8 other functions, ExtractedOnly mode uses other functions
Adding askmode9 other functions, ExtractedOnly mode uses other functions
Adding askmode10 other functions, ExtractedOnly mode uses other functions
Adding copyout0 other functions, ExtractedOnly mode uses other functions
Adding copyout1 other functions, ExtractedOnly mode uses other functions
Adding skipoverword0 other functions, ExtractedOnly mode uses other functions
Adding skipoverword1 other functions, ExtractedOnly mode uses other functions
Adding skipoverword2 other functions, ExtractedOnly mode uses other functions
Adding skipoverword3 other functions, ExtractedOnly mode uses other functions
Adding skipoverword4 other functions, ExtractedOnly mode uses other functions
Adding checkline0 other functions, ExtractedOnly mode uses other functions
Adding checkline1 other functions, ExtractedOnly mode uses other functions
Adding checkline2 other functions, ExtractedOnly mode uses other functions
Adding checkline3 other functions, ExtractedOnly mode uses other functions
Adding checkline4 other functions, ExtractedOnly mode uses other functions
Adding checkline5 other functions, ExtractedOnly mode uses other functions
Adding checkline6 other functions, ExtractedOnly mode uses other functions
Adding checkline7 other functions, ExtractedOnly mode uses other functions
Adding checkline8 other functions, ExtractedOnly mode uses other functions
Adding checkline9 other functions, ExtractedOnly mode uses other functions
Adding checkline10 other functions, ExtractedOnly mode uses other functions
Adding checkline11 other functions, ExtractedOnly mode uses other functions
Adding checkline12 other functions, ExtractedOnly mode uses other functions
Adding checkline13 other functions, ExtractedOnly mode uses other functions
Adding checkline14 other functions, ExtractedOnly mode uses other functions
Adding checkline15 other functions, ExtractedOnly mode uses other functions
Adding checkline16 other functions, ExtractedOnly mode uses other functions
Adding checkline17 other functions, ExtractedOnly mode uses other functions
Adding checkline18 other functions, ExtractedOnly mode uses other functions
Adding checkline19 other functions, ExtractedOnly mode uses other functions
Adding checkline20 other functions, ExtractedOnly mode uses other functions
Adding skiptoword0 other functions, ExtractedOnly mode uses other functions
Adding skiptoword1 other functions, ExtractedOnly mode uses other functions
Adding skiptoword2 other functions, ExtractedOnly mode uses other functions
Adding skiptoword3 other functions, ExtractedOnly mode uses other functions
Adding skiptoword4 other functions, ExtractedOnly mode uses other functions
Adding skiptoword5 other functions, ExtractedOnly mode uses other functions
Adding skiptoword6 other functions, ExtractedOnly mode uses other functions
Adding skiptoword7 other functions, ExtractedOnly mode uses other functions
Adding skiptoword8 other functions, ExtractedOnly mode uses other functions
Adding skiptoword9 other functions, ExtractedOnly mode uses other functions
Adding skiptoword10 other functions, ExtractedOnly mode uses other functions
Adding skiptoword11 other functions, ExtractedOnly mode uses other functions
Adding skiptoword12 other functions, ExtractedOnly mode uses other functions
Adding skiptoword13 other functions, ExtractedOnly mode uses other functions
Adding skiptoword14 other functions, ExtractedOnly mode uses other functions
Adding skiptoword15 other functions, ExtractedOnly mode uses other functions
Adding skiptoword16 other functions, ExtractedOnly mode uses other functions
Adding skiptoword17 other functions, ExtractedOnly mode uses other functions
Adding skiptoword18 other functions, ExtractedOnly mode uses other functions
Adding skiptoword19 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check0 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check1 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check2 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check3 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check0 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check1 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check2 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check3 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check4 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_end0 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_end1 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_end2 other functions, ExtractedOnly mode uses other functions
Adding TeX_strncmp0 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_parens0 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin0 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin1 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin2 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin3 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin4 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check0 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check1 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check2 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check3 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_begin0 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_begin1 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_begin2 other functions, ExtractedOnly mode uses other functions
Adding TeX_open_paren0 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args0 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args1 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args2 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args3 other functions, ExtractedOnly mode uses other functions
Adding dumpmode0 other functions, ExtractedOnly mode uses other functions
Adding dumpmode1 other functions, ExtractedOnly mode uses other functions
Adding dumpmode2 other functions, ExtractedOnly mode uses other functions
Adding dumpmode3 other functions, ExtractedOnly mode uses other functions
Adding dumpmode4 other functions, ExtractedOnly mode uses other functions
Adding tbldump0 other functions, ExtractedOnly mode uses other functions
Adding entdump0 other functions, ExtractedOnly mode uses other functions
Adding entdump1 other functions, ExtractedOnly mode uses other functions
Adding entdump2 other functions, ExtractedOnly mode uses other functions
Adding entdump3 other functions, ExtractedOnly mode uses other functions
Adding entdump4 other functions, ExtractedOnly mode uses other functions
Adding setdump0 other functions, ExtractedOnly mode uses other functions
Adding setdump1 other functions, ExtractedOnly mode uses other functions
Adding setdump2 other functions, ExtractedOnly mode uses other functions
Adding setdump3 other functions, ExtractedOnly mode uses other functions
Adding setdump4 other functions, ExtractedOnly mode uses other functions
Adding subsetdump0 other functions, ExtractedOnly mode uses other functions
Adding subsetdump1 other functions, ExtractedOnly mode uses other functions
Adding subsetdump2 other functions, ExtractedOnly mode uses other functions
Adding subsetdump3 other functions, ExtractedOnly mode uses other functions
Adding subsetdump4 other functions, ExtractedOnly mode uses other functions
Adding subsetdump5 other functions, ExtractedOnly mode uses other functions
Adding good0 other functions, ExtractedOnly mode uses other functions
Adding good1 other functions, ExtractedOnly mode uses other functions
Adding good2 other functions, ExtractedOnly mode uses other functions
Adding good3 other functions, ExtractedOnly mode uses other functions
Adding good4 other functions, ExtractedOnly mode uses other functions
Adding cap_ok0 other functions, ExtractedOnly mode uses other functions
Adding cap_ok1 other functions, ExtractedOnly mode uses other functions
Adding cap_ok2 other functions, ExtractedOnly mode uses other functions
Adding cap_ok3 other functions, ExtractedOnly mode uses other functions
Adding cap_ok4 other functions, ExtractedOnly mode uses other functions
Adding cap_ok5 other functions, ExtractedOnly mode uses other functions
Adding cap_ok6 other functions, ExtractedOnly mode uses other functions
Adding cap_ok7 other functions, ExtractedOnly mode uses other functions
Adding cap_ok8 other functions, ExtractedOnly mode uses other functions
Adding cap_ok9 other functions, ExtractedOnly mode uses other functions
Adding cap_ok10 other functions, ExtractedOnly mode uses other functions
Adding flagpr0 other functions, ExtractedOnly mode uses other functions
Adding flagpr1 other functions, ExtractedOnly mode uses other functions
Adding flagpr2 other functions, ExtractedOnly mode uses other functions
Adding flagpr3 other functions, ExtractedOnly mode uses other functions
Adding flagpr4 other functions, ExtractedOnly mode uses other functions
Adding flagpr5 other functions, ExtractedOnly mode uses other functions
Adding flagpr6 other functions, ExtractedOnly mode uses other functions
Adding flagpr7 other functions, ExtractedOnly mode uses other functions
Adding flagpr8 other functions, ExtractedOnly mode uses other functions
Adding flagpr9 other functions, ExtractedOnly mode uses other functions
Adding flagpr10 other functions, ExtractedOnly mode uses other functions
Adding flagpr11 other functions, ExtractedOnly mode uses other functions
Adding flagpr12 other functions, ExtractedOnly mode uses other functions
Adding flagpr13 other functions, ExtractedOnly mode uses other functions
Adding flagpr14 other functions, ExtractedOnly mode uses other functions
Adding flagpr15 other functions, ExtractedOnly mode uses other functions
Adding flagpr16 other functions, ExtractedOnly mode uses other functions
Adding linit0 other functions, ExtractedOnly mode uses other functions
Adding linit1 other functions, ExtractedOnly mode uses other functions
Adding linit2 other functions, ExtractedOnly mode uses other functions
Adding linit3 other functions, ExtractedOnly mode uses other functions
Adding linit4 other functions, ExtractedOnly mode uses other functions
Adding linit5 other functions, ExtractedOnly mode uses other functions
Adding linit6 other functions, ExtractedOnly mode uses other functions
Adding linit7 other functions, ExtractedOnly mode uses other functions
Adding linit8 other functions, ExtractedOnly mode uses other functions
Adding linit9 other functions, ExtractedOnly mode uses other functions
Adding linit10 other functions, ExtractedOnly mode uses other functions
Adding linit11 other functions, ExtractedOnly mode uses other functions
Adding linit12 other functions, ExtractedOnly mode uses other functions
Adding linit13 other functions, ExtractedOnly mode uses other functions
Adding linit14 other functions, ExtractedOnly mode uses other functions
Adding linit15 other functions, ExtractedOnly mode uses other functions
Adding linit16 other functions, ExtractedOnly mode uses other functions
Adding linit17 other functions, ExtractedOnly mode uses other functions
Adding linit18 other functions, ExtractedOnly mode uses other functions
Adding linit19 other functions, ExtractedOnly mode uses other functions
Adding linit20 other functions, ExtractedOnly mode uses other functions
Adding linit21 other functions, ExtractedOnly mode uses other functions
Adding linit22 other functions, ExtractedOnly mode uses other functions
Adding linit23 other functions, ExtractedOnly mode uses other functions
Adding linit24 other functions, ExtractedOnly mode uses other functions
Adding linit25 other functions, ExtractedOnly mode uses other functions
Adding linit26 other functions, ExtractedOnly mode uses other functions
Adding linit27 other functions, ExtractedOnly mode uses other functions
Adding linit28 other functions, ExtractedOnly mode uses other functions
Adding linit29 other functions, ExtractedOnly mode uses other functions
Adding linit30 other functions, ExtractedOnly mode uses other functions
Adding linit31 other functions, ExtractedOnly mode uses other functions
Adding linit32 other functions, ExtractedOnly mode uses other functions
Adding linit33 other functions, ExtractedOnly mode uses other functions
Adding linit34 other functions, ExtractedOnly mode uses other functions
Adding linit35 other functions, ExtractedOnly mode uses other functions
Adding linit36 other functions, ExtractedOnly mode uses other functions
Adding linit37 other functions, ExtractedOnly mode uses other functions
Adding linit38 other functions, ExtractedOnly mode uses other functions
Adding linit39 other functions, ExtractedOnly mode uses other functions
Adding linit40 other functions, ExtractedOnly mode uses other functions
Adding linit41 other functions, ExtractedOnly mode uses other functions
Adding linit42 other functions, ExtractedOnly mode uses other functions
Adding linit43 other functions, ExtractedOnly mode uses other functions
Adding linit44 other functions, ExtractedOnly mode uses other functions
Adding linit45 other functions, ExtractedOnly mode uses other functions
Adding linit46 other functions, ExtractedOnly mode uses other functions
Adding linit47 other functions, ExtractedOnly mode uses other functions
Adding linit48 other functions, ExtractedOnly mode uses other functions
Adding linit49 other functions, ExtractedOnly mode uses other functions
Adding lookup0 other functions, ExtractedOnly mode uses other functions
Adding lookup1 other functions, ExtractedOnly mode uses other functions
Adding lookup2 other functions, ExtractedOnly mode uses other functions
Adding lookup3 other functions, ExtractedOnly mode uses other functions
Adding hash0 other functions, ExtractedOnly mode uses other functions
Adding hash1 other functions, ExtractedOnly mode uses other functions
Adding makedent0 other functions, ExtractedOnly mode uses other functions
Adding makedent1 other functions, ExtractedOnly mode uses other functions
Adding makedent2 other functions, ExtractedOnly mode uses other functions
Adding makedent3 other functions, ExtractedOnly mode uses other functions
Adding makedent4 other functions, ExtractedOnly mode uses other functions
Adding makedent5 other functions, ExtractedOnly mode uses other functions
Adding makedent6 other functions, ExtractedOnly mode uses other functions
Adding makedent7 other functions, ExtractedOnly mode uses other functions
Adding makedent8 other functions, ExtractedOnly mode uses other functions
Adding makedent9 other functions, ExtractedOnly mode uses other functions
Adding makedent10 other functions, ExtractedOnly mode uses other functions
Adding strtoichar0 other functions, ExtractedOnly mode uses other functions
Adding strtoichar1 other functions, ExtractedOnly mode uses other functions
Adding strtoichar2 other functions, ExtractedOnly mode uses other functions
Adding strtoichar3 other functions, ExtractedOnly mode uses other functions
Adding ichartostr0 other functions, ExtractedOnly mode uses other functions
Adding ichartostr1 other functions, ExtractedOnly mode uses other functions
Adding ichartostr2 other functions, ExtractedOnly mode uses other functions
Adding ichartostr3 other functions, ExtractedOnly mode uses other functions
Adding ichartostr4 other functions, ExtractedOnly mode uses other functions
Adding whatcap0 other functions, ExtractedOnly mode uses other functions
Adding whatcap1 other functions, ExtractedOnly mode uses other functions
Adding whatcap2 other functions, ExtractedOnly mode uses other functions
Adding whatcap3 other functions, ExtractedOnly mode uses other functions
Adding whatcap4 other functions, ExtractedOnly mode uses other functions
Adding chupcase0 other functions, ExtractedOnly mode uses other functions
Adding strtosichar0 other functions, ExtractedOnly mode uses other functions
Adding upcase0 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen0 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen1 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen2 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen3 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen4 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen5 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen6 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen7 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen8 other functions, ExtractedOnly mode uses other functions
Adding addvheader0 other functions, ExtractedOnly mode uses other functions
Adding addvheader1 other functions, ExtractedOnly mode uses other functions
Adding addvheader2 other functions, ExtractedOnly mode uses other functions
Adding addvheader3 other functions, ExtractedOnly mode uses other functions
Adding addvheader4 other functions, ExtractedOnly mode uses other functions
Adding combinecaps0 other functions, ExtractedOnly mode uses other functions
Adding combinecaps1 other functions, ExtractedOnly mode uses other functions
Adding combinecaps2 other functions, ExtractedOnly mode uses other functions
Adding combinecaps3 other functions, ExtractedOnly mode uses other functions
Adding combine_two_entries0 other functions, ExtractedOnly mode uses other functions
Adding combine_two_entries1 other functions, ExtractedOnly mode uses other functions
Adding combine_two_entries2 other functions, ExtractedOnly mode uses other functions
Adding forcevheader0 other functions, ExtractedOnly mode uses other functions
Adding combineaffixes0 other functions, ExtractedOnly mode uses other functions
Adding lowcase0 other functions, ExtractedOnly mode uses other functions
Adding toutent0 other functions, ExtractedOnly mode uses other functions
Adding toutent1 other functions, ExtractedOnly mode uses other functions
Adding toutent2 other functions, ExtractedOnly mode uses other functions
Adding ichartosstr0 other functions, ExtractedOnly mode uses other functions
Adding toutword0 other functions, ExtractedOnly mode uses other functions
Adding toutword1 other functions, ExtractedOnly mode uses other functions
Adding toutword2 other functions, ExtractedOnly mode uses other functions
Adding flagout0 other functions, ExtractedOnly mode uses other functions
Adding flagout1 other functions, ExtractedOnly mode uses other functions
Adding printichar0 other functions, ExtractedOnly mode uses other functions
Adding printichar1 other functions, ExtractedOnly mode uses other functions
Adding findfiletype0 other functions, ExtractedOnly mode uses other functions
Adding findfiletype1 other functions, ExtractedOnly mode uses other functions
Adding findfiletype2 other functions, ExtractedOnly mode uses other functions
Adding findfiletype3 other functions, ExtractedOnly mode uses other functions
Adding findfiletype4 other functions, ExtractedOnly mode uses other functions
Adding findfiletype5 other functions, ExtractedOnly mode uses other functions
Adding findfiletype6 other functions, ExtractedOnly mode uses other functions
Adding findfiletype7 other functions, ExtractedOnly mode uses other functions
Adding chk_aff0 other functions, ExtractedOnly mode uses other functions
Adding chk_aff1 other functions, ExtractedOnly mode uses other functions
Adding chk_aff2 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk0 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk1 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk2 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk3 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk4 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk5 other functions, ExtractedOnly mode uses other functions
Adding chk_suf0 other functions, ExtractedOnly mode uses other functions
Adding chk_suf1 other functions, ExtractedOnly mode uses other functions
Adding chk_suf2 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk0 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk1 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk2 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk3 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk4 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk5 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk6 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk7 other functions, ExtractedOnly mode uses other functions
Adding expand_pre0 other functions, ExtractedOnly mode uses other functions
Adding expand_pre1 other functions, ExtractedOnly mode uses other functions
Adding expand_pre2 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion0 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion1 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion2 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion3 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion4 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion5 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion6 other functions, ExtractedOnly mode uses other functions
Adding forcelc0 other functions, ExtractedOnly mode uses other functions
Adding forcelc1 other functions, ExtractedOnly mode uses other functions
Adding expand_suf0 other functions, ExtractedOnly mode uses other functions
Adding expand_suf1 other functions, ExtractedOnly mode uses other functions
Adding expand_suf2 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion0 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion1 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion2 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion3 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion4 other functions, ExtractedOnly mode uses other functions
Adding treeinit0 other functions, ExtractedOnly mode uses other functions
Adding treeinit1 other functions, ExtractedOnly mode uses other functions
Adding treeinit2 other functions, ExtractedOnly mode uses other functions
Adding treeinit3 other functions, ExtractedOnly mode uses other functions
Adding treeinit4 other functions, ExtractedOnly mode uses other functions
Adding treeinit5 other functions, ExtractedOnly mode uses other functions
Adding treeinit6 other functions, ExtractedOnly mode uses other functions
Adding treeinit7 other functions, ExtractedOnly mode uses other functions
Adding treeinit8 other functions, ExtractedOnly mode uses other functions
Adding trydict0 other functions, ExtractedOnly mode uses other functions
Adding trydict1 other functions, ExtractedOnly mode uses other functions
Adding trydict2 other functions, ExtractedOnly mode uses other functions
Adding treeinsert0 other functions, ExtractedOnly mode uses other functions
Adding treeinsert1 other functions, ExtractedOnly mode uses other functions
Adding treeinsert2 other functions, ExtractedOnly mode uses other functions
Adding treeinsert3 other functions, ExtractedOnly mode uses other functions
Adding treeinsert4 other functions, ExtractedOnly mode uses other functions
Adding treeinsert5 other functions, ExtractedOnly mode uses other functions
Adding treeinsert6 other functions, ExtractedOnly mode uses other functions
Adding treeinsert7 other functions, ExtractedOnly mode uses other functions
Adding treeinsert8 other functions, ExtractedOnly mode uses other functions
Adding treeinsert9 other functions, ExtractedOnly mode uses other functions
Adding treeinsert10 other functions, ExtractedOnly mode uses other functions
Adding treeinsert11 other functions, ExtractedOnly mode uses other functions
Adding treeinsert12 other functions, ExtractedOnly mode uses other functions
Adding treeinsert13 other functions, ExtractedOnly mode uses other functions
Adding tinsert0 other functions, ExtractedOnly mode uses other functions
Adding tinsert1 other functions, ExtractedOnly mode uses other functions
Adding tinsert2 other functions, ExtractedOnly mode uses other functions
Adding tinsert3 other functions, ExtractedOnly mode uses other functions
Adding treelookup0 other functions, ExtractedOnly mode uses other functions
Adding treelookup1 other functions, ExtractedOnly mode uses other functions
Adding treelookup2 other functions, ExtractedOnly mode uses other functions
Adding treeoutput0 other functions, ExtractedOnly mode uses other functions
Adding treeoutput1 other functions, ExtractedOnly mode uses other functions
Adding treeoutput2 other functions, ExtractedOnly mode uses other functions
Adding treeoutput3 other functions, ExtractedOnly mode uses other functions
Adding treeoutput4 other functions, ExtractedOnly mode uses other functions
Adding treeoutput5 other functions, ExtractedOnly mode uses other functions
Adding treeoutput6 other functions, ExtractedOnly mode uses other functions
Adding treeoutput7 other functions, ExtractedOnly mode uses other functions
Adding treeoutput8 other functions, ExtractedOnly mode uses other functions
Adding treeoutput9 other functions, ExtractedOnly mode uses other functions
Adding treeoutput10 other functions, ExtractedOnly mode uses other functions
Adding treeoutput11 other functions, ExtractedOnly mode uses other functions
Adding treeoutput12 other functions, ExtractedOnly mode uses other functions
Adding treeoutput13 other functions, ExtractedOnly mode uses other functions
Adding treeoutput14 other functions, ExtractedOnly mode uses other functions
Adding treeoutput15 other functions, ExtractedOnly mode uses other functions
Adding treeoutput16 other functions, ExtractedOnly mode uses other functions
Adding treeoutput17 other functions, ExtractedOnly mode uses other functions
Adding treeoutput18 other functions, ExtractedOnly mode uses other functions
Adding treeoutput19 other functions, ExtractedOnly mode uses other functions
Adding treeoutput20 other functions, ExtractedOnly mode uses other functions
Adding treeoutput21 other functions, ExtractedOnly mode uses other functions
Adding treeoutput22 other functions, ExtractedOnly mode uses other functions
Adding treeoutput23 other functions, ExtractedOnly mode uses other functions
Adding treeoutput24 other functions, ExtractedOnly mode uses other functions
Adding treeoutput25 other functions, ExtractedOnly mode uses other functions
Adding treeoutput26 other functions, ExtractedOnly mode uses other functions
Adding treeoutput27 other functions, ExtractedOnly mode uses other functions
Adding treeoutput28 other functions, ExtractedOnly mode uses other functions
Adding treeoutput29 other functions, ExtractedOnly mode uses other functions
Adding treeoutput30 other functions, ExtractedOnly mode uses other functions
Adding treeoutput31 other functions, ExtractedOnly mode uses other functions
Adding treeoutput32 other functions, ExtractedOnly mode uses other functions
Adding myfree0 other functions, ExtractedOnly mode uses other functions
Adding xgets0 other functions, ExtractedOnly mode uses other functions
Adding xgets1 other functions, ExtractedOnly mode uses other functions
Adding xgets2 other functions, ExtractedOnly mode uses other functions
Adding xgets3 other functions, ExtractedOnly mode uses other functions
Adding xgets4 other functions, ExtractedOnly mode uses other functions
Sensitive functions:0 other functions:696
DesiredConnectivity is :1
Other functions to be fed to the network of checkers
cap_ok7
findfiletype4
linit16
entdump3
correct26
skiptoword11
makedent
compoundgood
TeX_math_check3
makedent3
issubset
shellescape4
cap_ok9
TeX_strncmp
treeoutput1
treeoutput8
dofile0
treeoutput19
linit39
treeinit2
main34
treeinit0
expandmode0
setdump3
suf_list_chk6
shellescape1
tinsert3
suf_list_chk5
dofile1
setdump4
insert1
TeX_math_begin3
show_line0
main41
strtoichar0
addvheader
ins_cap0
expand_pre1
linit27
linit20
checkfile0
main7
entdump4
TeX_math_end
treeoutput12
askmode5
printichar1
checkfile3
treeinsert
main32
lookharder
askmode6
treeoutput23
linit14
pr_pre_expansion3
terminit0
pr_pre_expansion
stringcharlen1
xgets
toutent0
TeX_LR_check0
pdictcmp
combineaffixes
treelookup2
good2
insert2
chupcase0
subsetdump0
main14
save_root_cap9
initckch2
usage0
treelookup1
main27
transposedletter0
save_cap4
my_getline
main39
chk_aff2
missingspace1
main20
lookup1
update_file5
linit17
linit49
checkline1
upcase0
correct16
flagout
my_getline6
checkfile5
ichartostr4
suf_list_chk7
dofile
treeoutput13
treeinsert4
askmode
checkfile6
linit13
skiptoword12
pfx_list_chk2
tinsert2
copyout1
treeinsert13
askmode3
show_char14
missingletter2
TeX_strncmp0
combine_two_entries
chk_aff0
linit41
xgets1
checkline19
treeoutput18
linit40
linit2
checkfile7
compoundgood1
linit47
main17
main4
givehelp2
toutent1
expand_suf1
pr_pre_expansion2
subsetdump2
skipoverword
entdump2
treeoutput9
main37
checkline6
checkline3
mymalloc
strtosichar
pr_pre_expansion1
entdump
whatcap3
upcase
main10
toutword2
update_file2
pr_suf_expansion
skiptoword2
expand_suf2
pfx_list_chk
chk_aff
treeinit7
main29
correct1
treeoutput15
main43
flagout1
entdump0
expandmode1
findfiletype5
TeX_skip_args3
makepossibilities3
inserttoken3
flagpr9
checkline5
forcelc0
checkline20
flagpr15
lowcase0
askmode0
TeX_LR_check3
cap_ok10
transposedletter
show_char10
TeX_math_check1
skipoverword4
TeX_skip_check3
skipoverword1
chk_suf0
ichartostr0
correct11
linit32
save_root_cap
stringcharlen5
askmode10
linit22
main40
skiptoword0
save_root_cap8
inverse
askmode2
linit45
correct21
skiptoword9
save_root_cap0
xgets4
transposedletter1
TeX_math_begin2
subsetdump5
casecmp
linit3
lookharder0
suf_list_chk2
whatcap0
treeinsert3
stringcharlen3
combinecaps1
subsetdump4
save_root_cap5
givehelp0
TeX_LR_begin2
pfx_list_chk5
treeinit6
save_root_cap1
main21
save_root_cap3
linit9
main38
my_getline2
onstop0
addvheader3
save_root_cap11
TeX_skip_args0
dumpmode3
terminit3
printichar0
TeX_LR_check4
askmode4
main35
combine_two_entries0
treelookup0
done
main15
save_root_cap4
checkline11
makedent8
treeoutput11
strtoichar1
expand_suf0
skiptoword13
casecmp3
ichartostr1
forcevheader0
flagpr4
skiptoword6
linit28
save_cap1
line_size0
expand_pre
TeX_skip_parens
linit34
strtoichar3
inserttoken1
findfiletype7
cap_ok1
flagpr13
checkline14
dumpmode0
compoundgood0
combinecaps3
missingletter
treeoutput16
printichar
makedent6
main13
main5
askmode9
chk_suf
update_file1
correct15
findfiletype0
combineaffixes0
TeX_LR_check2
show_char11
show_char8
pr_suf_expansion0
makedent9
missingletter0
trydict0
flagpr11
main3
flagpr10
pr_suf_expansion4
show_char4
TeX_skip_check
stringcharlen0
linit42
main2
missingspace2
findfiletype3
linit18
TeX_math_end0
dumpmode2
tbldump
correct23
TeX_skip_parens0
pr_suf_expansion1
terminit
TeX_skip_check2
treeoutput27
casecmp2
main31
linit
givehelp
cap_ok0
ichartosstr0
treeinsert7
correct20
pr_pre_expansion6
posscmp
TeX_math_check2
TeX_skip_check1
makedent4
main33
linit44
whatcap
main1
linit11
skiptoword19
show_char5
expand_pre2
stringcharlen7
makepossibilities4
save_cap0
makedent1
subsetdump
setdump1
initckch
linit8
terminit4
erase
linit43
treeinit1
checkline18
linit21
linit48
linit36
tbldump0
treelookup
onstop
correct0
combinecaps0
linit37
lookup3
xgets0
main9
treeoutput0
treeoutput4
show_char2
main0
main24
toutword
treeoutput28
save_root_cap6
missingspace
treeinsert11
skiptoword4
checkfile1
linit7
wrongletter0
update_file3
show_char3
good4
myfree0
correct10
correct3
show_char
ichartostr
main36
show_line2
TeX_skip_args
trydict
save_root_cap10
copyout0
linit35
treeoutput2
treeinsert12
treeinit4
shellescape
makedent5
linit38
insert
linit33
lookup0
suf_list_chk4
show_line
toutword0
TeX_LR_check1
flagpr16
save_cap3
strtoichar
addvheader2
findfiletype6
cap_ok
update_file4
checkline0
stringcharlen6
show_line3
checkfile2
ichartostr2
treeoutput17
TeX_LR_begin
checkline8
show_char6
xgets3
checkline10
TeX_skip_args1
treeoutput24
TeX_math_end2
makedent10
wrongletter1
my_getline4
flagout0
makepossibilities2
treeload
makepossibilities8
treeinsert6
copyout
skiptoword3
treeoutput31
linit5
main6
addvheader0
acoversb
show_char9
checkline9
show_char13
save_cap
skipoverword3
main42
shellescape5
dofile3
correct17
pr_pre_expansion4
cap_ok5
checkline15
my_getline0
main22
pr_pre_expansion5
suf_list_chk1
suf_list_chk
flagpr7
main23
forcelc1
combinecaps
setdump0
expandmode
checkline16
correct5
show_line1
shellescape3
treeinsert9
treeoutput5
treeoutput10
skiptoword
askmode8
ichartosstr
show_char12
correct24
terminit1
toutent2
show_char0
stringcharlen2
missingspace0
casecmp5
findfiletype2
addvheader1
skiptoword18
checkline
treeoutput7
save_root_cap2
makepossibilities5
pfx_list_chk0
treeoutput20
flagpr6
linit25
makedent2
treeinit3
TeX_LR_begin0
main18
entryhasaffixes
line_size
casecmp4
main28
stringcharlen8
inserttoken5
suf_list_chk3
skiptoword16
compoundgood3
inserttoken2
treeoutput22
hash1
flagpr
good3
treeoutput6
update_file
findfiletype
chk_suf2
toutword1
correct19
linit4
shellescape0
dumpmode4
suf_list_chk0
treeoutput32
givehelp1
move
whatcap1
linit6
linit1
correct8
flagpr8
TeX_math_end1
lookharder2
cap_ok4
treeinit
TeX_math_begin4
tryveryhard
wrongletter
strtoichar2
skiptoword5
dumpmode
treeoutput21
treeinit5
addvheader4
backup
lookup
show_char1
TeX_math_begin
makepossibilities
setdump
correct22
treeinsert10
casecmp6
cap_ok6
wrongcapital
toutent
setdump2
myfree
correct18
tinsert1
main19
main26
TeX_math_begin0
TeX_math_check
TeX_skip_args2
casecmp1
treeinsert1
casecmp0
makepossibilities6
TeX_LR_begin1
initckch0
terminit2
main8
main16
tinsert
cap_ok8
lowcase
flagpr0
treeinsert2
skiptoword15
correct9
pfx_list_chk1
flagpr1
ins_root_cap
extraletter
save_cap2
ins_root_cap0
dumpmode1
pr_pre_expansion0
linit24
treeoutput3
linit30
skiptoword10
correct6
shellescape2
treeoutput29
correct
normal
good0
combine_two_entries2
forcelc
combine_two_entries1
skiptoword8
strtosichar0
TeX_math_begin1
inserttoken4
stringcharlen
makedent0
ichartostr3
correct25
extraletter0
skiptoword7
flagpr3
main
checkline2
whatcap4
linit19
askmode1
subsetdump1
correct2
makepossibilities1
flagpr14
my_getline5
correct12
main11
treeinsert8
lookup2
chupcase
TeX_skip_check0
pfx_list_chk4
hash
chk_aff1
pr_suf_expansion3
my_getline1
linit12
skiptoword17
show_char7
chk_suf1
checkline17
tinsert0
skiptoword1
linit10
treeoutput14
stop
checkfile
insert0
findfiletype1
TeX_open_paren
subsetdump3
flagpr2
main30
trydict2
expand_suf
linit29
makepossibilities7
forcevheader
treeoutput30
my_getline3
correct14
treeoutput26
dofile2
flagpr12
linit15
skiptoword14
treeinsert5
good
tryveryhard0
combinecaps2
makedent7
linit0
main12
makepossibilities0
missingletter1
compoundgood2
treeinsert0
pr_suf_expansion2
skipoverword2
TeX_open_paren0
initckch1
terminit5
hash0
update_file0
linit26
treeoutput
linit31
usage
inserttoken6
checkline13
expand_pre0
flagpr5
TeX_LR_check
main25
stringcharlen4
skipoverword0
checkline7
cap_ok3
checkline4
trydict1
checkline12
linit46
save_root_cap7
xgets2
whatcap2
ins_cap
inserttoken0
linit23
correct4
TeX_math_check0
cap_ok2
inserttoken
correct7
treeoutput25
lookharder1
entdump1
pfx_list_chk3
treeinit8
correct13
checkfile4
askmode7
good1
***
Sensitive functions to be fed to the network of checkers
***
Sensitive functions only checked:0
DAGCheckersNetwork::getReverseTopologicalSort freed visited
Constructed the network of checkers!
Sensitive functions are never checkers as SensitiveOnlyChecked is set to:0
Dumping checkers network info
{
    "allCheckees": [],
    "topologicalsort": []
}
SC stats is requested, dumping stat file...
{
    "avgConnectivity": -nan.0,
    "desiredConnectivity": 1,
    "numberOfGuardInstructions": 0,
    "numberOfGuards": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveInstructions": 0,
    "stdConnectivity": -nan.0
}
Recieved marked functions 0
Functions called in loop
Function call numbers
main5 -- 1
main0 -- 1
main -- 0
Insert hash computation
Pointer Subgraph is broken!
Invalid number of operands for PSNodeType::PHI with ID 14317
  - operands: []
No reaching definition for: @stdout = external global %struct._IO_FILE*, align 8 off: 0
No reaching definition for: @stderr = external global %struct._IO_FILE*, align 8 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
DEF-USE: no information for: pdictcmp
DEF-USE: no information for: onstop
DEF-USE: no information for: done
No reaching definition for:   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %cp.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %p.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %6 = alloca [8192 x i8], align 16, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 in:   store i8* %incdec.ptr16, i8** %q, align 8, !control_dep_instr !7, !data_dep_instr !8 off: 18446744073709551615
No reaching definition for:   %ew = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %ew.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %helpout = alloca %struct._IO_FILE*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %helpout.el = alloca %struct._IO_FILE*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca %struct.dent*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca %struct.dent*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %p.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %ichar = alloca i8, align 1, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %ichar.el = alloca i8, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
DEF-USE: no information for: posscmp
No reaching definition for:   %realword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %realword.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %skip_ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %skip_ch.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
IntToPtr with constant:   <badref> = inttoptr i64 1 to void (i32)*
No reaching definition for: @stdin = external global %struct._IO_FILE*, align 8 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %nextchar = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %nextchar.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %entry1.el = alloca %struct.flagent*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %dp.el = alloca %struct.dent*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %i.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %call57 = call noalias i8* @calloc(i64 1, i64 24) #8, !control_dep_instr !7, !data_indep_instr !10, !global_dep_instr !9 in:   store %struct.dent* null, %struct.dent** %5, align 8, !control_dep_instr !8, !input_indep_instr !11, !data_indep_instr !12 off: 16
No tags were supplied to be skipped! 
'guard' metadata was found in the input bitcode
Recieved marked functions 0
Recieved filter functions 696
Collecting defining blocks for erase
Collecting defining blocks for move
Collecting defining blocks for inverse
Collecting defining blocks for normal
Collecting defining blocks for backup
Collecting defining blocks for terminit
Collecting defining blocks for done
Collecting defining blocks for onstop
Collecting defining blocks for stop
Collecting defining blocks for shellescape
Collecting defining blocks for main
Collecting defining blocks for usage
Collecting defining blocks for initckch
Collecting defining blocks for expandmode
Collecting defining blocks for dofile
Collecting defining blocks for update_file
Collecting defining blocks for givehelp
Collecting defining blocks for checkfile
Collecting defining blocks for correct
Collecting defining blocks for compoundgood
Collecting defining blocks for makepossibilities
Collecting defining blocks for show_line
Collecting defining blocks for line_size
Collecting defining blocks for my_getline
Collecting defining blocks for inserttoken
Collecting defining blocks for lookharder
Collecting defining blocks for show_char
Collecting defining blocks for wrongcapital
Collecting defining blocks for missingletter
Collecting defining blocks for transposedletter
Collecting defining blocks for extraletter
Collecting defining blocks for wrongletter
Collecting defining blocks for missingspace
Collecting defining blocks for tryveryhard
Skip. No dependence graph for function posscmp
Skip. No dependence graph for function casecmp
Collecting defining blocks for save_cap
Collecting defining blocks for insert
Collecting defining blocks for save_root_cap
Collecting defining blocks for ins_cap
Collecting defining blocks for ins_root_cap
Collecting defining blocks for askmode
Collecting defining blocks for copyout
Collecting defining blocks for skipoverword
Collecting defining blocks for checkline
Collecting defining blocks for skiptoword
Collecting defining blocks for TeX_math_check
Collecting defining blocks for TeX_LR_check
Collecting defining blocks for TeX_math_end
Collecting defining blocks for TeX_strncmp
Collecting defining blocks for TeX_skip_parens
Collecting defining blocks for TeX_math_begin
Collecting defining blocks for TeX_skip_check
Collecting defining blocks for TeX_LR_begin
Collecting defining blocks for TeX_open_paren
Collecting defining blocks for TeX_skip_args
Collecting defining blocks for dumpmode
Collecting defining blocks for tbldump
Collecting defining blocks for entdump
Collecting defining blocks for setdump
Collecting defining blocks for subsetdump
Collecting defining blocks for good
Collecting defining blocks for cap_ok
Collecting defining blocks for entryhasaffixes
Collecting defining blocks for flagpr
Collecting defining blocks for linit
Collecting defining blocks for lookup
Collecting defining blocks for hash
Collecting defining blocks for makedent
Collecting defining blocks for strtoichar
Collecting defining blocks for ichartostr
Collecting defining blocks for whatcap
Collecting defining blocks for chupcase
Collecting defining blocks for strtosichar
Collecting defining blocks for upcase
Collecting defining blocks for stringcharlen
Collecting defining blocks for addvheader
Collecting defining blocks for combinecaps
Collecting defining blocks for combine_two_entries
Collecting defining blocks for forcevheader
Collecting defining blocks for combineaffixes
Collecting defining blocks for acoversb
Collecting defining blocks for issubset
Collecting defining blocks for lowcase
Collecting defining blocks for toutent
Collecting defining blocks for ichartosstr
Collecting defining blocks for toutword
Collecting defining blocks for flagout
Collecting defining blocks for printichar
Collecting defining blocks for findfiletype
Collecting defining blocks for chk_aff
Collecting defining blocks for pfx_list_chk
Collecting defining blocks for chk_suf
Collecting defining blocks for suf_list_chk
Collecting defining blocks for expand_pre
Collecting defining blocks for pr_pre_expansion
Collecting defining blocks for forcelc
Collecting defining blocks for expand_suf
Collecting defining blocks for pr_suf_expansion
Collecting defining blocks for treeinit
Collecting defining blocks for trydict
Collecting defining blocks for treeload
Collecting defining blocks for treeinsert
Collecting defining blocks for tinsert
Collecting defining blocks for treelookup
Collecting defining blocks for treeoutput
Skip. No dependence graph for function pdictcmp
Collecting defining blocks for mymalloc
Collecting defining blocks for myfree
Collecting defining blocks for xgets
 Processing function:erase
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
 Processing function:move
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
 Processing function:inverse
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
 Processing function:normal
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
 Processing function:backup
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
 Processing function:terminit
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Processing path: entry  if.end  if.then5  
After path modifications process path
entry  if.end  if.then5  
Processing call instruction..
Processing path: entry  if.end  if.end8  if.then10  
After path modifications process path
entry  if.end  if.end8  if.then10  
Processing path: entry  if.end  if.end8  if.end11  if.then13  
After path modifications process path
entry  if.end  if.end8  if.end11  if.then13  
Processing path: entry  if.end  if.end8  if.end11  if.end17  land.lhs.true  if.then20  if.then22  
After path modifications process path
entry  if.end  if.end8  if.end11  if.end17  land.lhs.true  if.then20  if.then22  
Processing path: entry  if.end  if.end8  if.end11  if.end17  land.lhs.true  if.then20  if.end23  
After path modifications process path
entry  if.end  if.end8  if.end11  if.end17  land.lhs.true  if.then20  if.end23  
Processing path: entry  if.end  if.end8  if.end11  if.end17  if.end24  if.then26  
After path modifications process path
entry  if.end  if.end8  if.end11  if.end17  if.end24  if.then26  
Processing call instruction..
Processing path: entry  if.end  if.end8  if.end11  if.end17  if.end24  if.end28  if.end32  if.then41  
After path modifications process path
entry  if.end  if.end8  if.end11  if.end17  if.end24  if.end28  if.end32  if.then41  
Processing call instruction..
Processing path: entry  if.end  if.end8  if.end11  if.end17  if.end24  if.end28  if.end32  if.end43  if.then47  
After path modifications process path
entry  if.end  if.end8  if.end11  if.end17  if.end24  if.end28  if.end32  if.end43  if.then47  
Processing path: entry  if.end  if.end8  if.end11  if.end17  if.end24  if.end28  if.end32  if.end43  if.end49  if.then53  
After path modifications process path
entry  if.end  if.end8  if.end11  if.end17  if.end24  if.end28  if.end32  if.end43  if.end49  if.then53  
Processing path: entry  if.end  if.end8  if.end11  if.end17  if.end24  if.end28  if.end32  if.end43  if.end49  if.end55  if.then59  
After path modifications process path
entry  if.end  if.end8  if.end11  if.end17  if.end24  if.end28  if.end32  if.end43  if.end49  if.end55  if.then59  
Processing path: entry  if.end  if.end8  if.end11  if.end17  if.end24  if.end28  if.end32  if.end43  if.end49  if.end55  if.end61  if.then65  
After path modifications process path
entry  if.end  if.end8  if.end11  if.end17  if.end24  if.end28  if.end32  if.end43  if.end49  if.end55  if.end61  if.then65  
Processing path: entry  if.end  if.end8  if.end11  if.end17  if.end24  if.end28  if.end32  if.end43  if.end49  if.end55  if.end61  if.end67  
After path modifications process path
entry  if.end  if.end8  if.end11  if.end17  if.end24  if.end28  if.end32  if.end43  if.end49  if.end55  if.end61  if.end67  
Processing path: entry  if.end  if.end8  if.end11  if.end17  if.end24  if.end28  if.then30  
After path modifications process path
entry  if.end  if.end8  if.end11  if.end17  if.end24  if.end28  if.then30  
Processing call instruction..
Processing path: entry  if.end  if.end8  if.end11  if.else  if.then15  
After path modifications process path
entry  if.end  if.end8  if.end11  if.else  if.then15  
Processing path: entry  if.end  if.end8  if.end11  if.else  if.end16  
After path modifications process path
entry  if.end  if.end8  if.end11  if.else  if.end16  
 Processing function:done
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  if.then2  
After path modifications process path
entry  if.end  if.then2  
Processing path: entry  if.end  if.end3  
After path modifications process path
entry  if.end  if.end3  
 Processing function:onstop
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %signo.addr = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @onstop0(i32* %signo.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
 Processing function:stop
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
***Handling a call instruction***
 Processing function:shellescape
Short range hashing enabled.
Processing path: entry  while.cond  while.body  
After path modifications process path
while.body  
Hash path invariants only
Invariants are
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
Processing path: entry  while.cond2  lor.end  while.body9  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @shellescape0(i8** %cp, i8** %buf.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %buf.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @shellescape0(i8** %cp, i8** %buf.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  while.cond  while.body  while.end  if.then  
After path modifications process path
while.body  
Hash path invariants only
Invariants are
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
No oh has been applied in the path
Processing path: entry  while.cond2  lor.end  if.then  
After path modifications process path is empty
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  while.cond13  land.lhs.true  land.rhs  
After path modifications process path
land.lhs.true  land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  while.cond  while.body  while.end  if.end  
After path modifications process path
while.body  if.end  
Hash path invariants only
Invariants are
  br label %while.cond13, !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
No oh has been applied in the path
Processing path: entry  while.cond2  lor.end  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  while.cond13  land.end  while.body23  
After path modifications process path is empty
Processing path: entry  while.cond  while.body  while.end  if.end  
After path modifications process path
while.body  if.end  
Hash path invariants only
Invariants are
  br label %while.cond13, !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
No oh has been applied in the path
Processing path: entry  while.cond2  lor.end  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  while.cond13  land.end  
After path modifications process path is empty
Processing path: entry  while.cond  while.body  while.end  if.end  while.end25  if.then29  
After path modifications process path
while.body  if.end  while.end25  if.then29  
Hash path invariants only
Invariants are
  br label %if.end31, !control_dep_instr !7, !data_indep_instr !11
  call void @shellescape3(i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond13, !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @shellescape3(i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  while.cond2  lor.end  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  while.cond13  land.end  
After path modifications process path is empty
Processing path: entry  while.cond  while.body  while.end  if.end  while.end25  if.end31  
After path modifications process path
while.body  if.end  while.end25  
Hash path invariants only
Invariants are
  br label %while.cond13, !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  while.cond2  lor.end  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  while.cond  while.body  
After path modifications process path
while.body  
Hash path invariants only
Invariants are
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
No oh has been applied in the path
Processing path: entry  while.cond2  lor.rhs  
After path modifications process path
lor.rhs  
Hash path invariants only
Invariants are
  br label %lor.end, !control_dep_instr !7, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  while.cond  while.end32  if.then43  
After path modifications process path is empty
Processing path: entry  while.end32  if.then43  
After path modifications process path
entry  while.end32  if.then43  
Non numeric pointers (int and float) are skipped:  %arrayidx34 = getelementptr inbounds [100 x i8*], [100 x i8*]* %argv, i64 0, i64 %idxprom33, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  while.end32  if.else  if.then48  while.cond49  while.body53  
After path modifications process path is empty
Processing path: entry  while.cond  while.end32  if.else  if.then48  
After path modifications process path is empty
Processing path: entry  while.end32  if.else  if.then48  
After path modifications process path
entry  while.end32  if.else  if.then48  
Non numeric pointers (int and float) are skipped:  %arrayidx34 = getelementptr inbounds [100 x i8*], [100 x i8*]* %argv, i64 0, i64 %idxprom33, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  while.end32  if.else  if.then48  while.cond49  while.end54  
After path modifications process path is empty
Processing path: entry  while.cond  while.end32  if.else  if.then48  while.end54  
After path modifications process path is empty
Processing path: entry  while.end32  if.else  if.then48  while.end54  
After path modifications process path
entry  while.end32  if.else  if.then48  while.end54  
Non numeric pointers (int and float) are skipped:  %arrayidx34 = getelementptr inbounds [100 x i8*], [100 x i8*]* %argv, i64 0, i64 %idxprom33, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %termstat = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @shellescape4(i32* %termstat), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  while.cond  while.end32  if.else  if.end59  if.end60  if.then63  
After path modifications process path is empty
Processing path: entry  while.end32  if.else  if.end59  if.end60  if.then63  
After path modifications process path
entry  while.end32  if.else  if.end59  if.end60  if.then63  
Non numeric pointers (int and float) are skipped:  %arrayidx34 = getelementptr inbounds [100 x i8*], [100 x i8*]* %argv, i64 0, i64 %idxprom33, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  while.cond  while.end32  if.else  if.end59  if.end60  if.end65  if.then68  
After path modifications process path is empty
Processing path: entry  while.end32  if.else  if.end59  if.end60  if.end65  if.then68  
After path modifications process path
entry  while.end32  if.else  if.end59  if.end60  if.end65  if.then68  
Non numeric pointers (int and float) are skipped:  %arrayidx34 = getelementptr inbounds [100 x i8*], [100 x i8*]* %argv, i64 0, i64 %idxprom33, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  while.cond  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.then73  
After path modifications process path is empty
Processing path: entry  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.then73  
After path modifications process path
entry  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.then73  
Non numeric pointers (int and float) are skipped:  %arrayidx34 = getelementptr inbounds [100 x i8*], [100 x i8*]* %argv, i64 0, i64 %idxprom33, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  while.cond  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.then78  
After path modifications process path is empty
Processing path: entry  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.then78  
After path modifications process path
entry  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.then78  
Non numeric pointers (int and float) are skipped:  %arrayidx34 = getelementptr inbounds [100 x i8*], [100 x i8*]* %argv, i64 0, i64 %idxprom33, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  while.cond  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.end80  if.then83  
After path modifications process path is empty
Processing path: entry  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.end80  if.then83  
After path modifications process path
entry  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.end80  if.then83  
Non numeric pointers (int and float) are skipped:  %arrayidx34 = getelementptr inbounds [100 x i8*], [100 x i8*]* %argv, i64 0, i64 %idxprom33, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.end80  if.end85  if.then87  while.cond90  while.body94  
After path modifications process path is empty
Processing path: entry  while.cond  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.end80  if.end85  if.then87  
After path modifications process path is empty
Processing path: entry  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.end80  if.end85  if.then87  
After path modifications process path
entry  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.end80  if.end85  if.then87  
Non numeric pointers (int and float) are skipped:  %arrayidx34 = getelementptr inbounds [100 x i8*], [100 x i8*]* %argv, i64 0, i64 %idxprom33, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.end80  if.end85  if.then87  while.cond90  while.end95  
After path modifications process path is empty
Processing path: entry  while.cond  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.end80  if.end85  if.then87  while.end95  
After path modifications process path is empty
Processing path: entry  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.end80  if.end85  if.then87  while.end95  
After path modifications process path
entry  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.end80  if.end85  if.then87  while.end95  
Non numeric pointers (int and float) are skipped:  %arrayidx34 = getelementptr inbounds [100 x i8*], [100 x i8*]* %argv, i64 0, i64 %idxprom33, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  while.cond  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.end80  if.end85  if.end96  
After path modifications process path is empty
Processing path: entry  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.end80  if.end85  if.end96  
After path modifications process path
entry  while.end32  if.else  if.end59  if.end60  if.end65  if.end70  if.end75  if.end80  if.end85  if.end96  
Non numeric pointers (int and float) are skipped:  %arrayidx34 = getelementptr inbounds [100 x i8*], [100 x i8*]* %argv, i64 0, i64 %idxprom33, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  while.cond  while.end32  if.else  if.else57  
After path modifications process path is empty
Processing path: entry  while.end32  if.else  if.else57  
After path modifications process path
entry  while.end32  if.else  if.else57  
Non numeric pointers (int and float) are skipped:  %arrayidx34 = getelementptr inbounds [100 x i8*], [100 x i8*]* %argv, i64 0, i64 %idxprom33, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
 Processing function:main
Short range hashing enabled.
Processing path: entry  if.then  if.then3  
After path modifications process path
entry  if.then  if.then3  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Non numeric pointers (int and float) are skipped:  %wchars = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 i8*
Insert assertion skipped because there was no hash update in between!
Non numeric pointers (int and float) are skipped:  %preftype = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 i8*
Insert assertion skipped because there was no hash update in between!
Processing call instruction..
Can't handle this operand   %argv.addr = alloca i8**, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main0(i8*** %argv.addr), !input_indep_instr !8, !data_indep_instr !9
Insert assertion skipped because there was no hash update in between!
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main1(i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.then  if.end  if.then11  
After path modifications process path
entry  if.then  if.end  if.then11  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.then  if.end  if.end13  if.then16  
After path modifications process path
entry  if.then  if.end  if.end13  if.then16  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.then  if.end  if.end13  if.end18  if.then21  
After path modifications process path
entry  if.then  if.end  if.end13  if.end18  if.then21  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.then  if.end  if.end13  if.end18  if.end22  
After path modifications process path
entry  if.then  if.end  if.end13  if.end18  if.end22  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.then  if.end  if.end13  if.else17  
After path modifications process path
entry  if.then  if.end  if.end13  if.else17  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.then  if.end  lor.lhs.false  
After path modifications process path
entry  if.then  if.end  lor.lhs.false  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.then  if.else  
After path modifications process path
entry  if.then  if.else  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main2(i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !11, !data_indep_instr !9
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Non numeric pointers (int and float) are skipped:  %cpd = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 i8*
Insert assertion skipped because there was no hash update in between!
Processing call instruction..
Can't handle this operand   %argc.addr = alloca i32, align 4, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main5(i32* %argc.addr, i8*** %argv.addr), !input_indep_instr !8, !data_indep_instr !9
Can't handle this operand   %argv.addr = alloca i8**, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main5(i32* %argc.addr, i8*** %argv.addr), !input_indep_instr !8, !data_indep_instr !9
Insert assertion skipped because there was no hash update in between!
Insert assertion skipped because there was no hash update in between!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.default  
After path modifications process path
sw.default  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
No oh has been applied in the path
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.epilog  
After path modifications process path is empty
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb  if.then34  
After path modifications process path is empty
Processing path: entry  if.end25  sw.bb  if.then34  
After path modifications process path
entry  if.end25  sw.bb  if.then34  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  sw.bb  if.end35  for.cond  for.body  if.then41  
After path modifications process path
for.body  if.then41  
Hash path invariants only
Invariants are
  br label %if.end42, !control_dep_instr !11, !data_indep_instr !9
  call void @main6(i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main6(i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb  if.end35  
After path modifications process path is empty
Processing path: entry  if.end25  sw.bb  if.end35  
After path modifications process path
entry  if.end25  sw.bb  if.end35  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  sw.bb  if.end35  for.cond  for.body  if.end42  
After path modifications process path
for.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb  if.end35  
After path modifications process path is empty
Processing path: entry  if.end25  sw.bb  if.end35  
After path modifications process path
entry  if.end25  sw.bb  if.end35  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  sw.bb  if.end35  for.cond  for.end  if.then48  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb  if.end35  for.end  if.then48  
After path modifications process path is empty
Processing path: entry  if.end25  sw.bb  if.end35  for.end  if.then48  
After path modifications process path
entry  if.end25  sw.bb  if.end35  for.end  if.then48  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  sw.bb  if.end35  for.cond  for.end  if.end134  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb  if.end35  for.end  if.end134  
After path modifications process path is empty
Processing path: entry  if.end25  sw.bb  if.end35  for.end  if.end134  
After path modifications process path
entry  if.end25  sw.bb  if.end35  for.end  if.end134  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb135  if.then138  
After path modifications process path
sw.bb135  if.then138  
Hash path invariants only
Invariants are
  br label %if.end139, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb135  if.end139  if.then142  
After path modifications process path
sw.bb135  if.end139  if.then142  
Hash path invariants only
Invariants are
  br label %if.end143, !control_dep_instr !11, !data_indep_instr !9
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.127, i32 0, i32 0), i8** %preftype, align 8, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
  store i32 0, i32* @deftflag, align 4, !control_dep_instr !11, !data_indep_instr !9
  store i32 0, i32* @tflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Non numeric pointers (int and float) are skipped:  %preftype = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 i8*
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb135  if.end139  if.end143  
After path modifications process path
sw.bb135  if.end139  if.end143  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
  store i32 0, i32* @deftflag, align 4, !control_dep_instr !11, !data_indep_instr !9
  store i32 0, i32* @tflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb144  if.then147  
After path modifications process path
sw.bb144  if.then147  
Hash path invariants only
Invariants are
  br label %if.end148, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb144  if.end148  if.then151  
After path modifications process path
sw.bb144  if.end148  if.then151  
Hash path invariants only
Invariants are
  br label %if.end152, !control_dep_instr !11, !data_indep_instr !9
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.128, i32 0, i32 0), i8** %preftype, align 8, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
  store i32 1, i32* @deftflag, align 4, !control_dep_instr !11, !data_indep_instr !9
  store i32 1, i32* @tflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Non numeric pointers (int and float) are skipped:  %preftype = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 i8*
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb144  if.end148  if.end152  
After path modifications process path
sw.bb144  if.end148  if.end152  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
  store i32 1, i32* @deftflag, align 4, !control_dep_instr !11, !data_indep_instr !9
  store i32 1, i32* @tflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb153  if.then158  if.then163  
After path modifications process path
sw.bb153  if.then158  if.then163  
Hash path invariants only
Invariants are
  br label %if.end164, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb153  if.then158  if.end164  
After path modifications process path
sw.bb153  if.then158  if.end164  
Hash path invariants only
Invariants are
  br label %if.end165, !control_dep_instr !11, !data_indep_instr !9
  call void @main9(i8** %p, i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main9(i8** %p, i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Can't handle this operand   %argv.addr = alloca i8**, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main9(i8** %p, i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb153  if.end165  
After path modifications process path
sw.bb153  if.end165  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  call void @main10(i8** %preftype, i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %preftype = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main10(i8** %preftype, i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main10(i8** %preftype, i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb166  if.then169  
After path modifications process path
sw.bb166  if.then169  
Hash path invariants only
Invariants are
  br label %if.end170, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb166  if.end170  
After path modifications process path
sw.bb166  if.end170  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  store i32 1, i32* @aflag, align 4, !control_dep_instr !11, !data_indep_instr !9
  store i32 1, i32* @incfileflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb171  if.then174  
After path modifications process path
sw.bb171  if.then174  
Hash path invariants only
Invariants are
  br label %if.end175, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb171  if.end175  
After path modifications process path
sw.bb171  if.end175  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  call void @main11(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb176  if.then179  
After path modifications process path
sw.bb176  if.then179  
Hash path invariants only
Invariants are
  br label %if.end180, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb176  if.end180  
After path modifications process path
sw.bb176  if.end180  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  call void @main12(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb183  if.then186  
After path modifications process path
sw.bb183  if.then186  
Hash path invariants only
Invariants are
  br label %if.end187, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb183  if.end187  if.then192  
After path modifications process path
sw.bb183  if.end187  if.then192  
Hash path invariants only
Invariants are
  store i32 2, i32* @eflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
  br label %if.end213, !control_dep_instr !11, !data_indep_instr !9
  store i32 1, i32* @eflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb183  if.end187  if.end213  
After path modifications process path
sw.bb183  if.end187  if.end213  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  call void @main14(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
  store i32 1, i32* @eflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb183  if.end187  if.else193  land.lhs.true  if.then202  
After path modifications process path
sw.bb183  if.end187  if.else193  land.lhs.true  if.then202  
Hash path invariants only
Invariants are
  call void @main13(i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
  br label %if.end212, !control_dep_instr !11, !data_indep_instr !9
  store i32 1, i32* @eflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %argv.addr = alloca i8**, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main13(i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb183  if.end187  if.else193  if.end212  
After path modifications process path
sw.bb183  if.end187  if.else193  if.end212  
Hash path invariants only
Invariants are
  br label %if.end213, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
  store i32 1, i32* @eflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb183  if.end187  if.else193  if.else205  if.then210  
After path modifications process path
sw.bb183  if.end187  if.else193  if.else205  if.then210  
Hash path invariants only
Invariants are
  br label %if.end211, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
  store i32 1, i32* @eflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb183  if.end187  if.else193  if.else205  if.end211  
After path modifications process path
sw.bb183  if.end187  if.else193  if.else205  if.end211  
Hash path invariants only
Invariants are
  br label %if.end212, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
  store i32 1, i32* @eflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb215  if.then218  
After path modifications process path
sw.bb215  if.then218  
Hash path invariants only
Invariants are
  br label %if.end219, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb215  if.end219  
After path modifications process path
sw.bb215  if.end219  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  call void @main15(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb223  if.then226  
After path modifications process path
sw.bb223  if.then226  
Hash path invariants only
Invariants are
  br label %if.end227, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb223  if.end227  
After path modifications process path
sw.bb223  if.end227  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  store i32 0, i32* @xflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb228  if.then231  
After path modifications process path
sw.bb228  if.then231  
Hash path invariants only
Invariants are
  br label %if.end232, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb228  if.end232  
After path modifications process path
sw.bb228  if.end232  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  store i32 1, i32* @xflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb233  if.then239  if.then244  
After path modifications process path
sw.bb233  if.then239  if.then244  
Hash path invariants only
Invariants are
  br label %if.end245, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb233  if.then239  if.end245  
After path modifications process path
sw.bb233  if.then239  if.end245  
Hash path invariants only
Invariants are
  br label %if.end246, !control_dep_instr !11, !data_indep_instr !9
  call void @main16(i8** %p, i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main16(i8** %p, i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Can't handle this operand   %argv.addr = alloca i8**, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main16(i8** %p, i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb233  if.end246  if.then250  
After path modifications process path
sw.bb233  if.end246  if.then250  
Hash path invariants only
Invariants are
  br label %if.end251, !control_dep_instr !11, !data_indep_instr !9, !global_dep_instr !14
  store i8* null, i8** @askfilename, align 8, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12, !global_dep_instr !14
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Non numeric pointers (int and float) are skipped:@askfilename = common global i8* null, align 8 i8*
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb233  if.end246  if.end251  
After path modifications process path
sw.bb233  if.end246  if.end251  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb252  if.then257  if.then262  
After path modifications process path
sw.bb252  if.then257  if.then262  
Hash path invariants only
Invariants are
  br label %if.end263, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb252  if.then257  if.end263  
After path modifications process path
sw.bb252  if.then257  if.end263  
Hash path invariants only
Invariants are
  br label %if.end264, !control_dep_instr !11, !data_indep_instr !9
  call void @main17(i8** %p, i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main17(i8** %p, i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Can't handle this operand   %argv.addr = alloca i8**, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main17(i8** %p, i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb252  if.end264  
After path modifications process path
sw.bb252  if.end264  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  call void @main18(i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main18(i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb266  if.then269  
After path modifications process path
sw.bb266  if.then269  
Hash path invariants only
Invariants are
  br label %if.end270, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb266  if.end270  
After path modifications process path
sw.bb266  if.end270  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  call void @main19(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb272  if.then275  
After path modifications process path
sw.bb272  if.then275  
Hash path invariants only
Invariants are
  br label %if.end276, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb272  if.end276  
After path modifications process path
sw.bb272  if.end276  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  call void @main20(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb278  if.then281  
After path modifications process path
sw.bb278  if.then281  
Hash path invariants only
Invariants are
  br label %if.end282, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb278  if.end282  
After path modifications process path
sw.bb278  if.end282  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  store i32 0, i32* @sortit, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb283  if.then286  
After path modifications process path
sw.bb283  if.then286  
Hash path invariants only
Invariants are
  br label %if.end287, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb283  if.end287  
After path modifications process path
sw.bb283  if.end287  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  store i32 0, i32* @compoundflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb288  if.then291  
After path modifications process path
sw.bb288  if.then291  
Hash path invariants only
Invariants are
  br label %if.end292, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb288  if.end292  
After path modifications process path
sw.bb288  if.end292  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  store i32 1, i32* @compoundflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb293  if.then296  
After path modifications process path
sw.bb293  if.then296  
Hash path invariants only
Invariants are
  br label %if.end297, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb293  if.end297  
After path modifications process path
sw.bb293  if.end297  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  store i32 0, i32* @tryhardflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb298  if.then301  
After path modifications process path
sw.bb298  if.then301  
Hash path invariants only
Invariants are
  br label %if.end302, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb298  if.end302  
After path modifications process path
sw.bb298  if.end302  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  store i32 1, i32* @tryhardflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb303  if.then306  
After path modifications process path
sw.bb303  if.then306  
Hash path invariants only
Invariants are
  br label %if.end307, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb303  if.end307  
After path modifications process path
sw.bb303  if.end307  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  store i32 0, i32* @minimenusize, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb308  if.then311  
After path modifications process path
sw.bb308  if.then311  
Hash path invariants only
Invariants are
  br label %if.end312, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb308  if.end312  
After path modifications process path
sw.bb308  if.end312  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  store i32 2, i32* @minimenusize, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb313  if.then318  if.then323  
After path modifications process path
sw.bb313  if.then318  if.then323  
Hash path invariants only
Invariants are
  br label %if.end324, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb313  if.then318  if.end324  if.then328  
After path modifications process path
sw.bb313  if.then318  if.end324  if.then328  
Hash path invariants only
Invariants are
  br label %if.end329, !control_dep_instr !11, !data_indep_instr !9
  store i8* null, i8** %cpd, align 8, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Non numeric pointers (int and float) are skipped:  %cpd = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 i8*
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb313  if.then318  if.end324  if.end329  
After path modifications process path
sw.bb313  if.then318  if.end324  if.end329  
Hash path invariants only
Invariants are
  br label %if.end330, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb313  if.end330  
After path modifications process path
sw.bb313  if.end330  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  store i8* null, i8** @LibDict, align 8, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Non numeric pointers (int and float) are skipped:@LibDict = internal global i8* null, align 8 i8*
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb331  if.then336  if.then341  
After path modifications process path
sw.bb331  if.then336  if.then341  
Hash path invariants only
Invariants are
  br label %if.end342, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb331  if.then336  if.end342  
After path modifications process path
sw.bb331  if.then336  if.end342  
Hash path invariants only
Invariants are
  br label %if.end343, !control_dep_instr !11, !data_indep_instr !9
  call void @main21(i8** %p, i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main21(i8** %p, i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Can't handle this operand   %argv.addr = alloca i8**, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main21(i8** %p, i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb331  if.end343  if.then347  
After path modifications process path
sw.bb331  if.end343  if.then347  
Hash path invariants only
Invariants are
  br label %if.end351, !control_dep_instr !11, !data_indep_instr !9
  call void @main22(i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main22(i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb331  if.end343  if.end351  land.lhs.true354  if.then358  
After path modifications process path
sw.bb331  if.end343  if.end351  land.lhs.true354  if.then358  
Hash path invariants only
Invariants are
  br label %if.end359, !control_dep_instr !11, !data_indep_instr !9
  call void @main24(i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main24(i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb331  if.end343  if.end351  if.end359  land.lhs.true363  if.then367  
After path modifications process path
sw.bb331  if.end343  if.end351  if.end359  land.lhs.true363  if.then367  
Hash path invariants only
Invariants are
  br label %if.end370, !control_dep_instr !11, !data_indep_instr !9
  call void @main25(i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main25(i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb331  if.end343  if.end351  if.end359  if.end370  if.then373  if.then377  
After path modifications process path
sw.bb331  if.end343  if.end351  if.end359  if.end370  if.then373  if.then377  
Hash path invariants only
Invariants are
  br label %if.end379, !control_dep_instr !11, !data_indep_instr !9
  call void @main26(i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main26(i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb331  if.end343  if.end351  if.end359  if.end370  if.then373  if.end379  
After path modifications process path
sw.bb331  if.end343  if.end351  if.end359  if.end370  if.then373  if.end379  
Hash path invariants only
Invariants are
  br label %if.end380, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb331  if.end343  if.end351  if.end359  if.end370  if.end380  
After path modifications process path
sw.bb331  if.end343  if.end351  if.end359  if.end370  if.end380  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb331  if.end343  if.end351  if.end359  if.else368  
After path modifications process path
sw.bb331  if.end343  if.end351  if.end359  if.else368  
Hash path invariants only
Invariants are
  br label %if.end370, !control_dep_instr !11, !data_indep_instr !9
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb331  if.end343  if.else349  
After path modifications process path
sw.bb331  if.end343  if.else349  
Hash path invariants only
Invariants are
  br label %if.end351, !control_dep_instr !11, !data_indep_instr !9
  call void @main23(i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main23(i8** %p), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb381  if.then384  
After path modifications process path
sw.bb381  if.then384  
Hash path invariants only
Invariants are
  br label %if.end385, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb381  if.end385  
After path modifications process path
sw.bb381  if.end385  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9
  store i32 1, i32* @vflag, align 4, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb386  if.then391  if.then396  
After path modifications process path
sw.bb386  if.then391  if.then396  
Hash path invariants only
Invariants are
  br label %if.end397, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb386  if.then391  if.end397  
After path modifications process path
sw.bb386  if.then391  if.end397  
Hash path invariants only
Invariants are
  br label %if.end398, !control_dep_instr !11, !data_indep_instr !9
  call void @main27(i8** %wchars, i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %wchars = alloca i8*, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main27(i8** %wchars, i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Can't handle this operand   %argv.addr = alloca i8**, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main27(i8** %wchars, i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb386  if.end398  
After path modifications process path
sw.bb386  if.end398  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb399  if.then404  if.then409  
After path modifications process path
sw.bb399  if.then404  if.then409  
Hash path invariants only
Invariants are
  br label %if.end410, !control_dep_instr !11, !data_indep_instr !9
  call void @usage(), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb399  if.then404  if.end410  
After path modifications process path
sw.bb399  if.then404  if.end410  
Hash path invariants only
Invariants are
  br label %if.end415, !control_dep_instr !11, !data_indep_instr !9
  call void @main28(i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %argv.addr = alloca i8**, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main28(i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb399  if.end415  
After path modifications process path
sw.bb399  if.end415  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.body  sw.bb399  if.else412  
After path modifications process path
sw.bb399  if.else412  
Hash path invariants only
Invariants are
  br label %if.end415, !control_dep_instr !11, !data_indep_instr !9
  call void @main29(i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %argv.addr = alloca i8**, align 8, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main29(i8*** %argv.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
No short range oh has been applied in the path
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.body432  if.then437  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  if.then437  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  if.then437  
After path modifications process path
entry  if.end25  while.end  if.end428  if.then437  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.body432  if.end438  for.inc  
After path modifications process path
if.end438  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  
After path modifications process path
entry  if.end25  while.end  if.end428  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  land.lhs.true443  land.lhs.true445  land.lhs.true447  land.lhs.true449  if.then451  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  land.lhs.true443  land.lhs.true445  land.lhs.true447  land.lhs.true449  if.then451  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  land.lhs.true443  land.lhs.true445  land.lhs.true447  land.lhs.true449  if.then451  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  land.lhs.true443  land.lhs.true445  land.lhs.true447  land.lhs.true449  if.then451  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
Can't handle this operand   %argc.addr = alloca i32, align 4, !input_dep_instr !6, !data_dep_instr !7 of the call   call void @main32(i32* %argc.addr), !control_dep_instr !11, !data_indep_instr !9, !input_dep_block !12
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  if.end455  if.then459  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  if.end455  if.then459  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.then459  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  if.end455  if.then459  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  if.end455  if.end460  if.then463  land.lhs.true470  land.lhs.true474  if.then478  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  if.end455  if.end460  if.then463  land.lhs.true470  land.lhs.true474  if.then478  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.then463  land.lhs.true470  land.lhs.true474  if.then478  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.then463  land.lhs.true470  land.lhs.true474  if.then478  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  if.end455  if.end460  if.then463  if.end480  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  if.end455  if.end460  if.then463  if.end480  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.then463  if.end480  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.then463  if.end480  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  if.end455  if.end460  if.end481  if.then484  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.then484  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.then484  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.then484  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  if.end455  if.end460  if.end481  if.end486  if.then489  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.then489  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.then489  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.then489  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.then494  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.then494  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.then494  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.then494  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.then499  land.lhs.true504  if.then508  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.then499  land.lhs.true504  if.then508  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.then499  land.lhs.true504  if.then508  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.then499  land.lhs.true504  if.then508  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.then499  if.end509  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.then499  if.end509  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.then499  if.end509  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.then499  if.end509  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.then515  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.then515  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.then515  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.then515  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.then518  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.then518  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.then518  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.then518  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.then521  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.then521  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.then521  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.then521  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.end522  if.end523  if.end524  if.then526  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.end522  if.end523  if.end524  if.then526  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.end522  if.end523  if.end524  if.then526  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.end522  if.end523  if.end524  if.then526  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.end522  if.end523  if.end524  if.end527  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.end522  if.end523  if.end524  if.end527  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.end522  if.end523  if.end524  if.end527  while.cond528  while.body531  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.end522  if.end523  if.end524  if.end527  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.end522  if.end523  if.end524  if.end527  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.end522  if.end523  if.end524  if.end527  while.end533  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.end522  if.end523  if.end524  if.end527  while.end533  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.end522  if.end523  if.end524  if.end527  while.cond528  while.end533  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.end522  if.end523  if.end524  if.end527  while.end533  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.end513  if.else516  if.else519  if.end522  if.end523  if.end524  if.end527  while.end533  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing call instruction..
***Handling a call instruction***
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.then512  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.then512  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.then512  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.end486  if.end491  if.end496  if.end510  if.then512  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.end  if.end428  for.cond429  for.end440  if.end455  if.end460  if.end481  if.else485  
After path modifications process path is empty
Processing path: entry  if.end25  while.cond  land.end  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.else485  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.else485  
After path modifications process path
entry  if.end25  while.end  if.end428  for.end440  if.end455  if.end460  if.end481  if.else485  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.end25  while.cond  land.end  while.end  land.lhs.true419  land.lhs.true421  land.lhs.true423  land.lhs.true425  if.then427  
After path modifications process path is empty
Processing path: entry  if.end25  while.end  land.lhs.true419  land.lhs.true421  land.lhs.true423  land.lhs.true425  if.then427  
After path modifications process path
entry  if.end25  while.end  land.lhs.true419  land.lhs.true421  land.lhs.true423  land.lhs.true425  if.then427  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
Processing path: entry  if.else23  
After path modifications process path
entry  if.else23  
Insert assertion evaluating function:main callsites detected =0
Insert assertion included function:main because it is not in the skip  assert list!
No oh has been applied in the path
 Processing function:usage
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
 Processing function:initckch
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  if.end  
After path modifications process path
for.body  if.then  if.end  
Hash path invariants only
Invariants are
  br label %if.end18, !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.then  if.then7  
After path modifications process path
for.body  if.then  if.then7  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end18  for.inc  
After path modifications process path
for.body  if.end18  
Hash path invariants only
Invariants are
  br label %for.inc, !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.else  if.then13  
After path modifications process path
for.body  if.else  if.then13  
Hash path invariants only
Invariants are
  br label %if.end17, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.else  if.end17  
After path modifications process path
for.body  if.else  if.end17  
Hash path invariants only
Invariants are
  br label %if.end18, !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.end  if.then22  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  land.lhs.true  if.then34  
After path modifications process path
while.body  land.lhs.true  if.then34  
Hash path invariants only
Invariants are
  br label %if.end121, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  call void @initckch1(i8* %c, i8** %wchars.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !13
Processing call instruction..
Can't handle this operand   %c = alloca i8, align 1, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @initckch1(i8* %c, i8** %wchars.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !13
Can't handle this operand   %wchars.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @initckch1(i8* %c, i8** %wchars.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.end121  if.end138  
After path modifications process path
while.body  if.end121  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.end121  if.then128  
After path modifications process path
while.body  if.end121  if.then128  
Hash path invariants only
Invariants are
  br label %if.end138, !control_dep_instr !7, !data_indep_instr !11
  call void @initckch2(i8* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %c = alloca i8, align 1, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @initckch2(i8* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.then47  if.then58  if.then69  
After path modifications process path
while.body  if.else35  if.then47  if.then58  if.then69  
Hash path invariants only
Invariants are
  %arrayidx60 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %96 = load i16*, i16** %call53, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx49 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %102 = load i16*, i16** %call64, align 8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %call64 = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx71 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %call53 = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end72, !control_dep_instr !7, !data_indep_instr !11
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  %90 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.then47  if.then58  if.end72  
After path modifications process path
while.body  if.else35  if.then47  if.then58  if.end72  
Hash path invariants only
Invariants are
  %arrayidx60 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx49 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %111 = load i16*, i16** %call53, align 8, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end73, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %104 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %call53 = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %call64 = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  %118 = load i16*, i16** %call64, align 8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.then47  if.end73  
After path modifications process path
while.body  if.else35  if.then47  if.end73  
Hash path invariants only
Invariants are
  br label %if.end74, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %arrayidx49 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %126 = load i16*, i16** %call53, align 8, !control_dep_instr !7, !data_dep_instr !8
  %118 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %call53 = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.end74  if.then79  
After path modifications process path
while.body  if.else35  if.end74  if.then79  
Hash path invariants only
Invariants are
  %arraydecay81 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end120, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %num, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %132 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.end74  if.end120  
After path modifications process path
while.body  if.else35  if.end74  if.end120  
Hash path invariants only
Invariants are
  %146 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end121, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.end74  if.else84  if.then90  
After path modifications process path
while.body  if.else35  if.end74  if.else84  if.then90  
Hash path invariants only
Invariants are
  %arrayidx91 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  store i8 0, i8* %c, align 1, !control_dep_instr !7, !data_indep_instr !11
  %160 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay85 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  br label %if.end94, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx88 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.end74  if.else84  if.end94  if.then97  
After path modifications process path
while.body  if.else35  if.end74  if.else84  if.end94  if.then97  
Hash path invariants only
Invariants are
  %arrayidx95 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  store i8 0, i8* %c, align 1, !control_dep_instr !7, !data_indep_instr !11
  %174 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx100 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end106, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay85 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx88 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.end74  if.else84  if.end94  if.end106  if.then109  
After path modifications process path
while.body  if.else35  if.end74  if.else84  if.end94  if.end106  if.then109  
Hash path invariants only
Invariants are
  %arrayidx107 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %arrayidx95 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  store i8 0, i8* %c, align 1, !control_dep_instr !7, !data_indep_instr !11
  %188 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay85 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx113 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end119, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx88 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.end74  if.else84  if.end94  if.end106  if.end119  
After path modifications process path
while.body  if.else35  if.end74  if.else84  if.end94  if.end106  if.end119  
Hash path invariants only
Invariants are
  br label %if.end120, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %arrayidx107 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %arrayidx95 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  store i8 0, i8* %c, align 1, !control_dep_instr !7, !data_indep_instr !11
  %202 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay85 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx88 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.end  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  if.then22  while.end  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  while.end  
After path modifications process path
entry  for.end  if.then22  while.end  
Processing path: entry  for.cond  for.end  if.end139  
After path modifications process path is empty
Processing path: entry  for.end  if.end139  
After path modifications process path
entry  for.end  if.end139  
 Processing function:expandmode
Short range hashing enabled.
Processing path: entry  while.cond  while.body  if.then  
After path modifications process path
while.body  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.body  if.end  if.then16  
After path modifications process path
while.body  if.end  if.then16  
Hash path invariants only
Invariants are
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay17 to i64, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay17 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay9 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end19, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.body  if.end  if.end19  if.then27  
After path modifications process path
while.body  if.end  if.end19  if.then27  
Hash path invariants only
Invariants are
  br label %if.end30, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay28 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay9 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.body  if.end  if.end19  if.end30  if.then33  if.then40  
After path modifications process path
while.body  if.end  if.end19  if.end30  if.then33  if.then40  
Hash path invariants only
Invariants are
  store i8 0, i8* %arrayidx41, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx41 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i64 0, i64 100, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %sub.ptr.rhs.cast36 = ptrtoint i8* %arraydecay34 to i64, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay34 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end42, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay9 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.body  if.end  if.end19  if.end30  if.then33  if.end42  
After path modifications process path
while.body  if.end  if.end19  if.end30  if.then33  if.end42  
Hash path invariants only
Invariants are
  br label %if.end51, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay34 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %sub.ptr.rhs.cast36 = ptrtoint i8* %arraydecay34 to i64, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay9 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond58  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  while.cond  while.body  if.end  if.end19  if.end30  if.end51  if.then56  
After path modifications process path
while.body  if.end  if.end19  if.end30  if.end51  if.then56  
Hash path invariants only
Invariants are
  br label %while.cond58, !control_dep_instr !7, !data_indep_instr !11
  %42 = bitcast i64* %arraydecay57 to i8*, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay52 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay9 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay57 = getelementptr inbounds [1 x i64], [1 x i64]* %mask, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond58  land.end  while.body65  land.lhs.true  if.then72  
After path modifications process path
while.body65  land.lhs.true  if.then72  
Hash path invariants only
Invariants are
  br label %if.end77, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx73 = getelementptr inbounds [1 x i64], [1 x i64]* %mask, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  while.cond  while.body  if.end  if.end19  if.end30  if.end51  if.then56  
After path modifications process path
while.body  if.end  if.end19  if.end30  if.end51  if.then56  
Hash path invariants only
Invariants are
  br label %while.cond58, !control_dep_instr !7, !data_indep_instr !11
  %47 = bitcast i64* %arraydecay57 to i8*, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay52 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay9 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay57 = getelementptr inbounds [1 x i64], [1 x i64]* %mask, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond58  land.end  while.body65  if.end77  if.then83  
After path modifications process path
while.body65  if.end77  if.then83  
Hash path invariants only
Invariants are
  br label %if.end85, !control_dep_instr !7, !data_indep_instr !11
  call void @expandmode1(i8** %flagp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %flagp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expandmode1(i8** %flagp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  while.cond  while.body  if.end  if.end19  if.end30  if.end51  if.then56  
After path modifications process path
while.body  if.end  if.end19  if.end30  if.end51  if.then56  
Hash path invariants only
Invariants are
  br label %while.cond58, !control_dep_instr !7, !data_indep_instr !11
  %52 = bitcast i64* %arraydecay57 to i8*, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay52 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay9 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay57 = getelementptr inbounds [1 x i64], [1 x i64]* %mask, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond58  land.end  while.body65  if.end77  if.end85  
After path modifications process path
while.body65  if.end77  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  while.cond  while.body  if.end  if.end19  if.end30  if.end51  if.then56  
After path modifications process path
while.body  if.end  if.end19  if.end30  if.end51  if.then56  
Hash path invariants only
Invariants are
  br label %while.cond58, !control_dep_instr !7, !data_indep_instr !11
  %57 = bitcast i64* %arraydecay57 to i8*, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay52 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay9 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay57 = getelementptr inbounds [1 x i64], [1 x i64]* %mask, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond58  land.end  while.body65  if.else74  
After path modifications process path
while.body65  if.else74  
Hash path invariants only
Invariants are
  br label %if.end77, !control_dep_instr !7, !data_indep_instr !11
  call void @expandmode0(i8** %flagp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %flagp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expandmode0(i8** %flagp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  while.cond  while.body  if.end  if.end19  if.end30  if.end51  if.then56  
After path modifications process path
while.body  if.end  if.end19  if.end30  if.end51  if.then56  
Hash path invariants only
Invariants are
  br label %while.cond58, !control_dep_instr !7, !data_indep_instr !11
  %62 = bitcast i64* %arraydecay57 to i8*, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay52 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay9 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay57 = getelementptr inbounds [1 x i64], [1 x i64]* %mask, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond58  land.end  
After path modifications process path is empty
Processing path: entry  while.cond  while.body  if.end  if.end19  if.end30  if.end51  if.then56  while.end  if.then89  
After path modifications process path
while.body  if.end  if.end19  if.end30  if.end51  if.then56  while.end  if.then89  
Hash path invariants only
Invariants are
  br label %if.end92, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay90 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay57 = getelementptr inbounds [1 x i64], [1 x i64]* %mask, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay9 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay87 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay52 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %67 = bitcast i64* %arraydecay57 to i8*, !control_dep_instr !7, !data_dep_instr !8
  br label %while.cond58, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay86 = getelementptr inbounds [8192 x i8], [8192 x i8]* %ibuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond58  land.end  
After path modifications process path is empty
Processing path: entry  while.cond  while.body  if.end  if.end19  if.end30  if.end51  if.then56  while.end  if.end92  if.then104  
After path modifications process path
while.body  if.end  if.end19  if.end30  if.end51  if.then56  while.end  if.end92  if.then104  
Hash path invariants only
Invariants are
  br label %if.end121, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay119 = getelementptr inbounds [20 x i8], [20 x i8]* %ratiobuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay118 = getelementptr inbounds [1 x i64], [1 x i64]* %mask, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay117 = getelementptr inbounds [8192 x i8], [8192 x i8]* %ibuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay116 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay86 = getelementptr inbounds [8192 x i8], [8192 x i8]* %ibuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %while.cond58, !control_dep_instr !7, !data_indep_instr !11
  %72 = bitcast i64* %arraydecay57 to i8*, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay52 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay93 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay87 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay99 = getelementptr inbounds [1 x i64], [1 x i64]* %mask, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay9 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay57 = getelementptr inbounds [1 x i64], [1 x i64]* %mask, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay109 = getelementptr inbounds [20 x i8], [20 x i8]* %ratiobuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay113 = getelementptr inbounds [1 x i64], [1 x i64]* %mask, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay98 = getelementptr inbounds [8192 x i8], [8192 x i8]* %ibuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay94 = getelementptr inbounds [8192 x i8], [8192 x i8]* %ibuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay95 = getelementptr inbounds [1 x i64], [1 x i64]* %mask, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay97 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay114 = getelementptr inbounds [20 x i8], [20 x i8]* %ratiobuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay105 = getelementptr inbounds [20 x i8], [20 x i8]* %ratiobuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay111 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay112 = getelementptr inbounds [8192 x i8], [8192 x i8]* %ibuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond58  land.end  
After path modifications process path is empty
Processing path: entry  while.cond  while.body  if.end  if.end19  if.end30  if.end51  if.then56  while.end  if.end92  if.end121  
After path modifications process path
while.body  if.end  if.end19  if.end30  if.end51  if.then56  while.end  if.end92  if.end121  
Hash path invariants only
Invariants are
  br label %if.end122, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay97 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay95 = getelementptr inbounds [1 x i64], [1 x i64]* %mask, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay94 = getelementptr inbounds [8192 x i8], [8192 x i8]* %ibuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay57 = getelementptr inbounds [1 x i64], [1 x i64]* %mask, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay9 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay87 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay98 = getelementptr inbounds [8192 x i8], [8192 x i8]* %ibuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay93 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay52 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay99 = getelementptr inbounds [1 x i64], [1 x i64]* %mask, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %77 = bitcast i64* %arraydecay57 to i8*, !control_dep_instr !7, !data_dep_instr !8
  br label %while.cond58, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay86 = getelementptr inbounds [8192 x i8], [8192 x i8]* %ibuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.body  if.end  if.end19  if.end30  if.end51  if.end122  
After path modifications process path
while.body  if.end  if.end19  if.end30  if.end51  
Hash path invariants only
Invariants are
  %arraydecay52 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay9 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.body  if.end  if.end19  if.end30  if.else  if.then48  
After path modifications process path
while.body  if.end  if.end19  if.end30  if.else  if.then48  
Hash path invariants only
Invariants are
  store i8 0, i8* %arrayidx49, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end50, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay43 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx49 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i64 0, i64 100, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay9 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.body  if.end  if.end19  if.end30  if.else  if.end50  
After path modifications process path
while.body  if.end  if.end19  if.end30  if.else  if.end50  
Hash path invariants only
Invariants are
  br label %if.end51, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay43 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay9 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.body  if.end  if.end19  lor.lhs.false  lor.lhs.false24  
After path modifications process path
while.body  if.end  if.end19  lor.lhs.false  lor.lhs.false24  
Hash path invariants only
Invariants are
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %origbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay9 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.end124  
After path modifications process path is empty
Processing path: entry  while.end124  
After path modifications process path
entry  while.end124  
No oh has been applied in the path
 Processing function:dofile
Short range hashing enabled.
Processing path: entry  if.then  land.rhs  
After path modifications process path
entry  if.then  land.rhs  
Processing path: entry  if.then  land.end  
After path modifications process path
entry  if.then  land.end  
Processing path: entry  if.end  if.then5  if.then9  
After path modifications process path
entry  if.end  if.then5  if.then9  
Processing path: entry  if.end  if.then5  if.end10  
After path modifications process path
entry  if.end  if.then5  if.end10  
Processing path: entry  if.end  if.end11  if.then14  
After path modifications process path
entry  if.end  if.end11  if.then14  
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @dofile0(i8** %filename.addr), !control_dep_instr !7, !data_indep_instr !13, !input_dep_block !11
Processing path: entry  if.end  if.end11  return  
After path modifications process path
entry  if.end  if.end11  return  
Processing path: entry  if.end  if.end11  if.end17  if.then20  
After path modifications process path
entry  if.end  if.end11  if.end17  if.then20  
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @dofile1(i8** %filename.addr), !control_dep_instr !7, !data_indep_instr !13, !input_dep_block !11
Processing path: entry  if.end  if.end11  if.end17  if.end23  if.then37  
After path modifications process path
entry  if.end  if.end11  if.end17  if.end23  if.then37  
Processing path: entry  if.end  if.end11  if.end17  if.end23  lor.lhs.false  lor.lhs.false33  if.end44  if.end50  land.lhs.true  if.then53  
After path modifications process path
entry  if.end  if.end11  if.end17  if.end23  lor.lhs.false  lor.lhs.false33  if.end44  if.end50  land.lhs.true  if.then53  
Processing path: entry  if.end  if.end11  if.end17  if.end23  lor.lhs.false  lor.lhs.false33  if.end44  if.end50  if.end54  
After path modifications process path
entry  if.end  if.end11  if.end17  if.end23  lor.lhs.false  lor.lhs.false33  if.end44  if.end50  if.end54  
Processing path: entry  if.end  if.end11  if.end17  if.end23  lor.lhs.false  lor.lhs.false33  if.end44  if.then49  
After path modifications process path
entry  if.end  if.end11  if.end17  if.end23  lor.lhs.false  lor.lhs.false33  if.end44  if.then49  
 Processing function:update_file
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Processing path: entry  if.end47  
After path modifications process path
entry  if.end47  
Processing path: entry  if.end  if.then7  
After path modifications process path
entry  if.end  if.then7  
Processing path: entry  if.end  if.end9  if.then14  
After path modifications process path
entry  if.end  if.end9  if.then14  
Processing path: entry  if.end  if.end9  if.end17  if.then21  
After path modifications process path
entry  if.end  if.end9  if.end17  if.then21  
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @update_file2(i8** %filename.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end9  if.end17  if.end23  if.then26  
After path modifications process path
entry  if.end  if.end9  if.end17  if.end23  if.then26  
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @update_file3(i8** %filename.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end9  if.end17  if.end23  if.end29  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.end  if.end9  if.end17  if.end23  if.end29  
After path modifications process path
entry  if.end  if.end9  if.end17  if.end23  if.end29  
Processing call instruction..
Can't handle this operand   %statbuf.addr = alloca %struct.stat*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @update_file4(%struct.stat** %statbuf.addr, i8** %filename.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @update_file4(%struct.stat** %statbuf.addr, i8** %filename.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end9  if.end17  if.end23  if.end29  while.cond  while.end  land.lhs.true  if.then44  
After path modifications process path is empty
Processing path: entry  if.end  if.end9  if.end17  if.end23  if.end29  while.end  land.lhs.true  if.then44  
After path modifications process path
entry  if.end  if.end9  if.end17  if.end23  if.end29  while.end  land.lhs.true  if.then44  
Processing path: entry  if.end  if.else  
After path modifications process path
entry  if.end  if.else  
Processing call instruction..
Can't handle this operand   %pathtail = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @update_file1(i8** %pathtail), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
 Processing function:givehelp
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  if.then24  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.end  if.then24  
After path modifications process path
entry  if.end  if.then24  
Processing path: entry  if.end  if.then24  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  if.end  if.then24  while.end  
After path modifications process path
entry  if.end  if.then24  while.end  
Processing path: entry  if.end  if.end29  
After path modifications process path
entry  if.end  if.end29  
Processing path: entry  if.else  
After path modifications process path
entry  if.else  
 Processing function:checkfile
Short range hashing enabled.
Processing path: entry  for.cond  for.body  for.inc  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !10, !global_dep_instr !12
  call void @checkfile0(i32* %bufno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11, !global_dep_instr !12
Processing call instruction..
Can't handle this operand   %bufno = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkfile0(i32* %bufno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11, !global_dep_instr !12
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.end  for.cond3  for.body5  
After path modifications process path is empty
Processing path: entry  for.end  for.cond2  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing path: entry  for.end  if.then  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  for.end  if.then  
After path modifications process path
entry  for.end  if.then  
Processing path: entry  for.cond  for.end  if.then  
After path modifications process path is empty
Processing path: entry  for.end  for.cond2  for.end11  if.then  
After path modifications process path is empty
Processing path: entry  for.end  for.cond3  if.then  
After path modifications process path is empty
Processing path: entry  for.end  if.then  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  for.end  if.then  while.end  
After path modifications process path
entry  for.end  if.then  while.end  
Processing path: entry  for.cond  for.end  if.then  while.end  
After path modifications process path is empty
Processing path: entry  for.end  for.cond2  for.end11  if.then  while.end  
After path modifications process path is empty
Processing path: entry  for.end  for.cond3  if.then  while.end  
After path modifications process path is empty
Processing path: entry  for.end  for.cond3  for.end61  
After path modifications process path is empty
Processing path: entry  for.end  for.cond2  for.end11  for.end61  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  for.end61  
After path modifications process path is empty
Processing path: entry  for.end  for.end61  
After path modifications process path
entry  for.end  for.end61  
Processing path: entry  for.end  for.cond3  if.then17  
After path modifications process path is empty
Processing path: entry  for.end  for.cond2  for.end11  if.end  if.then17  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  if.then17  
After path modifications process path is empty
Processing path: entry  for.end  if.then17  
After path modifications process path
entry  for.end  if.then17  
Processing path: entry  for.end  while.cond28  land.rhs  lor.end  
After path modifications process path
land.rhs  lor.end  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  for.cond2  for.end11  if.end  if.end18  if.then23  
After path modifications process path
if.end18  if.then23  
Hash path invariants only
Invariants are
  br label %while.cond28, !control_dep_instr !7, !data_indep_instr !10
  call void @checkfile5(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkfile5(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12
Can't handle this operand   %bufsize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkfile5(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12
Processing path: entry  for.end  for.cond3  
After path modifications process path is empty
Processing path: entry  for.end  while.cond28  land.rhs  lor.lhs.false  lor.rhs  
After path modifications process path
land.rhs  lor.lhs.false  lor.rhs  
Hash path invariants only
Invariants are
  br label %lor.end, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  for.cond2  for.end11  if.end  if.end18  if.then23  
After path modifications process path
if.end18  if.then23  
Hash path invariants only
Invariants are
  call void @checkfile5(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12
  br label %while.cond28, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkfile5(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12
Can't handle this operand   %bufsize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkfile5(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12
Processing path: entry  for.end  for.cond3  
After path modifications process path is empty
Processing path: entry  for.end  while.cond28  land.end  while.body47  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  for.cond2  for.end11  if.end  if.end18  if.then23  if.then51  
After path modifications process path
if.end18  if.then23  if.then51  
Hash path invariants only
Invariants are
  br label %while.end59, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12, !global_dep_instr !13
  br label %while.cond28, !control_dep_instr !7, !data_indep_instr !10
  call void @checkfile5(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkfile5(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12
Can't handle this operand   %bufsize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkfile5(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12
Processing path: entry  for.end  for.cond3  
After path modifications process path is empty
Processing path: entry  for.end  while.cond28  land.end  while.body47  if.end52  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  for.cond2  for.end11  if.end  if.end18  if.then23  
After path modifications process path
if.end18  if.then23  
Hash path invariants only
Invariants are
  call void @checkfile5(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12
  br label %while.cond28, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkfile5(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12
Can't handle this operand   %bufsize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkfile5(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12
Processing path: entry  for.end  for.cond3  
After path modifications process path is empty
Processing path: entry  for.end  while.cond28  land.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  for.cond2  for.end11  if.end  if.end18  if.then23  while.end59  
After path modifications process path
if.end18  if.then23  while.end59  
Hash path invariants only
Invariants are
  br label %if.end60, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12, !global_dep_instr !13
  br label %while.cond28, !control_dep_instr !7, !data_indep_instr !10
  call void @checkfile5(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkfile5(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12
Can't handle this operand   %bufsize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkfile5(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !12
Processing path: entry  for.end  for.cond3  
After path modifications process path is empty
Processing path: entry  for.end  for.cond3  
After path modifications process path is empty
Processing path: entry  for.end  for.cond2  for.end11  if.end  if.end18  if.end60  
After path modifications process path
if.end18  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
 Processing function:correct
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  checkagain  if.then6  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  
After path modifications process path
entry  if.end  if.then6  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.then10  
After path modifications process path
if.end7  if.then10  
Hash path invariants only
Invariants are
  br label %if.end12, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  call void @correct0(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !12
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.then14  
After path modifications process path
if.end7  if.end12  if.then14  
Hash path invariants only
Invariants are
  br label %if.end16, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.then22  
After path modifications process path
if.end7  if.end12  if.end16  if.then22  
Hash path invariants only
Invariants are
  call void @correct1(i32* %col_ht, i32* %ncols), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
Can't handle this operand   %col_ht = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct1(i32* %col_ht, i32* %ncols), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %ncols = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct1(i32* %col_ht, i32* %ncols), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.then34  
After path modifications process path
for.body  if.then34  
Hash path invariants only
Invariants are
  br label %if.end51, !control_dep_instr !7, !data_indep_instr !11
  call void @correct2(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct2(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.end51  for.inc  
After path modifications process path
for.body  if.end51  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !12
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.else  land.lhs.true  if.then40  
After path modifications process path
for.body  if.else  land.lhs.true  if.then40  
Hash path invariants only
Invariants are
  br label %if.end50, !control_dep_instr !7, !data_indep_instr !11
  call void @correct3(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct3(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.else  if.end50  
After path modifications process path
for.body  if.else  if.end50  
Hash path invariants only
Invariants are
  br label %if.end51, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !12
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.else  if.else45  
After path modifications process path
for.body  if.else  if.else45  
Hash path invariants only
Invariants are
  br label %if.end50, !control_dep_instr !7, !data_indep_instr !11
  call void @correct4(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct4(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond52  for.body55  
After path modifications process path is empty
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  
Hash path invariants only
Invariants are
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  if.then80  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  if.then80  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  while.body  if.end81  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.then87  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.then87  
Hash path invariants only
Invariants are
  br label %if.end88, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @correct10(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct10(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct10(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.end88  if.then91  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.end88  if.then91  
Hash path invariants only
Invariants are
  br label %if.end92, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.end88  if.end92  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.end88  if.end92  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end93, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.then98  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.then98  
Hash path invariants only
Invariants are
  call void @correct11(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %if.end101, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond102  sw.default  
After path modifications process path
sw.default  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  %call242 = call i32 @putchar(i32 7), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.epilog  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb105  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb105  
After path modifications process path
entry  if.end  sw.bb105  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb105  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  sw.bb105  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  sw.bb105  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.then109  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.then109  
Hash path invariants only
Invariants are
  call void @correct13(i32* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  br label %if.end115, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %c = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct13(i32* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  if.then121  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  if.then121  
Hash path invariants only
Invariants are
  br label %if.end123, !control_dep_instr !7, !data_indep_instr !11
  call void @done(i32 0), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct14(), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  if.end123  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  lor.lhs.false118  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  lor.lhs.false118  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.else114  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.else114  
Hash path invariants only
Invariants are
  br label %if.end115, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i32 121, i32* %c, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb124  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb124  
After path modifications process path
entry  if.end  sw.bb124  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb124  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  sw.bb124  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  sw.bb124  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb128  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb128  
After path modifications process path
entry  if.end  sw.bb128  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb128  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  sw.bb128  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  sw.bb128  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb132  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb132  
After path modifications process path
entry  if.end  sw.bb132  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb132  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  sw.bb132  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  sw.bb132  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb136  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb137  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb138  if.then145  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb138  
Hash path invariants only
Invariants are
  %arraydecay141 = getelementptr inbounds [200 x i8], [200 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  %call140 = call i32 @putchar(i32 33), !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb138  if.end148  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb138  
Hash path invariants only
Invariants are
  %arraydecay141 = getelementptr inbounds [200 x i8], [200 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  %call140 = call i32 @putchar(i32 33), !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.then156  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.then156  
Hash path invariants only
Invariants are
  br label %if.end159, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  call void @correct19(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !12
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.then164  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.then164  
Hash path invariants only
Invariants are
  br label %if.end174, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct20(i32* %ctokl.addr, i8** %itok.addr, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %ctokl.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct20(i32* %ctokl.addr, i8** %itok.addr, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %itok.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct20(i32* %ctokl.addr, i8** %itok.addr, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %ctok.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct20(i32* %ctokl.addr, i8** %itok.addr, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  if.then179  
After path modifications process path is empty
Processing path: entry  if.end  if.then179  
After path modifications process path
entry  if.end  if.then179  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.end174  if.then179  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  if.then179  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  if.then179  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.end174  if.end180  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.else167  if.then170  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.else167  if.then170  
Hash path invariants only
Invariants are
  br label %if.end173, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct21(i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %ctok.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct21(i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.else167  if.end173  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.else167  if.end173  
Hash path invariants only
Invariants are
  br label %if.end174, !control_dep_instr !7, !data_indep_instr !11
  store i32 1, i32* @changes, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.then185  land.lhs.true190  if.then193  
After path modifications process path
sw.bb181  if.then185  land.lhs.true190  if.then193  
Hash path invariants only
Invariants are
  %call186 = call i32 @getchar(), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  br label %if.end206, !control_dep_instr !7, !data_indep_instr !11
  store i32 %and187, i32* %c, align 4, !control_dep_instr !7, !data_dep_instr !8
  %and187 = and i32 %call186, 127, !control_dep_instr !7, !data_dep_instr !8
  call void @correct22(i32* %c, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %c = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct22(i32* %c, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct22(i32* %c, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.then185  if.end206  
After path modifications process path
sw.bb181  if.then185  if.end206  
Hash path invariants only
Invariants are
  %call186 = call i32 @getchar(), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  br label %if.end207, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %and187 = and i32 %call186, 127, !control_dep_instr !7, !data_dep_instr !8
  store i32 %and187, i32* %c, align 4, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.then185  if.else197  land.lhs.true200  if.then203  
After path modifications process path
sw.bb181  if.then185  if.else197  land.lhs.true200  if.then203  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11
  store i32 %and187, i32* %c, align 4, !control_dep_instr !7, !data_dep_instr !8
  %and187 = and i32 %call186, 127, !control_dep_instr !7, !data_dep_instr !8
  %call186 = call i32 @getchar(), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %call204 = call i32 @putchar(i32 7), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.then185  if.else197  if.end205  
After path modifications process path
sw.bb181  if.then185  if.else197  if.end205  
Hash path invariants only
Invariants are
  br label %if.end206, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %call186 = call i32 @getchar(), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %and187 = and i32 %call186, 127, !control_dep_instr !7, !data_dep_instr !8
  store i32 %and187, i32* %c, align 4, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.end207  if.then210  if.then216  
After path modifications process path
sw.bb181  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.then210  if.then216  
After path modifications process path
entry  if.end  if.then210  if.then216  
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct23(i32* %i, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %ctok.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct23(i32* %i, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %curchar.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct24(i8*** %curchar.addr, i8** %ctok.addr, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11
Can't handle this operand   %ctok.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct24(i8*** %curchar.addr, i8** %ctok.addr, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct24(i8*** %curchar.addr, i8** %ctok.addr, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  if.then210  if.then216  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  if.then210  if.then216  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  if.then210  if.then216  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.end207  if.then210  if.end222  
After path modifications process path
sw.bb181  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.then210  if.end222  
After path modifications process path
entry  if.end  if.then210  if.end222  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  if.then210  if.end222  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  if.then210  if.end222  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  if.then210  if.end222  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.end207  if.end223  
After path modifications process path
sw.bb181  if.end223  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  %call224 = call i32 @putchar(i32 7), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb225  
After path modifications process path
sw.bb225  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb226  if.then234  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb226  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %arraydecay230 = getelementptr inbounds [100 x i8], [100 x i8]* %buf227, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb226  if.end236  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb226  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %arraydecay230 = getelementptr inbounds [100 x i8], [100 x i8]* %buf227, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb240  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb240  
After path modifications process path
entry  if.end  sw.bb240  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb240  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  sw.bb240  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  sw.bb240  
After path modifications process path is empty
 Processing function:compoundgood
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then4  
After path modifications process path
entry  if.end  if.then4  
Processing path: entry  if.end  if.end5  for.cond  for.body  if.then15  if.then20  sw.epilog  
After path modifications process path
for.body  if.then15  sw.epilog  
Hash path invariants only
Invariants are
  br label %if.end29, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  
After path modifications process path
entry  if.end  if.end5  
Processing path: entry  if.end  if.end5  for.cond  for.body  if.then15  if.then20  sw.bb  
After path modifications process path
for.body  if.then15  
Hash path invariants only
Invariants are
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  sw.bb  
After path modifications process path
entry  if.end  if.end5  sw.bb  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood0(i32* %retval, i64* %secondcap), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %secondcap = alloca i64, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood0(i32* %retval, i64* %secondcap), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end5  for.cond  for.body  if.then15  if.then20  sw.bb26  
After path modifications process path
for.body  if.then15  
Hash path invariants only
Invariants are
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  sw.bb26  
After path modifications process path
entry  if.end  if.end5  sw.bb26  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood1(i32* %retval, i64* %secondcap), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %secondcap = alloca i64, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood1(i32* %retval, i64* %secondcap), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end5  for.cond  for.body  if.then15  if.end29  
After path modifications process path
for.body  if.then15  if.end29  
Hash path invariants only
Invariants are
  br label %if.end30, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  
After path modifications process path
entry  if.end  if.end5  
Processing path: entry  if.end  if.end5  for.cond  for.body  if.then15  lor.lhs.false  
After path modifications process path
for.body  if.then15  lor.lhs.false  
Hash path invariants only
Invariants are
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  
After path modifications process path
entry  if.end  if.end5  
Processing path: entry  if.end  if.end5  for.cond  for.body  if.end30  for.inc  
After path modifications process path
for.body  if.end30  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  
After path modifications process path
entry  if.end  if.end5  
Processing path: entry  if.end  if.end5  for.cond  for.body  if.else  
After path modifications process path
for.body  if.else  
Hash path invariants only
Invariants are
  br label %if.end30, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  call void @compoundgood2(i8** %p, i8* %savech), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !12
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood2(i8** %p, i8* %savech), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !12
Can't handle this operand   %savech = alloca i8, align 1, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood2(i8** %p, i8* %savech), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !12
Processing path: entry  if.end  if.end5  
After path modifications process path
entry  if.end  if.end5  
Processing path: entry  if.end  if.end5  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end5  for.end  
After path modifications process path
entry  if.end  if.end5  for.end  
 Processing function:makepossibilities
Short range hashing enabled.
Processing path: entry  for.cond  for.body  for.inc  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makepossibilities0(i32* %i), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  if.then  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.then  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.then  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makepossibilities1(i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.end  if.then  
After path modifications process path
entry  for.end  if.then  
Processing path: entry  for.cond  for.end  if.end  if.then4  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.then4  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.then4  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makepossibilities2(i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.end  if.end  if.then4  
After path modifications process path
entry  for.end  if.end  if.then4  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.then7  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.then7  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.then7  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makepossibilities3(i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.end  if.end  if.end5  if.then7  
After path modifications process path
entry  for.end  if.end  if.end5  if.then7  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.then10  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.then10  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.then10  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makepossibilities4(i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.end  if.end  if.end5  if.end8  if.then10  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.then10  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.end11  land.lhs.true  if.then14  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  land.lhs.true  if.then14  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  land.lhs.true  if.then14  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makepossibilities5(i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.end  if.end  if.end5  if.end8  if.end11  land.lhs.true  if.then14  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.end11  land.lhs.true  if.then14  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.then17  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.then17  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.then17  
Processing path: entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.then17  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.then17  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  land.lhs.true26  if.then28  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  land.lhs.true26  if.then28  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  land.lhs.true26  if.then28  
Processing path: entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  land.lhs.true26  if.then28  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  land.lhs.true26  if.then28  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.then32  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.then32  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.then32  
Processing path: entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.then32  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.then32  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.end37  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.end37  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.end37  
Processing path: entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.end37  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.end37  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  if.end38  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  if.end38  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  if.end38  
Processing path: entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  if.end38  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  if.end38  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  lor.lhs.false20  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  lor.lhs.false20  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  lor.lhs.false20  
Processing path: entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  lor.lhs.false20  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  lor.lhs.false20  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.end11  if.end15  lor.lhs.false  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  lor.lhs.false  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  lor.lhs.false  
Processing path: entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  lor.lhs.false  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  lor.lhs.false  
 Processing function:show_line
Short range hashing enabled.
Processing path: entry  cond.true  
After path modifications process path
entry  cond.true  
Processing path: entry  cond.end  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond  land.end  while.body  
After path modifications process path is empty
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.end  if.then  while.cond3  land.rhs6  
After path modifications process path
land.rhs6  
Hash path invariants only
Invariants are
  br label %land.end10, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  cond.end  while.cond  land.end  while.end  if.then  
After path modifications process path is empty
Processing path: entry  cond.end  while.end  if.then  
After path modifications process path
entry  cond.end  while.end  if.then  
Processing path: entry  cond.end  while.end  if.then  while.cond3  land.end10  while.body11  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  land.end  while.end  if.then  
After path modifications process path is empty
Processing path: entry  cond.end  while.end  if.then  
After path modifications process path
entry  cond.end  while.end  if.then  
Processing path: entry  cond.end  while.end  if.then  while.cond3  land.end10  while.end18  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  land.end  while.end  if.then  while.end18  
After path modifications process path is empty
Processing path: entry  cond.end  while.end  if.then  while.end18  
After path modifications process path
entry  cond.end  while.end  if.then  while.end18  
Processing call instruction..
Processing path: entry  cond.end  while.cond  land.end  while.end  if.end  
After path modifications process path is empty
Processing path: entry  cond.end  while.end  if.end  while.cond19  land.rhs22  
After path modifications process path
land.rhs22  
Hash path invariants only
Invariants are
  br label %land.end26, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  cond.end  while.end  if.end  
After path modifications process path
entry  cond.end  while.end  if.end  
Processing path: entry  cond.end  while.cond  land.end  while.end  if.end  
After path modifications process path is empty
Processing path: entry  cond.end  while.end  if.end  while.cond19  land.end26  while.body27  
After path modifications process path is empty
Processing path: entry  cond.end  while.end  if.end  
After path modifications process path
entry  cond.end  while.end  if.end  
Processing path: entry  cond.end  while.cond  land.end  while.end  if.end  while.end30  
After path modifications process path is empty
Processing path: entry  cond.end  while.end  if.end  while.cond19  land.end26  while.end30  
After path modifications process path is empty
Processing path: entry  cond.end  while.end  if.end  while.end30  
After path modifications process path
entry  cond.end  while.end  if.end  while.end30  
Processing path: entry  cond.false  
After path modifications process path
entry  cond.false  
 Processing function:line_size
Short range hashing enabled.
Processing path: entry  for.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  land.end  for.body  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  land.end  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
 Processing function:my_getline
Short range hashing enabled.
Processing path: entry  for.cond  if.then  
After path modifications process path
if.then  
Hash path invariants only
Invariants are
  br label %if.end41, !control_dep_instr !7, !data_indep_instr !11
  call void @my_getline2(i8** %p, i32* %c), !control_dep_instr !7, !data_indep_instr !11
  call void @backup(), !control_dep_instr !7, !data_indep_instr !11
  call void @my_getline1(i32* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %c = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @my_getline1(i32* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @my_getline2(i8** %p, i32* %c), !control_dep_instr !7, !data_indep_instr !11
Can't handle this operand   %c = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @my_getline2(i8** %p, i32* %c), !control_dep_instr !7, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @my_getline0(i8** %p, i8** %s.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %s.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @my_getline0(i8** %p, i8** %s.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  for.cond  if.end41  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  if.else  if.then9  
After path modifications process path is empty
Processing path: entry  if.then9  
After path modifications process path
entry  if.then9  
Non numeric pointers (int and float) are skipped:  %retval = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
No oh has been applied in the path
Processing path: entry  for.cond  if.else  return  
After path modifications process path is empty
Processing path: entry  return  
After path modifications process path
entry  return  
No oh has been applied in the path
Processing path: entry  for.cond  if.else  if.else10  if.then15  
After path modifications process path is empty
Processing path: entry  if.then15  
After path modifications process path
entry  if.then15  
Processing call instruction..
Can't handle this operand   %retval = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @my_getline3(i8** %retval, i8** %s.addr, i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %s.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @my_getline3(i8** %retval, i8** %s.addr, i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @my_getline3(i8** %retval, i8** %s.addr, i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
Processing path: entry  for.cond  if.else  if.else10  lor.lhs.false  if.else16  if.then19  if.then22  
After path modifications process path
if.else16  if.then19  if.then22  
Hash path invariants only
Invariants are
  call void @my_getline4(i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %call24 = call i32 @putchar(i32 32), !control_dep_instr !7, !data_dep_instr !8
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
  call void @backup(), !control_dep_instr !7, !data_indep_instr !11
  call void @backup(), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @my_getline4(i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  if.else  if.else10  lor.lhs.false  if.else16  if.then19  if.end  
After path modifications process path
if.else16  if.then19  if.end  
Hash path invariants only
Invariants are
  br label %if.end38, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  if.else  if.else10  lor.lhs.false  if.else16  if.end38  if.end39  if.end40  
After path modifications process path
if.else16  if.end38  if.end39  if.end40  
Hash path invariants only
Invariants are
  br label %if.end41, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %if.end40, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %if.end39, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  for.cond  if.else  if.else10  lor.lhs.false  if.else16  if.else25  if.then28  
After path modifications process path
if.else16  if.else25  if.then28  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  
After path modifications process path is empty
Processing path: entry  for.cond  if.else  if.else10  lor.lhs.false  if.else16  if.else25  if.then28  while.end  
After path modifications process path
if.else16  if.else25  if.then28  while.end  
Hash path invariants only
Invariants are
  br label %if.end37, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  if.else  if.else10  lor.lhs.false  if.else16  if.else25  if.end37  
After path modifications process path
if.else16  if.else25  if.end37  
Hash path invariants only
Invariants are
  br label %if.end38, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  if.else  if.else10  lor.lhs.false  if.else16  if.else25  if.else33  
After path modifications process path
if.else16  if.else25  if.else33  
Hash path invariants only
Invariants are
  br label %if.end37, !control_dep_instr !7, !data_indep_instr !11
  call void @my_getline6(i8** %p, i32* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @my_getline6(i8** %p, i32* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %c = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @my_getline6(i8** %p, i32* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
 Processing function:inserttoken
Short range hashing enabled.
Processing path: entry  for.cond  for.body  for.inc  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11
  call void @inserttoken1(i8** %p, i8** %q), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken1(i8** %p, i8** %q), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %q = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken1(i8** %p, i8** %q), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %q = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken0(i8** %q, i8** %p, i8** %buf.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken0(i8** %q, i8** %p, i8** %buf.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %buf.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken0(i8** %q, i8** %p, i8** %buf.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  for.end  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing call instruction..
Can't handle this operand   %ew = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %curchar.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %start.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %q = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %tok.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  for.end  while.end  if.then  while.cond9  while.body11  
After path modifications process path is empty
Processing path: entry  for.end  while.cond  while.end  if.then  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  while.end  if.then  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.then  
After path modifications process path
entry  for.end  while.end  if.then  
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken5(i8** %p, i8** %tok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %tok.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken5(i8** %p, i8** %tok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.end  while.end  if.then  while.cond9  while.end14  
After path modifications process path is empty
Processing path: entry  for.end  while.cond  while.end  if.then  while.end14  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  while.end  if.then  while.end14  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.then  while.end14  
After path modifications process path
entry  for.end  while.end  if.then  while.end14  
Processing path: entry  for.end  while.cond  while.end  if.end  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  while.end  if.end  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.end  while.cond15  while.body20  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.end  
After path modifications process path
entry  for.end  while.end  if.end  
Processing path: entry  for.end  while.cond  while.end  if.end  while.end21  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  while.end  if.end  while.end21  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.end  while.cond15  while.end21  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.end  while.end21  
After path modifications process path
entry  for.end  while.end  if.end  while.end21  
 Processing function:lookharder
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  
After path modifications process path
for.body  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
  call void @lookharder0(i8** %g, i32* %wild), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %g = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookharder0(i8** %g, i32* %wild), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %wild = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookharder0(i8** %g, i32* %wild), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  for.inc  
After path modifications process path
for.body  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.else  
After path modifications process path
for.body  if.else  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
  call void @lookharder1(i8** %g, i8** %s), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %g = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookharder1(i8** %g, i8** %s), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %s = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookharder1(i8** %g, i8** %s), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  if.then8  if.end20  if.end25  
After path modifications process path is empty
Processing path: entry  for.end  if.then8  if.end20  if.end25  
After path modifications process path
entry  for.end  if.then8  if.end20  if.end25  
Processing path: entry  for.cond  for.end  if.then8  if.end20  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then8  if.end20  if.then22  
After path modifications process path
entry  for.end  if.then8  if.end20  if.then22  
Processing path: entry  for.cond  for.end  if.then8  land.lhs.true  if.then11  if.then17  
After path modifications process path is empty
Processing path: entry  for.end  if.then8  land.lhs.true  if.then11  if.then17  
After path modifications process path
entry  for.end  if.then8  land.lhs.true  if.then11  if.then17  
Processing path: entry  for.cond  for.end  if.then8  land.lhs.true  if.then11  if.else18  if.end19  
After path modifications process path is empty
Processing path: entry  for.end  if.then8  land.lhs.true  if.then11  if.else18  if.end19  
After path modifications process path
entry  for.end  if.then8  land.lhs.true  if.then11  if.else18  if.end19  
Processing path: entry  for.cond  for.end  if.end31  
After path modifications process path is empty
Processing path: entry  for.end  if.end31  
After path modifications process path
entry  for.end  if.end31  
 Processing function:show_char
Short range hashing enabled.
Processing path: entry  land.rhs  cond.true  
After path modifications process path
entry  land.rhs  cond.true  
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @show_char0(i32* %ch, i8*** %cp.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %cp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @show_char0(i32* %ch, i8*** %cp.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  land.rhs  cond.end  
After path modifications process path
entry  land.rhs  cond.end  
Processing path: entry  land.rhs  cond.false  
After path modifications process path
entry  land.rhs  cond.false  
Processing path: entry  land.end  if.then  
After path modifications process path
entry  land.end  if.then  
Processing call instruction..
Can't handle this operand   %ichar = alloca i8, align 1, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @show_char1(i8* %ichar), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  land.end  if.end  if.end19  if.then22  if.then24  
After path modifications process path
entry  land.end  if.end  if.end19  if.then22  if.then24  
Processing path: entry  land.end  if.end  if.end19  if.then22  if.end26  
After path modifications process path
entry  land.end  if.end  if.end19  if.then22  if.end26  
Processing path: entry  land.end  if.end  if.end19  if.end28  land.lhs.true31  if.then34  
After path modifications process path
entry  land.end  if.end  if.end19  if.end28  land.lhs.true31  if.then34  
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  for.cond  for.body  if.then42  if.then44  
After path modifications process path
for.body  if.then42  if.then44  
Hash path invariants only
Invariants are
  br label %if.end47, !control_dep_instr !7, !data_indep_instr !11
  call void @show_char7(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  
After path modifications process path
entry  land.end  if.end  if.end19  if.end28  if.end35  
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  for.cond  for.body  if.then42  if.end47  
After path modifications process path
for.body  if.then42  if.end47  
Hash path invariants only
Invariants are
  br label %if.end50, !control_dep_instr !7, !data_indep_instr !11
  call void @show_char8(i32* %ch, i32* %width), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @show_char8(i32* %ch, i32* %width), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %width = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @show_char8(i32* %ch, i32* %width), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  
After path modifications process path
entry  land.end  if.end  if.end19  if.end28  if.end35  
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  for.cond  for.body  if.end50  if.then55  if.then57  if.then61  
After path modifications process path
for.body  if.end50  if.then55  if.then57  if.then61  
Hash path invariants only
Invariants are
  br label %if.end67, !control_dep_instr !7, !data_indep_instr !11
  %call62 = call i32 @putchar(i32 63), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %call58 = call i32 @putchar(i32 94), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  
After path modifications process path
entry  land.end  if.end  if.end19  if.end28  if.end35  
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  for.cond  for.body  if.end50  if.then55  if.then57  if.end67  
After path modifications process path
for.body  if.end50  if.then55  if.then57  if.end67  
Hash path invariants only
Invariants are
  br label %if.end68, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %call58 = call i32 @putchar(i32 94), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  
After path modifications process path
entry  land.end  if.end  if.end19  if.end28  if.end35  
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  for.cond  for.body  if.end50  if.then55  if.then57  if.else63  
After path modifications process path
for.body  if.end50  if.then55  if.then57  if.else63  
Hash path invariants only
Invariants are
  br label %if.end67, !control_dep_instr !7, !data_indep_instr !11
  call void @show_char9(i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %call58 = call i32 @putchar(i32 94), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @show_char9(i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  
After path modifications process path
entry  land.end  if.end  if.end19  if.end28  if.end35  
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  for.cond  for.body  if.end50  if.then55  if.end68  
After path modifications process path
for.body  if.end50  if.then55  if.end68  
Hash path invariants only
Invariants are
  br label %if.end76, !control_dep_instr !7, !data_indep_instr !11
  call void @show_char10(i32* %width), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %width = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @show_char10(i32* %width), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  
After path modifications process path
entry  land.end  if.end  if.end19  if.end28  if.end35  
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  for.cond  for.body  if.end50  if.end76  for.inc  
After path modifications process path
for.body  if.end50  if.end76  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  
After path modifications process path
entry  land.end  if.end  if.end19  if.end28  if.end35  
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  for.cond  for.body  if.end50  lor.lhs.false  if.else70  if.then72  
After path modifications process path
for.body  if.end50  lor.lhs.false  if.else70  if.then72  
Hash path invariants only
Invariants are
  br label %if.end74, !control_dep_instr !7, !data_indep_instr !11
  call void @show_char11(i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @show_char11(i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  
After path modifications process path
entry  land.end  if.end  if.end19  if.end28  if.end35  
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  for.cond  for.body  if.end50  lor.lhs.false  if.else70  if.end74  
After path modifications process path
for.body  if.end50  lor.lhs.false  if.else70  if.end74  
Hash path invariants only
Invariants are
  br label %if.end76, !control_dep_instr !7, !data_indep_instr !11
  call void @show_char12(i32* %width), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %width = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @show_char12(i32* %width), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  
After path modifications process path
entry  land.end  if.end  if.end19  if.end28  if.end35  
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  land.end  if.end  if.end19  if.end28  if.end35  for.end  
After path modifications process path
entry  land.end  if.end  if.end19  if.end28  if.end35  for.end  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @show_char14(i32* %retval, i32* %width), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %width = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @show_char14(i32* %retval, i32* %width), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  land.end  if.end  return  
After path modifications process path
entry  land.end  if.end  return  
Processing path: entry  land.end  if.end  land.lhs.true  land.lhs.true11  if.then14  if.then16  
After path modifications process path
entry  land.end  if.end  land.lhs.true  land.lhs.true11  if.then14  if.then16  
Processing path: entry  land.end  if.end  land.lhs.true  land.lhs.true11  if.then14  if.end18  
After path modifications process path
entry  land.end  if.end  land.lhs.true  land.lhs.true11  if.then14  if.end18  
Processing path: entry  land.end  if.else  
After path modifications process path
entry  land.end  if.else  
Processing call instruction..
Can't handle this operand   %ichar = alloca i8, align 1, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @show_char2(i8* %ichar, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @show_char2(i8* %ichar, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
 Processing function:wrongcapital
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
 Processing function:missingletter
Short range hashing enabled.
Processing path: entry  for.cond3  for.body6  land.lhs.true  if.then  
After path modifications process path
for.body6  land.lhs.true  if.then  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay10 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond3  for.body6  for.inc  
After path modifications process path
for.body6  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond3  for.body6  if.end  if.then18  if.then23  
After path modifications process path
for.body6  if.end  
Hash path invariants only
Invariants are
  %arraydecay15 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  for.cond  for.body  if.then23  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.then23  
After path modifications process path
entry  if.then23  
No oh has been applied in the path
Processing path: entry  for.cond3  for.body6  if.end  if.then18  if.end24  
After path modifications process path
for.body6  if.end  if.end24  
Hash path invariants only
Invariants are
  br label %if.end25, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay15 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond3  for.body6  if.end  if.end25  
After path modifications process path
for.body6  if.end  if.end25  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay15 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  for.end  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.end54  
After path modifications process path is empty
Processing path: entry  for.end54  
After path modifications process path
entry  for.end54  
No oh has been applied in the path
Processing path: entry  for.cond  for.end27  
After path modifications process path is empty
Processing path: entry  for.end27  for.cond28  for.body31  if.then37  
After path modifications process path
for.body31  if.then37  
Hash path invariants only
Invariants are
  br label %for.inc52, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.end27  
After path modifications process path
entry  for.end27  
Processing path: entry  for.cond  for.end27  
After path modifications process path is empty
Processing path: entry  for.end27  for.cond28  for.body31  for.inc52  
After path modifications process path
for.body31  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.end27  
After path modifications process path
entry  for.end27  
Processing path: entry  for.cond  for.end27  if.then49  
After path modifications process path is empty
Processing path: entry  for.end27  for.cond28  for.body31  if.end38  if.then44  if.then49  
After path modifications process path
for.body31  if.end38  
Hash path invariants only
Invariants are
  %arraydecay41 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  for.end27  if.then49  
After path modifications process path
entry  for.end27  if.then49  
Processing path: entry  for.cond  for.end27  
After path modifications process path is empty
Processing path: entry  for.end27  for.cond28  for.body31  if.end38  if.then44  if.end50  
After path modifications process path
for.body31  if.end38  if.end50  
Hash path invariants only
Invariants are
  br label %if.end51, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay41 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  for.end27  
After path modifications process path
entry  for.end27  
Processing path: entry  for.cond  for.end27  
After path modifications process path is empty
Processing path: entry  for.end27  for.cond28  for.body31  if.end38  if.end51  
After path modifications process path
for.body31  if.end38  if.end51  
Hash path invariants only
Invariants are
  br label %for.inc52, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay41 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  for.end27  
After path modifications process path
entry  for.end27  
 Processing function:transposedletter
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  if.then11  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  %arraydecay5 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.then11  
After path modifications process path
entry  if.then11  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.then  if.end  
After path modifications process path
for.body  if.end  
Hash path invariants only
Invariants are
  br label %if.end12, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay5 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end12  for.inc  
After path modifications process path
for.body  if.end12  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11
  call void @transposedletter0(i8* %temp, i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay5 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing call instruction..
Can't handle this operand   %temp = alloca i8, align 1, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @transposedletter0(i8* %temp, i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @transposedletter0(i8* %temp, i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
No oh has been applied in the path
 Processing function:extraletter
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing path: entry  if.end  for.cond  for.body  if.then7  if.then12  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  %arraydecay5 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  if.end  if.then12  
After path modifications process path
entry  if.end  if.then12  
Processing path: entry  if.end  for.cond  for.body  if.then7  if.end13  
After path modifications process path
for.body  if.end13  
Hash path invariants only
Invariants are
  br label %if.end14, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay5 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.end14  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  %arraydecay5 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
 Processing function:wrongletter
Short range hashing enabled.
Processing path: entry  for.cond4  for.body7  if.then  
After path modifications process path
for.body7  if.then  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  for.body7  for.inc  
After path modifications process path
for.body7  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  for.body7  if.else  land.lhs.true  if.then23  
After path modifications process path
for.body7  if.else  land.lhs.true  if.then23  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  for.body7  if.else  land.lhs.true  lor.lhs.false  
After path modifications process path
for.body7  if.else  land.lhs.true  lor.lhs.false  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  for.body7  if.else  if.end  if.end24  if.then32  if.then37  
After path modifications process path
for.body7  if.else  if.end  if.end24  
Hash path invariants only
Invariants are
  %arraydecay29 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond  for.body  if.then37  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.then37  
After path modifications process path
entry  if.then37  
Processing path: entry  for.cond4  for.body7  if.else  if.end  if.end24  if.then32  if.end38  
After path modifications process path
for.body7  if.else  if.end  if.end24  if.end38  
Hash path invariants only
Invariants are
  br label %if.end39, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay29 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  for.body7  if.else  if.end  if.end24  if.end39  
After path modifications process path
for.body7  if.else  if.end  if.end24  if.end39  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay29 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  for.end  for.inc42  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc42, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end44  
After path modifications process path is empty
Processing path: entry  for.end44  
After path modifications process path
entry  for.end44  
 Processing function:missingspace
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  for.end63  
After path modifications process path
entry  for.end63  
Processing path: entry  lor.lhs.false  if.end  for.cond32  for.body35  if.then47  
After path modifications process path is empty
Processing path: entry  lor.lhs.false  if.end  for.cond  for.body  if.then13  if.then20  if.then47  
After path modifications process path
for.body  if.then13  if.then20  
Hash path invariants only
Invariants are
  br label %for.cond25, !control_dep_instr !7, !data_indep_instr !12
  %arraydecay11 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay14 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !10
  %arraydecay15 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %firsthalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %firstno, align 4, !control_dep_instr !7, !data_indep_instr !12
  %arraydecay23 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %secondhalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  for.cond25  for.body28  if.then47  
After path modifications process path
for.body28  
Hash path invariants only
Invariants are
  br label %for.cond32, !control_dep_instr !7, !data_indep_instr !12
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay29 to i64, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %secondno, align 4, !control_dep_instr !7, !data_indep_instr !12
  %arraydecay29 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  if.then47  
After path modifications process path
entry  lor.lhs.false  if.end  if.then47  
Processing path: entry  lor.lhs.false  if.end  for.cond32  for.body35  if.end48  if.then55  
After path modifications process path is empty
Processing path: entry  lor.lhs.false  if.end  for.cond  for.body  if.then13  if.then20  if.then55  
After path modifications process path
for.body  if.then13  if.then20  
Hash path invariants only
Invariants are
  %arraydecay23 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %secondhalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %firstno, align 4, !control_dep_instr !7, !data_indep_instr !12
  br label %for.cond25, !control_dep_instr !7, !data_indep_instr !12
  %arraydecay11 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay14 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !10
  %arraydecay15 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %firsthalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  for.cond25  for.body28  if.then55  
After path modifications process path
for.body28  
Hash path invariants only
Invariants are
  %arraydecay29 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %secondno, align 4, !control_dep_instr !7, !data_indep_instr !12
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay29 to i64, !control_dep_instr !7, !data_dep_instr !8
  br label %for.cond32, !control_dep_instr !7, !data_indep_instr !12
Processing path: entry  lor.lhs.false  if.end  if.then55  
After path modifications process path
entry  lor.lhs.false  if.end  if.then55  
Processing path: entry  lor.lhs.false  if.end  for.cond32  for.body35  if.end48  if.end56  for.inc  
After path modifications process path
if.end56  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !10
Processing path: entry  lor.lhs.false  if.end  for.cond  for.body  if.then13  if.then20  
After path modifications process path
for.body  if.then13  if.then20  
Hash path invariants only
Invariants are
  %arraydecay23 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %secondhalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %firstno, align 4, !control_dep_instr !7, !data_indep_instr !12
  br label %for.cond25, !control_dep_instr !7, !data_indep_instr !12
  %arraydecay11 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay14 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !10
  %arraydecay15 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %firsthalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  for.cond25  for.body28  
After path modifications process path
for.body28  
Hash path invariants only
Invariants are
  %arraydecay29 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %secondno, align 4, !control_dep_instr !7, !data_indep_instr !12
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay29 to i64, !control_dep_instr !7, !data_dep_instr !8
  br label %for.cond32, !control_dep_instr !7, !data_indep_instr !12
Processing path: entry  lor.lhs.false  if.end  
After path modifications process path
entry  lor.lhs.false  if.end  
Processing path: entry  lor.lhs.false  if.end  for.cond32  
After path modifications process path is empty
Processing path: entry  lor.lhs.false  if.end  for.cond  for.body  if.then13  if.then20  
After path modifications process path
for.body  if.then13  if.then20  
Hash path invariants only
Invariants are
  %arraydecay23 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %secondhalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %firstno, align 4, !control_dep_instr !7, !data_indep_instr !12
  br label %for.cond25, !control_dep_instr !7, !data_indep_instr !12
  %arraydecay11 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay14 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !10
  %arraydecay15 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %firsthalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  for.cond25  for.body28  for.end  for.inc57  
After path modifications process path
for.body28  for.end  
Hash path invariants only
Invariants are
  br label %for.inc57, !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !10
  br label %for.cond32, !control_dep_instr !7, !data_indep_instr !12
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay29 to i64, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %secondno, align 4, !control_dep_instr !7, !data_indep_instr !12
  %arraydecay29 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  
After path modifications process path
entry  lor.lhs.false  if.end  
Processing path: entry  lor.lhs.false  if.end  for.cond  for.body  if.then13  if.then20  for.end59  
After path modifications process path
for.body  if.then13  if.then20  for.end59  
Hash path invariants only
Invariants are
  %arraydecay23 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %secondhalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %firstno, align 4, !control_dep_instr !7, !data_indep_instr !12
  br label %for.cond25, !control_dep_instr !7, !data_indep_instr !12
  %arraydecay11 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end60, !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !10
  %arraydecay14 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !10
  %arraydecay15 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %firsthalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  for.cond25  
After path modifications process path is empty
Processing path: entry  lor.lhs.false  if.end  
After path modifications process path
entry  lor.lhs.false  if.end  
Processing path: entry  lor.lhs.false  if.end  for.cond  for.body  if.then13  if.end60  
After path modifications process path
for.body  if.then13  if.end60  
Hash path invariants only
Invariants are
  br label %if.end61, !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !10
  %arraydecay15 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %firsthalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay14 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !10
  %arraydecay11 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  
After path modifications process path
entry  lor.lhs.false  if.end  
Processing path: entry  lor.lhs.false  if.end  for.cond  for.body  if.end61  for.inc62  
After path modifications process path
for.body  if.end61  
Hash path invariants only
Invariants are
  br label %for.inc62, !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !10
  %arraydecay11 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  
After path modifications process path
entry  lor.lhs.false  if.end  
 Processing function:tryveryhard
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @tryveryhard0(i8** %word.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Skip. No dependence graph for function posscmp
Skip. No dependence graph for function casecmp
 Processing function:save_cap
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  for.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  land.end  for.body  if.then6  
After path modifications process path
for.body  if.then6  
Hash path invariants only
Invariants are
  br label %if.end15, !control_dep_instr !7, !data_indep_instr !10
  call void @save_cap1(i32* %prestrip, i32* %preadd, i32* %hitno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_cap1(i32* %prestrip, i32* %preadd, i32* %hitno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_cap1(i32* %prestrip, i32* %preadd, i32* %hitno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %hitno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_cap1(i32* %prestrip, i32* %preadd, i32* %hitno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  land.end  for.body  if.end15  if.then19  
After path modifications process path
for.body  if.end15  if.then19  
Hash path invariants only
Invariants are
  br label %if.end31, !control_dep_instr !7, !data_indep_instr !10
  call void @save_cap2(i32* %sufadd, i32* %sufstrip, i32* %hitno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_cap2(i32* %sufadd, i32* %sufstrip, i32* %hitno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %sufstrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_cap2(i32* %sufadd, i32* %sufstrip, i32* %hitno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %hitno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_cap2(i32* %sufadd, i32* %sufstrip, i32* %hitno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  land.end  for.body  if.end15  if.end31  
After path modifications process path
for.body  if.end15  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  land.end  for.body  if.end15  if.else30  
After path modifications process path
for.body  if.end15  if.else30  
Hash path invariants only
Invariants are
  br label %if.end31, !control_dep_instr !7, !data_indep_instr !10
  store i32 0, i32* %sufadd, align 4, !control_dep_instr !7, !data_indep_instr !10
  store i32 0, i32* %sufstrip, align 4, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  land.end  for.body  if.else  
After path modifications process path
for.body  if.else  
Hash path invariants only
Invariants are
  br label %if.end15, !control_dep_instr !7, !data_indep_instr !10
  store i32 0, i32* %prestrip, align 4, !control_dep_instr !7, !data_indep_instr !10
  store i32 0, i32* %preadd, align 4, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  land.end  for.end  
After path modifications process path is empty
Processing path: entry  if.end  for.end  
After path modifications process path
entry  if.end  for.end  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_cap4(i32* %retval, i32* %nsaved), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %nsaved = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_cap4(i32* %retval, i32* %nsaved), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
 Processing function:insert
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  
After path modifications process path is empty
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %realword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @insert0(i8** %realword, i8** %word.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @insert0(i8** %realword, i8** %word.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  for.cond  for.body  if.end  for.inc  
After path modifications process path
if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !13
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  return  
After path modifications process path is empty
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  for.cond  for.end  if.then11  
After path modifications process path is empty
Processing path: entry  for.end  if.then11  
After path modifications process path
entry  for.end  if.then11  
Processing path: entry  for.cond  for.end  if.end12  if.then15  
After path modifications process path is empty
Processing path: entry  for.end  if.end12  if.then15  
After path modifications process path
entry  for.end  if.end12  if.then15  
Processing path: entry  for.cond  for.end  if.end12  if.else  
After path modifications process path is empty
Processing path: entry  for.end  if.end12  if.else  
After path modifications process path
entry  for.end  if.end12  if.else  
 Processing function:save_root_cap
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then5  
After path modifications process path
entry  if.end  if.then5  
Processing path: entry  if.end  if.end12  for.cond  for.body  if.then16  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  if.then16  
After path modifications process path
entry  if.end  if.end12  if.then16  
Processing path: entry  if.end  if.end12  for.cond  for.body  if.end17  for.inc  
After path modifications process path
if.end17  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  
After path modifications process path
entry  if.end  if.end12  
Processing path: entry  if.end  if.end12  for.cond  for.end  if.then21  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.then21  
After path modifications process path
entry  if.end  if.end12  for.end  if.then21  
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  if.then36  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.body32  if.then36  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  if.then36  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  if.then36  
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_root_cap2(i8** %p, i8** %pattern.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %pattern.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_root_cap2(i8** %p, i8** %pattern.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.body32  if.end37  for.inc38  
After path modifications process path
if.end37  
Hash path invariants only
Invariants are
  br label %for.inc38, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  for.end  if.end29  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.then46  if.then57  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.then46  if.then57  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.then46  if.then57  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.then46  if.then57  
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.then46  lor.lhs.false  if.end69  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.then46  lor.lhs.false  if.end69  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.then46  lor.lhs.false  if.end69  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.then46  lor.lhs.false  if.end69  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.body  if.then114  
After path modifications process path
while.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.body  lor.lhs.false94  land.lhs.true  if.end115  if.then117  if.then123  
After path modifications process path
while.body  lor.lhs.false94  land.lhs.true  if.end115  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  if.then123  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  if.then123  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  if.then123  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  if.then123  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.body  lor.lhs.false94  land.lhs.true  if.end115  if.then117  if.end135  
After path modifications process path
while.body  lor.lhs.false94  land.lhs.true  if.end115  if.end135  
Hash path invariants only
Invariants are
  br label %if.end151, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.body  lor.lhs.false94  land.lhs.true  if.end115  if.end151  
After path modifications process path
while.body  lor.lhs.false94  land.lhs.true  if.end115  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.body  lor.lhs.false94  land.lhs.true  if.end115  if.else136  if.then142  
After path modifications process path
while.body  lor.lhs.false94  land.lhs.true  if.end115  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  if.then142  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  if.then142  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  if.then142  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  if.then142  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.body  lor.lhs.false94  land.lhs.true  if.end115  if.else136  if.end150  
After path modifications process path
while.body  lor.lhs.false94  land.lhs.true  if.end115  if.end150  
Hash path invariants only
Invariants are
  br label %if.end151, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.body  lor.lhs.false94  land.lhs.true  lor.lhs.false105  
After path modifications process path
while.body  lor.lhs.false94  land.lhs.true  lor.lhs.false105  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.body  lor.lhs.false94  lor.lhs.false97  
After path modifications process path
while.body  lor.lhs.false94  lor.lhs.false97  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  while.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  while.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.end  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.end  
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.else  if.then75  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.else  if.then75  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.else  if.then75  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.else  if.then75  
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.else  if.end83  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.else  if.end83  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.else  if.end83  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.else  if.end83  
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.then161  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.then161  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.then161  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.then161  
Processing call instruction..
Can't handle this operand   %dent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_root_cap4(%struct.dent** %dent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.then194  if.then203  
After path modifications process path
land.lhs.true176  if.then188  if.then194  if.then203  
Hash path invariants only
Invariants are
  br label %if.end208, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay195 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arrayidx204 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  call void @lowcase(i8* %arraydecay195), !control_dep_instr !7, !data_indep_instr !11
  %arrayidx207 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
Processing call instruction..
Can't handle this operand   %arraydecay195 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12 of the call   call void @lowcase(i8* %arraydecay195), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.then194  if.end208  if.then217  
After path modifications process path
land.lhs.true176  if.then188  if.then194  
Hash path invariants only
Invariants are
  %arraydecay195 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  call void @lowcase(i8* %arraydecay195), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %arraydecay195 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12 of the call   call void @lowcase(i8* %arraydecay195), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  if.then217  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  if.then217  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  if.then217  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  if.then217  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.then194  if.end208  if.end218  
After path modifications process path
land.lhs.true176  if.then188  if.then194  if.end218  
Hash path invariants only
Invariants are
  br label %if.end314, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  call void @lowcase(i8* %arraydecay195), !control_dep_instr !7, !data_indep_instr !11
  %arraydecay195 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %arraydecay195 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12 of the call   call void @lowcase(i8* %arraydecay195), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.then194  lor.lhs.false197  
After path modifications process path
land.lhs.true176  if.then188  if.then194  lor.lhs.false197  
Hash path invariants only
Invariants are
  %arraydecay195 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  call void @lowcase(i8* %arraydecay195), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %arraydecay195 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12 of the call   call void @lowcase(i8* %arraydecay195), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.end314  
After path modifications process path
land.lhs.true176  if.then188  if.end314  
Hash path invariants only
Invariants are
  br label %if.end315, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond234  for.body237  for.inc244  
After path modifications process path
for.body237  
Hash path invariants only
Invariants are
  br label %for.inc244, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.then233  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.then233  
Hash path invariants only
Invariants are
  br label %for.cond234, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond234  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.then233  for.end246  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.then233  for.end246  
Hash path invariants only
Invariants are
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond234, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end261, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond279  for.body282  for.inc285  
After path modifications process path
for.body282  
Hash path invariants only
Invariants are
  br label %for.inc285, !control_dep_instr !7, !data_indep_instr !11
  call void @save_root_cap7(i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_root_cap7(i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.end261  if.then275  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.end261  if.then275  
Hash path invariants only
Invariants are
  br label %for.cond279, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay276 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond279  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.end261  if.then275  for.end288  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.end261  if.then275  for.end288  
Hash path invariants only
Invariants are
  br label %if.end303, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay276 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %for.cond279, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.end261  if.end303  if.then312  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.end261  
Hash path invariants only
Invariants are
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  if.then312  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  if.then312  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  if.then312  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  if.then312  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.end261  if.end303  if.end313  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.end261  if.end313  
Hash path invariants only
Invariants are
  br label %if.end314, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond293  for.body296  for.inc299  
After path modifications process path
for.body296  
Hash path invariants only
Invariants are
  br label %for.inc299, !control_dep_instr !7, !data_indep_instr !11
  call void @save_root_cap9(i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_root_cap9(i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.end261  if.else289  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.end261  if.else289  
Hash path invariants only
Invariants are
  br label %for.cond293, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay290 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond293  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.end261  if.else289  for.end302  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.end261  if.else289  for.end302  
Hash path invariants only
Invariants are
  br label %if.end303, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay290 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %for.cond293, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond248  for.body251  for.inc258  
After path modifications process path
for.body251  
Hash path invariants only
Invariants are
  br label %for.inc258, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.else247  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.else247  
Hash path invariants only
Invariants are
  br label %for.cond248, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond248  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.else247  for.end260  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.else247  for.end260  
Hash path invariants only
Invariants are
  br label %if.end261, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond248, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  lor.lhs.false179  
After path modifications process path
land.lhs.true176  lor.lhs.false179  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  if.end315  if.then321  for.end324  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  if.then321  for.end324  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  if.then321  for.end324  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  if.then321  for.end324  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  if.then321  for.end324  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  if.end315  if.end322  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  lor.lhs.false167  
After path modifications process path
lor.lhs.false167  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
 Processing function:ins_cap
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  
After path modifications process path is empty
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  for.cond  for.body  if.end  for.inc  
After path modifications process path
if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  return  
After path modifications process path is empty
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
 Processing function:ins_root_cap
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  
After path modifications process path is empty
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  for.cond  for.body  if.end  for.inc  
After path modifications process path
if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  return  
After path modifications process path is empty
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
 Processing function:askmode
Short range hashing enabled.
Processing path: entry  if.then  if.then1  
After path modifications process path
entry  if.then  if.then1  
Processing path: entry  if.then  if.end  
After path modifications process path
entry  if.then  if.end  
Processing path: entry  if.end3  while.body  if.then7  if.then10  
After path modifications process path is empty
Processing path: entry  if.end3  if.then10  
After path modifications process path
entry  if.end3  if.then10  
Processing path: entry  if.end3  while.body  if.then7  if.end11  
After path modifications process path
if.end11  
Hash path invariants only
Invariants are
  br label %if.end16, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  while.end164  
After path modifications process path is empty
Processing path: entry  if.end3  while.end164  
After path modifications process path
entry  if.end3  while.end164  
Processing path: entry  if.end3  while.body  if.end16  if.then21  
After path modifications process path
if.end16  if.then21  
Hash path invariants only
Invariants are
  br label %if.end25, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode2(i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11
  store i32 1, i32* %hadnl, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %bufsize = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode2(i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.cond34  land.rhs  lor.end  
After path modifications process path
land.rhs  lor.end  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.then29  
After path modifications process path
if.end16  if.end25  if.then29  
Hash path invariants only
Invariants are
  br label %while.cond34, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Can't handle this operand   %bufsize = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.cond34  land.rhs  lor.lhs.false  lor.rhs  
After path modifications process path
land.rhs  lor.lhs.false  lor.rhs  
Hash path invariants only
Invariants are
  br label %lor.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.then29  
After path modifications process path
if.end16  if.end25  if.then29  
Hash path invariants only
Invariants are
  call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
  br label %while.cond34, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Can't handle this operand   %bufsize = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.cond34  land.end  while.body53  
After path modifications process path is empty
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.then29  if.then57  
After path modifications process path
if.end16  if.end25  if.then29  if.then57  
Hash path invariants only
Invariants are
  br label %while.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
  br label %while.cond34, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Can't handle this operand   %bufsize = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.cond34  land.end  while.body53  if.end58  
After path modifications process path is empty
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.then29  
After path modifications process path
if.end16  if.end25  if.then29  
Hash path invariants only
Invariants are
  call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
  br label %while.cond34, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Can't handle this operand   %bufsize = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.cond34  land.end  
After path modifications process path is empty
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.then29  while.end  
After path modifications process path
if.end16  if.end25  if.then29  while.end  
Hash path invariants only
Invariants are
  br label %if.end64, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
  br label %while.cond34, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Can't handle this operand   %bufsize = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.then67  
After path modifications process path
if.end16  if.end25  if.end64  if.then67  
Hash path invariants only
Invariants are
  br label %if.end152, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode5(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.end152  if.then154  
After path modifications process path
if.end16  if.end25  if.end64  if.end152  if.then154  
Hash path invariants only
Invariants are
  br label %if.end156, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @contextoffset, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.end152  if.end156  if.then158  if.then160  
After path modifications process path
if.end16  if.end25  if.end64  if.end152  if.end156  if.then158  if.then160  
Hash path invariants only
Invariants are
  br label %if.end162, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode10(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
  call void @stop(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.end152  if.end156  if.then158  if.end162  
After path modifications process path
if.end16  if.end25  if.end64  if.end152  if.end156  if.then158  if.end162  
Hash path invariants only
Invariants are
  br label %if.end163, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
  call void @stop(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.end152  if.end156  if.end163  
After path modifications process path
if.end16  if.end25  if.end64  if.end152  if.end156  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.end152  if.else155  
After path modifications process path
if.end16  if.end25  if.end64  if.end152  if.else155  
Hash path invariants only
Invariants are
  br label %if.end156, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode9(i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %bufsize = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode9(i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  if.then76  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  if.then76  
Hash path invariants only
Invariants are
  br label %if.end151, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode6(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  if.end151  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  if.end151  
Hash path invariants only
Invariants are
  br label %if.end152, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.then86  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.then86  
Hash path invariants only
Invariants are
  br label %if.end150, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.end150  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.end150  
Hash path invariants only
Invariants are
  br label %if.end151, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.then93  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.then93  
Hash path invariants only
Invariants are
  br label %if.end149, !control_dep_instr !7, !data_indep_instr !11
  store i8 80, i8* @LaTeX_Mode, align 1, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @math_mode, align 4, !control_dep_instr !7, !data_indep_instr !11
  call void @treeoutput(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.end149  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.end149  
Hash path invariants only
Invariants are
  br label %if.end150, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.then98  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.then98  
Hash path invariants only
Invariants are
  br label %if.end148, !control_dep_instr !7, !data_indep_instr !11
  store i32 1, i32* @terse, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.end148  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.end148  
Hash path invariants only
Invariants are
  br label %if.end149, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.then103  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.then103  
Hash path invariants only
Invariants are
  br label %if.end147, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @terse, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.end147  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.end147  
Hash path invariants only
Invariants are
  br label %if.end148, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.then108  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.then108  
Hash path invariants only
Invariants are
  store i32 0, i32* @tflag, align 4, !control_dep_instr !7, !data_indep_instr !11
  store i8 80, i8* @LaTeX_Mode, align 1, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end146, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @math_mode, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.end146  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.end146  
Hash path invariants only
Invariants are
  br label %if.end147, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.then113  land.rhs117  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.then113  land.rhs117  
Hash path invariants only
Invariants are
  store i8 80, i8* @LaTeX_Mode, align 1, !control_dep_instr !7, !data_indep_instr !11
  br label %land.end121, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @math_mode, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.then113  land.end121  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.then113  land.end121  
Hash path invariants only
Invariants are
  store i8 80, i8* @LaTeX_Mode, align 1, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end145, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @math_mode, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.end145  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.end145  
Hash path invariants only
Invariants are
  br label %if.end146, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.then126  if.then130  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.then126  if.then130  
Hash path invariants only
Invariants are
  br label %if.end131, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @defdupchar, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.then126  if.end131  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.then126  if.end131  
Hash path invariants only
Invariants are
  br label %if.end144, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.end144  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.end144  
Hash path invariants only
Invariants are
  br label %if.end145, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.else132  if.then136  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.else132  if.then136  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i64 1), i8** %cp2, align 8, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %cp1, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Non numeric pointers (int and float) are skipped:  %cp1 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Non numeric pointers (int and float) are skipped:  %cp2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end3  for.cond  for.body  
After path modifications process path is empty
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.else132  if.then136  for.end  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.else132  if.then136  for.end  
Hash path invariants only
Invariants are
  br label %if.end143, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i64 1), i8** %cp2, align 8, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode7(i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %cp1, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Non numeric pointers (int and float) are skipped:  %cp1 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Non numeric pointers (int and float) are skipped:  %cp2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %bufsize = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode7(i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  for.cond  
After path modifications process path is empty
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.else132  if.end143  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.else132  if.end143  
Hash path invariants only
Invariants are
  br label %if.end144, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode8(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.else24  
After path modifications process path
if.end16  if.else24  
Hash path invariants only
Invariants are
  br label %if.end25, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %hadnl, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.else  if.then14  
After path modifications process path is empty
Processing path: entry  if.end3  if.then14  
After path modifications process path
entry  if.end3  if.then14  
Processing path: entry  if.end3  while.body  if.else  if.end15  
After path modifications process path
if.end15  
Hash path invariants only
Invariants are
  br label %if.end16, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
 Processing function:copyout
Short range hashing enabled.
Processing path: entry  while.cond  while.body  if.then  
After path modifications process path is empty
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
No oh has been applied in the path
Processing path: entry  while.cond  while.body  if.end  if.end6  
After path modifications process path
if.end  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.body  if.end  land.lhs.true  if.then4  
After path modifications process path
if.end  land.lhs.true  if.then4  
Hash path invariants only
Invariants are
  br label %if.end6, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  call void @copyout0(i8*** %cc.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !13
Processing call instruction..
Can't handle this operand   %cc.addr = alloca i8**, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @copyout0(i8*** %cc.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !13
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
No oh has been applied in the path
 Processing function:skipoverword
Short range hashing enabled.
Processing path: entry  for.cond  if.then  if.then2  
After path modifications process path is empty
Processing path: entry  if.then  if.then2  
After path modifications process path
entry  if.then  if.then2  
Non numeric pointers (int and float) are skipped:  %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  for.cond  if.then  if.end  
After path modifications process path is empty
Processing path: entry  if.then  if.end  
After path modifications process path
entry  if.then  if.end  
Non numeric pointers (int and float) are skipped:  %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  for.cond  for.end  cond.true  
After path modifications process path is empty
Processing path: entry  for.end  cond.true  
After path modifications process path
entry  for.end  cond.true  
Non numeric pointers (int and float) are skipped:  %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  for.cond  for.end  cond.end  
After path modifications process path is empty
Processing path: entry  for.end  cond.end  
After path modifications process path
entry  for.end  cond.end  
Non numeric pointers (int and float) are skipped:  %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  for.cond  for.end  cond.false  
After path modifications process path is empty
Processing path: entry  for.end  cond.false  
After path modifications process path
entry  for.end  cond.false  
Non numeric pointers (int and float) are skipped:  %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  for.cond  if.else  land.lhs.true  if.then7  
After path modifications process path
if.else  land.lhs.true  if.then7  
Hash path invariants only
Invariants are
  store i8* null, i8** %lastboundary, align 8, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end32, !control_dep_instr !7, !data_indep_instr !11
  call void @skipoverword1(i8** %bufp.addr, i32* %scharlen), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skipoverword1(i8** %bufp.addr, i32* %scharlen), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %scharlen = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skipoverword1(i8** %bufp.addr, i32* %scharlen), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Non numeric pointers (int and float) are skipped:  %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  
After path modifications process path
entry  
Non numeric pointers (int and float) are skipped:  %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
No oh has been applied in the path
Processing path: entry  for.cond  if.else  if.end32  if.end33  
After path modifications process path
if.else  if.end32  
Hash path invariants only
Invariants are
  br label %if.end33, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Non numeric pointers (int and float) are skipped:  %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
No oh has been applied in the path
Processing path: entry  for.cond  if.else  if.else8  if.then12  
After path modifications process path
if.else  if.else8  if.then12  
Hash path invariants only
Invariants are
  br label %if.end31, !control_dep_instr !7, !data_indep_instr !11
  store i8* null, i8** %lastboundary, align 8, !control_dep_instr !7, !data_indep_instr !11
  call void @skipoverword2(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skipoverword2(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Non numeric pointers (int and float) are skipped:  %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  
After path modifications process path
entry  
Non numeric pointers (int and float) are skipped:  %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
No oh has been applied in the path
Processing path: entry  for.cond  if.else  if.else8  if.end31  
After path modifications process path
if.else  if.else8  if.end31  
Hash path invariants only
Invariants are
  br label %if.end32, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Non numeric pointers (int and float) are skipped:  %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
No oh has been applied in the path
Processing path: entry  for.cond  if.else  if.else8  if.else13  if.then17  if.then20  
After path modifications process path
if.else  if.else8  if.then17  if.then20  
Hash path invariants only
Invariants are
  br label %if.end27, !control_dep_instr !7, !data_indep_instr !11
  call void @skipoverword3(i8** %lastboundary, i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skipoverword3(i8** %lastboundary, i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skipoverword3(i8** %lastboundary, i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Non numeric pointers (int and float) are skipped:  %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
No oh has been applied in the path
Processing path: entry  for.cond  if.else  if.else8  if.else13  if.then17  if.end27  if.end30  
After path modifications process path
if.else  if.else8  if.then17  if.end27  if.end30  
Hash path invariants only
Invariants are
  br label %if.end31, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %if.end30, !control_dep_instr !7, !data_indep_instr !11
  call void @skipoverword4(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skipoverword4(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Non numeric pointers (int and float) are skipped:  %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
No oh has been applied in the path
Processing path: entry  for.cond  if.else  if.else8  if.else13  if.then17  if.else21  if.then25  
After path modifications process path
if.else  if.else8  if.then17  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.then25  
After path modifications process path
entry  if.then25  
Non numeric pointers (int and float) are skipped:  %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
No oh has been applied in the path
Processing path: entry  for.cond  if.else  if.else8  if.else13  if.then17  if.else21  if.end26  
After path modifications process path
if.else  if.else8  if.then17  if.end26  
Hash path invariants only
Invariants are
  br label %if.end27, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Non numeric pointers (int and float) are skipped:  %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
No oh has been applied in the path
Processing path: entry  for.cond  if.else  if.else8  if.else13  if.else29  
After path modifications process path
if.else  if.else8  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.else29  
After path modifications process path
entry  if.else29  
Non numeric pointers (int and float) are skipped:  %lastboundary = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
No oh has been applied in the path
 Processing function:checkline
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.then173  
After path modifications process path
if.then173  
Hash path invariants only
Invariants are
  br label %if.end175, !control_dep_instr !7, !data_indep_instr !11
  call void @checkline5(i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline5(i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.then179  for.end302  land.lhs.true304  if.then308  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  if.then179  for.end302  land.lhs.true304  if.then308  
After path modifications process path
entry  if.end  if.end117  if.end169  if.then179  for.end302  land.lhs.true304  if.then308  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.then179  for.end302  land.lhs.true304  lor.lhs.false306  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  if.then179  for.end302  land.lhs.true304  lor.lhs.false306  
After path modifications process path
entry  if.end  if.end117  if.end169  if.then179  for.end302  land.lhs.true304  lor.lhs.false306  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  
After path modifications process path
if.end180  
Hash path invariants only
Invariants are
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.rhs185  
After path modifications process path
land.rhs185  
Hash path invariants only
Invariants are
  br label %land.end188, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  
After path modifications process path
if.end180  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  while.body189  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.then195  
After path modifications process path
if.end180  while.end192  if.then195  
Hash path invariants only
Invariants are
  br label %if.end197, !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline8(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.then201  land.lhs.true204  land.lhs.true207  land.lhs.true209  if.then212  
After path modifications process path
if.end180  while.end192  if.end197  if.then201  land.lhs.true204  land.lhs.true207  land.lhs.true209  if.then212  
Hash path invariants only
Invariants are
  br label %if.end214, !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  call void @checkline9(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %ofile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline9(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.then201  if.end214  
After path modifications process path
if.end180  while.end192  if.end197  if.then201  if.end214  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %if.end295, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.end295  if.end301  
After path modifications process path
if.end180  while.end192  if.end197  if.end295  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.end295  land.lhs.true297  if.then299  
After path modifications process path
if.end180  while.end192  if.end197  if.end295  land.lhs.true297  if.then299  
Hash path invariants only
Invariants are
  br label %if.end301, !control_dep_instr !7, !data_indep_instr !11
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
  call void @checkline19(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %ofile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline19(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.then216  if.then219  if.end223  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.then216  if.then219  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.then216  if.then219  if.then221  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.then216  if.then219  if.then221  
Hash path invariants only
Invariants are
  br label %if.end223, !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline10(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %ofile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline10(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.then227  land.lhs.true230  if.then233  if.end237  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.then227  land.lhs.true230  if.then233  if.end237  
Hash path invariants only
Invariants are
  br label %if.end243, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.then227  land.lhs.true230  if.then233  if.then235  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.then227  land.lhs.true230  if.then233  if.then235  
Hash path invariants only
Invariants are
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  br label %if.end237, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline11(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %ofile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline11(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.then227  if.end243  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.then227  if.end243  
Hash path invariants only
Invariants are
  br label %if.end289, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.then227  if.else238  if.end242  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.then227  if.else238  if.end242  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %if.end243, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.then227  if.else238  if.then240  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.then227  if.else238  if.then240  
Hash path invariants only
Invariants are
  br label %if.end242, !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  call void @checkline12(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %ofile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline12(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.end289  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.end289  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %if.end294, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.else244  if.then247  if.end251  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.else244  if.then247  if.end251  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  br label %if.end288, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.else244  if.then247  if.then249  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.else244  if.then247  if.then249  
Hash path invariants only
Invariants are
  br label %if.end251, !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
  call void @checkline13(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %ofile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline13(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.else244  if.end288  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.else244  if.end288  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  br label %if.end289, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond262  for.body  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.else244  if.else252  if.then254  if.then271  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.else244  if.else252  if.then254  if.then271  
Hash path invariants only
Invariants are
  br label %for.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond262, !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
  call void @makepossibilities(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0)), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  call void @checkline14(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0) of the call   call void @makepossibilities(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0)), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %ofile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline14(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond262  for.body  if.end272  for.inc  
After path modifications process path
if.end272  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  call void @checkline15(i32* %i, %struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !12
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline15(i32* %i, %struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !12
Can't handle this operand   %ofile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline15(i32* %i, %struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !12
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.else244  if.else252  if.then254  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.else244  if.else252  if.then254  
Hash path invariants only
Invariants are
  br label %for.cond262, !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
  call void @makepossibilities(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0)), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  call void @checkline14(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0) of the call   call void @makepossibilities(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0)), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %ofile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline14(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond262  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.else244  if.else252  if.then254  for.end  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.else244  if.else252  if.then254  for.end  
Hash path invariants only
Invariants are
  br label %if.end287, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond262, !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
  call void @makepossibilities(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0)), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline17(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  call void @checkline14(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0) of the call   call void @makepossibilities(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0)), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %ofile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline14(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %ofile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline17(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.else244  if.else252  if.end287  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.else244  if.else252  if.end287  
Hash path invariants only
Invariants are
  br label %if.end288, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
  call void @makepossibilities(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0)), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0) of the call   call void @makepossibilities(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0)), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.else244  if.else252  if.else279  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.then216  if.end224  if.else244  if.else252  if.else279  
Hash path invariants only
Invariants are
  br label %if.end287, !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
  call void @makepossibilities(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0)), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  call void @checkline18(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0) of the call   call void @makepossibilities(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0)), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %ofile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline18(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.end294  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.end294  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  br label %if.end295, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.else290  if.end293  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.else290  if.end293  
Hash path invariants only
Invariants are
  br label %if.end294, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  if.end169  for.cond  if.end175  if.end180  while.end192  if.end197  if.else  if.else290  if.then292  
After path modifications process path
if.end180  while.end192  if.end197  if.else  if.else290  if.then292  
Hash path invariants only
Invariants are
  br label %if.end293, !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond182, !control_dep_instr !7, !data_indep_instr !11
  call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i8** %p, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @correct(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i32 120, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0), i32 120, i8** @currentchar), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Non numeric pointers (int and float) are skipped:  %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %endp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline6(i8** %endp), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0) of the call   call void @correct(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i32 120, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0), i32 120, i8** @currentchar), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
***Handling a call instruction***
Can't handle this operand i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0) of the call   call void @correct(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i32 120, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0), i32 120, i8** @currentchar), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
***Handling a call instruction***
Can't handle this operand @currentchar = common global i8* null, align 8 of the call   call void @correct(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @ctoken, i32 0, i32 0), i32 120, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @itoken, i32 0, i32 0), i32 120, i8** @currentchar), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end117  if.end169  while.cond182  land.end188  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  if.end169  
After path modifications process path
entry  if.end  if.end117  if.end169  
Processing path: entry  if.end  if.end117  land.lhs.true119  if.then124  while.cond125  land.rhs128  land.lhs.true132  land.rhs136  
After path modifications process path
land.rhs128  land.lhs.true132  land.rhs136  
Hash path invariants only
Invariants are
  br label %land.end144, !control_dep_instr !7, !data_indep_instr !11
  %187 = load i16*, i16** %call139, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call139 = call i16** @__ctype_b_loc() #9, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end117  land.lhs.true119  if.then124  
After path modifications process path
entry  if.end  if.end117  land.lhs.true119  if.then124  
Processing path: entry  if.end  if.end117  land.lhs.true119  if.then124  while.cond125  land.rhs128  land.end144  
After path modifications process path
land.rhs128  land.end144  
Hash path invariants only
Invariants are
  br label %land.end146, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end117  land.lhs.true119  if.then124  
After path modifications process path
entry  if.end  if.end117  land.lhs.true119  if.then124  
Processing path: entry  if.end  if.end117  land.lhs.true119  if.then124  while.cond125  land.end146  while.body147  if.end154  
After path modifications process path
while.body147  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end117  land.lhs.true119  if.then124  
After path modifications process path
entry  if.end  if.end117  land.lhs.true119  if.then124  
Processing path: entry  if.end  if.end117  land.lhs.true119  if.then124  while.cond125  land.end146  while.body147  land.lhs.true149  if.then151  
After path modifications process path
while.body147  land.lhs.true149  if.then151  
Hash path invariants only
Invariants are
  br label %if.end154, !control_dep_instr !7, !data_indep_instr !11
  call void @checkline2(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %ofile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @checkline2(%struct._IO_FILE** %ofile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end117  land.lhs.true119  if.then124  
After path modifications process path
entry  if.end  if.end117  land.lhs.true119  if.then124  
Processing path: entry  if.end  if.end117  land.lhs.true119  if.then124  while.cond125  land.end146  while.end155  if.then159  if.end167  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  land.lhs.true119  if.then124  while.end155  if.then159  if.end167  
After path modifications process path
entry  if.end  if.end117  land.lhs.true119  if.then124  while.end155  if.then159  if.end167  
Processing path: entry  if.end  if.end117  land.lhs.true119  if.then124  while.cond125  land.end146  while.end155  if.then159  land.lhs.true161  if.then165  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  land.lhs.true119  if.then124  while.end155  if.then159  land.lhs.true161  if.then165  
After path modifications process path
entry  if.end  if.end117  land.lhs.true119  if.then124  while.end155  if.then159  land.lhs.true161  if.then165  
Processing path: entry  if.end  if.end117  land.lhs.true119  if.then124  while.cond125  land.end146  while.end155  if.then159  land.lhs.true161  lor.lhs.false163  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  land.lhs.true119  if.then124  while.end155  if.then159  land.lhs.true161  lor.lhs.false163  
After path modifications process path
entry  if.end  if.end117  land.lhs.true119  if.then124  while.end155  if.then159  land.lhs.true161  lor.lhs.false163  
Processing path: entry  if.end  if.end117  land.lhs.true119  if.then124  while.cond125  land.end146  while.end155  if.end168  
After path modifications process path is empty
Processing path: entry  if.end  if.end117  land.lhs.true119  if.then124  while.end155  if.end168  
After path modifications process path
entry  if.end  if.end117  land.lhs.true119  if.then124  while.end155  if.end168  
Processing path: entry  if.end  if.end310  
After path modifications process path
entry  if.end  if.end310  
Processing path: entry  if.end  if.then6  land.lhs.true  if.then18  while.cond  land.rhs  land.lhs.true24  land.rhs28  
After path modifications process path
land.rhs  land.lhs.true24  land.rhs28  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
  %128 = load i16*, i16** %call31, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call31 = call i16** @__ctype_b_loc() #9, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.then6  land.lhs.true  if.then18  
After path modifications process path
entry  if.end  if.then6  land.lhs.true  if.then18  
Processing path: entry  if.end  if.then6  land.lhs.true  if.then18  while.cond  land.rhs  land.end  
After path modifications process path
land.rhs  land.end  
Hash path invariants only
Invariants are
  br label %land.end35, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.then6  land.lhs.true  if.then18  
After path modifications process path
entry  if.end  if.then6  land.lhs.true  if.then18  
Processing path: entry  if.end  if.then6  land.lhs.true  if.then18  while.cond  land.end35  while.body  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  land.lhs.true  if.then18  
After path modifications process path
entry  if.end  if.then6  land.lhs.true  if.then18  
Processing path: entry  if.end  if.then6  land.lhs.true  if.then18  while.cond  land.end35  while.end  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  land.lhs.true  if.then18  while.end  
After path modifications process path
entry  if.end  if.then6  land.lhs.true  if.then18  while.end  
Processing path: entry  if.end  if.then6  land.lhs.true  lor.lhs.false  
After path modifications process path
entry  if.end  if.then6  land.lhs.true  lor.lhs.false  
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.cond57  land.rhs60  land.lhs.true64  land.rhs68  
After path modifications process path
land.rhs60  land.lhs.true64  land.rhs68  
Hash path invariants only
Invariants are
  br label %land.end76, !control_dep_instr !7, !data_indep_instr !11
  %186 = load i16*, i16** %call71, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call71 = call i16** @__ctype_b_loc() #9, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  
After path modifications process path
entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.cond57  land.rhs60  land.end76  
After path modifications process path
land.rhs60  land.end76  
Hash path invariants only
Invariants are
  br label %land.end77, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  
After path modifications process path
entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.cond57  land.end77  while.body78  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  
After path modifications process path
entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  while.cond80  land.rhs83  land.lhs.true87  land.rhs91  
After path modifications process path
land.rhs83  land.lhs.true87  land.rhs91  
Hash path invariants only
Invariants are
  br label %land.end99, !control_dep_instr !7, !data_indep_instr !11
  %228 = load i16*, i16** %call94, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call94 = call i16** @__ctype_b_loc() #9, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.cond57  land.end77  while.end79  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  
After path modifications process path
entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  while.cond80  land.rhs83  land.end99  
After path modifications process path
land.rhs83  land.end99  
Hash path invariants only
Invariants are
  br label %land.end100, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.cond57  land.end77  while.end79  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  
After path modifications process path
entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  while.cond80  land.end100  while.body101  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.cond57  land.end77  while.end79  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  
After path modifications process path
entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  while.cond80  land.end100  while.end102  if.then106  if.end114  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.cond57  land.end77  while.end79  while.end102  if.then106  if.end114  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  while.end102  if.then106  if.end114  
After path modifications process path
entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  while.end102  if.then106  if.end114  
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  while.cond80  land.end100  while.end102  if.then106  land.lhs.true108  if.then112  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.cond57  land.end77  while.end79  while.end102  if.then106  land.lhs.true108  if.then112  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  while.end102  if.then106  land.lhs.true108  if.then112  
After path modifications process path
entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  while.end102  if.then106  land.lhs.true108  if.then112  
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  while.cond80  land.end100  while.end102  if.then106  land.lhs.true108  lor.lhs.false110  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.cond57  land.end77  while.end79  while.end102  if.then106  land.lhs.true108  lor.lhs.false110  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  while.end102  if.then106  land.lhs.true108  lor.lhs.false110  
After path modifications process path
entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  while.end102  if.then106  land.lhs.true108  lor.lhs.false110  
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  while.cond80  land.end100  while.end102  if.end115  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.cond57  land.end77  while.end79  while.end102  if.end115  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  while.end102  if.end115  
After path modifications process path
entry  if.end  if.then6  if.end36  land.lhs.true41  if.then56  while.end79  while.end102  if.end115  
Processing path: entry  if.end  if.then6  if.end36  land.lhs.true41  lor.lhs.false46  lor.lhs.false51  
After path modifications process path
entry  if.end  if.then6  if.end36  land.lhs.true41  lor.lhs.false46  lor.lhs.false51  
Processing path: entry  if.end  if.then6  if.end36  if.end116  
After path modifications process path
entry  if.end  if.then6  if.end36  if.end116  
 Processing function:skiptoword
Short range hashing enabled.
Processing path: entry  while.cond  land.rhs  land.lhs.true  
After path modifications process path
land.rhs  land.lhs.true  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.rhs  lor.lhs.false  lor.rhs  land.rhs13  
After path modifications process path
land.rhs  lor.lhs.false  lor.rhs  land.rhs13  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.rhs  lor.lhs.false  lor.rhs  land.end  
After path modifications process path
land.rhs  lor.lhs.false  lor.rhs  land.end  
Hash path invariants only
Invariants are
  br label %lor.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.rhs  lor.end  
After path modifications process path
land.rhs  lor.end  
Hash path invariants only
Invariants are
  br label %land.end15, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.rhs  land.lhs.true4  
After path modifications process path
land.rhs  land.lhs.true4  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.then21  if.end  
After path modifications process path
while.body  if.then  if.then21  if.end  
Hash path invariants only
Invariants are
  br label %if.end138, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.then21  if.then23  
After path modifications process path
while.body  if.then  if.then21  if.then23  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @math_mode, align 4, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword0(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i8 80, i8* @LaTeX_Mode, align 1, !control_dep_instr !7, !data_indep_instr !11
  store i32 1, i32* @TeX_comment, align 4, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.end138  if.then142  
After path modifications process path
while.body  if.then  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.then142  
After path modifications process path
entry  if.then142  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.end138  if.end143  
After path modifications process path
while.body  if.then  if.end143  
Hash path invariants only
Invariants are
  br label %if.end211, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  land.lhs.true30  
After path modifications process path
while.body  if.then  if.else  if.then26  land.lhs.true30  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  if.then40  
After path modifications process path
while.body  if.then  if.else  if.then26  if.then40  
Hash path invariants only
Invariants are
  br label %if.end73, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword1(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  if.end73  if.then76  
After path modifications process path
while.body  if.then  if.else  if.then26  if.end73  if.then76  
Hash path invariants only
Invariants are
  store i32 0, i32* @math_mode, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end78, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword4(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  if.end73  if.end78  
After path modifications process path
while.body  if.then  if.else  if.then26  if.end73  if.end78  
Hash path invariants only
Invariants are
  br label %if.end137, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  land.lhs.true37  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  land.lhs.true37  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond42  land.rhs45  lor.end60  
After path modifications process path
land.rhs45  lor.end60  
Hash path invariants only
Invariants are
  br label %land.end61, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
Hash path invariants only
Invariants are
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond42  land.rhs45  lor.lhs.false50  lor.rhs55  
After path modifications process path
land.rhs45  lor.lhs.false50  lor.rhs55  
Hash path invariants only
Invariants are
  br label %lor.end60, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
Hash path invariants only
Invariants are
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond42  land.end61  while.body62  
After path modifications process path is empty
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
Hash path invariants only
Invariants are
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond42  land.end61  if.then66  
After path modifications process path is empty
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  while.end  if.then66  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
Hash path invariants only
Invariants are
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.then66  
After path modifications process path
entry  if.then66  
No oh has been applied in the path
Processing path: entry  while.cond42  land.end61  
After path modifications process path is empty
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  while.end  if.end67  if.then70  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  if.end67  if.then70  
Hash path invariants only
Invariants are
  br label %if.end72, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword3(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond42  land.end61  
After path modifications process path is empty
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  while.end  if.end67  if.end72  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  if.end67  if.end72  
Hash path invariants only
Invariants are
  br label %if.end73, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.end137  
After path modifications process path
while.body  if.then  if.else  if.end137  
Hash path invariants only
Invariants are
  br label %if.end138, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  land.lhs.true82  land.lhs.true87  if.then91  
After path modifications process path
while.body  if.then  if.else  if.else79  land.lhs.true82  land.lhs.true87  if.then91  
Hash path invariants only
Invariants are
  br label %if.end136, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword5(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.end136  
After path modifications process path
while.body  if.then  if.else  if.else79  if.end136  
Hash path invariants only
Invariants are
  br label %if.end137, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  if.then108  if.then111  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  if.then108  if.then111  
Hash path invariants only
Invariants are
  br label %if.end113, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword6(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  if.then108  if.end113  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  if.then108  if.end113  
Hash path invariants only
Invariants are
  br label %if.end135, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  if.end135  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  if.end135  
Hash path invariants only
Invariants are
  br label %if.end136, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  land.lhs.true99  land.lhs.true104  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  land.lhs.true99  land.lhs.true104  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  land.lhs.true118  if.then121  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  land.lhs.true118  if.then121  
Hash path invariants only
Invariants are
  br label %if.end134, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword7(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.end134  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.end134  
Hash path invariants only
Invariants are
  br label %if.end135, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.then126  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.then126  
Hash path invariants only
Invariants are
  br label %if.end133, !control_dep_instr !7, !data_indep_instr !11
  store i8 80, i8* @LaTeX_Mode, align 1, !control_dep_instr !7, !data_indep_instr !11
  call void @TeX_skip_parens(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_skip_parens(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.end133  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.end133  
Hash path invariants only
Invariants are
  br label %if.end134, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.else127  if.then130  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.else127  if.then130  
Hash path invariants only
Invariants are
  br label %if.end132, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword8(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.else127  if.end132  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.else127  if.end132  
Hash path invariants only
Invariants are
  br label %if.end133, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.end211  land.lhs.true215  land.lhs.true225  if.then229  
After path modifications process path
while.body  if.end211  land.lhs.true215  land.lhs.true225  if.then229  
Hash path invariants only
Invariants are
  br label %while.cond231, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword16(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword16(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  while.cond231  while.body239  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.end211  land.lhs.true215  land.lhs.true225  if.then229  while.end241  
After path modifications process path
while.body  if.end211  land.lhs.true215  land.lhs.true225  if.then229  while.end241  
Hash path invariants only
Invariants are
  br label %if.end244, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
  br label %while.cond231, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword16(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword16(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  while.cond231  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.end211  land.lhs.true215  land.lhs.true225  lor.lhs.false227  
After path modifications process path
while.body  if.end211  land.lhs.true215  land.lhs.true225  lor.lhs.false227  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.end211  land.lhs.true215  lor.lhs.false220  
After path modifications process path
while.body  if.end211  land.lhs.true215  lor.lhs.false220  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.end211  if.end244  
After path modifications process path
while.body  if.end211  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.end211  if.else242  
After path modifications process path
while.body  if.end211  if.else242  
Hash path invariants only
Invariants are
  br label %if.end244, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword18(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword18(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.default  if.then189  
After path modifications process path
while.body  if.else144  if.then149  sw.default  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.default  if.else191  if.then197  if.then203  
After path modifications process path
while.body  if.else144  if.then149  sw.default  if.else191  if.then197  if.then203  
Hash path invariants only
Invariants are
  br label %if.end207, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword14(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword14(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.default  if.else191  if.then197  if.end207  
After path modifications process path
while.body  if.else144  if.then149  sw.default  if.else191  if.then197  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.default  if.else191  if.then197  if.else205  
After path modifications process path
while.body  if.else144  if.then149  sw.default  if.else191  if.then197  if.else205  
Hash path invariants only
Invariants are
  br label %if.end207, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword15(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword15(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.default  if.else191  if.end208  if.end209  sw.epilog  
After path modifications process path
while.body  if.else144  if.then149  sw.default  if.else191  if.end208  if.end209  sw.epilog  
Hash path invariants only
Invariants are
  br label %if.end210, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
  br label %if.end209, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb  if.then157  
After path modifications process path
while.body  if.else144  if.then149  sw.bb  if.then157  
Hash path invariants only
Invariants are
  br label %if.end160, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword9(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword9(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb  if.end160  
After path modifications process path
while.body  if.else144  if.then149  sw.bb  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb  if.else158  
After path modifications process path
while.body  if.else144  if.then149  sw.bb  if.else158  
Hash path invariants only
Invariants are
  br label %if.end160, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword10(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword10(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb161  if.then170  
After path modifications process path
while.body  if.else144  if.then149  sw.bb161  if.then170  
Hash path invariants only
Invariants are
  br label %if.end172, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword11(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword11(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb161  if.end172  if.then181  
After path modifications process path
while.body  if.else144  if.then149  sw.bb161  if.end172  if.then181  
Hash path invariants only
Invariants are
  br label %if.end183, !control_dep_instr !7, !data_indep_instr !11
  %307 = load i16*, i16** %call176, align 8, !control_dep_instr !7, !data_dep_instr !8
  call void @skiptoword12(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %call176 = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword12(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb161  if.end172  if.end183  
After path modifications process path
while.body  if.else144  if.then149  sw.bb161  if.end172  
Hash path invariants only
Invariants are
  %call176 = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  %310 = load i16*, i16** %call176, align 8, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb161  lor.lhs.false166  
After path modifications process path
while.body  if.else144  if.then149  sw.bb161  lor.lhs.false166  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.end210  
After path modifications process path
while.body  if.else144  if.end210  
Hash path invariants only
Invariants are
  br label %if.end211, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.end245  if.then249  if.then251  
After path modifications process path is empty
Processing path: entry  while.end245  if.then249  if.then251  
After path modifications process path
entry  while.end245  if.then249  if.then251  
Processing call instruction..
Processing path: entry  while.cond  land.end15  while.end245  if.then249  if.end252  
After path modifications process path is empty
Processing path: entry  while.end245  if.then249  if.end252  
After path modifications process path
entry  while.end245  if.then249  if.end252  
Processing path: entry  while.cond  land.end15  while.end245  if.end253  
After path modifications process path is empty
Processing path: entry  while.end245  if.end253  
After path modifications process path
entry  while.end245  if.end253  
 Processing function:TeX_math_check
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.else  if.end  if.then20  
After path modifications process path
entry  if.else  if.end  if.then20  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_math_check1(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.then25  
After path modifications process path
entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.then25  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_math_check2(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.end27  
After path modifications process path
entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.end27  
Processing path: entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.else26  
After path modifications process path
entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.else26  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_math_check3(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
 Processing function:TeX_LR_check
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.else  if.end  if.then4  if.then5  
After path modifications process path
entry  if.else  if.end  if.then4  if.then5  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_LR_check1(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.else  if.end  if.then4  if.end7  if.then9  
After path modifications process path
entry  if.else  if.end  if.then4  if.end7  if.then9  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_LR_check2(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.else  if.end  if.then4  if.end7  if.end20  
After path modifications process path
entry  if.else  if.end  if.then4  if.end7  if.end20  
Processing path: entry  if.else  if.end  if.then4  if.end7  if.else11  if.then17  
After path modifications process path
entry  if.else  if.end  if.then4  if.end7  if.else11  if.then17  
Processing path: entry  if.else  if.end  if.then4  if.end7  if.else11  if.end19  
After path modifications process path
entry  if.else  if.end  if.then4  if.end7  if.else11  if.end19  
Processing path: entry  if.else  if.end  if.end21  
After path modifications process path
entry  if.else  if.end  if.end21  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_LR_check4(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
 Processing function:TeX_math_end
Short range hashing enabled.
Processing path: entry  if.then  if.then7  
After path modifications process path
entry  if.then  if.then7  
Processing path: entry  if.then  if.end  
After path modifications process path
entry  if.then  if.end  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.else  if.then12  if.end14  
After path modifications process path
entry  if.else  if.then12  if.end14  
Processing path: entry  if.else  if.then12  if.then13  
After path modifications process path
entry  if.else  if.then12  if.then13  
Processing path: entry  if.else  if.end15  if.end16  if.then26  
After path modifications process path
entry  if.else  if.end15  if.end16  if.then26  
Processing path: entry  if.else  if.end15  if.end16  lor.lhs.false  if.end27  if.then29  
After path modifications process path
entry  if.else  if.end15  if.end16  lor.lhs.false  if.end27  if.then29  
Processing path: entry  if.else  if.end15  if.end16  lor.lhs.false  if.end27  if.end30  if.then34  
After path modifications process path
entry  if.else  if.end15  if.end16  lor.lhs.false  if.end27  if.end30  if.then34  
Processing path: entry  if.else  if.end15  if.end16  lor.lhs.false  if.end27  if.end30  if.else36  
After path modifications process path
entry  if.else  if.end15  if.end16  lor.lhs.false  if.end27  if.end30  if.else36  
 Processing function:TeX_strncmp
Short range hashing enabled.
Processing path: entry  if.then  land.lhs.true  if.then13  
After path modifications process path
entry  if.then  land.lhs.true  if.then13  
Processing path: entry  if.then  if.end  
After path modifications process path
entry  if.then  if.end  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end14  
After path modifications process path
entry  if.end14  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_strncmp0(i32* %retval, i32* %cmpresult), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cmpresult = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_strncmp0(i32* %retval, i32* %cmpresult), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
 Processing function:TeX_skip_parens
Short range hashing enabled.
Processing path: entry  while.cond  land.lhs.true  land.rhs  
After path modifications process path
land.lhs.true  land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
No oh has been applied in the path
 Processing function:TeX_math_begin
Short range hashing enabled.
Processing path: entry  if.then  if.then7  
After path modifications process path
entry  if.then  if.then7  
Processing path: entry  if.then  if.end  
After path modifications process path
entry  if.then  if.end  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end8  while.cond  while.body  if.then22  
After path modifications process path is empty
Processing path: entry  if.end8  if.then22  
After path modifications process path
entry  if.end8  if.then22  
Processing path: entry  if.end8  while.cond  while.body  lor.lhs.false  if.else  if.else31  if.then35  if.then38  
After path modifications process path
if.else  
Hash path invariants only
Invariants are
  %39 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end8  if.then38  
After path modifications process path
entry  if.end8  if.then38  
Processing path: entry  if.end8  while.cond  while.body  lor.lhs.false  if.else  if.else31  if.then35  if.else39  if.end41  if.end43  if.end44  if.end45  
After path modifications process path
if.else  if.else39  if.end41  if.end43  if.end44  
Hash path invariants only
Invariants are
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  %41 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  call void @TeX_math_begin2(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !11
  br label %if.end45, !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !11
  br label %if.end43, !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !11
  br label %if.end41, !control_dep_instr !7, !data_indep_instr !12
  br label %if.end44, !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_math_begin2(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !11
Processing path: entry  if.end8  
After path modifications process path
entry  if.end8  
Processing path: entry  if.end8  while.cond  while.body  lor.lhs.false  if.else  if.else31  if.else42  
After path modifications process path
if.else  
Hash path invariants only
Invariants are
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  %45 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end8  if.else42  
After path modifications process path
entry  if.end8  if.else42  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_math_begin3(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !11
Processing path: entry  if.end8  while.cond  while.body  lor.lhs.false  if.else  land.lhs.true  if.then29  
After path modifications process path
if.else  land.lhs.true  
Hash path invariants only
Invariants are
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  %47 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end8  
After path modifications process path
entry  if.end8  
Processing path: entry  if.end8  while.end  land.lhs.true55  if.then61  while.cond63  while.body65  land.lhs.true71  if.then81  
After path modifications process path
while.body65  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end8  while.cond  while.end  land.lhs.true55  if.then61  if.then81  
After path modifications process path is empty
Processing path: entry  if.end8  while.end  land.lhs.true55  if.then61  if.then81  
After path modifications process path
entry  if.end8  while.end  land.lhs.true55  if.then61  if.then81  
Processing path: entry  if.end8  while.end  land.lhs.true55  if.then61  while.cond63  while.body65  land.lhs.true71  lor.lhs.false76  
After path modifications process path
while.body65  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end8  while.cond  while.end  land.lhs.true55  if.then61  
After path modifications process path is empty
Processing path: entry  if.end8  while.end  land.lhs.true55  if.then61  
After path modifications process path
entry  if.end8  while.end  land.lhs.true55  if.then61  
Processing path: entry  if.end8  while.end  land.lhs.true55  if.then61  while.cond63  while.body65  if.end83  
After path modifications process path
while.body65  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end8  while.cond  while.end  land.lhs.true55  if.then61  
After path modifications process path is empty
Processing path: entry  if.end8  while.end  land.lhs.true55  if.then61  
After path modifications process path
entry  if.end8  while.end  land.lhs.true55  if.then61  
Processing path: entry  if.end8  while.end  land.lhs.true55  if.then61  while.cond63  while.end84  
After path modifications process path is empty
Processing path: entry  if.end8  while.cond  while.end  land.lhs.true55  if.then61  while.end84  
After path modifications process path is empty
Processing path: entry  if.end8  while.end  land.lhs.true55  if.then61  while.end84  
After path modifications process path
entry  if.end8  while.end  land.lhs.true55  if.then61  while.end84  
Processing path: entry  if.end8  while.cond  while.end  if.else85  
After path modifications process path is empty
Processing path: entry  if.end8  while.end  if.else85  
After path modifications process path
entry  if.end8  while.end  if.else85  
Processing path: entry  if.end8  while.cond  while.end  lor.lhs.false50  
After path modifications process path is empty
Processing path: entry  if.end8  while.end  lor.lhs.false50  
After path modifications process path
entry  if.end8  while.end  lor.lhs.false50  
 Processing function:TeX_skip_check
Short range hashing enabled.
Processing path: entry  if.then  if.then59  
After path modifications process path
entry  if.then  if.then59  
Processing path: entry  if.then  if.end  
After path modifications process path
entry  if.then  if.end  
Processing path: entry  if.end123  
After path modifications process path
entry  if.end123  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  if.then83  if.then87  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  if.then83  if.then87  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  if.then83  if.end94  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  if.then83  if.end94  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  if.then83  if.else88  if.then92  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  if.then83  if.else88  if.then92  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  if.then83  if.else88  if.end93  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  if.then83  if.else88  if.end93  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  if.end122  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  if.end122  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.then99  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.then99  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.then99  
Processing call instruction..
Can't handle this operand   %skip_ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_skip_check0(i32* %skip_ch, i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_skip_check0(i32* %skip_ch, i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.then99  while.cond  land.end  while.body  
After path modifications process path is empty
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.then99  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.then99  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.then99  while.cond  land.end  while.end  
After path modifications process path is empty
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.then99  while.end  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.then99  while.end  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.end121  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.end121  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.else108  while.cond109  lor.end  while.body117  
After path modifications process path is empty
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.else108  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.else108  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.else108  while.cond109  lor.end  while.end119  
After path modifications process path is empty
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.else108  while.end119  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.else108  while.end119  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_skip_check3(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.else108  while.cond109  lor.rhs  
After path modifications process path
lor.rhs  
Hash path invariants only
Invariants are
  br label %lor.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.else108  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  lor.lhs.false9  lor.lhs.false12  lor.lhs.false15  lor.lhs.false18  lor.lhs.false21  lor.lhs.false24  lor.lhs.false27  lor.lhs.false30  lor.lhs.false33  lor.lhs.false36  lor.lhs.false39  lor.lhs.false42  lor.lhs.false45  lor.lhs.false48  lor.lhs.false51  lor.lhs.false54  if.else  lor.lhs.false63  lor.lhs.false67  lor.lhs.false71  lor.lhs.false75  lor.lhs.false79  if.else95  if.else108  
 Processing function:TeX_LR_begin
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_LR_begin2(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  if.then14  if.then16  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  if.then14  if.then16  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_LR_begin1(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  if.then14  if.end  if.end24  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  if.then14  if.end  if.end24  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  if.then14  if.else17  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  if.then14  if.else17  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  lor.lhs.false11  if.else18  if.then21  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  lor.lhs.false11  if.else18  if.then21  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  lor.lhs.false11  if.else18  if.else23  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  lor.lhs.false11  if.else18  if.else23  
 Processing function:TeX_open_paren
Short range hashing enabled.
Processing path: entry  while.cond  land.lhs.true  land.rhs  
After path modifications process path
land.lhs.true  land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
No oh has been applied in the path
 Processing function:TeX_skip_args
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  if.then5  
After path modifications process path
entry  if.end  if.then5  
Processing path: entry  if.end  if.end7  if.then8  if.end9  if.then11  if.end13  if.then15  if.end18  if.then20  
After path modifications process path
entry  if.end  if.end7  if.then8  if.end9  if.then11  if.end13  if.then15  if.end18  if.then20  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_skip_args0(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_skip_args1(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_skip_args2(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_skip_args3(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end7  if.then8  if.end9  if.then11  if.end13  if.else17  
After path modifications process path
entry  if.end  if.end7  if.then8  if.end9  if.then11  if.end13  if.else17  
Processing path: entry  if.end  if.end7  if.then8  if.end9  if.else12  
After path modifications process path
entry  if.end  if.end7  if.then8  if.end9  if.else12  
Processing path: entry  if.end  if.end7  if.end21  
After path modifications process path
entry  if.end  if.end7  if.end21  
Processing path: entry  if.end  if.end7  if.else  
After path modifications process path
entry  if.end  if.end7  if.else  
Processing path: entry  lor.lhs.false  
After path modifications process path
entry  lor.lhs.false  
 Processing function:dumpmode
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end39  if.then40  
After path modifications process path
entry  if.end39  if.then40  
Processing path: entry  if.end39  if.end42  if.then44  
After path modifications process path
entry  if.end39  if.end42  if.then44  
Processing path: entry  if.end39  if.end42  if.end46  
After path modifications process path
entry  if.end39  if.end42  if.end46  
Processing path: entry  lor.lhs.false  lor.lhs.false5  lor.lhs.false9  lor.lhs.false13  lor.lhs.false17  lor.lhs.false21  if.else  if.then33  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false5  lor.lhs.false9  lor.lhs.false13  lor.lhs.false17  lor.lhs.false21  if.else  if.then33  
Processing path: entry  lor.lhs.false  lor.lhs.false5  lor.lhs.false9  lor.lhs.false13  lor.lhs.false17  lor.lhs.false21  if.else  if.end  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false5  lor.lhs.false9  lor.lhs.false13  lor.lhs.false17  lor.lhs.false21  if.else  if.end  
Processing path: entry  lor.lhs.false  lor.lhs.false5  lor.lhs.false9  lor.lhs.false13  lor.lhs.false17  lor.lhs.false21  if.else  lor.lhs.false29  if.else36  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false5  lor.lhs.false9  lor.lhs.false13  lor.lhs.false17  lor.lhs.false21  if.else  lor.lhs.false29  if.else36  
 Processing function:tbldump
Short range hashing enabled.
Processing path: entry  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
No oh has been applied in the path
 Processing function:entdump
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  
After path modifications process path
for.body  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
  call void @entdump1(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %flagp.addr = alloca %struct.flagent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @entdump0(%struct.flagent** %flagp.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  for.cond  for.body  if.end  for.inc  
After path modifications process path
for.body  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  if.then12  
After path modifications process path is empty
Processing path: entry  for.end  if.then12  
After path modifications process path
entry  for.end  if.then12  
Processing call instruction..
Processing path: entry  for.cond  for.end  if.end14  if.then18  
After path modifications process path is empty
Processing path: entry  for.end  if.end14  if.then18  
After path modifications process path
entry  for.end  if.end14  if.then18  
Processing call instruction..
Can't handle this operand   %flagp.addr = alloca %struct.flagent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @entdump4(%struct.flagent** %flagp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond  for.end  if.end14  if.end21  cond.true  
After path modifications process path is empty
Processing path: entry  for.end  if.end14  if.end21  cond.true  
After path modifications process path
entry  for.end  if.end14  if.end21  cond.true  
Processing path: entry  for.cond  for.end  if.end14  if.end21  cond.end  
After path modifications process path is empty
Processing path: entry  for.end  if.end14  if.end21  cond.end  
After path modifications process path
entry  for.end  if.end14  if.end21  cond.end  
Processing path: entry  for.cond  for.end  if.end14  if.end21  cond.false  
After path modifications process path is empty
Processing path: entry  for.end  if.end14  if.end21  cond.false  
After path modifications process path
entry  for.end  if.end14  if.end21  cond.false  
 Processing function:setdump
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  
After path modifications process path
for.body  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
  call void @setdump0(i32* %firstnz, i32* %cnum, i32* %numnz), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %firstnz = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @setdump0(i32* %firstnz, i32* %cnum, i32* %numnz), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cnum = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @setdump0(i32* %firstnz, i32* %cnum, i32* %numnz), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %numnz = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @setdump0(i32* %firstnz, i32* %cnum, i32* %numnz), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end  
After path modifications process path
for.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  if.then3  
After path modifications process path is empty
Processing path: entry  for.end  if.then3  
After path modifications process path
entry  for.end  if.then3  
Processing path: entry  for.cond  for.end  if.end19  
After path modifications process path is empty
Processing path: entry  for.end  if.end19  
After path modifications process path
entry  for.end  if.end19  
Processing path: entry  for.cond  for.end  if.else  if.then6  
After path modifications process path is empty
Processing path: entry  for.end  if.else  if.then6  
After path modifications process path
entry  for.end  if.else  if.then6  
Processing path: entry  for.cond  for.end  if.else  if.end18  
After path modifications process path is empty
Processing path: entry  for.end  if.else  if.end18  
After path modifications process path
entry  for.end  if.else  if.end18  
Processing path: entry  for.cond  for.end  if.else  if.else8  if.then11  
After path modifications process path is empty
Processing path: entry  for.end  if.else  if.else8  if.then11  
After path modifications process path
entry  for.end  if.else  if.else8  if.then11  
Processing path: entry  for.cond  for.end  if.else  if.else8  if.end17  
After path modifications process path is empty
Processing path: entry  for.end  if.else  if.else8  if.end17  
After path modifications process path
entry  for.end  if.else  if.else8  if.end17  
Processing path: entry  for.cond  for.end  if.else  if.else8  if.else14  
After path modifications process path is empty
Processing path: entry  for.end  if.else  if.else8  if.else14  
After path modifications process path
entry  for.end  if.else  if.else8  if.else14  
 Processing function:subsetdump
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  if.then10  
After path modifications process path
for.body  if.then  if.then10  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
  br label %for.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %rangestart = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cnum = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.cond3  for.body6  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.then  
After path modifications process path
for.body  if.then  
Hash path invariants only
Invariants are
  call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %rangestart = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %cnum = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond3  for.body6  if.end  for.inc  
After path modifications process path
if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !13
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.then  for.end  if.then13  
After path modifications process path
for.body  if.then  for.end  if.then13  
Hash path invariants only
Invariants are
  br label %if.end25, !control_dep_instr !7, !data_indep_instr !11
  call void @subsetdump2(i32* %rangestart), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
  call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %rangestart = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %cnum = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %rangestart = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump2(i32* %rangestart), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.then  for.end  if.end25  
After path modifications process path
for.body  if.then  for.end  if.end25  
Hash path invariants only
Invariants are
  br label %if.end26, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
  call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %rangestart = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %cnum = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.then  for.end  if.else  if.then17  
After path modifications process path
for.body  if.then  for.end  if.else  if.then17  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
  call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %rangestart = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %cnum = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  while.cond  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.then  for.end  if.else  if.then17  while.end  
After path modifications process path
for.body  if.then  for.end  if.else  if.then17  while.end  
Hash path invariants only
Invariants are
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
  call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %rangestart = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %cnum = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.then  for.end  if.else  if.end24  
After path modifications process path
for.body  if.then  for.end  if.else  if.end24  
Hash path invariants only
Invariants are
  br label %if.end25, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
  call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %rangestart = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %cnum = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.then  for.end  if.else  if.else22  
After path modifications process path
for.body  if.then  for.end  if.else  if.else22  
Hash path invariants only
Invariants are
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11
  call void @subsetdump4(i32* %cnum, i32* %rangestart), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
  call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %rangestart = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %cnum = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump0(i32* %rangestart, i32* %cnum), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %cnum = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump4(i32* %cnum, i32* %rangestart), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %rangestart = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @subsetdump4(i32* %cnum, i32* %rangestart), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end26  for.inc27  
After path modifications process path
for.body  if.end26  
Hash path invariants only
Invariants are
  br label %for.inc27, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end30  
After path modifications process path is empty
Processing path: entry  for.end30  
After path modifications process path
entry  for.end30  
 Processing function:good
Short range hashing enabled.
Processing path: entry  for.cond  for.body  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.end  if.then  
After path modifications process path is empty
Processing path: entry  for.end  if.then  
After path modifications process path
entry  for.end  if.then  
Processing call instruction..
Can't handle this operand   %q = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @good1(i8** %q), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %w.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @good2(i8** %w.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.cond  for.end  if.end30  land.lhs.true32  if.then34  
After path modifications process path is empty
Processing path: entry  for.end  if.end30  land.lhs.true32  if.then34  
After path modifications process path
entry  for.end  if.end30  land.lhs.true32  if.then34  
Processing path: entry  for.cond  for.end  if.end30  if.end35  if.then38  
After path modifications process path is empty
Processing path: entry  for.end  if.end30  if.end35  if.then38  
After path modifications process path
entry  for.end  if.end30  if.end35  if.then38  
Processing path: entry  for.cond  for.end  if.end30  if.end35  if.end40  
After path modifications process path is empty
Processing path: entry  for.end  if.end30  if.end35  if.end40  
After path modifications process path
entry  for.end  if.end30  if.end35  if.end40  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @good4(i32* %retval), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.cond  for.end  if.end30  return  
After path modifications process path is empty
Processing path: entry  for.end  if.end30  return  
After path modifications process path
entry  for.end  if.end30  return  
Processing path: entry  for.cond  for.end  if.else  if.then8  if.then12  
After path modifications process path is empty
Processing path: entry  for.end  if.else  if.then8  if.then12  
After path modifications process path
entry  for.end  if.else  if.then8  if.then12  
Processing call instruction..
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @good3(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.cond  for.end  if.else  if.then8  if.end  land.lhs.true  land.lhs.true17  land.lhs.true21  if.then27  
After path modifications process path is empty
Processing path: entry  for.end  if.else  if.then8  if.end  land.lhs.true  land.lhs.true17  land.lhs.true21  if.then27  
After path modifications process path
entry  for.end  if.else  if.then8  if.end  land.lhs.true  land.lhs.true17  land.lhs.true21  if.then27  
Processing path: entry  for.cond  for.end  if.else  if.then8  if.end  if.end28  
After path modifications process path is empty
Processing path: entry  for.end  if.else  if.then8  if.end  if.end28  
After path modifications process path
entry  for.end  if.else  if.then8  if.end  if.end28  
Processing path: entry  for.cond  for.end  if.else  if.then8  lor.lhs.false  
After path modifications process path is empty
Processing path: entry  for.end  if.else  if.then8  lor.lhs.false  
After path modifications process path
entry  for.end  if.else  if.then8  lor.lhs.false  
Processing path: entry  for.cond  for.end  if.else  if.end29  
After path modifications process path is empty
Processing path: entry  for.end  if.else  if.end29  
After path modifications process path
entry  for.end  if.else  if.end29  
 Processing function:cap_ok
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.else  if.then2  if.then3  
After path modifications process path
entry  if.else  if.then2  if.then3  
Processing path: entry  if.else  if.then2  if.end  cond.true  
After path modifications process path
entry  if.else  if.then2  if.end  cond.true  
Processing path: entry  if.else  if.then2  if.end  cond.end  
After path modifications process path
entry  if.else  if.then2  if.end  cond.end  
Processing path: entry  if.else  if.then2  if.end  cond.false  
After path modifications process path
entry  if.else  if.then2  if.end  cond.false  
Processing path: entry  if.else  if.then2  if.else7  
After path modifications process path
entry  if.else  if.then2  if.else7  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.then16  land.lhs.true  land.lhs.true21  if.then24  
After path modifications process path
if.then16  land.lhs.true  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.else  if.end12  if.end13  if.then24  
After path modifications process path
entry  if.else  if.end12  if.end13  if.then24  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.then16  if.end25  
After path modifications process path
if.then16  if.end25  
Hash path invariants only
Invariants are
  br label %if.end118, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.end118  if.then124  for.end126  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  if.then124  for.end126  
After path modifications process path
entry  if.else  if.end12  if.end13  if.then124  for.end126  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.end118  if.end125  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.then29  if.then32  
After path modifications process path
if.else26  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.else  if.end12  if.end13  if.then32  
After path modifications process path
entry  if.else  if.end12  if.end13  if.then32  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.then29  if.end33  
After path modifications process path
if.else26  if.end33  
Hash path invariants only
Invariants are
  br label %if.end117, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.end117  
After path modifications process path
if.else26  if.end117  
Hash path invariants only
Invariants are
  br label %if.end118, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond43  for.body  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.then42  if.then49  
After path modifications process path
if.else26  if.else34  if.then42  if.then49  
Hash path invariants only
Invariants are
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
  br label %for.cond43, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond43  for.body  if.end50  for.inc  
After path modifications process path
if.end50  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.then42  
After path modifications process path
if.else26  if.else34  if.then42  
Hash path invariants only
Invariants are
  call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  br label %for.cond43, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond43  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.then42  for.end  
After path modifications process path
if.else26  if.else34  if.then42  for.end  
Hash path invariants only
Invariants are
  call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end64, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond43, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  doublecontinue  
After path modifications process path
if.else26  if.else34  doublecontinue  
Hash path invariants only
Invariants are
  br label %if.end117, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  if.then82  
After path modifications process path
if.else26  if.else34  if.end64  if.then82  
Hash path invariants only
Invariants are
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  while.cond  while.body  if.end83  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  
After path modifications process path
if.else26  if.else34  if.end64  
Hash path invariants only
Invariants are
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.then88  if.then95  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.then88  if.then95  
Hash path invariants only
Invariants are
  br label %for.cond89, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  for.cond89  for.body91  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.then88  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.then88  
Hash path invariants only
Invariants are
  br label %for.cond89, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  for.cond89  for.body91  if.end96  for.inc97  
After path modifications process path
if.end96  
Hash path invariants only
Invariants are
  br label %for.inc97, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.then88  for.end99  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.then88  for.end99  
Hash path invariants only
Invariants are
  br label %if.end112, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond89, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  for.cond89  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  while.cond  if.then115  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.end112  if.then115  
After path modifications process path
if.else26  if.else34  if.end64  while.end  
Hash path invariants only
Invariants are
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  if.then115  
After path modifications process path
entry  if.else  if.end12  if.end13  if.then115  
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.end112  if.end116  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.end116  
Hash path invariants only
Invariants are
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond101  for.body103  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.else100  if.then107  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.else100  if.then107  
Hash path invariants only
Invariants are
  br label %for.cond101, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond101  for.body103  if.end108  for.inc109  
After path modifications process path
if.end108  
Hash path invariants only
Invariants are
  br label %for.inc109, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.else100  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.else100  
Hash path invariants only
Invariants are
  br label %for.cond101, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond101  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.else100  for.end111  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.else100  for.end111  
Hash path invariants only
Invariants are
  br label %if.end112, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond101, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond52  for.body55  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.else51  if.then59  
After path modifications process path
if.else26  if.else34  if.else51  if.then59  
Hash path invariants only
Invariants are
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
  call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond52  for.body55  if.end60  for.inc61  
After path modifications process path
if.end60  
Hash path invariants only
Invariants are
  br label %for.inc61, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.else51  
After path modifications process path
if.else26  if.else34  if.else51  
Hash path invariants only
Invariants are
  call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond52  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.else51  for.end63  
After path modifications process path
if.else26  if.else34  if.else51  for.end63  
Hash path invariants only
Invariants are
  call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %if.end64, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
 Processing function:entryhasaffixes
Short range hashing enabled.
Processing path: entry  land.lhs.true  if.then  
After path modifications process path
entry  land.lhs.true  if.then  
Processing path: entry  if.end  land.lhs.true4  if.then14  
After path modifications process path
entry  if.end  land.lhs.true4  if.then14  
Processing path: entry  if.end  if.end15  
After path modifications process path
entry  if.end  if.end15  
Processing path: entry  return  
After path modifications process path
entry  return  
 Processing function:flagpr
Short range hashing enabled.
Processing path: entry  if.then  if.then2  for.cond  for.body  if.then10  
After path modifications process path is empty
Processing path: entry  if.then  if.then2  if.then10  
After path modifications process path
entry  if.then  if.then2  if.then10  
Processing path: entry  if.then  if.then2  for.cond  for.body  if.end  for.inc  
After path modifications process path
if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.then  if.then2  
After path modifications process path
entry  if.then  if.then2  
Processing path: entry  if.then  if.then2  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.then  if.then2  for.end  
After path modifications process path
entry  if.then  if.then2  for.end  
Processing path: entry  if.then  if.end25  
After path modifications process path
entry  if.then  if.end25  
Processing path: entry  if.then  if.else  for.cond11  for.body16  if.then20  
After path modifications process path is empty
Processing path: entry  if.then  if.else  if.then20  
After path modifications process path
entry  if.then  if.else  if.then20  
Processing path: entry  if.then  if.else  for.cond11  for.body16  if.end21  for.inc22  
After path modifications process path
if.end21  
Hash path invariants only
Invariants are
  br label %for.inc22, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.then  if.else  
After path modifications process path
entry  if.then  if.else  
Processing path: entry  if.then  if.else  for.cond11  for.end24  
After path modifications process path is empty
Processing path: entry  if.then  if.else  for.end24  
After path modifications process path
entry  if.then  if.else  for.end24  
Processing path: entry  if.end147  
After path modifications process path
entry  if.end147  
Processing path: entry  if.end26  if.then29  if.then38  for.cond39  for.body43  if.then47  
After path modifications process path is empty
Processing path: entry  if.end26  if.then29  if.then38  if.then47  
After path modifications process path
entry  if.end26  if.then29  if.then38  if.then47  
Processing path: entry  if.end26  if.then29  if.then38  for.cond39  for.body43  if.end48  for.inc49  
After path modifications process path
if.end48  
Hash path invariants only
Invariants are
  br label %for.inc49, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.then29  if.then38  
After path modifications process path
entry  if.end26  if.then29  if.then38  
Processing path: entry  if.end26  if.then29  if.then38  for.cond39  for.end51  
After path modifications process path is empty
Processing path: entry  if.end26  if.then29  if.then38  for.end51  
After path modifications process path
entry  if.end26  if.then29  if.then38  for.end51  
Processing path: entry  if.end26  if.then29  if.end71  
After path modifications process path
entry  if.end26  if.then29  if.end71  
Processing path: entry  if.end26  if.then29  if.else52  for.cond58  for.body62  if.then66  
After path modifications process path is empty
Processing path: entry  if.end26  if.then29  if.else52  if.then66  
After path modifications process path
entry  if.end26  if.then29  if.else52  if.then66  
Processing path: entry  if.end26  if.then29  if.else52  for.cond58  for.body62  if.end67  for.inc68  
After path modifications process path
if.end67  
Hash path invariants only
Invariants are
  br label %for.inc68, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.then29  if.else52  
After path modifications process path
entry  if.end26  if.then29  if.else52  
Processing path: entry  if.end26  if.then29  if.else52  for.cond58  for.end70  
After path modifications process path is empty
Processing path: entry  if.end26  if.then29  if.else52  for.end70  
After path modifications process path
entry  if.end26  if.then29  if.else52  for.end70  
Processing path: entry  if.end26  if.end72  if.then79  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.then79  
After path modifications process path
entry  if.end26  if.end72  if.then79  
Processing path: entry  if.end26  if.end72  if.then79  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.then79  while.end  
After path modifications process path
entry  if.end26  if.end72  if.then79  while.end  
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.body105  for.inc110  
After path modifications process path
for.body105  
Hash path invariants only
Invariants are
  br label %for.inc110, !control_dep_instr !7, !data_indep_instr !11
  call void @flagpr10(i8** %origp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %origp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr10(i8** %origp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  
After path modifications process path
entry  if.end26  if.end72  if.end99  
Processing call instruction..
Can't handle this operand   %prestrip.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr9(i32* %prestrip.addr, i32* %sufadd.addr, i32* %preadd.addr, i32* %orig_len), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sufadd.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr9(i32* %prestrip.addr, i32* %sufadd.addr, i32* %preadd.addr, i32* %orig_len), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %preadd.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr9(i32* %prestrip.addr, i32* %sufadd.addr, i32* %preadd.addr, i32* %orig_len), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %orig_len = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr9(i32* %prestrip.addr, i32* %sufadd.addr, i32* %preadd.addr, i32* %orig_len), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.then115  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.then115  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.then115  
Processing call instruction..
Can't handle this operand   %origp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr12(i8** %origp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.end117  if.then121  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.then121  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.then121  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr13(i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.end117  if.end135  if.then140  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.end135  if.then140  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.end135  if.then140  
Processing call instruction..
Can't handle this operand   %preflag.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr15(i32* %preflag.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.end117  if.end135  if.end142  if.then145  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.end135  if.end142  if.then145  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.end135  if.end142  if.then145  
Processing call instruction..
Can't handle this operand   %sufflag.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr16(i32* %sufflag.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  while.cond125  while.body127  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.end117  if.else124  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  while.cond125  while.end134  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.end117  if.else124  while.end134  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  while.end134  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  while.end134  
Processing path: entry  if.end26  if.end72  if.else86  while.cond87  while.body91  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.else86  
After path modifications process path
entry  if.end26  if.end72  if.else86  
Processing path: entry  if.end26  if.end72  if.else86  while.cond87  while.end98  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.else86  while.end98  
After path modifications process path
entry  if.end26  if.end72  if.else86  while.end98  
 Processing function:linit
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then2  
After path modifications process path
entry  if.end  if.then2  
Processing path: entry  if.end  if.end4  if.then8  if.then11  
After path modifications process path
entry  if.end  if.end4  if.then8  if.then11  
Processing path: entry  if.end  if.end4  if.then8  if.end20  
After path modifications process path
entry  if.end  if.end4  if.then8  if.end20  
Processing path: entry  if.end  if.end4  if.then8  if.else  if.then15  
After path modifications process path
entry  if.end  if.end4  if.then8  if.else  if.then15  
Processing path: entry  if.end  if.end4  if.then8  if.else  if.end19  
After path modifications process path
entry  if.end  if.end4  if.then8  if.else  if.end19  
Processing path: entry  if.end  if.end4  if.then8  if.else  if.else17  
After path modifications process path
entry  if.end  if.end4  if.then8  if.else  if.else17  
Processing path: entry  if.end  if.end4  if.else21  if.then25  
After path modifications process path
entry  if.end  if.end4  if.else21  if.then25  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.then32  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.then32  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  if.then46  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  if.then46  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.then56  if.then60  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.then56  if.then60  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.then56  if.end62  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.then56  if.end62  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  if.then85  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  if.then85  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.then89  if.then93  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.then89  if.then93  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.then89  if.end95  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.then89  if.end95  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.then129  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.then129  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.body164  if.then166  
After path modifications process path
for.body164  if.then166  
Hash path invariants only
Invariants are
  br label %if.end172, !control_dep_instr !7, !data_indep_instr !10
  call void @linit22(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit22(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.body164  if.end172  if.then174  
After path modifications process path
for.body164  if.end172  if.then174  
Hash path invariants only
Invariants are
  br label %if.end180, !control_dep_instr !7, !data_indep_instr !10
  call void @linit24(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit24(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.body164  if.end172  if.end180  for.inc181  
After path modifications process path
for.body164  if.end172  if.end180  
Hash path invariants only
Invariants are
  br label %for.inc181, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.body164  if.end172  if.else178  
After path modifications process path
for.body164  if.end172  if.else178  
Hash path invariants only
Invariants are
  br label %if.end180, !control_dep_instr !7, !data_indep_instr !10
  call void @linit25(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit25(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.body164  if.else170  
After path modifications process path
for.body164  if.else170  
Hash path invariants only
Invariants are
  br label %if.end172, !control_dep_instr !7, !data_indep_instr !10
  call void @linit23(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit23(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.then192  
After path modifications process path
for.body187  if.then192  
Hash path invariants only
Invariants are
  store i32 1, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  store %struct.flagptr* getelementptr inbounds ([228 x %struct.flagptr], [228 x %struct.flagptr]* @sflagindex, i64 0, i64 0), %struct.flagptr** %ind, align 8, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end220, !control_dep_instr !7, !data_indep_instr !10
  store i8* null, i8** %cp, align 8, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Non numeric pointers (int and float) are skipped:  %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Non numeric pointers (int and float) are skipped:  %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 %struct.flagptr*
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit27(%struct.flagent** %entry1, i32* %i), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit27(%struct.flagent** %entry1, i32* %i), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.end220  if.then224  
After path modifications process path
for.body187  if.end220  if.then224  
Hash path invariants only
Invariants are
  br label %if.end226, !control_dep_instr !7, !data_indep_instr !10
  call void @linit31(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit31(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit31(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.end220  if.end226  if.end260  for.inc261  
After path modifications process path
for.body187  if.end220  if.end226  if.end260  
Hash path invariants only
Invariants are
  br label %for.inc261, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.end220  if.end226  land.lhs.true  land.lhs.true232  if.then240  if.then256  
After path modifications process path
for.body187  if.end220  if.end226  land.lhs.true  land.lhs.true232  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  if.then256  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  if.then256  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  if.then256  
Processing call instruction..
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.end220  if.end226  land.lhs.true  land.lhs.true232  if.then240  if.end258  
After path modifications process path
for.body187  if.end220  if.end226  land.lhs.true  land.lhs.true232  if.end258  
Hash path invariants only
Invariants are
  br label %if.end260, !control_dep_instr !7, !data_indep_instr !10
  call void @linit33(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit33(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.else193  
After path modifications process path
for.body187  if.else193  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !10
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  while.cond  land.end  while.body  if.then209  
After path modifications process path
while.body  if.then209  
Hash path invariants only
Invariants are
  br label %if.end219, !control_dep_instr !7, !data_indep_instr !10
  store i32 1, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  call void @linit29(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit29(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.else193  
After path modifications process path
for.body187  if.else193  
Hash path invariants only
Invariants are
  call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  while.cond  land.end  while.body  if.end219  
After path modifications process path
while.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.else193  
After path modifications process path
for.body187  if.else193  
Hash path invariants only
Invariants are
  call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  while.cond  land.end  while.body  if.else213  
After path modifications process path
while.body  if.else213  
Hash path invariants only
Invariants are
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end219, !control_dep_instr !7, !data_indep_instr !10
  call void @linit30(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit30(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit30(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.else193  
After path modifications process path
for.body187  if.else193  
Hash path invariants only
Invariants are
  call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  while.cond  land.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.else193  while.end  
After path modifications process path
for.body187  if.else193  while.end  
Hash path invariants only
Invariants are
  call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end220, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.then273  
After path modifications process path
for.body268  if.then273  
Hash path invariants only
Invariants are
  store i32 1, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  store %struct.flagptr* getelementptr inbounds ([228 x %struct.flagptr], [228 x %struct.flagptr]* @pflagindex, i64 0, i64 0), %struct.flagptr** %ind, align 8, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end305, !control_dep_instr !7, !data_indep_instr !10
  store i8* null, i8** %cp, align 8, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Non numeric pointers (int and float) are skipped:  %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Non numeric pointers (int and float) are skipped:  %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 %struct.flagptr*
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit35(%struct.flagent** %entry1, i32* %i), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit35(%struct.flagent** %entry1, i32* %i), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.end305  if.then309  
After path modifications process path
for.body268  if.end305  if.then309  
Hash path invariants only
Invariants are
  br label %if.end312, !control_dep_instr !7, !data_indep_instr !10
  call void @linit39(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit39(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit39(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.end305  if.end312  if.end352  for.inc353  
After path modifications process path
for.body268  if.end305  if.end312  if.end352  
Hash path invariants only
Invariants are
  br label %for.inc353, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.end305  if.end312  land.lhs.true316  land.lhs.true320  if.then328  if.then348  
After path modifications process path
for.body268  if.end305  if.end312  land.lhs.true316  land.lhs.true320  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  if.then348  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  if.then348  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  if.then348  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  if.then348  
Processing call instruction..
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.end305  if.end312  land.lhs.true316  land.lhs.true320  if.then328  if.end350  
After path modifications process path
for.body268  if.end305  if.end312  land.lhs.true316  land.lhs.true320  if.end350  
Hash path invariants only
Invariants are
  br label %if.end352, !control_dep_instr !7, !data_indep_instr !10
  call void @linit41(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit41(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  while.cond279  land.rhs283  
After path modifications process path
land.rhs283  
Hash path invariants only
Invariants are
  br label %land.end288, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.else274  
After path modifications process path
for.body268  if.else274  
Hash path invariants only
Invariants are
  br label %while.cond279, !control_dep_instr !7, !data_indep_instr !10
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  while.cond279  land.end288  while.body289  if.then293  
After path modifications process path
while.body289  if.then293  
Hash path invariants only
Invariants are
  br label %if.end303, !control_dep_instr !7, !data_indep_instr !10
  store i32 1, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  call void @linit37(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit37(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.else274  
After path modifications process path
for.body268  if.else274  
Hash path invariants only
Invariants are
  call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond279, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  while.cond279  land.end288  while.body289  if.end303  
After path modifications process path
while.body289  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.else274  
After path modifications process path
for.body268  if.else274  
Hash path invariants only
Invariants are
  call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond279, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  while.cond279  land.end288  while.body289  if.else297  
After path modifications process path
while.body289  if.else297  
Hash path invariants only
Invariants are
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end303, !control_dep_instr !7, !data_indep_instr !10
  call void @linit38(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit38(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit38(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.else274  
After path modifications process path
for.body268  if.else274  
Hash path invariants only
Invariants are
  call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond279, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  while.cond279  land.end288  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.else274  while.end304  
After path modifications process path
for.body268  if.else274  while.end304  
Hash path invariants only
Invariants are
  call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end305, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  br label %while.cond279, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.then359  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.then359  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.then359  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.then359  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.then359  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.end420  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.end420  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.end420  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.end420  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.end420  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.else360  if.then366  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.else360  if.then366  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.else360  if.then366  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.then366  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.then366  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  while.cond401  while.body407  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  for.cond369  for.body372  
After path modifications process path
for.body372  
Hash path invariants only
Invariants are
  br label %while.cond401, !control_dep_instr !7, !data_indep_instr !10
  call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %nextchar = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  while.cond401  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  for.cond369  for.body372  while.end415  for.inc417  
After path modifications process path
for.body372  while.end415  
Hash path invariants only
Invariants are
  br label %for.inc417, !control_dep_instr !7, !data_indep_instr !10
  call void @linit47(i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  br label %while.cond401, !control_dep_instr !7, !data_indep_instr !10
  call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %nextchar = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %nextchar = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit47(i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  for.cond369  for.end419  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.else360  if.end368  for.end419  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  for.end419  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  for.end419  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.else360  if.end368  for.end419  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.else360  if.end368  for.end419  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.body  if.then140  
After path modifications process path
for.body  if.then140  
Hash path invariants only
Invariants are
  br label %if.end146, !control_dep_instr !7, !data_indep_instr !10
  call void @linit16(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit16(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.body  if.end146  if.then150  
After path modifications process path
for.body  if.end146  if.then150  
Hash path invariants only
Invariants are
  br label %if.end157, !control_dep_instr !7, !data_indep_instr !10
  call void @linit18(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit18(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.body  if.end146  if.end157  for.inc  
After path modifications process path
for.body  if.end146  if.end157  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.body  if.end146  if.else152  
After path modifications process path
for.body  if.end146  if.else152  
Hash path invariants only
Invariants are
  br label %if.end157, !control_dep_instr !7, !data_indep_instr !10
  call void @linit19(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit19(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.body  if.else142  
After path modifications process path
for.body  if.else142  
Hash path invariants only
Invariants are
  br label %if.end146, !control_dep_instr !7, !data_indep_instr !10
  call void @linit17(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit17(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.end  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.end  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.else102  if.then115  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.else102  if.then115  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.else102  lor.lhs.false106  if.end117  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.else102  lor.lhs.false106  if.end117  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.else68  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.else68  
 Processing function:lookup
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  for.cond  for.body  land.lhs.true  land.lhs.true10  if.then16  
After path modifications process path
for.body  land.lhs.true  
Hash path invariants only
Invariants are
  %arrayidx6 = getelementptr inbounds [120 x i8], [120 x i8]* %schar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.then16  
After path modifications process path
entry  if.end  if.then16  
Processing call instruction..
Can't handle this operand   %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookup0(%struct.dent** %retval, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookup0(%struct.dent** %retval, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.end  for.cond  for.body  if.end17  
After path modifications process path
for.body  if.end17  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  while.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond  for.body  if.end17  while.end  for.inc  
After path modifications process path
for.body  if.end17  while.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  return  
After path modifications process path is empty
Processing path: entry  if.end  return  
After path modifications process path
entry  if.end  return  
Processing path: entry  if.end  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  if.end  for.end  if.then22  
After path modifications process path
entry  if.end  for.end  if.then22  
Processing call instruction..
Can't handle this operand   %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookup3(%struct.dent** %retval, %struct.dent** %dp, i8** %s.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookup3(%struct.dent** %retval, %struct.dent** %dp, i8** %s.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %s.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookup3(%struct.dent** %retval, %struct.dent** %dp, i8** %s.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  for.cond  for.end  if.else  
After path modifications process path is empty
Processing path: entry  if.end  for.end  if.else  
After path modifications process path
entry  if.end  for.end  if.else  
Non numeric pointers (int and float) are skipped:  %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 %struct.dent*
 Processing function:hash
Short range hashing enabled.
Processing path: entry  for.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  land.end  for.body  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.end  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  for.cond  land.end  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing path: entry  for.end  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  for.cond  land.end  for.end  while.end  
After path modifications process path is empty
Processing path: entry  for.end  while.end  
After path modifications process path
entry  for.end  while.end  
 Processing function:makedent
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  if.then15  
After path modifications process path
entry  if.end  if.then15  
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makedent1(i8** %p), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end16  if.then22  
After path modifications process path
entry  if.end  if.end16  if.then22  
Processing call instruction..
Can't handle this operand   %lbuf.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makedent2(i8** %lbuf.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end16  return  
After path modifications process path
entry  if.end  if.end16  return  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.body  if.end48  for.inc  
After path modifications process path
for.body  if.end48  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.body  if.then32  lor.lhs.false36  lor.lhs.false40  if.end47  
After path modifications process path
for.body  if.end47  
Hash path invariants only
Invariants are
  br label %if.end48, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.body  if.then32  if.then45  
After path modifications process path
for.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  if.then45  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  if.then45  
Processing call instruction..
Can't handle this operand   %lbuf.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makedent3(i8** %lbuf.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.then58  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.then58  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.then58  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.then65  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.then65  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.then65  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.end67  if.then75  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.then75  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.then75  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.end67  if.end77  if.then80  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.then80  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.then80  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  while.cond  land.end  while.body  land.lhs.true  if.then95  
After path modifications process path
while.body  land.lhs.true  if.then95  
Hash path invariants only
Invariants are
  br label %if.end101, !control_dep_instr !7, !data_indep_instr !10
  call void @makedent8(%struct.dent** %d.addr, i32* %bit), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %d.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makedent8(%struct.dent** %d.addr, i32* %bit), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %bit = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makedent8(%struct.dent** %d.addr, i32* %bit), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  while.cond  land.end  while.body  if.end101  if.then107  
After path modifications process path
while.body  if.end101  if.then107  
Hash path invariants only
Invariants are
  br label %if.end109, !control_dep_instr !7, !data_indep_instr !10
  call void @makedent10(i8** %p), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makedent10(i8** %p), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  while.cond  land.end  while.body  if.end101  if.end109  
After path modifications process path
while.body  if.end101  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  while.cond  land.end  while.body  if.else  
After path modifications process path
while.body  if.else  
Hash path invariants only
Invariants are
  br label %if.end101, !control_dep_instr !7, !data_indep_instr !10
  call void @makedent9(i8** %p), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makedent9(i8** %p), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  while.cond  land.end  while.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.end67  if.end77  if.end81  while.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  while.end  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  while.end  
 Processing function:strtoichar
Short range hashing enabled.
Processing path: entry  for.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %outlen.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @strtoichar0(i32* %outlen.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  for.cond  land.end  for.body  land.rhs7  cond.true  
After path modifications process path
for.body  land.rhs7  cond.true  
Hash path invariants only
Invariants are
  br label %cond.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i32 1, i32* %len, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  land.end  for.body  land.rhs7  cond.end  
After path modifications process path
for.body  land.rhs7  cond.end  
Hash path invariants only
Invariants are
  br label %land.end11, !control_dep_instr !7, !data_indep_instr !11
  %tobool10 = icmp ne i32 %cond, 0, !control_dep_instr !7, !data_dep_instr !8
  %cond = phi i32 [ 1, %cond.true ], [ 0, %cond.false ], !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i32 1, i32* %len, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  land.end  for.body  land.rhs7  cond.false  
After path modifications process path
for.body  land.rhs7  cond.false  
Hash path invariants only
Invariants are
  store i32 1, i32* %len, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %cond.end, !control_dep_instr !7, !data_indep_instr !11
  store i32 1, i32* %len, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  land.end  for.body  land.end11  if.then  
After path modifications process path
for.body  land.end11  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
  call void @strtoichar1(i8** %out.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i32 1, i32* %len, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %out.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @strtoichar1(i8** %out.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  land.end  for.body  land.end11  if.end  for.inc  
After path modifications process path
for.body  land.end11  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i32 1, i32* %len, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  land.end  for.body  land.end11  if.else  
After path modifications process path
for.body  land.end11  if.else  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
  call void @strtoichar2(i8** %out.addr, i8** %in.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i32 1, i32* %len, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %out.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @strtoichar2(i8** %out.addr, i8** %in.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @strtoichar2(i8** %out.addr, i8** %in.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  land.end  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
No oh has been applied in the path
 Processing function:ichartostr
Short range hashing enabled.
Processing path: entry  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.then  
After path modifications process path
while.body  if.then  
Hash path invariants only
Invariants are
  br label %if.end29, !control_dep_instr !7, !data_indep_instr !11
  call void @ichartostr0(i8** %out.addr, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %out.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr0(i8** %out.addr, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr0(i8** %out.addr, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.end29  
After path modifications process path
while.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond21  while.body27  
After path modifications process path is empty
Processing path: entry  while.cond  land.end  while.body  if.else  if.end18  
After path modifications process path
while.body  if.else  if.end18  
Hash path invariants only
Invariants are
  br label %while.cond21, !control_dep_instr !7, !data_indep_instr !11
  call void @ichartostr3(i8** %scharp, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %scharp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr3(i8** %scharp, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr3(i8** %scharp, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond21  
After path modifications process path is empty
Processing path: entry  while.cond  land.end  while.body  if.else  if.end18  while.end  
After path modifications process path
while.body  if.else  if.end18  while.end  
Hash path invariants only
Invariants are
  br label %if.end29, !control_dep_instr !7, !data_indep_instr !11
  call void @ichartostr4(i8** %out.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %while.cond21, !control_dep_instr !7, !data_indep_instr !11
  call void @ichartostr3(i8** %scharp, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %scharp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr3(i8** %scharp, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr3(i8** %scharp, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %out.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr4(i8** %out.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.else  if.then7  if.then17  
After path modifications process path
while.body  if.else  if.then7  if.then17  
Hash path invariants only
Invariants are
  br label %for.end, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @ichartostr2(i32* %ch, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  call void @ichartostr1(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr1(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr2(i32* %ch, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr2(i32* %ch, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.cond  for.body  land.lhs.true  
After path modifications process path
for.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.else  if.then7  
After path modifications process path
while.body  if.else  if.then7  
Hash path invariants only
Invariants are
  call void @ichartostr1(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr1(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.cond  for.body  if.end  
After path modifications process path
for.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.else  if.then7  for.end  
After path modifications process path
while.body  if.else  if.then7  for.end  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end18, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  call void @ichartostr1(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr1(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.cond  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.end30  
After path modifications process path is empty
Processing path: entry  while.end30  
After path modifications process path
entry  while.end30  
No oh has been applied in the path
 Processing function:whatcap
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  
After path modifications process path is empty
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @whatcap0(i8** %p, i8** %word.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @whatcap0(i8** %p, i8** %word.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  for.inc  
After path modifications process path
if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.end  if.then3  
After path modifications process path is empty
Processing path: entry  for.end  if.then3  
After path modifications process path
entry  for.end  if.then3  
Processing path: entry  for.cond  for.end  return  
After path modifications process path is empty
Processing path: entry  for.end  return  
After path modifications process path
entry  for.end  return  
Processing path: entry  for.cond  for.end  if.else  if.then10  
After path modifications process path is empty
Processing path: entry  for.end  if.else  for.cond4  for.body6  if.then10  
After path modifications process path is empty
Processing path: entry  for.end  if.else  if.then10  
After path modifications process path
entry  for.end  if.else  if.then10  
Processing path: entry  for.cond  for.end  if.else  
After path modifications process path is empty
Processing path: entry  for.end  if.else  for.cond4  for.body6  if.end11  for.inc12  
After path modifications process path
if.end11  
Hash path invariants only
Invariants are
  br label %for.inc12, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
Processing path: entry  for.end  if.else  
After path modifications process path
entry  for.end  if.else  
Processing path: entry  for.end  if.else  for.end14  if.then18  if.then23  for.cond24  for.body28  if.then32  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  if.else  for.end14  if.then18  if.then23  if.then32  
After path modifications process path is empty
Processing path: entry  for.end  if.else  for.cond4  for.end14  if.then18  if.then23  if.then32  
After path modifications process path is empty
Processing path: entry  for.end  if.else  for.end14  if.then18  if.then23  if.then32  
After path modifications process path
entry  for.end  if.else  for.end14  if.then18  if.then23  if.then32  
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @whatcap3(i8** %p, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @whatcap3(i8** %p, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.end  if.else  for.end14  if.then18  if.then23  for.cond24  for.body28  if.end33  for.inc34  
After path modifications process path
if.end33  
Hash path invariants only
Invariants are
  br label %for.inc34, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
Processing path: entry  for.cond  for.end  if.else  for.end14  if.then18  if.then23  
After path modifications process path is empty
Processing path: entry  for.end  if.else  for.cond4  for.end14  if.then18  if.then23  
After path modifications process path is empty
Processing path: entry  for.end  if.else  for.end14  if.then18  if.then23  
After path modifications process path
entry  for.end  if.else  for.end14  if.then18  if.then23  
Processing path: entry  for.end  if.else  for.end14  if.then18  if.then23  for.cond24  for.end36  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  if.else  for.end14  if.then18  if.then23  for.end36  
After path modifications process path is empty
Processing path: entry  for.end  if.else  for.cond4  for.end14  if.then18  if.then23  for.end36  
After path modifications process path is empty
Processing path: entry  for.end  if.else  for.end14  if.then18  if.then23  for.end36  
After path modifications process path
entry  for.end  if.else  for.end14  if.then18  if.then23  for.end36  
Processing path: entry  for.cond  for.end  if.else  for.end14  if.then18  if.else37  
After path modifications process path is empty
Processing path: entry  for.end  if.else  for.cond4  for.end14  if.then18  if.else37  
After path modifications process path is empty
Processing path: entry  for.end  if.else  for.end14  if.then18  if.else37  
After path modifications process path
entry  for.end  if.else  for.end14  if.then18  if.else37  
Processing path: entry  for.cond  for.end  if.else  for.end14  if.else38  
After path modifications process path is empty
Processing path: entry  for.end  if.else  for.cond4  for.end14  if.else38  
After path modifications process path is empty
Processing path: entry  for.end  if.else  for.end14  if.else38  
After path modifications process path
entry  for.end  if.else  for.end14  if.else38  
 Processing function:chupcase
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %s.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chupcase0(i8** %s.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
 Processing function:strtosichar
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %in.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @strtosichar0(i8** %in.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
 Processing function:upcase
Short range hashing enabled.
Processing path: entry  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
No oh has been applied in the path
 Processing function:stringcharlen
Short range hashing enabled.
Processing path: entry  cond.true  
After path modifications process path
entry  cond.true  
Processing path: entry  cond.end  while.cond2  while.body4  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  if.then  
After path modifications process path
while.body  if.then  
Hash path invariants only
Invariants are
  br label %while.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  while.body4  if.end  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  
After path modifications process path
while.body  
Hash path invariants only
Invariants are
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  if.then17  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.then12  if.then17  
After path modifications process path
while.body  while.end  
Hash path invariants only
Invariants are
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  if.then17  
After path modifications process path
entry  cond.end  if.then17  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen2(i32* %retval, i8** %stringcur, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen2(i32* %retval, i8** %stringcur, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen2(i32* %retval, i8** %stringcur, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  while.cond2  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.then12  if.else  if.end25  
After path modifications process path
while.body  while.end  if.else  if.end25  
Hash path invariants only
Invariants are
  br label %if.end26, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @stringcharlen3(i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %if.end25, !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen3(i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.end26  if.then34  
After path modifications process path
while.body  while.end  if.end26  if.then34  
Hash path invariants only
Invariants are
  br label %if.end56, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen4(i32* %highstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen4(i32* %highstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen4(i32* %highstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.end26  if.end56  
After path modifications process path
while.body  while.end  if.end26  
Hash path invariants only
Invariants are
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.end26  if.else36  if.then43  
After path modifications process path
while.body  while.end  if.end26  if.else36  if.then43  
Hash path invariants only
Invariants are
  br label %if.end55, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen5(i32* %lowstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen5(i32* %lowstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen5(i32* %lowstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.end26  if.else36  if.end55  
After path modifications process path
while.body  while.end  if.end26  if.else36  if.end55  
Hash path invariants only
Invariants are
  br label %if.end56, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.end26  if.else36  if.else45  if.then50  
After path modifications process path
while.body  while.end  if.end26  if.else36  if.else45  if.then50  
Hash path invariants only
Invariants are
  br label %if.end54, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen6(i32* %highstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen6(i32* %highstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen6(i32* %highstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.end26  if.else36  if.else45  if.end54  
After path modifications process path
while.body  while.end  if.end26  if.else36  if.else45  if.end54  
Hash path invariants only
Invariants are
  br label %if.end55, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.end26  if.else36  if.else45  if.else52  
After path modifications process path
while.body  while.end  if.end26  if.else36  if.else45  if.else52  
Hash path invariants only
Invariants are
  br label %if.end54, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen7(i32* %lowstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen7(i32* %lowstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen7(i32* %lowstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond  return  
After path modifications process path is empty
Processing path: entry  cond.end  return  
After path modifications process path
entry  cond.end  return  
Processing path: entry  cond.end  while.cond  while.end57  
After path modifications process path is empty
Processing path: entry  cond.end  while.end57  
After path modifications process path
entry  cond.end  while.end57  
Processing path: entry  cond.false  
After path modifications process path
entry  cond.false  
 Processing function:addvheader
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %dp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @addvheader0(%struct.dent** %dp.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then3  
After path modifications process path
entry  if.end  if.then3  
Processing call instruction..
Can't handle this operand   %tdent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @addvheader1(%struct.dent** %tdent), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end19  
After path modifications process path
entry  if.end  if.end19  
Processing call instruction..
Can't handle this operand   %tdent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @addvheader4(%struct.dent** %tdent, %struct.dent** %dp.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %dp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @addvheader4(%struct.dent** %tdent, %struct.dent** %dp.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.else  if.then12  
After path modifications process path
entry  if.end  if.else  if.then12  
Processing call instruction..
Can't handle this operand   %tdent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @addvheader2(%struct.dent** %tdent, %struct.dent** %dp.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %dp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @addvheader2(%struct.dent** %tdent, %struct.dent** %dp.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.else  if.end15  
After path modifications process path
entry  if.end  if.else  if.end15  
Processing call instruction..
Can't handle this operand   %dp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @addvheader3(%struct.dent** %dp.addr, %struct.dent** %tdent), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %tdent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @addvheader3(%struct.dent** %dp.addr, %struct.dent** %tdent), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
 Processing function:combinecaps
Short range hashing enabled.
Processing path: entry  if.then  while.cond  while.body  if.then6  
After path modifications process path is empty
Processing path: entry  if.then  if.then6  
After path modifications process path
entry  if.then  if.then6  
Processing path: entry  if.then  while.cond  while.body  if.end  
After path modifications process path is empty
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.then  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  if.then  while.end  
After path modifications process path
entry  if.then  while.end  
Processing path: entry  if.end8  if.then10  if.then13  
After path modifications process path
entry  if.end8  if.then10  if.then13  
Processing call instruction..
Can't handle this operand   %newp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combinecaps1(%struct.dent** %newp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end8  if.then10  if.end15  if.then37  
After path modifications process path
entry  if.end8  if.then10  if.end15  if.then37  
Processing call instruction..
Can't handle this operand   %tdent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combinecaps2(%struct.dent** %tdent, %struct.dent** %newp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combinecaps2(%struct.dent** %tdent, %struct.dent** %newp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end8  if.then10  if.end15  if.end43  
After path modifications process path
entry  if.end8  if.then10  if.end15  if.end43  
Processing path: entry  if.end8  if.then10  if.end15  if.else40  
After path modifications process path
entry  if.end8  if.then10  if.end15  if.else40  
Processing call instruction..
Can't handle this operand   %newp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combinecaps3(%struct.dent** %newp.addr, %struct.dent** %tdent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %tdent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combinecaps3(%struct.dent** %newp.addr, %struct.dent** %tdent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end8  return  
After path modifications process path
entry  if.end8  return  
Processing path: entry  if.end8  if.end44  
After path modifications process path
entry  if.end8  if.end44  
Processing path: entry  if.else  
After path modifications process path
entry  if.else  
 Processing function:combine_two_entries
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %hdrp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combine_two_entries0(%struct.dent** %hdrp.addr, %struct.dent** %newp.addr, %struct.dent** %oldp.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %newp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combine_two_entries0(%struct.dent** %hdrp.addr, %struct.dent** %newp.addr, %struct.dent** %oldp.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %oldp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combine_two_entries0(%struct.dent** %hdrp.addr, %struct.dent** %newp.addr, %struct.dent** %oldp.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.else  if.then11  if.then26  
After path modifications process path
entry  if.else  if.then11  if.then26  
Processing path: entry  if.else  if.then11  if.end  land.lhs.true  if.then41  
After path modifications process path
entry  if.else  if.then11  if.end  land.lhs.true  if.then41  
Processing path: entry  if.else  if.then11  if.end  if.end43  
After path modifications process path
entry  if.else  if.then11  if.end  if.end43  
Processing path: entry  if.else  if.else44  
After path modifications process path
entry  if.else  if.else44  
 Processing function:forcevheader
Short range hashing enabled.
Processing path: entry  land.lhs.true  if.then  
After path modifications process path
entry  land.lhs.true  if.then  
Processing path: entry  if.end12  
After path modifications process path
entry  if.end12  
Processing path: entry  if.else  if.then11  
After path modifications process path
entry  if.else  if.then11  
Processing path: entry  if.else  if.end  
After path modifications process path
entry  if.else  if.end  
 Processing function:combineaffixes
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %ent1.addr = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combineaffixes0(%struct.dent** %ent1.addr, %struct.dent** %ent2.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %ent2.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combineaffixes0(%struct.dent** %ent1.addr, %struct.dent** %ent2.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
 Processing function:acoversb
Short range hashing enabled.
Processing path: entry  if.then  land.lhs.true  if.then8  
After path modifications process path
entry  if.then  land.lhs.true  if.then8  
Processing path: entry  if.then  if.end  
After path modifications process path
entry  if.then  if.end  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end18  if.then26  if.then34  
After path modifications process path
entry  if.end18  if.then26  if.then34  
Processing path: entry  if.end18  if.then26  lor.lhs.false  if.else35  
After path modifications process path
entry  if.end18  if.then26  lor.lhs.false  if.else35  
Processing path: entry  if.end18  if.else36  if.then38  
After path modifications process path
entry  if.end18  if.else36  if.then38  
Processing path: entry  if.end18  if.else36  if.else39  if.then44  
After path modifications process path
entry  if.end18  if.else36  if.else39  if.then44  
Processing path: entry  if.end18  if.else36  if.else39  if.else45  land.lhs.true50  if.then55  
After path modifications process path
entry  if.end18  if.else36  if.else39  if.else45  land.lhs.true50  if.then55  
Processing path: entry  if.end18  if.else36  if.else39  if.else45  if.else56  
After path modifications process path
entry  if.end18  if.else36  if.else39  if.else45  if.else56  
Processing path: entry  if.else  if.then16  
After path modifications process path
entry  if.else  if.then16  
Processing path: entry  if.else  if.end17  
After path modifications process path
entry  if.else  if.end17  
 Processing function:issubset
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.else  
After path modifications process path
entry  if.else  
 Processing function:lowcase
Short range hashing enabled.
Processing path: entry  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
No oh has been applied in the path
 Processing function:toutent
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @toutent0(%struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  for.cond  lor.lhs.false  
After path modifications process path
lor.lhs.false  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  if.then5  sw.epilog  
After path modifications process path
if.then5  sw.epilog  
Hash path invariants only
Invariants are
  br label %if.end32, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  if.then5  sw.bb  
After path modifications process path
if.then5  sw.bb  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay10 = getelementptr inbounds [120 x i8], [120 x i8]* %wbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  call void @lowcase(i8* %arraydecay9), !control_dep_instr !7, !data_indep_instr !11
  %arraydecay9 = getelementptr inbounds [120 x i8], [120 x i8]* %wbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %arraydecay9 = getelementptr inbounds [120 x i8], [120 x i8]* %wbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12 of the call   call void @lowcase(i8* %arraydecay9), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  if.then5  sw.bb12  if.then18  
After path modifications process path
if.then5  sw.bb12  if.then18  
Hash path invariants only
Invariants are
  br label %if.end22, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay20 = getelementptr inbounds [120 x i8], [120 x i8]* %wbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  call void @upcase(i8* %arraydecay19), !control_dep_instr !7, !data_indep_instr !11
  %arraydecay19 = getelementptr inbounds [120 x i8], [120 x i8]* %wbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %arraydecay19 = getelementptr inbounds [120 x i8], [120 x i8]* %wbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12 of the call   call void @upcase(i8* %arraydecay19), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  if.then5  sw.bb12  if.end22  
After path modifications process path
if.then5  sw.bb12  if.end22  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  if.then5  sw.bb12  lor.lhs.false16  
After path modifications process path
if.then5  sw.bb12  lor.lhs.false16  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  if.then5  sw.bb23  
After path modifications process path
if.then5  sw.bb23  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay24 = getelementptr inbounds [120 x i8], [120 x i8]* %wbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay28 = getelementptr inbounds [120 x i8], [120 x i8]* %wbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  call void @lowcase(i8* %arraydecay24), !control_dep_instr !7, !data_indep_instr !11
  %arrayidx27 = getelementptr inbounds [120 x i8], [120 x i8]* %wbuf, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx25 = getelementptr inbounds [120 x i8], [120 x i8]* %wbuf, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
Processing call instruction..
Can't handle this operand   %arraydecay24 = getelementptr inbounds [120 x i8], [120 x i8]* %wbuf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12 of the call   call void @lowcase(i8* %arraydecay24), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  if.then5  sw.bb30  
After path modifications process path
if.then5  sw.bb30  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11
  call void @toutent1(%struct.dent** %cent, %struct._IO_FILE** %toutfile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @toutent1(%struct.dent** %cent, %struct._IO_FILE** %toutfile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %toutfile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @toutent1(%struct.dent** %cent, %struct._IO_FILE** %toutfile.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  if.end32  if.then37  if.end38  
After path modifications process path
if.then37  
Hash path invariants only
Invariants are
  br label %if.end38, !control_dep_instr !7, !data_indep_instr !11
  call void @toutent2(%struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @toutent2(%struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  if.end32  if.else  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.else  for.end  
After path modifications process path
entry  if.end  if.else  for.end  
 Processing function:ichartosstr
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
 Processing function:toutword
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  
After path modifications process path
for.body  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
  call void @toutword1(i32* %bit, %struct._IO_FILE** %toutfile.addr), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bit = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @toutword1(i32* %bit, %struct._IO_FILE** %toutfile.addr), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %toutfile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @toutword1(i32* %bit, %struct._IO_FILE** %toutfile.addr), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @toutword0(i8** %word.addr, %struct._IO_FILE** %toutfile.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %toutfile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @toutword0(i8** %word.addr, %struct._IO_FILE** %toutfile.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  for.cond  for.body  if.end  for.inc  
After path modifications process path
for.body  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing call instruction..
Can't handle this operand   %toutfile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @toutword2(%struct._IO_FILE** %toutfile.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
 Processing function:flagout
Short range hashing enabled.
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing call instruction..
Can't handle this operand   %toutfile.addr = alloca %struct._IO_FILE*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagout1(%struct._IO_FILE** %toutfile.addr, i32* %flag.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %flag.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagout1(%struct._IO_FILE** %toutfile.addr, i32* %flag.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
 Processing function:printichar
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.else  
After path modifications process path
entry  if.else  
 Processing function:findfiletype
Short range hashing enabled.
Processing path: entry  if.then  for.cond  for.body  if.then6  if.then9  
After path modifications process path is empty
Processing path: entry  if.then  if.then6  if.then9  
After path modifications process path
entry  if.then  if.then6  if.then9  
Processing path: entry  if.then  for.cond  for.body  if.then6  if.end  
After path modifications process path is empty
Processing path: entry  if.then  if.then6  if.end  
After path modifications process path
entry  if.then  if.then6  if.end  
Processing path: entry  if.then  for.cond  for.body  if.end16  for.inc  
After path modifications process path
if.end16  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.then  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.then  for.end  
After path modifications process path
entry  if.then  for.end  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end17  for.cond18  for.body21  if.then38  if.then41  
After path modifications process path
for.body21  
Hash path invariants only
Invariants are
  br label %for.cond24, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !14
  call void @findfiletype3(i8** %cp, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @findfiletype3(i8** %cp, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !14
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @findfiletype3(i8** %cp, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !14
Processing path: entry  if.end17  for.cond24  for.body28  land.lhs.true  if.then38  if.then41  
After path modifications process path
for.body28  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end17  if.then38  if.then41  
After path modifications process path
entry  if.end17  if.then38  if.then41  
Processing path: entry  if.end17  for.cond18  for.body21  if.then38  if.end48  
After path modifications process path
for.body21  
Hash path invariants only
Invariants are
  call void @findfiletype3(i8** %cp, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !14
  br label %for.cond24, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @findfiletype3(i8** %cp, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !14
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @findfiletype3(i8** %cp, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !14
Processing path: entry  if.end17  for.cond24  for.body28  land.lhs.true  if.then38  if.end48  
After path modifications process path
for.body28  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end17  if.then38  if.end48  
After path modifications process path
entry  if.end17  if.then38  if.end48  
Processing path: entry  if.end17  for.cond18  for.body21  
After path modifications process path
for.body21  
Hash path invariants only
Invariants are
  call void @findfiletype3(i8** %cp, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !14
  br label %for.cond24, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @findfiletype3(i8** %cp, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !14
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @findfiletype3(i8** %cp, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !14
Processing path: entry  if.end17  for.cond24  for.body28  if.end49  for.inc50  
After path modifications process path
for.body28  if.end49  
Hash path invariants only
Invariants are
  br label %for.inc50, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end17  
After path modifications process path
entry  if.end17  
Processing path: entry  if.end17  for.cond18  for.body21  for.end51  for.inc52  
After path modifications process path
for.body21  for.end51  
Hash path invariants only
Invariants are
  br label %for.inc52, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !14
  br label %for.cond24, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !14
  call void @findfiletype3(i8** %cp, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @findfiletype3(i8** %cp, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !14
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @findfiletype3(i8** %cp, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !14
Processing path: entry  if.end17  for.cond24  
After path modifications process path is empty
Processing path: entry  if.end17  
After path modifications process path
entry  if.end17  
Processing path: entry  if.end17  for.cond18  for.end54  
After path modifications process path is empty
Processing path: entry  if.end17  for.end54  
After path modifications process path
entry  if.end17  for.end54  
 Processing function:chk_aff
Short range hashing enabled.
Processing path: entry  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_aff0(i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, i32* %sfxopts.addr, %struct.flagptr** %ind, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %pfxopts.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %allhits.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_aff0(i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, i32* %sfxopts.addr, %struct.flagptr** %ind, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %pfxopts.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %ignoreflagbits.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_aff0(i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, i32* %sfxopts.addr, %struct.flagptr** %ind, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %pfxopts.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %sfxopts.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_aff0(i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, i32* %sfxopts.addr, %struct.flagptr** %ind, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %pfxopts.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_aff0(i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, i32* %sfxopts.addr, %struct.flagptr** %ind, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %pfxopts.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_aff0(i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, i32* %sfxopts.addr, %struct.flagptr** %ind, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %pfxopts.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %ucword.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_aff0(i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, i32* %sfxopts.addr, %struct.flagptr** %ind, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %pfxopts.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_aff0(i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, i32* %sfxopts.addr, %struct.flagptr** %ind, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %pfxopts.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %pfxopts.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_aff0(i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, i32* %sfxopts.addr, %struct.flagptr** %ind, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %pfxopts.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.then  
After path modifications process path is empty
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.end  if.then8  land.lhs.true  land.lhs.true14  land.lhs.true16  if.then18  
After path modifications process path
if.end  if.then8  land.lhs.true  land.lhs.true14  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.then18  
After path modifications process path
entry  if.then18  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.end  if.then8  if.end19  
After path modifications process path
if.end  if.then8  if.end19  
Hash path invariants only
Invariants are
  br label %if.end20, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.end  if.end20  
After path modifications process path
if.end  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  return  
After path modifications process path is empty
Processing path: entry  return  
After path modifications process path
entry  return  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.end  land.lhs.true27  land.lhs.true29  land.lhs.true31  if.then33  
After path modifications process path is empty
Processing path: entry  while.end  land.lhs.true27  land.lhs.true29  land.lhs.true31  if.then33  
After path modifications process path
entry  while.end  land.lhs.true27  land.lhs.true29  land.lhs.true31  if.then33  
Processing path: entry  while.cond  land.end  while.end  if.end34  
After path modifications process path is empty
Processing path: entry  while.end  if.end34  
After path modifications process path
entry  while.end  if.end34  
 Processing function:pfx_list_chk
Short range hashing enabled.
Processing path: entry  for.cond  for.body  land.lhs.true  if.then  
After path modifications process path
for.body  land.lhs.true  if.then  
Hash path invariants only
Invariants are
  br label %for.inc165, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %entcount = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk0(i32* %entcount, %struct.flagent** %flent, %struct.flagptr** %ind.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk0(i32* %entcount, %struct.flagent** %flent, %struct.flagptr** %ind.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %ind.addr = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk0(i32* %entcount, %struct.flagent** %flent, %struct.flagptr** %ind.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  for.cond  for.body  for.inc165  
After path modifications process path
for.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  land.lhs.true8  if.then14  
After path modifications process path
for.body  if.end  land.lhs.true8  if.then14  
Hash path invariants only
Invariants are
  br label %for.inc165, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.then35  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.then35  
Hash path invariants only
Invariants are
  br label %if.end37, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  for.body52  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  if.then57  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  if.then57  
Hash path invariants only
Invariants are
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  br label %for.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  for.body52  if.end58  for.inc  
After path modifications process path
if.end58  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  
Hash path invariants only
Invariants are
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.then68  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.then68  
Hash path invariants only
Invariants are
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end155, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay69 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.end155  if.then160  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.end155  if.then160  
Hash path invariants only
Invariants are
  br label %if.end162, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay161 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.end155  if.end162  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.end155  if.end162  
Hash path invariants only
Invariants are
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end163, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.then77  if.then82  if.then86  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.then77  if.then82  if.then86  
Hash path invariants only
Invariants are
  br label %if.end94, !control_dep_instr !7, !data_indep_instr !11
  call void @pfx_list_chk2(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i8* %arraydecay83, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay83 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay78 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk2(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk2(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.then77  if.then82  if.end94  if.then103  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.then77  if.then82  if.end94  if.then103  
Hash path invariants only
Invariants are
  br label %if.end107, !control_dep_instr !7, !data_indep_instr !11
  call void @pfx_list_chk3(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay97 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay95 to i64, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay83 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay83, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay95 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay78 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk3(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk3(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.then77  if.then82  if.end94  if.end107  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.then77  if.then82  if.end94  if.end107  
Hash path invariants only
Invariants are
  %sub.ptr.rhs.cast113 = ptrtoint i8* %arraydecay111 to i64, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end121, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay111 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay108 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay95 to i64, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay97 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay83 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay83, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay95 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay78 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.then77  if.end121  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.then77  if.end121  
Hash path invariants only
Invariants are
  br label %if.end154, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay78 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.end154  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.end154  
Hash path invariants only
Invariants are
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end155, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  land.lhs.true127  if.then134  if.then137  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  land.lhs.true127  if.then134  if.then137  
Hash path invariants only
Invariants are
  br label %if.end145, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  call void @pfx_list_chk4(%struct.flagent** %flent, %struct.dent** %dent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay123 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk4(%struct.flagent** %flent, %struct.dent** %dent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %dent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk4(%struct.flagent** %flent, %struct.dent** %dent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  land.lhs.true127  if.then134  if.end145  if.end152  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  land.lhs.true127  if.then134  if.end145  if.end152  
Hash path invariants only
Invariants are
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %if.end153, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay123 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  if.then150  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  land.lhs.true127  if.then134  if.end145  if.then147  if.then150  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  land.lhs.true127  if.then134  if.end145  
Hash path invariants only
Invariants are
  %arraydecay123 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.then150  
After path modifications process path
entry  if.then150  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  land.lhs.true127  if.then134  if.end145  if.then147  if.end151  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  land.lhs.true127  if.then134  if.end145  if.end151  
Hash path invariants only
Invariants are
  br label %if.end152, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @numhits, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay123 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  if.end153  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  if.end153  
Hash path invariants only
Invariants are
  br label %if.end154, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay123 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.end163  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.end163  
Hash path invariants only
Invariants are
  br label %if.end164, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  lor.lhs.false  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  lor.lhs.false  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end164  
After path modifications process path
for.body  if.end  if.end15  if.end164  
Hash path invariants only
Invariants are
  br label %for.inc165, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.end167  
After path modifications process path is empty
Processing path: entry  for.end167  
After path modifications process path
entry  for.end167  
No oh has been applied in the path
 Processing function:chk_suf
Short range hashing enabled.
Processing path: entry  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %allhits.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %ignoreflagbits.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %pfxent.addr = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %ucword.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %optflags.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.then  
After path modifications process path is empty
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.end  if.then8  land.lhs.true  land.lhs.true14  land.lhs.true16  if.then18  
After path modifications process path
if.end  if.then8  land.lhs.true  land.lhs.true14  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.then18  
After path modifications process path
entry  if.then18  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.end  if.then8  if.end19  
After path modifications process path
if.end  if.then8  if.end19  
Hash path invariants only
Invariants are
  br label %if.end20, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.end  if.end20  
After path modifications process path
if.end  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  return  
After path modifications process path is empty
Processing path: entry  return  
After path modifications process path
entry  return  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
Processing call instruction..
Can't handle this operand   %allhits.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf2(i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i32* %optflags.addr, i8** %word.addr, i8** %ucword.addr, %struct.flagptr** %ind, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ignoreflagbits.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf2(i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i32* %optflags.addr, i8** %word.addr, i8** %ucword.addr, %struct.flagptr** %ind, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %pfxent.addr = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf2(i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i32* %optflags.addr, i8** %word.addr, i8** %ucword.addr, %struct.flagptr** %ind, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %optflags.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf2(i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i32* %optflags.addr, i8** %word.addr, i8** %ucword.addr, %struct.flagptr** %ind, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf2(i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i32* %optflags.addr, i8** %word.addr, i8** %ucword.addr, %struct.flagptr** %ind, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ucword.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf2(i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i32* %optflags.addr, i8** %word.addr, i8** %ucword.addr, %struct.flagptr** %ind, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf2(i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i32* %optflags.addr, i8** %word.addr, i8** %ucword.addr, %struct.flagptr** %ind, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf2(i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i32* %optflags.addr, i8** %word.addr, i8** %ucword.addr, %struct.flagptr** %ind, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
 Processing function:suf_list_chk
Short range hashing enabled.
Processing path: entry  for.cond  for.body  land.lhs.true  if.then  
After path modifications process path
for.body  land.lhs.true  if.then  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  for.inc  
After path modifications process path
for.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  land.lhs.true10  if.then14  
After path modifications process path
for.body  if.end  land.lhs.true10  if.then14  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true18  if.then24  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true18  if.then24  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.then49  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.then49  
Hash path invariants only
Invariants are
  br label %if.end57, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay54 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  for.body63  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  if.then68  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  if.then68  
Hash path invariants only
Invariants are
  br label %for.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  for.body63  if.end69  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  
Hash path invariants only
Invariants are
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.then74  if.then77  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.then74  if.then77  
Hash path invariants only
Invariants are
  %arraydecay78 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end97, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.then74  if.end97  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.then74  if.end97  
Hash path invariants only
Invariants are
  br label %if.end231, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.then74  if.else90  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.then74  if.else90  
Hash path invariants only
Invariants are
  br label %if.end97, !control_dep_instr !7, !data_indep_instr !11
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  %arraydecay91 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.end231  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.end231  
Hash path invariants only
Invariants are
  br label %if.end232, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.then100  if.then105  land.lhs.true109  if.then114  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.then100  if.then105  land.lhs.true109  if.then114  
Hash path invariants only
Invariants are
  call void @suf_list_chk2(%struct.flagent** %pfxent.addr, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end122, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay101 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay106, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay106 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %pfxent.addr = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk2(%struct.flagent** %pfxent.addr, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk2(%struct.flagent** %pfxent.addr, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.then100  if.then105  if.end122  land.lhs.true131  if.then136  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.then100  if.then105  if.end122  land.lhs.true131  if.then136  
Hash path invariants only
Invariants are
  %arraydecay125 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay123 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  call void @suf_list_chk3(%struct.flagent** %pfxent.addr, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay106 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay106, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %if.end144, !control_dep_instr !7, !data_indep_instr !11
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay123 to i64, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay101 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %pfxent.addr = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk3(%struct.flagent** %pfxent.addr, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk3(%struct.flagent** %pfxent.addr, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.then100  if.then105  if.end122  if.end144  if.then147  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.then100  if.then105  if.end122  if.end144  if.then147  
Hash path invariants only
Invariants are
  br label %if.end155, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay123 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay125 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay106 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay106, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
  call void @suf_list_chk4(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay123 to i64, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay101 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk4(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk4(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.then100  if.then105  if.end122  if.end144  if.end155  if.then158  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.then100  if.then105  if.end122  if.end144  if.end155  if.then158  
Hash path invariants only
Invariants are
  call void @suf_list_chk5(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay123 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay125 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay106 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay106, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end166, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay123 to i64, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay101 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk5(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk5(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.then100  if.then105  if.end122  if.end144  if.end155  if.end166  cond.true  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.then100  if.then105  if.end122  if.end144  if.end155  if.end166  cond.true  
Hash path invariants only
Invariants are
  %arraydecay167 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay123 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay125 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay106 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay106, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %cond.end, !control_dep_instr !7, !data_indep_instr !11
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay123 to i64, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay101 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.then100  if.then105  if.end122  if.end144  if.end155  if.end166  cond.end  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.then100  if.then105  if.end122  if.end144  if.end155  if.end166  cond.end  
Hash path invariants only
Invariants are
  %sub.ptr.rhs.cast177 = ptrtoint i8* %arraydecay175 to i64, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay175 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end185, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay167 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay123 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay125 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay106 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay106, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay123 to i64, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay101 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.then100  if.then105  if.end122  if.end144  if.end155  if.end166  cond.false  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.then100  if.then105  if.end122  if.end144  if.end155  if.end166  cond.false  
Hash path invariants only
Invariants are
  %arraydecay167 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay123 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay125 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay106 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay106, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  br label %cond.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay123 to i64, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay101 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.then100  if.end185  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.then100  if.end185  
Hash path invariants only
Invariants are
  %arraydecay101 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end230, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.end230  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.end230  
Hash path invariants only
Invariants are
  br label %if.end231, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.else186  land.lhs.true191  land.lhs.true198  if.then211  if.then214  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.else186  land.lhs.true191  land.lhs.true198  if.then211  if.then214  
Hash path invariants only
Invariants are
  br label %if.end221, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
  call void @suf_list_chk6(%struct.flagent** %flent, %struct.flagent** %pfxent.addr, %struct.dent** %dent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay187 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk6(%struct.flagent** %flent, %struct.flagent** %pfxent.addr, %struct.dent** %dent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %pfxent.addr = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk6(%struct.flagent** %flent, %struct.flagent** %pfxent.addr, %struct.dent** %dent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %dent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk6(%struct.flagent** %flent, %struct.flagent** %pfxent.addr, %struct.dent** %dent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.else186  land.lhs.true191  land.lhs.true198  if.then211  if.end221  if.end228  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.else186  land.lhs.true191  land.lhs.true198  if.then211  if.end221  if.end228  
Hash path invariants only
Invariants are
  br label %if.end229, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  %arraydecay187 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  if.then226  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.else186  land.lhs.true191  land.lhs.true198  if.then211  if.end221  if.then223  if.then226  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.else186  land.lhs.true191  land.lhs.true198  if.then211  if.end221  
Hash path invariants only
Invariants are
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  %arraydecay187 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.then226  
After path modifications process path
entry  if.then226  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.else186  land.lhs.true191  land.lhs.true198  if.then211  if.end221  if.then223  if.end227  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.else186  land.lhs.true191  land.lhs.true198  if.then211  if.end221  if.end227  
Hash path invariants only
Invariants are
  br label %if.end228, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
  %arraydecay187 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i32 0, i32* @numhits, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.else186  land.lhs.true191  land.lhs.true198  lor.lhs.false202  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.else186  land.lhs.true191  land.lhs.true198  lor.lhs.false202  
Hash path invariants only
Invariants are
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  %arraydecay187 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.else186  if.end229  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.then72  if.else98  if.else186  if.end229  
Hash path invariants only
Invariants are
  br label %if.end230, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  %arraydecay187 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond60  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.end232  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.end57  for.end  if.end232  
Hash path invariants only
Invariants are
  call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond60, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  br label %if.end233, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cond = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk1(i32* %cond, %struct.flagent** %flent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.else  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  land.lhs.true37  if.then42  if.else  
Hash path invariants only
Invariants are
  call void @suf_list_chk0(i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay45 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !global_dep_instr !14
  br label %if.end57, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay43 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12, !global_dep_instr !14
Processing call instruction..
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @suf_list_chk0(i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  land.lhs.true29  lor.lhs.false  
After path modifications process path
for.body  if.end  if.end15  if.end25  land.lhs.true29  lor.lhs.false  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end25  if.end233  
After path modifications process path
for.body  if.end  if.end15  if.end25  if.end233  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.end236  
After path modifications process path is empty
Processing path: entry  for.end236  
After path modifications process path
entry  for.end236  
No oh has been applied in the path
 Processing function:expand_pre
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  
After path modifications process path
for.body  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
  call void @expand_pre1(i32* %explength, i8** %extra.addr, i32* %option.addr, i8** %croot.addr, i8** %rootword.addr, %struct.flagent** %flent, i64** %mask.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %explength = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre1(i32* %explength, i8** %extra.addr, i32* %option.addr, i8** %croot.addr, i8** %rootword.addr, %struct.flagent** %flent, i64** %mask.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %extra.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre1(i32* %explength, i8** %extra.addr, i32* %option.addr, i8** %croot.addr, i8** %rootword.addr, %struct.flagent** %flent, i64** %mask.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %option.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre1(i32* %explength, i8** %extra.addr, i32* %option.addr, i8** %croot.addr, i8** %rootword.addr, %struct.flagent** %flent, i64** %mask.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %croot.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre1(i32* %explength, i8** %extra.addr, i32* %option.addr, i8** %croot.addr, i8** %rootword.addr, %struct.flagent** %flent, i64** %mask.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %rootword.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre1(i32* %explength, i8** %extra.addr, i32* %option.addr, i8** %croot.addr, i8** %rootword.addr, %struct.flagent** %flent, i64** %mask.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre1(i32* %explength, i8** %extra.addr, i32* %option.addr, i8** %croot.addr, i8** %rootword.addr, %struct.flagent** %flent, i64** %mask.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %mask.addr = alloca i64*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre1(i32* %explength, i8** %extra.addr, i32* %option.addr, i8** %croot.addr, i8** %rootword.addr, %struct.flagent** %flent, i64** %mask.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %entcount = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre0(i32* %entcount, %struct.flagent** %flent), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre0(i32* %entcount, %struct.flagent** %flent), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  for.cond  for.body  if.end  for.inc  
After path modifications process path
for.body  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
 Processing function:pr_pre_expansion
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then6  
After path modifications process path
entry  if.end  if.then6  
Processing path: entry  if.end  if.end7  for.cond  for.body  if.then18  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  if.then18  
After path modifications process path
entry  if.end  if.end7  if.then18  
Processing path: entry  if.end  if.end7  for.cond  for.body  if.end19  for.inc  
After path modifications process path
if.end19  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  
After path modifications process path
entry  if.end  if.end7  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.then21  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.then21  
After path modifications process path
entry  if.end  if.end7  for.end  if.then21  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.body40  if.end45  for.inc46  
After path modifications process path
if.end45  
Hash path invariants only
Invariants are
  br label %for.inc46, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  
Processing call instruction..
Can't handle this operand   %nextc = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion2(i8** %nextc, i8** %rootword.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %rootword.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion2(i8** %nextc, i8** %rootword.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  if.then44  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.body40  if.then44  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  if.then44  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  if.then44  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.body53  if.then57  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  if.then57  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  if.then57  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  if.then57  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  if.then57  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.body53  if.end58  for.inc59  
After path modifications process path
if.end58  
Hash path invariants only
Invariants are
  br label %for.inc59, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.end61  if.then63  if.end74  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.end74  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  for.end61  if.then63  if.end74  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.end74  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.end74  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.end61  if.then63  if.then70  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.then70  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  for.end61  if.then63  if.then70  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.then70  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.then70  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.end61  if.end78  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.end78  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  for.end61  if.end78  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.end78  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.end78  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.end61  if.else  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.else  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  for.end61  if.else  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.else  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.else  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.end79  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.end79  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.end79  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.end79  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.end89  if.then92  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.end89  if.then92  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.end89  if.then92  
Processing call instruction..
Can't handle this operand   %croot.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion5(i8** %croot.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.end89  if.end94  if.then97  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.then97  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.then97  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.end89  if.end94  if.end101  if.then105  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.end101  if.then105  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.end101  if.then105  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.end89  if.end94  if.end101  if.else109  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.end101  if.else109  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.end101  if.else109  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion6(i32* %retval, i32* %tlen), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %tlen = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion6(i32* %retval, i32* %tlen), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.else80  if.end88  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.else80  if.end88  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.else80  if.end88  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.else80  if.then84  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.else80  if.then84  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.else80  if.then84  
 Processing function:forcelc
Short range hashing enabled.
Processing path: entry  for.cond  for.body  for.inc  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
  call void @forcelc0(i8** %dst.addr), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %dst.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @forcelc0(i8** %dst.addr), !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
No oh has been applied in the path
 Processing function:expand_suf
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  if.then7  
After path modifications process path
for.body  if.then  if.then7  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
  call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %explength = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %croot.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %extra.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %rootword.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %option.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %entcount = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf0(i32* %entcount, %struct.flagent** %flent), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf0(i32* %entcount, %struct.flagent** %flent), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  for.cond  for.body  if.then  if.end  
After path modifications process path
for.body  if.then  if.end  
Hash path invariants only
Invariants are
  br label %if.end8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.then  lor.lhs.false  
After path modifications process path
for.body  if.then  lor.lhs.false  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end8  for.inc  
After path modifications process path
for.body  if.end8  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
 Processing function:pr_suf_expansion
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then6  
After path modifications process path
entry  if.end  if.then6  
Processing path: entry  if.end  if.end7  for.cond  for.body  if.then15  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  if.then15  
After path modifications process path
entry  if.end  if.end7  if.then15  
Processing path: entry  if.end  if.end7  for.cond  for.body  if.end16  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  
After path modifications process path
entry  if.end  if.end7  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.then25  if.end34  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.then25  if.end34  
After path modifications process path
entry  if.end  if.end7  for.end  if.then25  if.end34  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.then25  if.then31  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.then25  if.then31  
After path modifications process path
entry  if.end  if.end7  for.end  if.then25  if.then31  
Processing call instruction..
Can't handle this operand   %flent.addr = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_suf_expansion1(%struct.flagent** %flent.addr, i8** %nextc), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %nextc = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_suf_expansion1(%struct.flagent** %flent.addr, i8** %nextc), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end35  if.then38  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end35  if.then38  
After path modifications process path
entry  if.end  if.end7  for.end  if.end35  if.then38  
Processing call instruction..
Can't handle this operand   %croot.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_suf_expansion3(i8** %croot.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end35  if.end40  if.then43  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end35  if.end40  if.then43  
After path modifications process path
entry  if.end  if.end7  for.end  if.end35  if.end40  if.then43  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end35  if.end40  if.end47  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end35  if.end40  if.end47  
After path modifications process path
entry  if.end  if.end7  for.end  if.end35  if.end40  if.end47  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_suf_expansion4(i32* %retval, %struct.flagent** %flent.addr, i32* %tlen), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %flent.addr = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_suf_expansion4(i32* %retval, %struct.flagent** %flent.addr, i32* %tlen), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %tlen = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_suf_expansion4(i32* %retval, %struct.flagent** %flent.addr, i32* %tlen), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.else  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.else  
After path modifications process path
entry  if.end  if.end7  for.end  if.else  
Processing call instruction..
Can't handle this operand   %nextc = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_suf_expansion2(i8** %nextc), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
 Processing function:treeinit
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  if.then3  
After path modifications process path
entry  if.end  if.then3  
Processing path: entry  if.end  if.end112  
After path modifications process path
entry  if.end  if.end112  
Processing path: entry  if.end  if.end4  if.then6  land.lhs.true  if.then11  
After path modifications process path
entry  if.end  if.end4  if.then6  land.lhs.true  if.then11  
Processing path: entry  if.end  if.end4  if.then6  if.end15  land.lhs.true17  if.then19  
After path modifications process path
entry  if.end  if.end4  if.then6  if.end15  land.lhs.true17  if.then19  
Processing path: entry  if.end  if.end4  if.then6  if.end15  if.end23  land.lhs.true25  if.then27  
After path modifications process path
entry  if.end  if.end4  if.then6  if.end15  if.end23  land.lhs.true25  if.then27  
Processing path: entry  if.end  if.end4  if.then6  if.end15  if.end23  if.end31  if.then34  if.then38  
After path modifications process path
entry  if.end  if.end4  if.then6  if.end15  if.end23  if.end31  if.then34  if.then38  
Processing path: entry  if.end  if.end4  if.then6  if.end15  if.end23  if.end31  if.then34  if.end42  
After path modifications process path
entry  if.end  if.end4  if.then6  if.end15  if.end23  if.end31  if.then34  if.end42  
Processing path: entry  if.end  if.end4  if.then6  if.end15  if.end23  if.end31  if.then34  if.else  
After path modifications process path
entry  if.end  if.end4  if.then6  if.end15  if.end23  if.end31  if.then34  if.else  
Processing path: entry  if.end  if.end4  if.then6  if.end15  if.end23  if.end31  if.end43  if.then46  
After path modifications process path
entry  if.end  if.end4  if.then6  if.end15  if.end23  if.end31  if.end43  if.then46  
Processing path: entry  if.end  if.end4  if.then6  if.end15  if.end23  if.end31  if.end43  if.end48  if.then51  
After path modifications process path
entry  if.end  if.end4  if.then6  if.end15  if.end23  if.end31  if.end43  if.end48  if.then51  
Processing path: entry  if.end  if.end4  if.then6  if.end15  if.end23  if.end31  if.end43  if.end48  if.end53  
After path modifications process path
entry  if.end  if.end4  if.then6  if.end15  if.end23  if.end31  if.end43  if.end48  if.end53  
Processing path: entry  if.end  if.end4  if.end97  land.lhs.true99  land.lhs.true101  land.lhs.true105  if.then109  
After path modifications process path
entry  if.end  if.end4  if.end97  land.lhs.true99  land.lhs.true101  land.lhs.true105  if.then109  
Processing path: entry  if.end  if.end4  if.else54  lor.end  if.then64  if.then69  
After path modifications process path
entry  if.end  if.end4  if.else54  lor.end  if.then64  if.then69  
Processing call instruction..
Processing path: entry  if.end  if.end4  if.else54  lor.end  if.then64  if.end71  
After path modifications process path
entry  if.end  if.end4  if.else54  lor.end  if.then64  if.end71  
Processing path: entry  if.end  if.end4  if.else54  lor.end  if.end96  
After path modifications process path
entry  if.end  if.end4  if.else54  lor.end  if.end96  
Processing path: entry  if.end  if.end4  if.else54  lor.end  if.else72  if.then77  
After path modifications process path
entry  if.end  if.end4  if.else54  lor.end  if.else72  if.then77  
Processing call instruction..
Processing path: entry  if.end  if.end4  if.else54  lor.end  if.else72  if.end90  if.then93  
After path modifications process path
entry  if.end  if.end4  if.else54  lor.end  if.else72  if.end90  if.then93  
Processing call instruction..
Can't handle this operand   %p.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinit7(i8** %p.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else54  lor.end  if.else72  if.end90  if.end95  
After path modifications process path
entry  if.end  if.end4  if.else54  lor.end  if.else72  if.end90  if.end95  
Processing path: entry  if.end  if.end4  if.else54  lor.end  if.else72  if.else79  if.end89  
After path modifications process path
entry  if.end  if.end4  if.else54  lor.end  if.else72  if.else79  if.end89  
Processing path: entry  if.end  if.end4  if.else54  lor.end  if.else72  if.else79  if.then81  if.then86  
After path modifications process path
entry  if.end  if.end4  if.else54  lor.end  if.else72  if.else79  if.then81  if.then86  
Processing call instruction..
Processing path: entry  if.end  if.end4  if.else54  lor.end  if.else72  if.else79  if.then81  if.end88  
After path modifications process path
entry  if.end  if.end4  if.else54  lor.end  if.else72  if.else79  if.then81  if.end88  
Processing path: entry  if.end  if.end4  if.else54  lor.lhs.false  lor.rhs  
After path modifications process path
entry  if.end  if.end4  if.else54  lor.lhs.false  lor.rhs  
 Processing function:trydict
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  if.then4  
After path modifications process path
entry  if.end  if.then4  
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @trydict2(i8** %filename.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end5  
After path modifications process path
entry  if.end  if.end5  
Processing path: entry  if.else  
After path modifications process path
entry  if.else  
 Processing function:treeload
Short range hashing enabled.
Processing path: entry  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
No oh has been applied in the path
 Processing function:treeinsert
Short range hashing enabled.
Processing path: entry  if.end68  if.then72  
After path modifications process path
entry  if.end68  if.then72  
Processing path: entry  if.end68  return  
After path modifications process path
entry  if.end68  return  
Processing path: entry  if.end68  if.end73  if.then75  
After path modifications process path
entry  if.end68  if.end73  if.then75  
Processing path: entry  if.end68  if.end73  if.end78  if.then85  if.then89  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.then85  if.then89  
Processing path: entry  if.end68  if.end73  if.end78  if.then85  if.end91  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.then85  if.end91  
Processing path: entry  if.end68  if.end73  if.end78  if.end102  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.end102  
Processing path: entry  if.end68  if.end73  if.end78  if.else92  if.then99  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.else92  if.then99  
Processing path: entry  if.end68  if.end73  if.end78  if.else92  if.end101  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.else92  if.end101  
Processing path: entry  land.lhs.true  if.then  for.cond  for.body  if.then5  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  if.then5  
After path modifications process path
entry  land.lhs.true  if.then  if.then5  
Processing path: entry  land.lhs.true  if.then  for.cond  for.body  if.end  for.inc  
After path modifications process path
if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !12
Processing path: entry  land.lhs.true  if.then  
After path modifications process path
entry  land.lhs.true  if.then  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.then9  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.then9  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.then9  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.then17  if.then21  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.then17  if.then21  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.then17  if.then21  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.then17  if.end22  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.then17  if.end22  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.then17  if.end22  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.end67  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.end67  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.end67  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  while.cond  while.body  if.then42  
After path modifications process path
while.body  if.then42  
Hash path invariants only
Invariants are
  br label %if.end58, !control_dep_instr !7, !data_indep_instr !11
  call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %olddp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.then33  
After path modifications process path
for.body28  if.then33  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  while.cond  while.body  if.end58  
After path modifications process path
while.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.then33  
After path modifications process path
for.body28  if.then33  
Hash path invariants only
Invariants are
  call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  while.cond  while.body  if.else51  
After path modifications process path
while.body  if.else51  
Hash path invariants only
Invariants are
  br label %if.end58, !control_dep_instr !7, !data_indep_instr !11
  call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %olddp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.then33  
After path modifications process path
for.body28  if.then33  
Hash path invariants only
Invariants are
  call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  while.cond  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.then33  while.end  
After path modifications process path
for.body28  if.then33  while.end  
Hash path invariants only
Invariants are
  br label %if.end59, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.end59  for.inc60  
After path modifications process path
for.body28  if.end59  
Hash path invariants only
Invariants are
  br label %for.inc60, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  for.end62  if.then65  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.end62  if.then65  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.end62  if.then65  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.end62  if.then65  
Processing call instruction..
Can't handle this operand   %oldhtab = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert9(%struct.dent** %oldhtab), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  for.end62  if.end66  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.end62  if.end66  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.end62  if.end66  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.end62  if.end66  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.else  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.else  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.else  
 Processing function:tinsert
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %proto.addr = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @tinsert0(%struct.dent** %proto.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.then7  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.end  if.then7  
After path modifications process path
entry  if.end  if.then7  
Non numeric pointers (int and float) are skipped:  %php = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 %struct.dent*
Processing path: entry  if.end  if.then7  while.cond  while.end  if.then10  
After path modifications process path is empty
Processing path: entry  if.end  if.then7  while.end  if.then10  
After path modifications process path
entry  if.end  if.then7  while.end  if.then10  
Non numeric pointers (int and float) are skipped:  %php = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 %struct.dent*
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Processing path: entry  if.end  if.then7  while.cond  while.end  if.end12  
After path modifications process path is empty
Processing path: entry  if.end  if.then7  while.end  if.end12  
After path modifications process path
entry  if.end  if.then7  while.end  if.end12  
Non numeric pointers (int and float) are skipped:  %php = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 %struct.dent*
Processing path: entry  if.end  if.end13  if.then15  
After path modifications process path
entry  if.end  if.end13  if.then15  
Non numeric pointers (int and float) are skipped:  %php = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 %struct.dent*
Processing path: entry  if.end  if.end13  if.end17  
After path modifications process path
entry  if.end  if.end13  if.end17  
Non numeric pointers (int and float) are skipped:  %php = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 %struct.dent*
 Processing function:treelookup
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !10
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  while.cond  land.end  while.body  if.then8  
After path modifications process path is empty
Processing path: entry  if.end  if.then8  
After path modifications process path
entry  if.end  if.then8  
Processing path: entry  if.end  while.cond10  while.body15  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  land.end  while.body  if.end9  
After path modifications process path
if.end9  
Hash path invariants only
Invariants are
  br label %while.cond10, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !10
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  while.cond10  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  land.end  while.body  if.end9  while.end  
After path modifications process path
if.end9  
Hash path invariants only
Invariants are
  br label %while.cond10, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !10
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  while.cond  land.end  while.end17  land.lhs.true  if.then23  
After path modifications process path is empty
Processing path: entry  if.end  while.end17  land.lhs.true  if.then23  
After path modifications process path
entry  if.end  while.end17  land.lhs.true  if.then23  
Processing path: entry  if.end  while.cond  land.end  while.end17  if.else  
After path modifications process path is empty
Processing path: entry  if.end  while.end17  if.else  
After path modifications process path
entry  if.end  while.end17  if.else  
 Processing function:treeoutput
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then2  
After path modifications process path
entry  if.end  if.then2  
Processing path: entry  if.end  if.end4  if.then6  
After path modifications process path
entry  if.end  if.end4  if.then6  
Processing path: entry  if.end  if.end4  if.end43  if.then46  while.cond63  while.body68  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.cond49  for.body52  
After path modifications process path
for.body52  
Hash path invariants only
Invariants are
  br label %for.cond53, !control_dep_instr !7, !data_indep_instr !11
  call void @treeoutput12(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %lent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput12(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput12(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.cond53  for.body56  if.then62  
After path modifications process path
for.body56  if.then62  
Hash path invariants only
Invariants are
  br label %while.cond63, !control_dep_instr !7, !data_indep_instr !11
  call void @treeoutput13(%struct.dent** %lent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %lent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput13(%struct.dent** %lent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.then46  
After path modifications process path
entry  if.end  if.end4  if.end43  if.then46  
Processing path: entry  if.end  if.end4  if.end43  if.then46  while.cond63  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.cond49  for.body52  
After path modifications process path
for.body52  
Hash path invariants only
Invariants are
  call void @treeoutput12(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond53, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %lent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput12(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput12(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.cond53  for.body56  if.then62  while.end70  
After path modifications process path
for.body56  if.then62  while.end70  
Hash path invariants only
Invariants are
  br label %if.end71, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %while.cond63, !control_dep_instr !7, !data_indep_instr !11
  call void @treeoutput13(%struct.dent** %lent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %lent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput13(%struct.dent** %lent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.then46  
After path modifications process path
entry  if.end  if.end4  if.end43  if.then46  
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.cond49  for.body52  
After path modifications process path
for.body52  
Hash path invariants only
Invariants are
  call void @treeoutput12(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond53, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %lent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput12(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput12(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.cond53  for.body56  if.end71  for.inc72  
After path modifications process path
for.body56  if.end71  
Hash path invariants only
Invariants are
  br label %for.inc72, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.then46  
After path modifications process path
entry  if.end  if.end4  if.end43  if.then46  
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.cond49  for.body52  for.end74  for.inc75  
After path modifications process path
for.body52  for.end74  
Hash path invariants only
Invariants are
  br label %for.inc75, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond53, !control_dep_instr !7, !data_indep_instr !11
  call void @treeoutput12(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %lent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput12(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput12(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.cond53  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.then46  
After path modifications process path
entry  if.end  if.end4  if.end43  if.then46  
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.end77  for.cond80  for.body83  if.then89  land.lhs.true95  if.then99  
After path modifications process path
for.body83  if.then89  land.lhs.true95  if.then99  
Hash path invariants only
Invariants are
  br label %if.end100, !control_dep_instr !7, !data_indep_instr !11
  call void @treeoutput18(%struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput18(%struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.cond49  for.end77  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.end77  
After path modifications process path
entry  if.end  if.end4  if.end43  if.then46  for.end77  
Processing call instruction..
Can't handle this operand   %ehtab = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput17(%struct.dent** %ehtab, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput17(%struct.dent** %ehtab, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.end77  for.cond80  for.body83  if.then89  if.end100  
After path modifications process path
for.body83  if.then89  if.end100  
Hash path invariants only
Invariants are
  br label %if.end101, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.cond49  for.end77  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.end77  
After path modifications process path
entry  if.end  if.end4  if.end43  if.then46  for.end77  
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.end77  for.cond80  for.body83  if.end101  for.inc102  
After path modifications process path
for.body83  if.end101  
Hash path invariants only
Invariants are
  br label %for.inc102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.cond49  for.end77  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.end77  
After path modifications process path
entry  if.end  if.end4  if.end43  if.then46  for.end77  
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.end77  for.cond80  for.end104  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.cond49  for.end77  for.end104  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.then46  for.end77  for.end104  
After path modifications process path
entry  if.end  if.end4  if.end43  if.then46  for.end77  for.end104  
Processing path: entry  if.end  if.end4  if.end43  if.end105  while.cond123  while.body128  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.cond112  for.body115  if.then121  
After path modifications process path
for.body115  if.then121  
Hash path invariants only
Invariants are
  br label %while.cond123, !control_dep_instr !7, !data_indep_instr !11
  call void @treeoutput22(%struct.dent*** %sortptr, %struct.dent** %lent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %sortptr = alloca %struct.dent**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput22(%struct.dent*** %sortptr, %struct.dent** %lent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %lent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput22(%struct.dent*** %sortptr, %struct.dent** %lent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.cond108  for.body111  
After path modifications process path
for.body111  
Hash path invariants only
Invariants are
  br label %for.cond112, !control_dep_instr !7, !data_indep_instr !11
  call void @treeoutput21(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %lent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput21(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput21(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.end105  
After path modifications process path
entry  if.end  if.end4  if.end43  if.end105  
Processing path: entry  if.end  if.end4  if.end43  if.end105  while.cond123  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.cond112  for.body115  if.then121  while.end130  
After path modifications process path
for.body115  if.then121  while.end130  
Hash path invariants only
Invariants are
  br label %if.end131, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %while.cond123, !control_dep_instr !7, !data_indep_instr !11
  call void @treeoutput22(%struct.dent*** %sortptr, %struct.dent** %lent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %sortptr = alloca %struct.dent**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput22(%struct.dent*** %sortptr, %struct.dent** %lent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %lent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput22(%struct.dent*** %sortptr, %struct.dent** %lent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.cond108  for.body111  
After path modifications process path
for.body111  
Hash path invariants only
Invariants are
  call void @treeoutput21(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond112, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %lent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput21(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput21(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.end105  
After path modifications process path
entry  if.end  if.end4  if.end43  if.end105  
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.cond112  for.body115  if.end131  for.inc132  
After path modifications process path
for.body115  if.end131  
Hash path invariants only
Invariants are
  br label %for.inc132, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.cond108  for.body111  
After path modifications process path
for.body111  
Hash path invariants only
Invariants are
  call void @treeoutput21(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond112, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %lent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput21(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput21(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.end105  
After path modifications process path
entry  if.end  if.end4  if.end43  if.end105  
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.cond112  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.cond108  for.body111  for.end134  for.inc135  
After path modifications process path
for.body111  for.end134  
Hash path invariants only
Invariants are
  br label %for.inc135, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond112, !control_dep_instr !7, !data_indep_instr !11
  call void @treeoutput21(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %lent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput21(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput21(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.end105  
After path modifications process path
entry  if.end  if.end4  if.end43  if.end105  
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.end137  for.cond140  for.body143  if.then149  land.lhs.true155  if.then159  
After path modifications process path
for.body143  if.then149  land.lhs.true155  if.then159  
Hash path invariants only
Invariants are
  br label %if.end161, !control_dep_instr !7, !data_indep_instr !11
  call void @treeoutput27(%struct.dent*** %sortptr, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %sortptr = alloca %struct.dent**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput27(%struct.dent*** %sortptr, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput27(%struct.dent*** %sortptr, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.cond108  for.end137  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.end137  
After path modifications process path
entry  if.end  if.end4  if.end43  if.end105  for.end137  
Processing call instruction..
Can't handle this operand   %ehtab = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput26(%struct.dent** %ehtab, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput26(%struct.dent** %ehtab, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.end137  for.cond140  for.body143  if.then149  if.end161  
After path modifications process path
for.body143  if.then149  if.end161  
Hash path invariants only
Invariants are
  br label %if.end162, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.cond108  for.end137  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.end137  
After path modifications process path
entry  if.end  if.end4  if.end43  if.end105  for.end137  
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.end137  for.cond140  for.body143  if.end162  for.inc163  
After path modifications process path
for.body143  if.end162  
Hash path invariants only
Invariants are
  br label %for.inc163, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.cond108  for.end137  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.end137  
After path modifications process path
entry  if.end  if.end4  if.end43  if.end105  for.end137  
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.end137  for.cond140  for.end165  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.cond108  for.end137  for.end165  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.end137  for.end165  for.cond167  for.body170  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.end137  for.end165  
After path modifications process path
entry  if.end  if.end4  if.end43  if.end105  for.end137  for.end165  
Processing call instruction..
Can't handle this operand   %sortptr = alloca %struct.dent**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput29(%struct.dent*** %sortptr, i32* %pdictsize, %struct.dent*** %sortlist), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %pdictsize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput29(%struct.dent*** %sortptr, i32* %pdictsize, %struct.dent*** %sortlist), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sortlist = alloca %struct.dent**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput29(%struct.dent*** %sortptr, i32* %pdictsize, %struct.dent*** %sortlist), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.end137  for.cond140  for.end165  for.end172  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.cond108  for.end137  for.end165  for.end172  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.end137  for.end165  for.cond167  for.end172  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.end43  if.end105  for.end137  for.end165  for.end172  
After path modifications process path
entry  if.end  if.end4  if.end43  if.end105  for.end137  for.end165  for.end172  
Processing call instruction..
Can't handle this operand   %sortlist = alloca %struct.dent**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput31(%struct.dent*** %sortlist), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  if.end  if.end4  if.else  for.cond8  for.body10  if.then12  
After path modifications process path
for.body10  if.then12  
Hash path invariants only
Invariants are
  br label %if.end13, !control_dep_instr !7, !data_indep_instr !11
  call void @treeoutput3(i32* %pdictsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %pdictsize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput3(i32* %pdictsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.else  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond8, !control_dep_instr !7, !data_indep_instr !11
  call void @treeoutput2(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %lent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput2(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput2(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.else  
After path modifications process path
entry  if.end  if.end4  if.else  
Processing path: entry  if.end  if.end4  if.else  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else  for.cond8  for.body10  if.end13  
After path modifications process path
for.body10  if.end13  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.else  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  call void @treeoutput2(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond8, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %lent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput2(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput2(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.else  
After path modifications process path
entry  if.end  if.end4  if.else  
Processing path: entry  if.end  if.end4  if.else  while.cond  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else  for.cond8  for.body10  if.end13  while.end  for.inc  
After path modifications process path
for.body10  if.end13  while.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.else  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  call void @treeoutput2(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond8, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %lent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput2(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput2(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.else  
After path modifications process path
entry  if.end  if.end4  if.else  
Processing path: entry  if.end  if.end4  if.else  for.cond8  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else  for.cond  for.body  for.end  for.inc18  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc18, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond8, !control_dep_instr !7, !data_indep_instr !11
  call void @treeoutput2(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %lent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput2(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput2(%struct.dent** %lent, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.else  
After path modifications process path
entry  if.end  if.end4  if.else  
Processing path: entry  if.end  if.end4  if.else  for.cond  for.end19  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else  for.end19  for.cond22  for.body24  if.then29  land.lhs.true  if.then35  
After path modifications process path
for.body24  if.then29  land.lhs.true  if.then35  
Hash path invariants only
Invariants are
  br label %if.end37, !control_dep_instr !7, !data_indep_instr !11
  call void @treeoutput8(i32* %pdictsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %pdictsize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput8(i32* %pdictsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.else  for.end19  
After path modifications process path
entry  if.end  if.end4  if.else  for.end19  
Processing call instruction..
Can't handle this operand   %ehtab = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput7(%struct.dent** %ehtab, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cent = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput7(%struct.dent** %ehtab, %struct.dent** %cent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.else  for.cond  for.end19  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else  for.end19  for.cond22  for.body24  if.then29  if.end37  
After path modifications process path
for.body24  if.then29  if.end37  
Hash path invariants only
Invariants are
  br label %if.end38, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.else  for.end19  
After path modifications process path
entry  if.end  if.end4  if.else  for.end19  
Processing path: entry  if.end  if.end4  if.else  for.cond  for.end19  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else  for.end19  for.cond22  for.body24  if.end38  for.inc39  
After path modifications process path
for.body24  if.end38  
Hash path invariants only
Invariants are
  br label %for.inc39, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end4  if.else  for.end19  
After path modifications process path
entry  if.end  if.end4  if.else  for.end19  
Processing path: entry  if.end  if.end4  if.else  for.cond  for.end19  for.end41  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else  for.end19  for.cond22  for.end41  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else  for.end19  for.end41  
After path modifications process path
entry  if.end  if.end4  if.else  for.end19  for.end41  
Processing call instruction..
Can't handle this operand   %sortlist = alloca %struct.dent**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput10(%struct.dent*** %sortlist, i32* %pdictsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %pdictsize = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeoutput10(%struct.dent*** %sortlist, i32* %pdictsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Skip. No dependence graph for function pdictcmp
 Processing function:mymalloc
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
 Processing function:myfree
Short range hashing enabled.
Processing path: entry  land.lhs.true  land.lhs.true2  if.then  
After path modifications process path
entry  land.lhs.true  land.lhs.true2  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
 Processing function:xgets
Short range hashing enabled.
Processing path: entry  if.then  if.then2  
After path modifications process path
entry  if.then  if.then2  
Processing path: entry  if.then  if.end  
After path modifications process path
entry  if.then  if.end  
Processing path: entry  if.end4  for.cond  land.lhs.true  if.then11  if.then15  
After path modifications process path
land.lhs.true  if.then11  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end4  
After path modifications process path
entry  if.end4  
Processing path: entry  if.end4  for.cond  land.lhs.true  if.then11  if.end16  
After path modifications process path
land.lhs.true  if.then11  if.end16  
Hash path invariants only
Invariants are
  br label %if.end17, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end4  
After path modifications process path
entry  if.end4  
Processing path: entry  if.end4  for.cond  if.end17  if.then20  if.then23  if.then26  
After path modifications process path
if.end17  if.then20  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end4  if.then26  
After path modifications process path
entry  if.end4  if.then26  
Non numeric pointers (int and float) are skipped:  %retval = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end4  for.cond  if.end17  if.then20  if.then23  if.end27  
After path modifications process path
if.end17  if.then20  if.end27  
Hash path invariants only
Invariants are
  br label %if.end34, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end4  
After path modifications process path
entry  if.end4  
Processing path: entry  if.end4  for.cond  if.end17  if.then20  if.end34  
After path modifications process path
if.end17  if.then20  if.end34  
Hash path invariants only
Invariants are
  br label %if.end35, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end4  
After path modifications process path
entry  if.end4  
Processing path: entry  if.end4  for.cond  if.end17  if.then20  if.else  if.then32  
After path modifications process path
if.end17  if.then20  if.else  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end4  
After path modifications process path
entry  if.end4  
Processing path: entry  if.end4  for.cond  if.end17  if.then20  if.else  if.end33  
After path modifications process path
if.end17  if.then20  if.else  if.end33  
Hash path invariants only
Invariants are
  br label %if.end34, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end4  
After path modifications process path
entry  if.end4  
Processing path: entry  if.end4  for.cond  if.end17  return  
After path modifications process path
if.end17  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end4  return  
After path modifications process path
entry  if.end4  return  
Processing path: entry  if.end4  for.cond  if.end17  if.end35  land.lhs.true38  if.then43  land.lhs.true48  if.then52  if.then54  
After path modifications process path
if.end17  if.then43  land.lhs.true48  if.then52  if.then54  
Hash path invariants only
Invariants are
  br label %if.end56, !control_dep_instr !7, !data_indep_instr !11
  call void @xgets2(%struct._IO_FILE** %f), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %f = alloca %struct._IO_FILE*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @xgets2(%struct._IO_FILE** %f), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end4  
After path modifications process path
entry  if.end4  
Processing path: entry  if.end4  for.cond  if.end17  if.end35  land.lhs.true38  if.then43  land.lhs.true48  if.then52  if.end56  
After path modifications process path
if.end17  if.then43  land.lhs.true48  if.then52  if.end56  
Hash path invariants only
Invariants are
  br label %if.end57, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end4  
After path modifications process path
entry  if.end4  
Processing path: entry  if.end4  for.cond  if.end17  if.end35  land.lhs.true38  if.then43  if.end57  
After path modifications process path
if.end17  if.then43  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end4  
After path modifications process path
entry  if.end4  
Processing path: entry  if.end4  for.cond  if.end17  if.end35  if.end58  for.end  
After path modifications process path
if.end17  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end4  if.end58  for.end  
After path modifications process path
entry  if.end4  if.end58  for.end  
Processing call instruction..
Can't handle this operand   %retval = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @xgets4(i8** %retval, i8** %str.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %str.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @xgets4(i8** %retval, i8** %str.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Extract path function for assertion assert_myfree_path_0
Extract path function for assertion assert_myfree_path_1
Extract path function for assertion assert_myfree_path_2
Extract path function for assertion assert_treeoutput_path_0
Extract path function for assertion assert_treeoutput_path_1
Extract path function for assertion assert_treeoutput_path_2
Extract path function for assertion assert_treeoutput_path_3
Extract path function for assertion assert_treeoutput_path_5
Extract path function for assertion assert_treeoutput_path_6
Extract path function for assertion assert_treeoutput_path_7
Extract path function for assertion assert_treeoutput_path_9
Extract path function for assertion assert_treeoutput_path_10
Extract path function for assertion assert_treeoutput_path_11
Extract path function for assertion assert_treeoutput_path_12
Extract path function for assertion assert_treeoutput_path_13
Extract path function for assertion assert_treeoutput_path_14
Extract path function for assertion assert_treeoutput_path_15
Extract path function for assertion assert_treeoutput_path_17
Extract path function for assertion assert_treeoutput_path_18
Extract path function for assertion assert_treeoutput_path_20
Extract path function for assertion assert_treeoutput_path_21
Extract path function for assertion assert_treeoutput_path_23
Extract path function for assertion assert_treeoutput_path_24
Extract path function for assertion assert_treeoutput_path_26
Extract path function for assertion assert_treeoutput_path_29
Extract path function for assertion assert_treeoutput_path_31
Extract path function for assertion assert_treeoutput_path_32
Extract path function for assertion assert_treeoutput_path_33
Extract path function for assertion assert_treeoutput_path_35
Extract path function for assertion assert_treeoutput_path_36
Extract path function for assertion assert_treeoutput_path_37
Extract path function for assertion assert_treeoutput_path_38
Extract path function for assertion assert_treeoutput_path_39
Extract path function for assertion assert_treeoutput_path_40
Extract path function for assertion assert_treeoutput_path_42
Extract path function for assertion assert_treeoutput_path_43
Extract path function for assertion assert_treeoutput_path_44
Extract path function for assertion assert_treeoutput_path_46
Extract path function for assertion assert_treeoutput_path_47
Extract path function for assertion assert_treeoutput_path_49
Extract path function for assertion assert_treeoutput_path_50
Extract path function for assertion assert_treeoutput_path_52
Extract path function for assertion assert_treeoutput_path_56
Extract path function for assertion assert_treeoutput_path_60
Extract path function for assertion assert_treeoutput_path_61
Extract path function for assertion assert_treeoutput_path_62
Extract path function for assertion assert_treeoutput_path_63
Extract path function for assertion assert_treeoutput_path_65
Extract path function for assertion assert_treeoutput_path_66
Extract path function for assertion assert_treeoutput_path_67
Extract path function for assertion assert_treeoutput_path_69
Extract path function for assertion assert_treeoutput_path_70
Extract path function for assertion assert_treeoutput_path_71
Extract path function for assertion assert_treeoutput_path_73
Extract path function for assertion assert_treeoutput_path_74
Extract path function for assertion assert_treeoutput_path_76
Extract path function for assertion assert_treeoutput_path_77
Extract path function for assertion assert_treeoutput_path_79
Extract path function for assertion assert_treeoutput_path_80
Extract path function for assertion assert_treeoutput_path_82
Extract path function for assertion assert_treeoutput_path_83
Extract path function for assertion assert_treeoutput_path_86
Extract path function for assertion assert_treelookup_path_0
Extract path function for assertion assert_treelookup_path_1
Extract path function for assertion assert_treelookup_path_2
Extract path function for assertion assert_treelookup_path_3
Extract path function for assertion assert_treelookup_path_5
Extract path function for assertion assert_treelookup_path_7
Extract path function for assertion assert_treelookup_path_8
Extract path function for assertion assert_treelookup_path_10
Extract path function for assertion assert_treelookup_path_11
Extract path function for assertion assert_treelookup_path_13
Extract path function for assertion assert_treelookup_path_15
Extract path function for assertion assert_tinsert_path_0
Extract path function for assertion assert_tinsert_path_2
Extract path function for assertion assert_tinsert_path_4
Extract path function for assertion assert_tinsert_path_6
Extract path function for assertion assert_tinsert_path_7
Extract path function for assertion assert_tinsert_path_8
Extract path function for assertion assert_treeinsert_path_0
Extract path function for assertion assert_treeinsert_path_1
Extract path function for assertion assert_treeinsert_path_2
Extract path function for assertion assert_treeinsert_path_3
Extract path function for assertion assert_treeinsert_path_4
Extract path function for assertion assert_treeinsert_path_5
Extract path function for assertion assert_treeinsert_path_6
Extract path function for assertion assert_treeinsert_path_7
Extract path function for assertion assert_treeinsert_path_9
Extract path function for assertion assert_treeinsert_path_10
Extract path function for assertion assert_treeinsert_path_11
Extract path function for assertion assert_treeinsert_path_13
Extract path function for assertion assert_treeinsert_path_15
Extract path function for assertion assert_treeinsert_path_17
Extract path function for assertion assert_treeinsert_path_19
Extract path function for assertion assert_treeinsert_path_20
Extract path function for assertion assert_treeinsert_path_22
Extract path function for assertion assert_treeinsert_path_23
Extract path function for assertion assert_treeinsert_path_26
Extract path function for assertion assert_treeinsert_path_27
Extract path function for assertion assert_treeinsert_path_28
Extract path function for assertion assert_treeinsert_path_30
Extract path function for assertion assert_treeinsert_path_31
Extract path function for assertion assert_treeinsert_path_34
Extract path function for assertion assert_treeinsert_path_35
Extract path function for assertion assert_treeinsert_path_37
Extract path function for assertion assert_treeinsert_path_38
Extract path function for assertion assert_treeinsert_path_41
Extract path function for assertion assert_treeinsert_path_44
Extract path function for assertion assert_treeinsert_path_46
Extract path function for assertion assert_TeX_math_check_path_0
Extract path function for assertion assert_TeX_math_check_path_1
Extract path function for assertion assert_TeX_math_check_path_2
Extract path function for assertion assert_TeX_math_check_path_3
Extract path function for assertion assert_TeX_math_check_path_4
Extract path function for assertion assert_TeX_math_check_path_5
Extract path function for assertion assert_checkline_path_0
Extract path function for assertion assert_checkline_path_1
Extract path function for assertion assert_checkline_path_2
Extract path function for assertion assert_checkline_path_4
Extract path function for assertion assert_checkline_path_6
Extract path function for assertion assert_checkline_path_7
Extract path function for assertion assert_checkline_path_8
Extract path function for assertion assert_checkline_path_9
Extract path function for assertion assert_checkline_path_10
Extract path function for assertion assert_checkline_path_12
Extract path function for assertion assert_checkline_path_13
Extract path function for assertion assert_checkline_path_15
Extract path function for assertion assert_checkline_path_16
Extract path function for assertion assert_checkline_path_18
Extract path function for assertion assert_checkline_path_19
Extract path function for assertion assert_checkline_path_21
Extract path function for assertion assert_checkline_path_22
Extract path function for assertion assert_checkline_path_24
Extract path function for assertion assert_checkline_path_25
Extract path function for assertion assert_checkline_path_27
Extract path function for assertion assert_checkline_path_28
Extract path function for assertion assert_checkline_path_30
Extract path function for assertion assert_checkline_path_31
Extract path function for assertion assert_checkline_path_33
Extract path function for assertion assert_checkline_path_34
Extract path function for assertion assert_checkline_path_36
Extract path function for assertion assert_checkline_path_37
Extract path function for assertion assert_checkline_path_39
Extract path function for assertion assert_checkline_path_40
Extract path function for assertion assert_checkline_path_42
Extract path function for assertion assert_checkline_path_43
Extract path function for assertion assert_checkline_path_45
Extract path function for assertion assert_checkline_path_46
Extract path function for assertion assert_checkline_path_48
Extract path function for assertion assert_checkline_path_49
Extract path function for assertion assert_checkline_path_51
Extract path function for assertion assert_checkline_path_52
Extract path function for assertion assert_checkline_path_54
Extract path function for assertion assert_checkline_path_55
Extract path function for assertion assert_checkline_path_57
Extract path function for assertion assert_checkline_path_58
Extract path function for assertion assert_checkline_path_60
Extract path function for assertion assert_checkline_path_62
Extract path function for assertion assert_checkline_path_64
Extract path function for assertion assert_checkline_path_65
Extract path function for assertion assert_checkline_path_66
Extract path function for assertion assert_checkline_path_68
Extract path function for assertion assert_checkline_path_70
Extract path function for assertion assert_checkline_path_72
Extract path function for assertion assert_checkline_path_73
Extract path function for assertion assert_checkline_path_75
Extract path function for assertion assert_checkline_path_76
Extract path function for assertion assert_checkline_path_78
Extract path function for assertion assert_checkline_path_79
Extract path function for assertion assert_checkline_path_81
Extract path function for assertion assert_checkline_path_82
Extract path function for assertion assert_checkline_path_84
Extract path function for assertion assert_checkline_path_85
Extract path function for assertion assert_checkline_path_87
Extract path function for assertion assert_checkline_path_88
Extract path function for assertion assert_checkline_path_89
Extract path function for assertion assert_checkline_path_90
Extract path function for assertion assert_checkline_path_91
Extract path function for assertion assert_checkline_path_93
Extract path function for assertion assert_checkline_path_94
Extract path function for assertion assert_checkline_path_95
Extract path function for assertion assert_checkline_path_97
Extract path function for assertion assert_checkline_path_99
Extract path function for assertion assert_checkline_path_101
Extract path function for assertion assert_checkline_path_103
Extract path function for assertion assert_checkline_path_104
Extract path function for assertion assert_checkline_path_105
Extract path function for assertion assert_checkline_path_106
Extract path function for assertion assert_checkline_path_107
Extract path function for assertion assert_checkline_path_108
Extract path function for assertion assert_checkline_path_110
Extract path function for assertion assert_checkline_path_112
Extract path function for assertion assert_checkline_path_113
Extract path function for assertion assert_checkline_path_114
Extract path function for assertion assert_checkline_path_115
Extract path function for assertion assert_checkline_path_116
Extract path function for assertion assert_checkline_path_117
Extract path function for assertion assert_checkline_path_119
Extract path function for assertion assert_checkline_path_120
Extract path function for assertion assert_checkline_path_122
Extract path function for assertion assert_checkline_path_123
Extract path function for assertion assert_checkline_path_125
Extract path function for assertion assert_checkline_path_128
Extract path function for assertion assert_checkline_path_131
Extract path function for assertion assert_checkline_path_134
Extract path function for assertion assert_checkline_path_137
Extract path function for assertion assert_checkline_path_140
Extract path function for assertion assert_checkline_path_141
Extract path function for assertion assert_checkline_path_142
Extract path function for assertion assert_copyout_path_4
Extract path function for assertion assert_ins_root_cap_path_1
Extract path function for assertion assert_ins_root_cap_path_3
Extract path function for assertion assert_ins_root_cap_path_5
Extract path function for assertion assert_ins_root_cap_path_7
Extract path function for assertion assert_TeX_LR_check_path_0
Extract path function for assertion assert_TeX_LR_check_path_1
Extract path function for assertion assert_TeX_LR_check_path_2
Extract path function for assertion assert_TeX_LR_check_path_3
Extract path function for assertion assert_TeX_LR_check_path_4
Extract path function for assertion assert_TeX_LR_check_path_5
Extract path function for assertion assert_TeX_LR_check_path_6
Extract path function for assertion assert_TeX_LR_check_path_7
Extract path function for assertion assert_save_root_cap_path_0
Extract path function for assertion assert_save_root_cap_path_1
Extract path function for assertion assert_save_root_cap_path_2
Extract path function for assertion assert_save_root_cap_path_4
Extract path function for assertion assert_save_root_cap_path_5
Extract path function for assertion assert_save_root_cap_path_6
Extract path function for assertion assert_save_root_cap_path_8
Extract path function for assertion assert_save_root_cap_path_11
Extract path function for assertion assert_save_root_cap_path_13
Extract path function for assertion assert_save_root_cap_path_14
Extract path function for assertion assert_save_root_cap_path_17
Extract path function for assertion assert_save_root_cap_path_20
Extract path function for assertion assert_save_root_cap_path_24
Extract path function for assertion assert_save_root_cap_path_28
Extract path function for assertion assert_save_root_cap_path_29
Extract path function for assertion assert_save_root_cap_path_32
Extract path function for assertion assert_save_root_cap_path_36
Extract path function for assertion assert_save_root_cap_path_40
Extract path function for assertion assert_save_root_cap_path_41
Extract path function for assertion assert_save_root_cap_path_44
Extract path function for assertion assert_save_root_cap_path_48
Extract path function for assertion assert_save_root_cap_path_52
Extract path function for assertion assert_save_root_cap_path_56
Extract path function for assertion assert_save_root_cap_path_59
Extract path function for assertion assert_save_root_cap_path_62
Extract path function for assertion assert_save_root_cap_path_65
Extract path function for assertion assert_save_root_cap_path_66
Extract path function for assertion assert_save_root_cap_path_69
Extract path function for assertion assert_save_root_cap_path_70
Extract path function for assertion assert_save_root_cap_path_73
Extract path function for assertion assert_save_root_cap_path_74
Extract path function for assertion assert_save_root_cap_path_77
Extract path function for assertion assert_save_root_cap_path_78
Extract path function for assertion assert_save_root_cap_path_81
Extract path function for assertion assert_save_root_cap_path_82
Extract path function for assertion assert_save_root_cap_path_85
Extract path function for assertion assert_save_root_cap_path_86
Extract path function for assertion assert_save_root_cap_path_89
Extract path function for assertion assert_save_root_cap_path_90
Extract path function for assertion assert_save_root_cap_path_94
Extract path function for assertion assert_save_root_cap_path_95
Extract path function for assertion assert_save_root_cap_path_96
Extract path function for assertion assert_save_root_cap_path_99
Extract path function for assertion assert_save_root_cap_path_100
Extract path function for assertion assert_save_root_cap_path_104
Extract path function for assertion assert_save_root_cap_path_105
Extract path function for assertion assert_save_root_cap_path_106
Extract path function for assertion assert_save_root_cap_path_109
Extract path function for assertion assert_save_root_cap_path_110
Extract path function for assertion assert_save_root_cap_path_113
Extract path function for assertion assert_save_root_cap_path_114
Extract path function for assertion assert_save_root_cap_path_117
Extract path function for assertion assert_save_root_cap_path_118
Extract path function for assertion assert_save_root_cap_path_122
Extract path function for assertion assert_save_root_cap_path_123
Extract path function for assertion assert_save_root_cap_path_124
Extract path function for assertion assert_save_root_cap_path_127
Extract path function for assertion assert_save_root_cap_path_128
Extract path function for assertion assert_save_root_cap_path_132
Extract path function for assertion assert_save_root_cap_path_133
Extract path function for assertion assert_save_root_cap_path_137
Extract path function for assertion assert_save_root_cap_path_141
Extract path function for assertion assert_save_root_cap_path_145
Extract path function for assertion assert_save_root_cap_path_149
Extract path function for assertion assert_trydict_path_0
Extract path function for assertion assert_trydict_path_1
Extract path function for assertion assert_trydict_path_2
Extract path function for assertion assert_trydict_path_3
Extract path function for assertion assert_transposedletter_path_0
Extract path function for assertion assert_transposedletter_path_2
Extract path function for assertion assert_transposedletter_path_4
Extract path function for assertion assert_insert_path_1
Extract path function for assertion assert_insert_path_3
Extract path function for assertion assert_insert_path_5
Extract path function for assertion assert_insert_path_7
Extract path function for assertion assert_insert_path_9
Extract path function for assertion assert_insert_path_11
Extract path function for assertion assert_missingspace_path_0
Extract path function for assertion assert_missingspace_path_1
Extract path function for assertion assert_missingspace_path_3
Extract path function for assertion assert_missingspace_path_4
Extract path function for assertion assert_missingspace_path_5
Extract path function for assertion assert_missingspace_path_7
Extract path function for assertion assert_missingspace_path_8
Extract path function for assertion assert_missingspace_path_9
Extract path function for assertion assert_missingspace_path_10
Extract path function for assertion assert_missingspace_path_11
Extract path function for assertion assert_missingspace_path_12
Extract path function for assertion assert_missingspace_path_13
Extract path function for assertion assert_missingspace_path_15
Extract path function for assertion assert_missingspace_path_16
Extract path function for assertion assert_missingspace_path_17
Extract path function for assertion assert_missingspace_path_18
Extract path function for assertion assert_missingspace_path_20
Extract path function for assertion assert_missingspace_path_21
Extract path function for assertion assert_missingspace_path_22
Extract path function for assertion assert_missingspace_path_23
Extract path function for assertion assert_missingspace_path_24
Extract path function for assertion assert_wrongletter_path_0
Extract path function for assertion assert_wrongletter_path_1
Extract path function for assertion assert_wrongletter_path_2
Extract path function for assertion assert_wrongletter_path_4
Extract path function for assertion assert_wrongletter_path_5
Extract path function for assertion assert_wrongletter_path_6
Extract path function for assertion assert_wrongletter_path_7
Extract path function for assertion assert_wrongletter_path_8
Extract path function for assertion assert_wrongletter_path_10
Extract path function for assertion assert_wrongletter_path_11
Extract path function for assertion assert_wrongletter_path_12
Extract path function for assertion assert_wrongletter_path_13
Extract path function for assertion assert_wrongletter_path_14
Extract path function for assertion assert_wrongletter_path_15
Extract path function for assertion assert_wrongletter_path_16
Extract path function for assertion assert_wrongletter_path_17
Extract path function for assertion assert_wrongletter_path_18
Extract path function for assertion assert_wrongletter_path_19
Extract path function for assertion assert_wrongletter_path_20
Extract path function for assertion assert_wrongletter_path_22
Extract path function for assertion assert_wrongletter_path_23
Extract path function for assertion assert_wrongletter_path_25
Extract path function for assertion assert_correct_path_0
Extract path function for assertion assert_correct_path_1
Extract path function for assertion assert_correct_path_3
Extract path function for assertion assert_correct_path_4
Extract path function for assertion assert_correct_path_5
Extract path function for assertion assert_correct_path_6
Extract path function for assertion assert_correct_path_7
Extract path function for assertion assert_correct_path_8
Extract path function for assertion assert_correct_path_9
Extract path function for assertion assert_correct_path_10
Extract path function for assertion assert_correct_path_11
Extract path function for assertion assert_correct_path_12
Extract path function for assertion assert_correct_path_13
Extract path function for assertion assert_correct_path_14
Extract path function for assertion assert_correct_path_15
Extract path function for assertion assert_correct_path_16
Extract path function for assertion assert_correct_path_17
Extract path function for assertion assert_correct_path_18
Extract path function for assertion assert_correct_path_19
Extract path function for assertion assert_correct_path_20
Extract path function for assertion assert_correct_path_21
Extract path function for assertion assert_correct_path_22
Extract path function for assertion assert_correct_path_23
Extract path function for assertion assert_correct_path_24
Extract path function for assertion assert_correct_path_27
Extract path function for assertion assert_correct_path_28
Extract path function for assertion assert_correct_path_30
Extract path function for assertion assert_correct_path_31
Extract path function for assertion assert_correct_path_35
Extract path function for assertion assert_correct_path_36
Extract path function for assertion assert_correct_path_40
Extract path function for assertion assert_correct_path_41
Extract path function for assertion assert_correct_path_45
Extract path function for assertion assert_correct_path_46
Extract path function for assertion assert_correct_path_50
Extract path function for assertion assert_correct_path_51
Extract path function for assertion assert_correct_path_56
Extract path function for assertion assert_correct_path_57
Extract path function for assertion assert_correct_path_58
Extract path function for assertion assert_correct_path_59
Extract path function for assertion assert_correct_path_60
Extract path function for assertion assert_correct_path_64
Extract path function for assertion assert_correct_path_65
Extract path function for assertion assert_correct_path_69
Extract path function for assertion assert_correct_path_70
Extract path function for assertion assert_correct_path_74
Extract path function for assertion assert_correct_path_75
Extract path function for assertion assert_correct_path_79
Extract path function for assertion assert_correct_path_80
Extract path function for assertion assert_correct_path_84
Extract path function for assertion assert_correct_path_85
Extract path function for assertion assert_correct_path_89
Extract path function for assertion assert_correct_path_90
Extract path function for assertion assert_correct_path_94
Extract path function for assertion assert_correct_path_95
Extract path function for assertion assert_correct_path_99
Extract path function for assertion assert_correct_path_100
Extract path function for assertion assert_correct_path_104
Extract path function for assertion assert_correct_path_105
Extract path function for assertion assert_correct_path_109
Extract path function for assertion assert_correct_path_110
Extract path function for assertion assert_correct_path_114
Extract path function for assertion assert_correct_path_115
Extract path function for assertion assert_correct_path_119
Extract path function for assertion assert_correct_path_120
Extract path function for assertion assert_correct_path_124
Extract path function for assertion assert_correct_path_125
Extract path function for assertion assert_correct_path_129
Extract path function for assertion assert_correct_path_130
Extract path function for assertion assert_correct_path_134
Extract path function for assertion assert_correct_path_135
Extract path function for assertion assert_correct_path_139
Extract path function for assertion assert_correct_path_140
Extract path function for assertion assert_correct_path_144
Extract path function for assertion assert_correct_path_145
Extract path function for assertion assert_correct_path_149
Extract path function for assertion assert_correct_path_150
Extract path function for assertion assert_correct_path_154
Extract path function for assertion assert_correct_path_155
Extract path function for assertion assert_correct_path_159
Extract path function for assertion assert_correct_path_160
Extract path function for assertion assert_correct_path_164
Extract path function for assertion assert_correct_path_165
Extract path function for assertion assert_correct_path_168
Extract path function for assertion assert_correct_path_169
Extract path function for assertion assert_correct_path_170
Extract path function for assertion assert_correct_path_173
Extract path function for assertion assert_correct_path_174
Extract path function for assertion assert_correct_path_175
Extract path function for assertion assert_correct_path_178
Extract path function for assertion assert_correct_path_179
Extract path function for assertion assert_correct_path_180
Extract path function for assertion assert_correct_path_183
Extract path function for assertion assert_correct_path_184
Extract path function for assertion assert_correct_path_185
Extract path function for assertion assert_correct_path_189
Extract path function for assertion assert_correct_path_190
Extract path function for assertion assert_correct_path_194
Extract path function for assertion assert_correct_path_195
Extract path function for assertion assert_correct_path_198
Extract path function for assertion assert_correct_path_199
Extract path function for assertion assert_correct_path_200
Extract path function for assertion assert_correct_path_203
Extract path function for assertion assert_correct_path_204
Extract path function for assertion assert_correct_path_205
Extract path function for assertion assert_correct_path_209
Extract path function for assertion assert_correct_path_210
Extract path function for assertion assert_correct_path_214
Extract path function for assertion assert_correct_path_215
Extract path function for assertion assert_correct_path_219
Extract path function for assertion assert_correct_path_220
Extract path function for assertion assert_treeinit_path_0
Extract path function for assertion assert_treeinit_path_1
Extract path function for assertion assert_treeinit_path_2
Extract path function for assertion assert_treeinit_path_3
Extract path function for assertion assert_treeinit_path_4
Extract path function for assertion assert_treeinit_path_5
Extract path function for assertion assert_treeinit_path_6
Extract path function for assertion assert_treeinit_path_7
Extract path function for assertion assert_treeinit_path_8
Extract path function for assertion assert_treeinit_path_9
Extract path function for assertion assert_treeinit_path_10
Extract path function for assertion assert_treeinit_path_11
Extract path function for assertion assert_treeinit_path_12
Extract path function for assertion assert_treeinit_path_13
Extract path function for assertion assert_treeinit_path_14
Extract path function for assertion assert_treeinit_path_15
Extract path function for assertion assert_treeinit_path_16
Extract path function for assertion assert_treeinit_path_17
Extract path function for assertion assert_treeinit_path_18
Extract path function for assertion assert_treeinit_path_19
Extract path function for assertion assert_treeinit_path_20
Extract path function for assertion assert_treeinit_path_21
Extract path function for assertion assert_treeinit_path_22
Extract path function for assertion assert_missingletter_path_0
Extract path function for assertion assert_missingletter_path_1
Extract path function for assertion assert_missingletter_path_4
Extract path function for assertion assert_missingletter_path_6
Extract path function for assertion assert_missingletter_path_7
Extract path function for assertion assert_missingletter_path_9
Extract path function for assertion assert_missingletter_path_10
Extract path function for assertion assert_missingletter_path_12
Extract path function for assertion assert_missingletter_path_13
Extract path function for assertion assert_missingletter_path_16
Extract path function for assertion assert_missingletter_path_21
Extract path function for assertion assert_missingletter_path_22
Extract path function for assertion assert_missingletter_path_25
Extract path function for assertion assert_missingletter_path_27
Extract path function for assertion assert_missingletter_path_28
Extract path function for assertion assert_missingletter_path_30
Extract path function for assertion assert_missingletter_path_31
Extract path function for assertion assert_missingletter_path_33
Extract path function for assertion assert_missingletter_path_34
Extract path function for assertion assert_expand_pre_path_0
Extract path function for assertion assert_expand_pre_path_1
Extract path function for assertion assert_expand_pre_path_2
Extract path function for assertion assert_expand_pre_path_3
Extract path function for assertion assert_expand_pre_path_5
Extract path function for assertion assert_pr_suf_expansion_path_0
Extract path function for assertion assert_pr_suf_expansion_path_1
Extract path function for assertion assert_pr_suf_expansion_path_2
Extract path function for assertion assert_pr_suf_expansion_path_4
Extract path function for assertion assert_pr_suf_expansion_path_6
Extract path function for assertion assert_pr_suf_expansion_path_8
Extract path function for assertion assert_pr_suf_expansion_path_10
Extract path function for assertion assert_pr_suf_expansion_path_12
Extract path function for assertion assert_pr_suf_expansion_path_14
Extract path function for assertion assert_pr_suf_expansion_path_16
Extract path function for assertion assert_pr_suf_expansion_path_18
Extract path function for assertion assert_wrongcapital_path_0
Extract path function for assertion assert_wrongcapital_path_1
Extract path function for assertion assert_suf_list_chk_path_0
Extract path function for assertion assert_suf_list_chk_path_4
Extract path function for assertion assert_suf_list_chk_path_6
Extract path function for assertion assert_suf_list_chk_path_8
Extract path function for assertion assert_suf_list_chk_path_11
Extract path function for assertion assert_suf_list_chk_path_14
Extract path function for assertion assert_suf_list_chk_path_17
Extract path function for assertion assert_suf_list_chk_path_20
Extract path function for assertion assert_suf_list_chk_path_23
Extract path function for assertion assert_suf_list_chk_path_26
Extract path function for assertion assert_suf_list_chk_path_29
Extract path function for assertion assert_suf_list_chk_path_32
Extract path function for assertion assert_suf_list_chk_path_35
Extract path function for assertion assert_suf_list_chk_path_38
Extract path function for assertion assert_suf_list_chk_path_41
Extract path function for assertion assert_suf_list_chk_path_44
Extract path function for assertion assert_suf_list_chk_path_47
Extract path function for assertion assert_suf_list_chk_path_50
Extract path function for assertion assert_suf_list_chk_path_53
Extract path function for assertion assert_suf_list_chk_path_56
Extract path function for assertion assert_suf_list_chk_path_59
Extract path function for assertion assert_suf_list_chk_path_62
Extract path function for assertion assert_suf_list_chk_path_65
Extract path function for assertion assert_suf_list_chk_path_68
Extract path function for assertion assert_suf_list_chk_path_71
Extract path function for assertion assert_suf_list_chk_path_74
Extract path function for assertion assert_suf_list_chk_path_76
Extract path function for assertion assert_suf_list_chk_path_80
Extract path function for assertion assert_ins_cap_path_1
Extract path function for assertion assert_ins_cap_path_3
Extract path function for assertion assert_ins_cap_path_5
Extract path function for assertion assert_ins_cap_path_7
Extract path function for assertion assert_stop_path_0
Extract path function for assertion assert_entryhasaffixes_path_0
Extract path function for assertion assert_entryhasaffixes_path_1
Extract path function for assertion assert_entryhasaffixes_path_2
Extract path function for assertion assert_entryhasaffixes_path_3
Extract path function for assertion assert_makepossibilities_path_0
Extract path function for assertion assert_makepossibilities_path_1
Extract path function for assertion assert_makepossibilities_path_2
Extract path function for assertion assert_makepossibilities_path_3
Extract path function for assertion assert_makepossibilities_path_4
Extract path function for assertion assert_makepossibilities_path_5
Extract path function for assertion assert_makepossibilities_path_6
Extract path function for assertion assert_makepossibilities_path_7
Extract path function for assertion assert_makepossibilities_path_8
Extract path function for assertion assert_makepossibilities_path_9
Extract path function for assertion assert_makepossibilities_path_10
Extract path function for assertion assert_makepossibilities_path_11
Extract path function for assertion assert_makepossibilities_path_12
Extract path function for assertion assert_makepossibilities_path_13
Extract path function for assertion assert_makepossibilities_path_14
Extract path function for assertion assert_makepossibilities_path_15
Extract path function for assertion assert_makepossibilities_path_16
Extract path function for assertion assert_makepossibilities_path_17
Extract path function for assertion assert_makepossibilities_path_18
Extract path function for assertion assert_makepossibilities_path_19
Extract path function for assertion assert_makepossibilities_path_20
Extract path function for assertion assert_makepossibilities_path_21
Extract path function for assertion assert_makepossibilities_path_22
Extract path function for assertion assert_makepossibilities_path_23
Extract path function for assertion assert_makepossibilities_path_24
Extract path function for assertion assert_makepossibilities_path_25
Extract path function for assertion assert_lookup_path_0
Extract path function for assertion assert_lookup_path_1
Extract path function for assertion assert_lookup_path_2
Extract path function for assertion assert_lookup_path_4
Extract path function for assertion assert_lookup_path_5
Extract path function for assertion assert_lookup_path_7
Extract path function for assertion assert_lookup_path_8
Extract path function for assertion assert_lookup_path_10
Extract path function for assertion assert_lookup_path_12
Extract path function for assertion assert_lookup_path_14
Extract path function for assertion assert_done_path_0
Extract path function for assertion assert_done_path_1
Extract path function for assertion assert_done_path_2
Extract path function for assertion assert_pfx_list_chk_path_0
Extract path function for assertion assert_pfx_list_chk_path_4
Extract path function for assertion assert_pfx_list_chk_path_6
Extract path function for assertion assert_pfx_list_chk_path_9
Extract path function for assertion assert_pfx_list_chk_path_12
Extract path function for assertion assert_pfx_list_chk_path_15
Extract path function for assertion assert_pfx_list_chk_path_18
Extract path function for assertion assert_pfx_list_chk_path_21
Extract path function for assertion assert_pfx_list_chk_path_24
Extract path function for assertion assert_pfx_list_chk_path_27
Extract path function for assertion assert_pfx_list_chk_path_30
Extract path function for assertion assert_pfx_list_chk_path_33
Extract path function for assertion assert_pfx_list_chk_path_36
Extract path function for assertion assert_pfx_list_chk_path_39
Extract path function for assertion assert_pfx_list_chk_path_42
Extract path function for assertion assert_pfx_list_chk_path_45
Extract path function for assertion assert_pfx_list_chk_path_48
Extract path function for assertion assert_pfx_list_chk_path_51
Extract path function for assertion assert_pfx_list_chk_path_54
Extract path function for assertion assert_pfx_list_chk_path_58
Extract path function for assertion assert_compoundgood_path_0
Extract path function for assertion assert_compoundgood_path_1
Extract path function for assertion assert_compoundgood_path_2
Extract path function for assertion assert_compoundgood_path_3
Extract path function for assertion assert_compoundgood_path_4
Extract path function for assertion assert_compoundgood_path_5
Extract path function for assertion assert_compoundgood_path_6
Extract path function for assertion assert_compoundgood_path_7
Extract path function for assertion assert_compoundgood_path_8
Extract path function for assertion assert_compoundgood_path_9
Extract path function for assertion assert_compoundgood_path_10
Extract path function for assertion assert_compoundgood_path_11
Extract path function for assertion assert_compoundgood_path_12
Extract path function for assertion assert_compoundgood_path_13
Extract path function for assertion assert_compoundgood_path_14
Extract path function for assertion assert_compoundgood_path_15
Extract path function for assertion assert_compoundgood_path_16
Extract path function for assertion assert_compoundgood_path_18
Extract path function for assertion assert_extraletter_path_0
Extract path function for assertion assert_extraletter_path_1
Extract path function for assertion assert_extraletter_path_2
Extract path function for assertion assert_extraletter_path_3
Extract path function for assertion assert_extraletter_path_4
Extract path function for assertion assert_extraletter_path_5
Extract path function for assertion assert_extraletter_path_6
Extract path function for assertion assert_extraletter_path_7
Extract path function for assertion assert_main_path_0
Extract path function for assertion assert_main_path_1
Extract path function for assertion assert_main_path_2
Extract path function for assertion assert_main_path_3
Extract path function for assertion assert_main_path_4
Extract path function for assertion assert_main_path_5
Extract path function for assertion assert_main_path_6
Extract path function for assertion assert_main_path_7
Extract path function for assertion assert_main_path_15
Extract path function for assertion assert_main_path_16
Extract path function for assertion assert_main_path_18
Extract path function for assertion assert_main_path_21
Extract path function for assertion assert_main_path_24
Extract path function for assertion assert_main_path_27
Extract path function for assertion assert_main_path_28
Extract path function for assertion assert_main_path_30
Extract path function for assertion assert_main_path_32
Extract path function for assertion assert_main_path_34
Extract path function for assertion assert_main_path_36
Extract path function for assertion assert_main_path_38
Extract path function for assertion assert_main_path_40
Extract path function for assertion assert_main_path_42
Extract path function for assertion assert_main_path_44
Extract path function for assertion assert_main_path_46
Extract path function for assertion assert_main_path_48
Extract path function for assertion assert_main_path_50
Extract path function for assertion assert_main_path_52
Extract path function for assertion assert_main_path_54
Extract path function for assertion assert_main_path_56
Extract path function for assertion assert_main_path_58
Extract path function for assertion assert_main_path_60
Extract path function for assertion assert_main_path_62
Extract path function for assertion assert_main_path_64
Extract path function for assertion assert_main_path_66
Extract path function for assertion assert_main_path_68
Extract path function for assertion assert_main_path_70
Extract path function for assertion assert_main_path_72
Extract path function for assertion assert_main_path_74
Extract path function for assertion assert_main_path_76
Extract path function for assertion assert_main_path_78
Extract path function for assertion assert_main_path_80
Extract path function for assertion assert_main_path_82
Extract path function for assertion assert_main_path_84
Extract path function for assertion assert_main_path_86
Extract path function for assertion assert_main_path_88
Extract path function for assertion assert_main_path_90
Extract path function for assertion assert_main_path_92
Extract path function for assertion assert_main_path_94
Extract path function for assertion assert_main_path_96
Extract path function for assertion assert_main_path_98
Extract path function for assertion assert_main_path_100
Extract path function for assertion assert_main_path_102
Extract path function for assertion assert_main_path_104
Extract path function for assertion assert_main_path_106
Extract path function for assertion assert_main_path_108
Extract path function for assertion assert_main_path_110
Extract path function for assertion assert_main_path_112
Extract path function for assertion assert_main_path_114
Extract path function for assertion assert_main_path_116
Extract path function for assertion assert_main_path_118
Extract path function for assertion assert_main_path_120
Extract path function for assertion assert_main_path_122
Extract path function for assertion assert_main_path_124
Extract path function for assertion assert_main_path_126
Extract path function for assertion assert_main_path_128
Extract path function for assertion assert_main_path_130
Extract path function for assertion assert_main_path_132
Extract path function for assertion assert_main_path_134
Extract path function for assertion assert_main_path_136
Extract path function for assertion assert_main_path_138
Extract path function for assertion assert_main_path_140
Extract path function for assertion assert_main_path_142
Extract path function for assertion assert_main_path_144
Extract path function for assertion assert_main_path_146
Extract path function for assertion assert_main_path_148
Extract path function for assertion assert_main_path_150
Extract path function for assertion assert_main_path_152
Extract path function for assertion assert_main_path_154
Extract path function for assertion assert_main_path_156
Extract path function for assertion assert_main_path_158
Extract path function for assertion assert_main_path_160
Extract path function for assertion assert_main_path_162
Extract path function for assertion assert_main_path_164
Extract path function for assertion assert_main_path_166
Extract path function for assertion assert_main_path_168
Extract path function for assertion assert_main_path_170
Extract path function for assertion assert_main_path_172
Extract path function for assertion assert_main_path_174
Extract path function for assertion assert_main_path_176
Extract path function for assertion assert_main_path_178
Extract path function for assertion assert_main_path_182
Extract path function for assertion assert_main_path_185
Extract path function for assertion assert_main_path_188
Extract path function for assertion assert_main_path_191
Extract path function for assertion assert_main_path_194
Extract path function for assertion assert_main_path_197
Extract path function for assertion assert_main_path_200
Extract path function for assertion assert_main_path_203
Extract path function for assertion assert_main_path_206
Extract path function for assertion assert_main_path_209
Extract path function for assertion assert_main_path_212
Extract path function for assertion assert_main_path_215
Extract path function for assertion assert_main_path_218
Extract path function for assertion assert_main_path_221
Extract path function for assertion assert_main_path_224
Extract path function for assertion assert_main_path_228
Extract path function for assertion assert_main_path_232
Extract path function for assertion assert_main_path_235
Extract path function for assertion assert_main_path_238
Extract path function for assertion assert_main_path_240
Extract path function for assertion assert_usage_path_0
Extract path function for assertion assert_subsetdump_path_0
Extract path function for assertion assert_subsetdump_path_2
Extract path function for assertion assert_subsetdump_path_3
Extract path function for assertion assert_subsetdump_path_5
Extract path function for assertion assert_subsetdump_path_6
Extract path function for assertion assert_subsetdump_path_8
Extract path function for assertion assert_subsetdump_path_9
Extract path function for assertion assert_subsetdump_path_11
Extract path function for assertion assert_subsetdump_path_13
Extract path function for assertion assert_subsetdump_path_15
Extract path function for assertion assert_subsetdump_path_17
Extract path function for assertion assert_subsetdump_path_19
Extract path function for assertion assert_subsetdump_path_20
Extract path function for assertion assert_subsetdump_path_22
Extract path function for assertion assert_subsetdump_path_23
Extract path function for assertion assert_subsetdump_path_25
Extract path function for assertion assert_subsetdump_path_26
Extract path function for assertion assert_subsetdump_path_27
Extract path function for assertion assert_subsetdump_path_29
Extract path function for assertion assert_initckch_path_0
Extract path function for assertion assert_initckch_path_1
Extract path function for assertion assert_initckch_path_2
Extract path function for assertion assert_initckch_path_3
Extract path function for assertion assert_initckch_path_4
Extract path function for assertion assert_initckch_path_5
Extract path function for assertion assert_initckch_path_6
Extract path function for assertion assert_initckch_path_7
Extract path function for assertion assert_initckch_path_8
Extract path function for assertion assert_initckch_path_9
Extract path function for assertion assert_initckch_path_12
Extract path function for assertion assert_initckch_path_13
Extract path function for assertion assert_initckch_path_15
Extract path function for assertion assert_initckch_path_18
Extract path function for assertion assert_initckch_path_19
Extract path function for assertion assert_initckch_path_21
Extract path function for assertion assert_initckch_path_22
Extract path function for assertion assert_initckch_path_24
Extract path function for assertion assert_initckch_path_25
Extract path function for assertion assert_initckch_path_27
Extract path function for assertion assert_initckch_path_28
Extract path function for assertion assert_initckch_path_30
Extract path function for assertion assert_initckch_path_31
Extract path function for assertion assert_initckch_path_33
Extract path function for assertion assert_initckch_path_34
Extract path function for assertion assert_initckch_path_36
Extract path function for assertion assert_initckch_path_37
Extract path function for assertion assert_initckch_path_39
Extract path function for assertion assert_initckch_path_40
Extract path function for assertion assert_initckch_path_42
Extract path function for assertion assert_initckch_path_43
Extract path function for assertion assert_initckch_path_45
Extract path function for assertion assert_initckch_path_46
Extract path function for assertion assert_initckch_path_48
Extract path function for assertion assert_initckch_path_51
Extract path function for assertion assert_initckch_path_53
Extract path function for assertion assert_stringcharlen_path_0
Extract path function for assertion assert_stringcharlen_path_2
Extract path function for assertion assert_stringcharlen_path_3
Extract path function for assertion assert_stringcharlen_path_5
Extract path function for assertion assert_stringcharlen_path_6
Extract path function for assertion assert_stringcharlen_path_8
Extract path function for assertion assert_stringcharlen_path_9
Extract path function for assertion assert_stringcharlen_path_11
Extract path function for assertion assert_stringcharlen_path_12
Extract path function for assertion assert_stringcharlen_path_14
Extract path function for assertion assert_stringcharlen_path_15
Extract path function for assertion assert_stringcharlen_path_17
Extract path function for assertion assert_stringcharlen_path_18
Extract path function for assertion assert_stringcharlen_path_20
Extract path function for assertion assert_stringcharlen_path_21
Extract path function for assertion assert_stringcharlen_path_23
Extract path function for assertion assert_stringcharlen_path_24
Extract path function for assertion assert_stringcharlen_path_26
Extract path function for assertion assert_stringcharlen_path_27
Extract path function for assertion assert_stringcharlen_path_29
Extract path function for assertion assert_stringcharlen_path_30
Extract path function for assertion assert_stringcharlen_path_32
Extract path function for assertion assert_stringcharlen_path_33
Extract path function for assertion assert_stringcharlen_path_35
Extract path function for assertion assert_stringcharlen_path_37
Extract path function for assertion assert_stringcharlen_path_38
Extract path function for assertion assert_setdump_path_0
Extract path function for assertion assert_setdump_path_1
Extract path function for assertion assert_setdump_path_3
Extract path function for assertion assert_setdump_path_5
Extract path function for assertion assert_setdump_path_7
Extract path function for assertion assert_setdump_path_9
Extract path function for assertion assert_setdump_path_11
Extract path function for assertion assert_setdump_path_13
Extract path function for assertion assert_setdump_path_15
Extract path function for assertion assert_setdump_path_17
Extract path function for assertion assert_checkfile_path_1
Extract path function for assertion assert_checkfile_path_5
Extract path function for assertion assert_checkfile_path_7
Extract path function for assertion assert_checkfile_path_12
Extract path function for assertion assert_checkfile_path_19
Extract path function for assertion assert_checkfile_path_23
Extract path function for assertion assert_checkfile_path_24
Extract path function for assertion assert_checkfile_path_25
Extract path function for assertion assert_checkfile_path_27
Extract path function for assertion assert_checkfile_path_29
Extract path function for assertion assert_checkfile_path_30
Extract path function for assertion assert_checkfile_path_32
Extract path function for assertion assert_checkfile_path_35
Extract path function for assertion assert_checkfile_path_37
Extract path function for assertion assert_checkfile_path_40
Extract path function for assertion assert_checkfile_path_42
Extract path function for assertion assert_checkfile_path_45
Extract path function for assertion assert_checkfile_path_47
Extract path function for assertion assert_checkfile_path_52
Extract path function for assertion assert_expandmode_path_0
Extract path function for assertion assert_expandmode_path_2
Extract path function for assertion assert_expandmode_path_4
Extract path function for assertion assert_expandmode_path_6
Extract path function for assertion assert_expandmode_path_8
Extract path function for assertion assert_expandmode_path_11
Extract path function for assertion assert_expandmode_path_13
Extract path function for assertion assert_expandmode_path_14
Extract path function for assertion assert_expandmode_path_16
Extract path function for assertion assert_expandmode_path_17
Extract path function for assertion assert_expandmode_path_20
Extract path function for assertion assert_expandmode_path_22
Extract path function for assertion assert_expandmode_path_23
Extract path function for assertion assert_expandmode_path_26
Extract path function for assertion assert_expandmode_path_29
Extract path function for assertion assert_expandmode_path_32
Extract path function for assertion assert_expandmode_path_34
Extract path function for assertion assert_expandmode_path_36
Extract path function for assertion assert_expandmode_path_38
Extract path function for assertion assert_expandmode_path_40
Extract path function for assertion assert_addvheader_path_0
Extract path function for assertion assert_addvheader_path_1
Extract path function for assertion assert_addvheader_path_2
Extract path function for assertion assert_addvheader_path_3
Extract path function for assertion assert_addvheader_path_4
Extract path function for assertion assert_addvheader_path_5
Extract path function for assertion assert_shellescape_path_2
Extract path function for assertion assert_shellescape_path_5
Extract path function for assertion assert_shellescape_path_6
Extract path function for assertion assert_shellescape_path_9
Extract path function for assertion assert_shellescape_path_13
Extract path function for assertion assert_shellescape_path_15
Extract path function for assertion assert_shellescape_path_17
Extract path function for assertion assert_shellescape_path_19
Extract path function for assertion assert_shellescape_path_21
Extract path function for assertion assert_shellescape_path_24
Extract path function for assertion assert_shellescape_path_26
Extract path function for assertion assert_shellescape_path_29
Extract path function for assertion assert_shellescape_path_32
Extract path function for assertion assert_shellescape_path_34
Extract path function for assertion assert_shellescape_path_36
Extract path function for assertion assert_shellescape_path_38
Extract path function for assertion assert_shellescape_path_40
Extract path function for assertion assert_shellescape_path_42
Extract path function for assertion assert_shellescape_path_45
Extract path function for assertion assert_shellescape_path_48
Extract path function for assertion assert_shellescape_path_50
Extract path function for assertion assert_shellescape_path_52
Extract path function for assertion assert_ichartostr_path_2
Extract path function for assertion assert_ichartostr_path_7
Extract path function for assertion assert_ichartostr_path_10
Extract path function for assertion assert_ichartostr_path_12
Extract path function for assertion assert_ichartostr_path_15
Extract path function for assertion assert_ichartostr_path_18
Extract path function for assertion assert_skipoverword_path_1
Extract path function for assertion assert_skipoverword_path_3
Extract path function for assertion assert_skipoverword_path_5
Extract path function for assertion assert_skipoverword_path_7
Extract path function for assertion assert_skipoverword_path_9
Extract path function for assertion assert_skipoverword_path_10
Extract path function for assertion assert_skipoverword_path_12
Extract path function for assertion assert_skipoverword_path_14
Extract path function for assertion assert_skipoverword_path_16
Extract path function for assertion assert_skipoverword_path_18
Extract path function for assertion assert_skipoverword_path_20
Extract path function for assertion assert_skipoverword_path_24
Extract path function for assertion assert_update_file_path_0
Extract path function for assertion assert_update_file_path_1
Extract path function for assertion assert_update_file_path_2
Extract path function for assertion assert_update_file_path_3
Extract path function for assertion assert_update_file_path_4
Extract path function for assertion assert_update_file_path_5
Extract path function for assertion assert_update_file_path_7
Extract path function for assertion assert_update_file_path_9
Extract path function for assertion assert_update_file_path_10
Extract path function for assertion assert_save_cap_path_0
Extract path function for assertion assert_save_cap_path_1
Extract path function for assertion assert_save_cap_path_2
Extract path function for assertion assert_save_cap_path_3
Extract path function for assertion assert_save_cap_path_4
Extract path function for assertion assert_save_cap_path_5
Extract path function for assertion assert_save_cap_path_6
Extract path function for assertion assert_save_cap_path_7
Extract path function for assertion assert_save_cap_path_9
Extract path function for assertion assert_save_cap_path_10
Extract path function for assertion assert_save_cap_path_11
Extract path function for assertion assert_save_cap_path_12
Extract path function for assertion assert_save_cap_path_13
Extract path function for assertion assert_save_cap_path_15
Extract path function for assertion assert_dofile_path_0
Extract path function for assertion assert_dofile_path_1
Extract path function for assertion assert_dofile_path_2
Extract path function for assertion assert_dofile_path_3
Extract path function for assertion assert_dofile_path_4
Extract path function for assertion assert_dofile_path_5
Extract path function for assertion assert_dofile_path_6
Extract path function for assertion assert_dofile_path_7
Extract path function for assertion assert_dofile_path_8
Extract path function for assertion assert_dofile_path_9
Extract path function for assertion assert_dofile_path_10
Extract path function for assertion assert_givehelp_path_0
Extract path function for assertion assert_givehelp_path_2
Extract path function for assertion assert_givehelp_path_4
Extract path function for assertion assert_givehelp_path_5
Extract path function for assertion assert_givehelp_path_6
Extract path function for assertion assert_printichar_path_0
Extract path function for assertion assert_printichar_path_1
Extract path function for assertion assert_printichar_path_2
Extract path function for assertion assert_TeX_strncmp_path_0
Extract path function for assertion assert_TeX_strncmp_path_1
Extract path function for assertion assert_TeX_strncmp_path_2
Extract path function for assertion assert_TeX_strncmp_path_3
Extract path function for assertion assert_skiptoword_path_2
Extract path function for assertion assert_skiptoword_path_4
Extract path function for assertion assert_skiptoword_path_6
Extract path function for assertion assert_skiptoword_path_10
Extract path function for assertion assert_skiptoword_path_12
Extract path function for assertion assert_skiptoword_path_16
Extract path function for assertion assert_skiptoword_path_20
Extract path function for assertion assert_skiptoword_path_22
Extract path function for assertion assert_skiptoword_path_24
Extract path function for assertion assert_skiptoword_path_28
Extract path function for assertion assert_skiptoword_path_29
Extract path function for assertion assert_skiptoword_path_31
Extract path function for assertion assert_skiptoword_path_32
Extract path function for assertion assert_skiptoword_path_35
Extract path function for assertion assert_skiptoword_path_38
Extract path function for assertion assert_skiptoword_path_41
Extract path function for assertion assert_skiptoword_path_44
Extract path function for assertion assert_skiptoword_path_46
Extract path function for assertion assert_skiptoword_path_48
Extract path function for assertion assert_skiptoword_path_50
Extract path function for assertion assert_skiptoword_path_52
Extract path function for assertion assert_skiptoword_path_54
Extract path function for assertion assert_skiptoword_path_56
Extract path function for assertion assert_skiptoword_path_60
Extract path function for assertion assert_skiptoword_path_62
Extract path function for assertion assert_skiptoword_path_64
Extract path function for assertion assert_skiptoword_path_66
Extract path function for assertion assert_skiptoword_path_68
Extract path function for assertion assert_skiptoword_path_70
Extract path function for assertion assert_skiptoword_path_72
Extract path function for assertion assert_skiptoword_path_75
Extract path function for assertion assert_skiptoword_path_84
Extract path function for assertion assert_skiptoword_path_88
Extract path function for assertion assert_skiptoword_path_92
Extract path function for assertion assert_skiptoword_path_94
Extract path function for assertion assert_skiptoword_path_96
Extract path function for assertion assert_skiptoword_path_100
Extract path function for assertion assert_skiptoword_path_102
Extract path function for assertion assert_skiptoword_path_104
Extract path function for assertion assert_skiptoword_path_106
Extract path function for assertion assert_skiptoword_path_110
Extract path function for assertion assert_skiptoword_path_113
Extract path function for assertion assert_skiptoword_path_115
Extract path function for assertion assert_skiptoword_path_117
Extract path function for assertion assert_xgets_path_0
Extract path function for assertion assert_xgets_path_1
Extract path function for assertion assert_xgets_path_3
Extract path function for assertion assert_xgets_path_4
Extract path function for assertion assert_xgets_path_5
Extract path function for assertion assert_xgets_path_7
Extract path function for assertion assert_xgets_path_8
Extract path function for assertion assert_xgets_path_9
Extract path function for assertion assert_xgets_path_10
Extract path function for assertion assert_xgets_path_11
Extract path function for assertion assert_xgets_path_13
Extract path function for assertion assert_xgets_path_14
Extract path function for assertion assert_xgets_path_15
Extract path function for assertion assert_xgets_path_17
Extract path function for assertion assert_xgets_path_18
Extract path function for assertion assert_xgets_path_19
Extract path function for assertion assert_xgets_path_20
Extract path function for assertion assert_xgets_path_21
Extract path function for assertion assert_xgets_path_23
Extract path function for assertion assert_xgets_path_25
Extract path function for assertion assert_TeX_math_end_path_0
Extract path function for assertion assert_TeX_math_end_path_1
Extract path function for assertion assert_TeX_math_end_path_2
Extract path function for assertion assert_TeX_math_end_path_3
Extract path function for assertion assert_TeX_math_end_path_4
Extract path function for assertion assert_TeX_math_end_path_5
Extract path function for assertion assert_TeX_math_end_path_6
Extract path function for assertion assert_TeX_math_end_path_7
Extract path function for assertion assert_TeX_math_end_path_8
Extract path function for assertion assert_linit_path_0
Extract path function for assertion assert_linit_path_1
Extract path function for assertion assert_linit_path_2
Extract path function for assertion assert_linit_path_3
Extract path function for assertion assert_linit_path_4
Extract path function for assertion assert_linit_path_5
Extract path function for assertion assert_linit_path_6
Extract path function for assertion assert_linit_path_7
Extract path function for assertion assert_linit_path_8
Extract path function for assertion assert_linit_path_9
Extract path function for assertion assert_linit_path_10
Extract path function for assertion assert_linit_path_11
Extract path function for assertion assert_linit_path_12
Extract path function for assertion assert_linit_path_13
Extract path function for assertion assert_linit_path_14
Extract path function for assertion assert_linit_path_15
Extract path function for assertion assert_linit_path_16
Extract path function for assertion assert_linit_path_17
Extract path function for assertion assert_linit_path_18
Extract path function for assertion assert_linit_path_19
Extract path function for assertion assert_linit_path_20
Extract path function for assertion assert_linit_path_21
Extract path function for assertion assert_linit_path_22
Extract path function for assertion assert_linit_path_23
Extract path function for assertion assert_linit_path_24
Extract path function for assertion assert_linit_path_25
Extract path function for assertion assert_linit_path_26
Extract path function for assertion assert_linit_path_27
Extract path function for assertion assert_linit_path_29
Extract path function for assertion assert_linit_path_30
Extract path function for assertion assert_linit_path_32
Extract path function for assertion assert_linit_path_33
Extract path function for assertion assert_linit_path_35
Extract path function for assertion assert_linit_path_38
Extract path function for assertion assert_linit_path_39
Extract path function for assertion assert_linit_path_41
Extract path function for assertion assert_linit_path_42
Extract path function for assertion assert_linit_path_43
Extract path function for assertion assert_linit_path_45
Extract path function for assertion assert_linit_path_46
Extract path function for assertion assert_linit_path_47
Extract path function for assertion assert_linit_path_49
Extract path function for assertion assert_linit_path_51
Extract path function for assertion assert_linit_path_53
Extract path function for assertion assert_linit_path_54
Extract path function for assertion assert_linit_path_55
Extract path function for assertion assert_linit_path_57
Extract path function for assertion assert_linit_path_59
Extract path function for assertion assert_linit_path_61
Extract path function for assertion assert_linit_path_62
Extract path function for assertion assert_linit_path_65
Extract path function for assertion assert_linit_path_66
Extract path function for assertion assert_linit_path_69
Extract path function for assertion assert_linit_path_70
Extract path function for assertion assert_linit_path_73
Extract path function for assertion assert_linit_path_77
Extract path function for assertion assert_linit_path_78
Extract path function for assertion assert_linit_path_81
Extract path function for assertion assert_linit_path_82
Extract path function for assertion assert_linit_path_84
Extract path function for assertion assert_linit_path_86
Extract path function for assertion assert_linit_path_87
Extract path function for assertion assert_linit_path_89
Extract path function for assertion assert_linit_path_91
Extract path function for assertion assert_linit_path_94
Extract path function for assertion assert_linit_path_96
Extract path function for assertion assert_linit_path_97
Extract path function for assertion assert_linit_path_99
Extract path function for assertion assert_linit_path_101
Extract path function for assertion assert_linit_path_104
Extract path function for assertion assert_linit_path_106
Extract path function for assertion assert_linit_path_110
Extract path function for assertion assert_linit_path_114
Extract path function for assertion assert_linit_path_118
Extract path function for assertion assert_linit_path_120
Extract path function for assertion assert_linit_path_122
Extract path function for assertion assert_linit_path_126
Extract path function for assertion assert_linit_path_128
Extract path function for assertion assert_linit_path_133
Extract path function for assertion assert_linit_path_136
Extract path function for assertion assert_linit_path_137
Extract path function for assertion assert_linit_path_138
Extract path function for assertion assert_linit_path_139
Extract path function for assertion assert_linit_path_140
Extract path function for assertion assert_linit_path_141
Extract path function for assertion assert_linit_path_142
Extract path function for assertion assert_linit_path_143
Extract path function for assertion assert_linit_path_144
Extract path function for assertion assert_linit_path_145
Extract path function for assertion assert_linit_path_147
Extract path function for assertion assert_linit_path_148
Extract path function for assertion assert_linit_path_149
Extract path function for assertion assert_linit_path_150
Extract path function for assertion assert_TeX_skip_check_path_0
Extract path function for assertion assert_TeX_skip_check_path_1
Extract path function for assertion assert_TeX_skip_check_path_2
Extract path function for assertion assert_TeX_skip_check_path_3
Extract path function for assertion assert_TeX_skip_check_path_4
Extract path function for assertion assert_TeX_skip_check_path_5
Extract path function for assertion assert_TeX_skip_check_path_6
Extract path function for assertion assert_TeX_skip_check_path_7
Extract path function for assertion assert_TeX_skip_check_path_8
Extract path function for assertion assert_TeX_skip_check_path_9
Extract path function for assertion assert_TeX_skip_check_path_11
Extract path function for assertion assert_TeX_skip_check_path_13
Extract path function for assertion assert_TeX_skip_check_path_14
Extract path function for assertion assert_TeX_skip_check_path_16
Extract path function for assertion assert_TeX_skip_check_path_18
Extract path function for assertion assert_TeX_skip_check_path_19
Extract path function for assertion assert_TeX_skip_check_path_20
Extract path function for assertion assert_combine_two_entries_path_0
Extract path function for assertion assert_combine_two_entries_path_1
Extract path function for assertion assert_combine_two_entries_path_2
Extract path function for assertion assert_combine_two_entries_path_3
Extract path function for assertion assert_combine_two_entries_path_4
Extract path function for assertion assert_combine_two_entries_path_5
Extract path function for assertion assert_show_line_path_0
Extract path function for assertion assert_show_line_path_1
Extract path function for assertion assert_show_line_path_2
Extract path function for assertion assert_show_line_path_4
Extract path function for assertion assert_show_line_path_5
Extract path function for assertion assert_show_line_path_7
Extract path function for assertion assert_show_line_path_10
Extract path function for assertion assert_show_line_path_13
Extract path function for assertion assert_show_line_path_15
Extract path function for assertion assert_show_line_path_16
Extract path function for assertion assert_show_line_path_19
Extract path function for assertion assert_show_line_path_22
Extract path function for assertion assert_show_line_path_23
Extract path function for assertion assert_TeX_LR_begin_path_0
Extract path function for assertion assert_TeX_LR_begin_path_1
Extract path function for assertion assert_TeX_LR_begin_path_2
Extract path function for assertion assert_TeX_LR_begin_path_3
Extract path function for assertion assert_TeX_LR_begin_path_4
Extract path function for assertion assert_TeX_LR_begin_path_5
Extract path function for assertion assert_TeX_LR_begin_path_6
Extract path function for assertion assert_TeX_LR_begin_path_7
Extract path function for assertion assert_line_size_path_1
Extract path function for assertion assert_line_size_path_3
Extract path function for assertion assert_line_size_path_5
Extract path function for assertion assert_TeX_open_paren_path_0
Extract path function for assertion assert_my_getline_path_10
Extract path function for assertion assert_my_getline_path_12
Extract path function for assertion assert_my_getline_path_14
Extract path function for assertion assert_my_getline_path_17
Extract path function for assertion assert_my_getline_path_20
Extract path function for assertion assert_my_getline_path_22
Extract path function for assertion assert_my_getline_path_24
Extract path function for assertion assert_TeX_skip_args_path_0
Extract path function for assertion assert_TeX_skip_args_path_1
Extract path function for assertion assert_TeX_skip_args_path_2
Extract path function for assertion assert_TeX_skip_args_path_3
Extract path function for assertion assert_TeX_skip_args_path_4
Extract path function for assertion assert_TeX_skip_args_path_5
Extract path function for assertion assert_TeX_skip_args_path_6
Extract path function for assertion assert_TeX_skip_args_path_7
Extract path function for assertion assert_cap_ok_path_0
Extract path function for assertion assert_cap_ok_path_1
Extract path function for assertion assert_cap_ok_path_2
Extract path function for assertion assert_cap_ok_path_3
Extract path function for assertion assert_cap_ok_path_4
Extract path function for assertion assert_cap_ok_path_5
Extract path function for assertion assert_cap_ok_path_6
Extract path function for assertion assert_cap_ok_path_8
Extract path function for assertion assert_cap_ok_path_9
Extract path function for assertion assert_cap_ok_path_10
Extract path function for assertion assert_cap_ok_path_12
Extract path function for assertion assert_cap_ok_path_14
Extract path function for assertion assert_cap_ok_path_16
Extract path function for assertion assert_cap_ok_path_17
Extract path function for assertion assert_cap_ok_path_18
Extract path function for assertion assert_cap_ok_path_19
Extract path function for assertion assert_cap_ok_path_20
Extract path function for assertion assert_cap_ok_path_22
Extract path function for assertion assert_cap_ok_path_23
Extract path function for assertion assert_cap_ok_path_24
Extract path function for assertion assert_cap_ok_path_25
Extract path function for assertion assert_cap_ok_path_26
Extract path function for assertion assert_cap_ok_path_28
Extract path function for assertion assert_cap_ok_path_29
Extract path function for assertion assert_cap_ok_path_30
Extract path function for assertion assert_cap_ok_path_31
Extract path function for assertion assert_cap_ok_path_33
Extract path function for assertion assert_cap_ok_path_34
Extract path function for assertion assert_cap_ok_path_36
Extract path function for assertion assert_cap_ok_path_37
Extract path function for assertion assert_cap_ok_path_39
Extract path function for assertion assert_cap_ok_path_41
Extract path function for assertion assert_cap_ok_path_43
Extract path function for assertion assert_cap_ok_path_44
Extract path function for assertion assert_cap_ok_path_45
Extract path function for assertion assert_cap_ok_path_47
Extract path function for assertion assert_cap_ok_path_49
Extract path function for assertion assert_cap_ok_path_51
Extract path function for assertion assert_cap_ok_path_52
Extract path function for assertion assert_cap_ok_path_54
Extract path function for assertion assert_cap_ok_path_55
Extract path function for assertion assert_cap_ok_path_58
Extract path function for assertion assert_cap_ok_path_59
Extract path function for assertion assert_cap_ok_path_60
Extract path function for assertion assert_cap_ok_path_62
Extract path function for assertion assert_cap_ok_path_63
Extract path function for assertion assert_cap_ok_path_66
Extract path function for assertion assert_cap_ok_path_67
Extract path function for assertion assert_cap_ok_path_69
Extract path function for assertion assert_cap_ok_path_70
Extract path function for assertion assert_cap_ok_path_71
Extract path function for assertion assert_cap_ok_path_72
Extract path function for assertion assert_cap_ok_path_73
Extract path function for assertion assert_cap_ok_path_75
Extract path function for assertion assert_cap_ok_path_76
Extract path function for assertion assert_inserttoken_path_8
Extract path function for assertion assert_inserttoken_path_12
Extract path function for assertion assert_inserttoken_path_16
Extract path function for assertion assert_inserttoken_path_20
Extract path function for assertion assert_dumpmode_path_0
Extract path function for assertion assert_dumpmode_path_1
Extract path function for assertion assert_dumpmode_path_2
Extract path function for assertion assert_dumpmode_path_3
Extract path function for assertion assert_dumpmode_path_4
Extract path function for assertion assert_dumpmode_path_5
Extract path function for assertion assert_dumpmode_path_6
Extract path function for assertion assert_lookharder_path_0
Extract path function for assertion assert_lookharder_path_1
Extract path function for assertion assert_lookharder_path_2
Extract path function for assertion assert_lookharder_path_3
Extract path function for assertion assert_lookharder_path_4
Extract path function for assertion assert_lookharder_path_5
Extract path function for assertion assert_lookharder_path_7
Extract path function for assertion assert_lookharder_path_9
Extract path function for assertion assert_lookharder_path_11
Extract path function for assertion assert_lookharder_path_13
Extract path function for assertion assert_lookharder_path_15
Extract path function for assertion assert_entdump_path_0
Extract path function for assertion assert_entdump_path_1
Extract path function for assertion assert_entdump_path_2
Extract path function for assertion assert_entdump_path_3
Extract path function for assertion assert_entdump_path_5
Extract path function for assertion assert_entdump_path_7
Extract path function for assertion assert_entdump_path_9
Extract path function for assertion assert_entdump_path_11
Extract path function for assertion assert_entdump_path_13
Extract path function for assertion assert_good_path_3
Extract path function for assertion assert_good_path_5
Extract path function for assertion assert_good_path_7
Extract path function for assertion assert_good_path_9
Extract path function for assertion assert_good_path_11
Extract path function for assertion assert_good_path_13
Extract path function for assertion assert_good_path_15
Extract path function for assertion assert_good_path_17
Extract path function for assertion assert_good_path_19
Extract path function for assertion assert_good_path_21
Extract path function for assertion assert_flagpr_path_1
Extract path function for assertion assert_flagpr_path_2
Extract path function for assertion assert_flagpr_path_3
Extract path function for assertion assert_flagpr_path_5
Extract path function for assertion assert_flagpr_path_6
Extract path function for assertion assert_flagpr_path_8
Extract path function for assertion assert_flagpr_path_9
Extract path function for assertion assert_flagpr_path_10
Extract path function for assertion assert_flagpr_path_12
Extract path function for assertion assert_flagpr_path_13
Extract path function for assertion assert_flagpr_path_15
Extract path function for assertion assert_flagpr_path_16
Extract path function for assertion assert_flagpr_path_17
Extract path function for assertion assert_flagpr_path_19
Extract path function for assertion assert_flagpr_path_20
Extract path function for assertion assert_flagpr_path_22
Extract path function for assertion assert_flagpr_path_23
Extract path function for assertion assert_flagpr_path_24
Extract path function for assertion assert_flagpr_path_26
Extract path function for assertion assert_flagpr_path_28
Extract path function for assertion assert_flagpr_path_30
Extract path function for assertion assert_flagpr_path_31
Extract path function for assertion assert_flagpr_path_32
Extract path function for assertion assert_flagpr_path_34
Extract path function for assertion assert_flagpr_path_36
Extract path function for assertion assert_flagpr_path_38
Extract path function for assertion assert_flagpr_path_40
Extract path function for assertion assert_flagpr_path_43
Extract path function for assertion assert_flagpr_path_46
Extract path function for assertion assert_flagpr_path_48
Extract path function for assertion assert_flagpr_path_50
Extract path function for assertion assert_askmode_path_0
Extract path function for assertion assert_askmode_path_1
Extract path function for assertion assert_askmode_path_3
Extract path function for assertion assert_askmode_path_4
Extract path function for assertion assert_askmode_path_5
Extract path function for assertion assert_askmode_path_7
Extract path function for assertion assert_askmode_path_8
Extract path function for assertion assert_askmode_path_9
Extract path function for assertion assert_askmode_path_10
Extract path function for assertion assert_askmode_path_11
Extract path function for assertion assert_askmode_path_12
Extract path function for assertion assert_askmode_path_13
Extract path function for assertion assert_askmode_path_14
Extract path function for assertion assert_askmode_path_15
Extract path function for assertion assert_askmode_path_17
Extract path function for assertion assert_askmode_path_18
Extract path function for assertion assert_askmode_path_20
Extract path function for assertion assert_askmode_path_21
Extract path function for assertion assert_askmode_path_23
Extract path function for assertion assert_askmode_path_24
Extract path function for assertion assert_askmode_path_25
Extract path function for assertion assert_askmode_path_26
Extract path function for assertion assert_askmode_path_27
Extract path function for assertion assert_askmode_path_28
Extract path function for assertion assert_askmode_path_29
Extract path function for assertion assert_askmode_path_30
Extract path function for assertion assert_askmode_path_31
Extract path function for assertion assert_askmode_path_32
Extract path function for assertion assert_askmode_path_34
Extract path function for assertion assert_askmode_path_35
Extract path function for assertion assert_askmode_path_36
Extract path function for assertion assert_askmode_path_37
Extract path function for assertion assert_askmode_path_38
Extract path function for assertion assert_askmode_path_39
Extract path function for assertion assert_askmode_path_40
Extract path function for assertion assert_askmode_path_41
Extract path function for assertion assert_askmode_path_42
Extract path function for assertion assert_askmode_path_43
Extract path function for assertion assert_askmode_path_44
Extract path function for assertion assert_askmode_path_45
Extract path function for assertion assert_askmode_path_46
Extract path function for assertion assert_askmode_path_47
Extract path function for assertion assert_askmode_path_48
Extract path function for assertion assert_askmode_path_49
Extract path function for assertion assert_askmode_path_50
Extract path function for assertion assert_askmode_path_51
Extract path function for assertion assert_askmode_path_52
Extract path function for assertion assert_askmode_path_53
Extract path function for assertion assert_askmode_path_54
Extract path function for assertion assert_askmode_path_55
Extract path function for assertion assert_askmode_path_56
Extract path function for assertion assert_askmode_path_57
Extract path function for assertion assert_askmode_path_58
Extract path function for assertion assert_askmode_path_59
Extract path function for assertion assert_askmode_path_60
Extract path function for assertion assert_askmode_path_61
Extract path function for assertion assert_askmode_path_62
Extract path function for assertion assert_askmode_path_63
Extract path function for assertion assert_askmode_path_64
Extract path function for assertion assert_askmode_path_65
Extract path function for assertion assert_askmode_path_66
Extract path function for assertion assert_askmode_path_67
Extract path function for assertion assert_askmode_path_68
Extract path function for assertion assert_askmode_path_69
Extract path function for assertion assert_askmode_path_70
Extract path function for assertion assert_askmode_path_71
Extract path function for assertion assert_askmode_path_72
Extract path function for assertion assert_askmode_path_73
Extract path function for assertion assert_askmode_path_75
Extract path function for assertion assert_askmode_path_76
Extract path function for assertion assert_askmode_path_78
Extract path function for assertion assert_askmode_path_79
Extract path function for assertion assert_askmode_path_80
Extract path function for assertion assert_askmode_path_81
Extract path function for assertion assert_askmode_path_82
Extract path function for assertion assert_askmode_path_84
Extract path function for assertion assert_askmode_path_85
Extract path function for assertion assert_askmode_path_86
Extract path function for assertion assert_hash_path_1
Extract path function for assertion assert_hash_path_3
Extract path function for assertion assert_hash_path_6
Extract path function for assertion assert_hash_path_9
Extract path function for assertion assert_pr_pre_expansion_path_0
Extract path function for assertion assert_pr_pre_expansion_path_1
Extract path function for assertion assert_pr_pre_expansion_path_2
Extract path function for assertion assert_pr_pre_expansion_path_4
Extract path function for assertion assert_pr_pre_expansion_path_5
Extract path function for assertion assert_pr_pre_expansion_path_6
Extract path function for assertion assert_pr_pre_expansion_path_8
Extract path function for assertion assert_pr_pre_expansion_path_10
Extract path function for assertion assert_pr_pre_expansion_path_11
Extract path function for assertion assert_pr_pre_expansion_path_14
Extract path function for assertion assert_pr_pre_expansion_path_18
Extract path function for assertion assert_pr_pre_expansion_path_19
Extract path function for assertion assert_pr_pre_expansion_path_22
Extract path function for assertion assert_pr_pre_expansion_path_26
Extract path function for assertion assert_pr_pre_expansion_path_30
Extract path function for assertion assert_pr_pre_expansion_path_34
Extract path function for assertion assert_pr_pre_expansion_path_38
Extract path function for assertion assert_pr_pre_expansion_path_41
Extract path function for assertion assert_pr_pre_expansion_path_43
Extract path function for assertion assert_pr_pre_expansion_path_45
Extract path function for assertion assert_pr_pre_expansion_path_47
Extract path function for assertion assert_pr_pre_expansion_path_49
Extract path function for assertion assert_pr_pre_expansion_path_51
Extract path function for assertion assert_pr_pre_expansion_path_53
Extract path function for assertion assert_makedent_path_0
Extract path function for assertion assert_makedent_path_1
Extract path function for assertion assert_makedent_path_2
Extract path function for assertion assert_makedent_path_3
Extract path function for assertion assert_makedent_path_4
Extract path function for assertion assert_makedent_path_5
Extract path function for assertion assert_makedent_path_6
Extract path function for assertion assert_makedent_path_7
Extract path function for assertion assert_makedent_path_9
Extract path function for assertion assert_makedent_path_11
Extract path function for assertion assert_makedent_path_13
Extract path function for assertion assert_makedent_path_15
Extract path function for assertion assert_makedent_path_17
Extract path function for assertion assert_makedent_path_18
Extract path function for assertion assert_makedent_path_20
Extract path function for assertion assert_makedent_path_21
Extract path function for assertion assert_makedent_path_23
Extract path function for assertion assert_makedent_path_24
Extract path function for assertion assert_makedent_path_26
Extract path function for assertion assert_makedent_path_29
Extract path function for assertion assert_makedent_path_30
Extract path function for assertion assert_makedent_path_32
Extract path function for assertion assert_makedent_path_35
Extract path function for assertion assert_strtoichar_path_2
Extract path function for assertion assert_strtoichar_path_4
Extract path function for assertion assert_strtoichar_path_6
Extract path function for assertion assert_strtoichar_path_8
Extract path function for assertion assert_strtoichar_path_10
Extract path function for assertion assert_strtoichar_path_12
Extract path function for assertion assert_whatcap_path_5
Extract path function for assertion assert_whatcap_path_7
Extract path function for assertion assert_whatcap_path_10
Extract path function for assertion assert_whatcap_path_13
Extract path function for assertion assert_whatcap_path_17
Extract path function for assertion assert_whatcap_path_21
Extract path function for assertion assert_whatcap_path_25
Extract path function for assertion assert_whatcap_path_28
Extract path function for assertion assert_whatcap_path_31
Extract path function for assertion assert_strtosichar_path_0
Extract path function for assertion assert_strtosichar_path_1
Extract path function for assertion assert_combinecaps_path_1
Extract path function for assertion assert_combinecaps_path_3
Extract path function for assertion assert_combinecaps_path_5
Extract path function for assertion assert_combinecaps_path_6
Extract path function for assertion assert_combinecaps_path_7
Extract path function for assertion assert_combinecaps_path_8
Extract path function for assertion assert_combinecaps_path_9
Extract path function for assertion assert_combinecaps_path_10
Extract path function for assertion assert_combinecaps_path_11
Extract path function for assertion assert_combinecaps_path_12
Extract path function for assertion assert_forcevheader_path_0
Extract path function for assertion assert_forcevheader_path_1
Extract path function for assertion assert_forcevheader_path_2
Extract path function for assertion assert_forcevheader_path_3
Extract path function for assertion assert_acoversb_path_0
Extract path function for assertion assert_acoversb_path_1
Extract path function for assertion assert_acoversb_path_2
Extract path function for assertion assert_acoversb_path_3
Extract path function for assertion assert_acoversb_path_4
Extract path function for assertion assert_acoversb_path_5
Extract path function for assertion assert_acoversb_path_6
Extract path function for assertion assert_acoversb_path_7
Extract path function for assertion assert_acoversb_path_8
Extract path function for assertion assert_acoversb_path_9
Extract path function for assertion assert_acoversb_path_10
Extract path function for assertion assert_terminit_path_0
Extract path function for assertion assert_terminit_path_1
Extract path function for assertion assert_terminit_path_2
Extract path function for assertion assert_terminit_path_3
Extract path function for assertion assert_terminit_path_4
Extract path function for assertion assert_terminit_path_5
Extract path function for assertion assert_terminit_path_6
Extract path function for assertion assert_terminit_path_7
Extract path function for assertion assert_terminit_path_8
Extract path function for assertion assert_terminit_path_9
Extract path function for assertion assert_terminit_path_10
Extract path function for assertion assert_terminit_path_11
Extract path function for assertion assert_terminit_path_12
Extract path function for assertion assert_terminit_path_13
Extract path function for assertion assert_terminit_path_14
Extract path function for assertion assert_terminit_path_15
Extract path function for assertion assert_issubset_path_0
Extract path function for assertion assert_issubset_path_1
Extract path function for assertion assert_issubset_path_2
Extract path function for assertion assert_toutent_path_0
Extract path function for assertion assert_toutent_path_2
Extract path function for assertion assert_toutent_path_3
Extract path function for assertion assert_toutent_path_4
Extract path function for assertion assert_toutent_path_5
Extract path function for assertion assert_toutent_path_6
Extract path function for assertion assert_toutent_path_7
Extract path function for assertion assert_toutent_path_8
Extract path function for assertion assert_toutent_path_9
Extract path function for assertion assert_toutent_path_10
Extract path function for assertion assert_toutent_path_12
Extract path function for assertion assert_toutent_path_13
Extract path function for assertion assert_toutent_path_14
Extract path function for assertion assert_toutent_path_15
Extract path function for assertion assert_toutent_path_16
Extract path function for assertion assert_toutent_path_17
Extract path function for assertion assert_toutent_path_18
Extract path function for assertion assert_toutent_path_20
Extract path function for assertion assert_ichartosstr_path_0
Extract path function for assertion assert_ichartosstr_path_1
Extract path function for assertion assert_toutword_path_0
Extract path function for assertion assert_toutword_path_1
Extract path function for assertion assert_toutword_path_2
Extract path function for assertion assert_toutword_path_3
Extract path function for assertion assert_toutword_path_5
Extract path function for assertion assert_flagout_path_0
Extract path function for assertion assert_flagout_path_1
Extract path function for assertion assert_TeX_skip_parens_path_0
Extract path function for assertion assert_findfiletype_path_1
Extract path function for assertion assert_findfiletype_path_3
Extract path function for assertion assert_findfiletype_path_4
Extract path function for assertion assert_findfiletype_path_5
Extract path function for assertion assert_findfiletype_path_7
Extract path function for assertion assert_findfiletype_path_8
Extract path function for assertion assert_findfiletype_path_9
Extract path function for assertion assert_findfiletype_path_11
Extract path function for assertion assert_findfiletype_path_12
Extract path function for assertion assert_findfiletype_path_14
Extract path function for assertion assert_findfiletype_path_15
Extract path function for assertion assert_findfiletype_path_16
Extract path function for assertion assert_findfiletype_path_17
Extract path function for assertion assert_findfiletype_path_18
Extract path function for assertion assert_findfiletype_path_20
Extract path function for assertion assert_findfiletype_path_22
Extract path function for assertion assert_TeX_math_begin_path_0
Extract path function for assertion assert_TeX_math_begin_path_1
Extract path function for assertion assert_TeX_math_begin_path_2
Extract path function for assertion assert_TeX_math_begin_path_4
Extract path function for assertion assert_TeX_math_begin_path_5
Extract path function for assertion assert_TeX_math_begin_path_6
Extract path function for assertion assert_TeX_math_begin_path_7
Extract path function for assertion assert_TeX_math_begin_path_8
Extract path function for assertion assert_TeX_math_begin_path_9
Extract path function for assertion assert_TeX_math_begin_path_10
Extract path function for assertion assert_TeX_math_begin_path_11
Extract path function for assertion assert_TeX_math_begin_path_12
Extract path function for assertion assert_TeX_math_begin_path_15
Extract path function for assertion assert_TeX_math_begin_path_18
Extract path function for assertion assert_TeX_math_begin_path_21
Extract path function for assertion assert_TeX_math_begin_path_24
Extract path function for assertion assert_TeX_math_begin_path_26
Extract path function for assertion assert_TeX_math_begin_path_28
Extract path function for assertion assert_chk_aff_path_6
Extract path function for assertion assert_chk_aff_path_13
Extract path function for assertion assert_chk_aff_path_15
Extract path function for assertion assert_chk_suf_path_6
Extract path function for assertion assert_show_char_path_0
Extract path function for assertion assert_show_char_path_1
Extract path function for assertion assert_show_char_path_2
Extract path function for assertion assert_show_char_path_3
Extract path function for assertion assert_show_char_path_4
Extract path function for assertion assert_show_char_path_5
Extract path function for assertion assert_show_char_path_6
Extract path function for assertion assert_show_char_path_7
Extract path function for assertion assert_show_char_path_8
Extract path function for assertion assert_show_char_path_9
Extract path function for assertion assert_show_char_path_10
Extract path function for assertion assert_show_char_path_11
Extract path function for assertion assert_show_char_path_12
Extract path function for assertion assert_show_char_path_13
Extract path function for assertion assert_show_char_path_14
Extract path function for assertion assert_show_char_path_15
Extract path function for assertion assert_show_char_path_16
Extract path function for assertion assert_show_char_path_17
Extract path function for assertion assert_show_char_path_18
Extract path function for assertion assert_show_char_path_19
Extract path function for assertion assert_show_char_path_20
Extract path function for assertion assert_show_char_path_21
Extract path function for assertion assert_show_char_path_22
Extract path function for assertion assert_show_char_path_23
Extract path function for assertion assert_show_char_path_24
Extract path function for assertion assert_show_char_path_26
Extract path function for assertion assert_show_char_path_27
Extract path function for assertion assert_show_char_path_28
Extract path function for assertion assert_show_char_path_29
Extract path function for assertion assert_show_char_path_30
Extract path function for assertion assert_expand_suf_path_0
Extract path function for assertion assert_expand_suf_path_1
Extract path function for assertion assert_expand_suf_path_2
Extract path function for assertion assert_expand_suf_path_3
Extract path function for assertion assert_expand_suf_path_5
Extract path function for assertion assert_expand_suf_path_6
Extract path function for assertion assert_expand_suf_path_7
Extract path function for assertion assert_expand_suf_path_9
OH stats is requested, dumping stat file...
Processed instructions number 11013
{
    "numberOfAssertCalls": 0,
    "numberOfBlocksInFunctionsWithNoDG": 30,
    "numberOfDataDependentInstructions": 4909,
    "numberOfHashVariables": 1,
    "numberOfImplicitlyProtectedInstructions": 0,
    "numberOfInstructionsInFilteredFunctions": 0,
    "numberOfInstructionsInFunctionsWithNoDG": 155,
    "numberOfNonHashableBlocks": 141,
    "numberOfNonHashableInstructions": 1386,
    "numberOfOHProcessedInstr": 10858,
    "numberOfOtherUnprotectedInstructions": 48,
    "numberOfOtherUnprotectedLoopVariantInstructions": 121,
    "numberOfProtectedArguments": 0,
    "numberOfProtectedBlocks": 1,
    "numberOfProtectedFunctions": 92,
    "numberOfProtectedGuardArguments": 0,
    "numberOfProtectedGuardInstructions": 0,
    "numberOfProtectedInstructions": 2,
    "numberOfSensitiveBlocks": 2598,
    "numberOfSensitiveFunctions": 107,
    "numberOfShortRangeAssertCalls": 1618,
    "numberOfShortRangeImplicitlyProtectedInstructions": 0,
    "numberOfShortRangeProtectedArguments": 88,
    "numberOfShortRangeProtectedBlocks": 1953,
    "numberOfShortRangeProtectedGuardArguments": 0,
    "numberOfShortRangeProtectedGuardInstructions": 0,
    "numberOfShortRangeProtectedInstructions": 1617,
    "numberOfUnprotectedArgumentReachableInstructions": 220,
    "numberOfUnprotectedArgumentReachableLoopBlocks": 0,
    "numberOfUnprotectedDataDependentBlocks": 0,
    "numberOfUnprotectedDataDependentLoopBlocks": 503,
    "numberOfUnprotectedGlobalReachableInstructions": 429,
    "numberOfUnprotectedGlobalReachableLoopBlocks": 0,
    "numberOfUnprotectedInputDependentInstructions": 0,
    "numberOfUnprotectedLoopInstructions": 2126
}
ERR. processed 107 function, while filter count is 696
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 213.4402 seconds (213.7340 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
  188.4735 ( 89.1%)   1.5040 ( 76.9%)  189.9775 ( 89.0%)  190.2655 ( 89.0%)  Instruments bitcode with hashing and logging functions
  19.6609 (  9.3%)   0.3960 ( 20.2%)  20.0569 (  9.4%)  20.0604 (  9.4%)  runs input dependency analysis
   2.4878 (  1.2%)   0.0205 (  1.0%)   2.5083 (  1.2%)   2.5050 (  1.2%)  Memory SSA
   0.3031 (  0.1%)   0.0018 (  0.1%)   0.3049 (  0.1%)   0.3079 (  0.1%)  Dominator Tree Construction
   0.2359 (  0.1%)   0.0240 (  1.2%)   0.2598 (  0.1%)   0.2628 (  0.1%)  Bitcode Writer
   0.1998 (  0.1%)   0.0013 (  0.1%)   0.2011 (  0.1%)   0.2005 (  0.1%)  Natural Loop Information
   0.0512 (  0.0%)   0.0036 (  0.2%)   0.0549 (  0.0%)   0.0546 (  0.0%)  Module Verifier
   0.0124 (  0.0%)   0.0001 (  0.0%)   0.0125 (  0.0%)   0.0125 (  0.0%)  Function Alias Analysis Results
   0.0116 (  0.0%)   0.0001 (  0.0%)   0.0117 (  0.0%)   0.0117 (  0.0%)  Basic Alias Analysis (stateless AA impl)
   0.0112 (  0.0%)   0.0005 (  0.0%)   0.0117 (  0.0%)   0.0116 (  0.0%)  Post-Dominator Tree Construction
   0.0097 (  0.0%)   0.0005 (  0.0%)   0.0101 (  0.0%)   0.0105 (  0.0%)  Dominator Tree Construction
   0.0062 (  0.0%)   0.0040 (  0.2%)   0.0101 (  0.0%)   0.0102 (  0.0%)  Include functions in a given file in any transformation
   0.0071 (  0.0%)   0.0001 (  0.0%)   0.0072 (  0.0%)   0.0073 (  0.0%)  Instruments bitcode with guards
   0.0070 (  0.0%)   0.0003 (  0.0%)   0.0073 (  0.0%)   0.0072 (  0.0%)  Natural Loop Information
   0.0021 (  0.0%)   0.0000 (  0.0%)   0.0021 (  0.0%)   0.0021 (  0.0%)  Call site information
   0.0013 (  0.0%)   0.0000 (  0.0%)   0.0013 (  0.0%)   0.0013 (  0.0%)  Remove unreachable blocks from the CFG
   0.0010 (  0.0%)   0.0000 (  0.0%)   0.0010 (  0.0%)   0.0010 (  0.0%)  CallGraph Construction
   0.0008 (  0.0%)   0.0000 (  0.0%)   0.0008 (  0.0%)   0.0008 (  0.0%)  runs indirect and virtual calls analysis
   0.0008 (  0.0%)   0.0000 (  0.0%)   0.0008 (  0.0%)   0.0008 (  0.0%)  Dead Global Elimination
   0.0002 (  0.0%)   0.0000 (  0.0%)   0.0002 (  0.0%)   0.0002 (  0.0%)  Dominator Tree Construction
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Natural Loop Information
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Marks functions in a given file as assert functions
  211.4835 (100.0%)   1.9567 (100.0%)  213.4402 (100.0%)  213.7340 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0380 seconds (0.0415 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.0362 (100.0%)   0.0018 (100.0%)   0.0380 (100.0%)   0.0415 (100.0%)  Parse IR
   0.0362 (100.0%)   0.0018 (100.0%)   0.0380 (100.0%)   0.0415 (100.0%)  Total

Running input dependency analysis pass
Processing function erase
Processing function move
Processing function inverse
Processing function normal
Processing function backup
Processing function terminit0
Processing function terminit1
Processing function terminit2
Processing function terminit3
Processing function terminit4
Processing function terminit5
Processing function terminit
Did not find function assigned   store void (...)* %11, void (...)** @oldint, align 8, !control_dep_instr !7, !data_dep_instr !8
Did not find function assigned   store void (...)* %12, void (...)** @oldterm, align 8, !control_dep_instr !7, !data_dep_instr !8
Did not find function assigned   store void (...)* %13, void (...)** @oldttin, align 8, !control_dep_instr !7, !data_dep_instr !8
Did not find function assigned   store void (...)* %14, void (...)** @oldttou, align 8, !control_dep_instr !7, !data_dep_instr !8
Did not find function assigned   store void (...)* %15, void (...)** @oldtstp, align 8, !control_dep_instr !7, !data_dep_instr !8
Processing function done
Processing function onstop0
Processing function onstop
Processing function stop
Processing function shellescape0
Processing function shellescape1
Processing function shellescape2
Processing function shellescape3
Processing function shellescape4
Processing function shellescape5
Processing function shellescape
Processing function main0
Processing function main1
Processing function main2
Processing function main3
Processing function main4
Processing function main5
Processing function usage0
Processing function givehelp0
Processing function givehelp1
Processing function givehelp2
Processing function givehelp
Processing function usage
Processing function main6
Processing function main7
Processing function main8
Processing function main9
Processing function main10
Processing function main11
Processing function main12
Processing function main13
Processing function main14
Processing function main15
Processing function main16
Processing function main17
Processing function main18
Processing function main19
Processing function main20
Processing function main21
Processing function main22
Processing function main23
Processing function main24
Processing function main25
Processing function main26
Processing function main27
Processing function main28
Processing function main29
Processing function main30
Processing function main31
Processing function main32
Processing function linit0
Processing function linit1
Processing function linit2
Processing function linit3
Processing function linit4
Processing function linit5
Processing function linit6
Processing function linit7
Processing function linit8
Processing function linit9
Processing function linit10
Processing function linit11
Processing function linit12
Processing function linit13
Processing function linit14
Processing function linit15
Processing function linit16
Processing function linit17
Processing function linit18
Processing function linit19
Processing function linit20
Processing function linit21
Processing function linit22
Processing function linit23
Processing function linit24
Processing function linit25
Processing function linit26
Processing function linit27
Processing function linit28
Processing function linit29
Processing function linit30
Processing function linit31
Processing function linit32
Processing function linit33
Processing function linit34
Processing function linit35
Processing function linit36
Processing function linit37
Processing function linit38
Processing function linit39
Processing function linit40
Processing function linit41
Processing function linit42
Processing function linit43
Processing function linit44
Processing function linit45
Processing function linit46
Processing function linit47
Processing function linit48
Processing function linit49
Processing function linit
Processing function findfiletype0
Processing function findfiletype1
Processing function findfiletype2
Processing function findfiletype3
Processing function findfiletype4
Processing function findfiletype5
Processing function findfiletype6
Processing function findfiletype7
Processing function findfiletype
Processing function main33
Processing function main34
Processing function main35
Processing function main36
Processing function initckch0
Processing function initckch1
Processing function initckch2
Processing function initckch
Processing function main37
Processing function treeinit0
Processing function trydict0
Processing function trydict1
Processing function trydict2
Processing function trydict
Processing function treeinit1
Processing function treeinsert0
Processing function treeinsert1
Processing function treeinsert2
Processing function treeinsert3
Processing function treeinsert4
Processing function strtoichar0
Processing function stringcharlen0
Processing function stringcharlen1
Processing function stringcharlen2
Processing function stringcharlen3
Processing function stringcharlen4
Processing function stringcharlen5
Processing function stringcharlen6
Processing function stringcharlen7
Processing function stringcharlen8
Processing function stringcharlen
Processing function strtoichar1
Processing function strtoichar2
Processing function strtoichar3
Processing function strtoichar
Processing function tinsert0
Processing function hash0
Processing function hash1
Processing function hash
Processing function tinsert1
Processing function tinsert2
Processing function tinsert3
Processing function tinsert
Processing function treeinsert5
Processing function treeinsert6
Processing function treeinsert7
Processing function treeinsert8
Processing function treeinsert9
Processing function makedent0
Processing function makedent1
Processing function ichartostr0
Processing function ichartostr1
Processing function ichartostr2
Processing function ichartostr3
Processing function ichartostr4
Processing function ichartostr
Processing function makedent2
Processing function makedent3
Processing function makedent4
Processing function whatcap0
Processing function whatcap1
Processing function whatcap2
Processing function whatcap3
Processing function whatcap4
Processing function whatcap
Processing function makedent5
Processing function mymalloc
Processing function makedent6
Processing function strtosichar0
Processing function strtosichar
Processing function upcase0
Processing function upcase
Processing function chupcase0
Processing function chupcase
Processing function makedent7
Processing function makedent8
Processing function makedent9
Processing function makedent10
Processing function makedent
Processing function treeinsert10
Processing function lookup0
Processing function lookup1
Processing function lookup2
Processing function treelookup0
Processing function treelookup1
Processing function treelookup2
Processing function treelookup
Processing function lookup3
Processing function lookup
Processing function issubset
Processing function acoversb
Processing function combineaffixes0
Processing function combineaffixes
Processing function myfree0
Processing function myfree
Processing function combine_two_entries0
Processing function combine_two_entries1
Processing function addvheader0
Processing function addvheader1
Processing function addvheader2
Processing function addvheader3
Processing function addvheader4
Processing function addvheader
Processing function combine_two_entries2
Processing function combine_two_entries
Processing function combinecaps0
Processing function forcevheader0
Processing function forcevheader
Processing function combinecaps1
Processing function combinecaps2
Processing function combinecaps3
Processing function combinecaps
Processing function treeinsert11
Processing function treeinsert12
Processing function treeinsert13
Processing function treeinsert
Processing function treeload
Processing function treeinit2
Processing function treeinit3
Processing function treeinit4
Processing function treeinit5
Processing function treeinit6
Processing function treeinit7
Processing function treeinit8
Processing function treeinit
Processing function main38
Processing function askmode0
Processing function askmode1
Processing function xgets0
Processing function xgets1
Processing function xgets2
Processing function xgets3
Processing function xgets4
Processing function xgets
Processing function askmode2
Processing function askmode3
Processing function askmode4
Processing function checkline0
Processing function copyout0
Processing function copyout1
Processing function copyout
Processing function checkline1
Processing function checkline2
Processing function checkline3
Processing function checkline4
Processing function skiptoword0
Processing function TeX_open_paren0
Processing function TeX_open_paren
Processing function TeX_math_check0
Processing function TeX_skip_parens0
Processing function TeX_skip_parens
Processing function TeX_math_check1
Processing function TeX_skip_args0
Processing function TeX_skip_args1
Processing function TeX_skip_args2
Processing function TeX_skip_args3
Processing function TeX_skip_args
Processing function TeX_math_check2
Processing function TeX_math_check3
Processing function TeX_math_check
Processing function TeX_LR_check0
Processing function TeX_LR_check1
Processing function TeX_LR_check2
Processing function TeX_LR_check3
Processing function TeX_LR_check4
Processing function TeX_LR_check
Processing function skiptoword1
Processing function skiptoword2
Processing function TeX_math_end0
Processing function TeX_math_end1
Processing function TeX_strncmp0
Processing function TeX_strncmp
Processing function TeX_LR_begin0
Processing function TeX_LR_begin1
Processing function TeX_LR_begin2
Processing function TeX_LR_begin
Processing function TeX_math_end2
Processing function TeX_math_end
Processing function skiptoword3
Processing function skiptoword4
Processing function skiptoword5
Processing function skiptoword6
Processing function skiptoword7
Processing function TeX_math_begin0
Processing function TeX_math_begin1
Processing function TeX_math_begin2
Processing function TeX_skip_check0
Processing function TeX_skip_check1
Processing function TeX_skip_check2
Processing function TeX_skip_check3
Processing function TeX_skip_check
Processing function TeX_math_begin3
Processing function TeX_math_begin4
Processing function TeX_math_begin
Processing function skiptoword8
Processing function skiptoword9
Processing function skiptoword10
Processing function skiptoword11
Processing function skiptoword12
Processing function skiptoword13
Processing function skiptoword14
Processing function skiptoword15
Processing function skiptoword16
Processing function skiptoword17
Processing function skiptoword18
Processing function skiptoword19
Processing function skiptoword
Processing function checkline5
Processing function skipoverword0
Processing function skipoverword1
Processing function skipoverword2
Processing function skipoverword3
Processing function skipoverword4
Processing function skipoverword
Processing function checkline6
Processing function checkline7
Processing function checkline8
Processing function good0
Processing function good1
Processing function ichartosstr0
Processing function ichartosstr
Processing function good2
Processing function good3
Processing function cap_ok0
Processing function cap_ok1
Processing function cap_ok2
Processing function entryhasaffixes
Processing function cap_ok3
Processing function cap_ok4
Processing function cap_ok5
Processing function cap_ok6
Processing function cap_ok7
Processing function cap_ok8
Processing function cap_ok9
Processing function cap_ok10
Processing function cap_ok
Processing function pfx_list_chk0
Processing function pfx_list_chk1
Processing function flagpr0
Processing function flagpr1
Processing function flagpr2
Processing function flagpr3
Processing function flagpr4
Processing function flagpr5
Processing function flagpr6
Processing function printichar0
Processing function printichar1
Processing function printichar
Processing function flagpr7
Processing function flagpr8
Processing function flagpr9
Processing function flagpr10
Processing function flagpr11
Processing function flagpr12
Processing function flagpr13
Processing function flagpr14
Processing function flagpr15
Processing function flagpr16
Processing function flagpr
Processing function pfx_list_chk2
Processing function pfx_list_chk3
Processing function save_root_cap0
Processing function save_root_cap1
Processing function save_root_cap2
Processing function save_root_cap3
Processing function lowcase0
Processing function lowcase
Processing function save_root_cap4
Processing function save_root_cap5
Processing function save_root_cap6
Processing function save_root_cap7
Processing function save_root_cap8
Processing function save_root_cap9
Processing function save_root_cap10
Processing function save_root_cap11
Processing function save_root_cap
Processing function insert0
Processing function insert1
Processing function insert2
Processing function insert
Processing function ins_root_cap0
Processing function ins_root_cap
Processing function pfx_list_chk4
Processing function suf_list_chk0
Processing function suf_list_chk1
Processing function suf_list_chk2
Processing function suf_list_chk3
Processing function suf_list_chk4
Processing function suf_list_chk5
Processing function suf_list_chk6
Processing function suf_list_chk7
Processing function suf_list_chk
Processing function chk_suf0
Processing function chk_suf1
Processing function chk_suf2
Processing function chk_suf
Processing function pfx_list_chk5
Processing function pfx_list_chk
Processing function chk_aff0
Processing function chk_aff1
Processing function chk_aff2
Processing function chk_aff
Processing function good4
Processing function good
Processing function compoundgood0
Processing function compoundgood1
Processing function compoundgood2
Processing function compoundgood3
Processing function compoundgood
Processing function checkline9
Processing function checkline10
Processing function checkline11
Processing function checkline12
Processing function checkline13
Processing function makepossibilities0
Processing function save_cap0
Processing function save_cap1
Processing function save_cap2
Processing function save_cap3
Processing function save_cap4
Processing function save_cap
Processing function ins_cap0
Processing function ins_cap
Processing function wrongcapital
Processing function missingletter0
Processing function missingletter1
Processing function missingletter2
Processing function missingletter
Processing function makepossibilities1
Processing function transposedletter0
Processing function transposedletter1
Processing function transposedletter
Processing function makepossibilities2
Processing function extraletter0
Processing function extraletter
Processing function makepossibilities3
Processing function wrongletter0
Processing function wrongletter1
Processing function wrongletter
Processing function makepossibilities4
Processing function missingspace0
Processing function missingspace1
Processing function missingspace2
Processing function missingspace
Processing function makepossibilities5
Processing function tryveryhard0
Processing function tryveryhard
Processing function makepossibilities6
Processing function makepossibilities7
Processing function makepossibilities8
Processing function makepossibilities
Processing function checkline14
Processing function checkline15
Processing function checkline16
Processing function checkline17
Processing function checkline18
Processing function correct0
Processing function correct1
Processing function correct2
Processing function correct3
Processing function correct4
Processing function correct5
Processing function correct6
Processing function show_char0
Processing function show_char1
Processing function show_char2
Processing function show_char3
Processing function show_char4
Processing function show_char5
Processing function show_char6
Processing function show_char7
Processing function show_char8
Processing function show_char9
Processing function show_char10
Processing function show_char11
Processing function show_char12
Processing function show_char13
Processing function show_char14
Processing function show_char
Processing function show_line0
Processing function show_line1
Processing function show_line2
Processing function show_line3
Processing function show_line
Processing function correct7
Processing function line_size0
Processing function line_size
Processing function correct8
Processing function correct9
Processing function correct10
Processing function correct11
Processing function correct12
Processing function correct13
Processing function correct14
Processing function correct15
Processing function correct16
Processing function correct17
Processing function my_getline0
Processing function my_getline1
Processing function my_getline2
Processing function my_getline3
Processing function my_getline4
Processing function my_getline5
Processing function my_getline6
Processing function my_getline
Processing function correct18
Processing function correct19
Processing function correct20
Processing function inserttoken0
Processing function inserttoken1
Processing function inserttoken2
Processing function inserttoken3
Processing function inserttoken4
Processing function inserttoken5
Processing function inserttoken6
Processing function inserttoken
Processing function correct21
Processing function correct22
Processing function correct23
Processing function correct24
Processing function correct25
Processing function lookharder0
Processing function lookharder1
Processing function lookharder2
Processing function lookharder
Processing function correct26
Processing function correct
Processing function checkline19
Processing function checkline20
Processing function checkline
Processing function askmode5
Processing function askmode6
Processing function treeoutput0
Processing function treeoutput1
Processing function treeoutput2
Processing function treeoutput3
Processing function treeoutput4
Processing function treeoutput5
Processing function treeoutput6
Processing function treeoutput7
Processing function treeoutput8
Processing function treeoutput9
Processing function treeoutput10
Processing function treeoutput11
Processing function treeoutput12
Processing function toutent0
Processing function toutword0
Processing function flagout0
Processing function flagout1
Processing function flagout
Processing function toutword1
Processing function toutword2
Processing function toutword
Processing function toutent1
Processing function toutent2
Processing function toutent
Processing function treeoutput13
Processing function treeoutput14
Processing function treeoutput15
Processing function treeoutput16
Processing function treeoutput17
Processing function treeoutput18
Processing function treeoutput19
Processing function treeoutput20
Processing function treeoutput21
Processing function treeoutput22
Processing function treeoutput23
Processing function treeoutput24
Processing function treeoutput25
Processing function treeoutput26
Processing function treeoutput27
Processing function treeoutput28
Processing function treeoutput29
Processing function treeoutput30
Processing function treeoutput31
Processing function treeoutput32
Processing function treeoutput
Processing function askmode7
Processing function askmode8
Processing function askmode9
Processing function askmode10
Processing function askmode
Processing function main39
Processing function expandmode0
Processing function expandmode1
Processing function expand_pre0
Processing function pr_pre_expansion0
Processing function pr_pre_expansion1
Processing function pr_pre_expansion2
Processing function pr_pre_expansion3
Processing function pr_pre_expansion4
Processing function forcelc0
Processing function forcelc1
Processing function forcelc
Processing function pr_pre_expansion5
Processing function expand_suf0
Processing function pr_suf_expansion0
Processing function pr_suf_expansion1
Processing function pr_suf_expansion2
Processing function pr_suf_expansion3
Processing function pr_suf_expansion4
Processing function pr_suf_expansion
Processing function expand_suf1
Processing function expand_suf2
Processing function expand_suf
Processing function pr_pre_expansion6
Processing function pr_pre_expansion
Processing function expand_pre1
Processing function expand_pre2
Processing function expand_pre
Processing function expandmode
Processing function main40
Processing function dumpmode0
Processing function dumpmode1
Processing function dumpmode2
Processing function entdump0
Processing function setdump0
Processing function setdump1
Processing function setdump2
Processing function subsetdump0
Processing function subsetdump1
Processing function subsetdump2
Processing function subsetdump3
Processing function subsetdump4
Processing function subsetdump5
Processing function subsetdump
Processing function setdump3
Processing function setdump4
Processing function setdump
Processing function entdump1
Processing function entdump2
Processing function entdump3
Processing function entdump4
Processing function entdump
Processing function tbldump0
Processing function tbldump
Processing function dumpmode3
Processing function dumpmode4
Processing function dumpmode
Processing function main41
Processing function checkfile0
Processing function checkfile1
Processing function checkfile2
Processing function checkfile3
Processing function checkfile4
Processing function checkfile5
Processing function checkfile6
Processing function checkfile7
Processing function checkfile
Processing function main42
Processing function dofile0
Processing function dofile1
Processing function dofile2
Processing function update_file0
Processing function update_file1
Processing function update_file2
Processing function update_file3
Processing function update_file4
Processing function update_file5
Processing function update_file
Processing function dofile3
Processing function dofile
Processing function main43
Processing function main
Processing function casecmp0
Processing function casecmp1
Processing function casecmp2
Processing function casecmp3
Processing function casecmp4
Processing function casecmp5
Processing function casecmp6
Processing function casecmp
Processing function posscmp
Processing function pdictcmp
Finalizing pdictcmp
Finalizing posscmp
Finalizing casecmp
Mark Input dependent function casecmp
Finalizing casecmp6
Mark Input dependent function casecmp6
Finalizing casecmp5
Mark Input dependent function casecmp5
Finalizing casecmp4
Mark Input dependent function casecmp4
Finalizing casecmp3
Mark Input dependent function casecmp3
Finalizing casecmp2
Mark Input dependent function casecmp2
Finalizing casecmp1
Mark Input dependent function casecmp1
Finalizing casecmp0
Mark Input dependent function casecmp0
Finalizing main
Finalizing main43
Mark Input dependent function main43
Finalizing dofile
Mark Input dependent function dofile
Finalizing dofile3
Mark Input dependent function dofile3
Finalizing update_file
Mark Input dependent function update_file
Finalizing update_file5
Mark Input dependent function update_file5
Finalizing update_file4
Mark Input dependent function update_file4
Finalizing update_file3
Mark Input dependent function update_file3
Finalizing update_file2
Mark Input dependent function update_file2
Finalizing update_file1
Mark Input dependent function update_file1
Finalizing update_file0
Mark Input dependent function update_file0
Finalizing dofile2
Mark Input dependent function dofile2
Finalizing dofile1
Mark Input dependent function dofile1
Finalizing dofile0
Mark Input dependent function dofile0
Finalizing main42
Mark Input dependent function main42
Finalizing checkfile
Mark Input dependent function checkfile
Finalizing checkfile7
Mark Input dependent function checkfile7
Finalizing checkfile6
Mark Input dependent function checkfile6
Finalizing checkfile5
Mark Input dependent function checkfile5
Finalizing checkfile4
Mark Input dependent function checkfile4
Finalizing checkfile3
Mark Input dependent function checkfile3
Finalizing checkfile2
Mark Input dependent function checkfile2
Finalizing checkfile1
Mark Input dependent function checkfile1
Finalizing checkfile0
Mark Input dependent function checkfile0
Finalizing main41
Mark Input dependent function main41
Finalizing dumpmode
Mark Input dependent function dumpmode
Finalizing dumpmode4
Mark Input dependent function dumpmode4
Finalizing dumpmode3
Mark Input dependent function dumpmode3
Finalizing tbldump
Mark Input dependent function tbldump
Finalizing tbldump0
Mark Input dependent function tbldump0
Finalizing entdump
Mark Input dependent function entdump
Finalizing entdump4
Mark Input dependent function entdump4
Finalizing entdump3
Mark Input dependent function entdump3
Finalizing entdump2
Mark Input dependent function entdump2
Finalizing entdump1
Mark Input dependent function entdump1
Finalizing setdump
Mark Input dependent function setdump
Finalizing setdump4
Mark Input dependent function setdump4
Finalizing setdump3
Mark Input dependent function setdump3
Finalizing subsetdump
Mark Input dependent function subsetdump
Finalizing subsetdump5
Mark Input dependent function subsetdump5
Finalizing subsetdump4
Mark Input dependent function subsetdump4
Finalizing subsetdump3
Mark Input dependent function subsetdump3
Finalizing subsetdump2
Mark Input dependent function subsetdump2
Finalizing subsetdump1
Mark Input dependent function subsetdump1
Finalizing subsetdump0
Mark Input dependent function subsetdump0
Finalizing setdump2
Mark Input dependent function setdump2
Finalizing setdump1
Mark Input dependent function setdump1
Finalizing setdump0
Mark Input dependent function setdump0
Finalizing entdump0
Mark Input dependent function entdump0
Finalizing dumpmode2
Mark Input dependent function dumpmode2
Finalizing dumpmode1
Mark Input dependent function dumpmode1
Finalizing dumpmode0
Mark Input dependent function dumpmode0
Finalizing main40
Mark Input dependent function main40
Finalizing expandmode
Mark Input dependent function expandmode
Finalizing expand_pre
Mark Input dependent function expand_pre
Finalizing expand_pre2
Mark Input dependent function expand_pre2
Finalizing expand_pre1
Mark Input dependent function expand_pre1
Finalizing pr_pre_expansion
Mark Input dependent function pr_pre_expansion
Finalizing pr_pre_expansion6
Mark Input dependent function pr_pre_expansion6
Finalizing expand_suf
Mark Input dependent function expand_suf
Finalizing expand_suf2
Mark Input dependent function expand_suf2
Finalizing expand_suf1
Mark Input dependent function expand_suf1
Finalizing pr_suf_expansion
Mark Input dependent function pr_suf_expansion
Finalizing pr_suf_expansion4
Mark Input dependent function pr_suf_expansion4
Finalizing pr_suf_expansion3
Mark Input dependent function pr_suf_expansion3
Finalizing pr_suf_expansion2
Mark Input dependent function pr_suf_expansion2
Finalizing pr_suf_expansion1
Mark Input dependent function pr_suf_expansion1
Finalizing pr_suf_expansion0
Mark Input dependent function pr_suf_expansion0
Finalizing expand_suf0
Mark Input dependent function expand_suf0
Finalizing pr_pre_expansion5
Mark Input dependent function pr_pre_expansion5
Finalizing forcelc
Mark Input dependent function forcelc
Finalizing forcelc1
Mark Input dependent function forcelc1
Finalizing forcelc0
Mark Input dependent function forcelc0
Finalizing pr_pre_expansion4
Mark Input dependent function pr_pre_expansion4
Finalizing pr_pre_expansion3
Mark Input dependent function pr_pre_expansion3
Finalizing pr_pre_expansion2
Mark Input dependent function pr_pre_expansion2
Finalizing pr_pre_expansion1
Mark Input dependent function pr_pre_expansion1
Finalizing pr_pre_expansion0
Mark Input dependent function pr_pre_expansion0
Finalizing expand_pre0
Mark Input dependent function expand_pre0
Finalizing expandmode1
Mark Input dependent function expandmode1
Finalizing expandmode0
Mark Input dependent function expandmode0
Finalizing main39
Mark Input dependent function main39
Finalizing askmode
Mark Input dependent function askmode
Finalizing askmode10
Mark Input dependent function askmode10
Finalizing askmode9
Mark Input dependent function askmode9
Finalizing askmode8
Mark Input dependent function askmode8
Finalizing askmode7
Mark Input dependent function askmode7
Finalizing treeoutput
Mark Input dependent function treeoutput
Finalizing treeoutput32
Mark Input dependent function treeoutput32
Finalizing treeoutput31
Mark Input dependent function treeoutput31
Finalizing treeoutput30
Mark Input dependent function treeoutput30
Finalizing treeoutput29
Mark Input dependent function treeoutput29
Finalizing treeoutput28
Mark Input dependent function treeoutput28
Finalizing treeoutput27
Mark Input dependent function treeoutput27
Finalizing treeoutput26
Mark Input dependent function treeoutput26
Finalizing treeoutput25
Mark Input dependent function treeoutput25
Finalizing treeoutput24
Mark Input dependent function treeoutput24
Finalizing treeoutput23
Mark Input dependent function treeoutput23
Finalizing treeoutput22
Mark Input dependent function treeoutput22
Finalizing treeoutput21
Mark Input dependent function treeoutput21
Finalizing treeoutput20
Mark Input dependent function treeoutput20
Finalizing treeoutput19
Mark Input dependent function treeoutput19
Finalizing treeoutput18
Mark Input dependent function treeoutput18
Finalizing treeoutput17
Mark Input dependent function treeoutput17
Finalizing treeoutput16
Mark Input dependent function treeoutput16
Finalizing treeoutput15
Mark Input dependent function treeoutput15
Finalizing treeoutput14
Mark Input dependent function treeoutput14
Finalizing treeoutput13
Mark Input dependent function treeoutput13
Finalizing toutent
Mark Input dependent function toutent
Finalizing toutent2
Mark Input dependent function toutent2
Finalizing toutent1
Mark Input dependent function toutent1
Finalizing toutword
Mark Input dependent function toutword
Finalizing toutword2
Mark Input dependent function toutword2
Finalizing toutword1
Mark Input dependent function toutword1
Finalizing flagout
Mark Input dependent function flagout
Finalizing flagout1
Mark Input dependent function flagout1
Finalizing flagout0
Mark Input dependent function flagout0
Finalizing toutword0
Mark Input dependent function toutword0
Finalizing toutent0
Mark Input dependent function toutent0
Finalizing treeoutput12
Mark Input dependent function treeoutput12
Finalizing treeoutput11
Mark Input dependent function treeoutput11
Finalizing treeoutput10
Mark Input dependent function treeoutput10
Finalizing treeoutput9
Mark Input dependent function treeoutput9
Finalizing treeoutput8
Mark Input dependent function treeoutput8
Finalizing treeoutput7
Mark Input dependent function treeoutput7
Finalizing treeoutput6
Mark Input dependent function treeoutput6
Finalizing treeoutput5
Mark Input dependent function treeoutput5
Finalizing treeoutput4
Mark Input dependent function treeoutput4
Finalizing treeoutput3
Mark Input dependent function treeoutput3
Finalizing treeoutput2
Mark Input dependent function treeoutput2
Finalizing treeoutput1
Mark Input dependent function treeoutput1
Finalizing treeoutput0
Mark Input dependent function treeoutput0
Finalizing askmode6
Mark Input dependent function askmode6
Finalizing askmode5
Mark Input dependent function askmode5
Finalizing checkline
Mark Input dependent function checkline
Finalizing checkline20
Mark Input dependent function checkline20
Finalizing checkline19
Mark Input dependent function checkline19
Finalizing correct
Mark Input dependent function correct
Finalizing correct26
Mark Input dependent function correct26
Finalizing lookharder
Mark Input dependent function lookharder
Finalizing lookharder2
Mark Input dependent function lookharder2
Finalizing lookharder1
Mark Input dependent function lookharder1
Finalizing lookharder0
Mark Input dependent function lookharder0
Finalizing correct25
Mark Input dependent function correct25
Finalizing correct24
Mark Input dependent function correct24
Finalizing correct23
Mark Input dependent function correct23
Finalizing correct22
Mark Input dependent function correct22
Finalizing correct21
Mark Input dependent function correct21
Finalizing inserttoken
Mark Input dependent function inserttoken
Finalizing inserttoken6
Mark Input dependent function inserttoken6
Finalizing inserttoken5
Mark Input dependent function inserttoken5
Finalizing inserttoken4
Mark Input dependent function inserttoken4
Finalizing inserttoken3
Mark Input dependent function inserttoken3
Finalizing inserttoken2
Mark Input dependent function inserttoken2
Finalizing inserttoken1
Mark Input dependent function inserttoken1
Finalizing inserttoken0
Mark Input dependent function inserttoken0
Finalizing correct20
Mark Input dependent function correct20
Finalizing correct19
Mark Input dependent function correct19
Finalizing correct18
Mark Input dependent function correct18
Finalizing my_getline
Mark Input dependent function my_getline
Finalizing my_getline6
Mark Input dependent function my_getline6
Finalizing my_getline5
Mark Input dependent function my_getline5
Finalizing my_getline4
Mark Input dependent function my_getline4
Finalizing my_getline3
Mark Input dependent function my_getline3
Finalizing my_getline2
Mark Input dependent function my_getline2
Finalizing my_getline1
Mark Input dependent function my_getline1
Finalizing my_getline0
Mark Input dependent function my_getline0
Finalizing correct17
Mark Input dependent function correct17
Finalizing correct16
Mark Input dependent function correct16
Finalizing correct15
Mark Input dependent function correct15
Finalizing correct14
Mark Input dependent function correct14
Finalizing correct13
Mark Input dependent function correct13
Finalizing correct12
Mark Input dependent function correct12
Finalizing correct11
Mark Input dependent function correct11
Finalizing correct10
Mark Input dependent function correct10
Finalizing correct9
Mark Input dependent function correct9
Finalizing correct8
Mark Input dependent function correct8
Finalizing line_size
Mark Input dependent function line_size
Finalizing line_size0
Mark Input dependent function line_size0
Finalizing correct7
Mark Input dependent function correct7
Finalizing show_line
Mark Input dependent function show_line
Finalizing show_line3
Mark Input dependent function show_line3
Finalizing show_line2
Mark Input dependent function show_line2
Finalizing show_line1
Mark Input dependent function show_line1
Finalizing show_line0
Mark Input dependent function show_line0
Finalizing show_char
Mark Input dependent function show_char
Finalizing show_char14
Mark Input dependent function show_char14
Finalizing show_char13
Mark Input dependent function show_char13
Finalizing show_char12
Mark Input dependent function show_char12
Finalizing show_char11
Mark Input dependent function show_char11
Finalizing show_char10
Mark Input dependent function show_char10
Finalizing show_char9
Mark Input dependent function show_char9
Finalizing show_char8
Mark Input dependent function show_char8
Finalizing show_char7
Mark Input dependent function show_char7
Finalizing show_char6
Mark Input dependent function show_char6
Finalizing show_char5
Mark Input dependent function show_char5
Finalizing show_char4
Mark Input dependent function show_char4
Finalizing show_char3
Mark Input dependent function show_char3
Finalizing show_char2
Mark Input dependent function show_char2
Finalizing show_char1
Mark Input dependent function show_char1
Finalizing show_char0
Mark Input dependent function show_char0
Finalizing correct6
Mark Input dependent function correct6
Finalizing correct5
Mark Input dependent function correct5
Finalizing correct4
Mark Input dependent function correct4
Finalizing correct3
Mark Input dependent function correct3
Finalizing correct2
Mark Input dependent function correct2
Finalizing correct1
Mark Input dependent function correct1
Finalizing correct0
Mark Input dependent function correct0
Finalizing checkline18
Mark Input dependent function checkline18
Finalizing checkline17
Mark Input dependent function checkline17
Finalizing checkline16
Mark Input dependent function checkline16
Finalizing checkline15
Mark Input dependent function checkline15
Finalizing checkline14
Mark Input dependent function checkline14
Finalizing makepossibilities
Mark Input dependent function makepossibilities
Finalizing makepossibilities8
Mark Input dependent function makepossibilities8
Finalizing makepossibilities7
Mark Input dependent function makepossibilities7
Finalizing makepossibilities6
Mark Input dependent function makepossibilities6
Finalizing tryveryhard
Mark Input dependent function tryveryhard
Finalizing tryveryhard0
Mark Input dependent function tryveryhard0
Finalizing makepossibilities5
Mark Input dependent function makepossibilities5
Finalizing missingspace
Mark Input dependent function missingspace
Finalizing missingspace2
Mark Input dependent function missingspace2
Finalizing missingspace1
Mark Input dependent function missingspace1
Finalizing missingspace0
Mark Input dependent function missingspace0
Finalizing makepossibilities4
Mark Input dependent function makepossibilities4
Finalizing wrongletter
Mark Input dependent function wrongletter
Finalizing wrongletter1
Mark Input dependent function wrongletter1
Finalizing wrongletter0
Mark Input dependent function wrongletter0
Finalizing makepossibilities3
Mark Input dependent function makepossibilities3
Finalizing extraletter
Mark Input dependent function extraletter
Finalizing extraletter0
Mark Input dependent function extraletter0
Finalizing makepossibilities2
Mark Input dependent function makepossibilities2
Finalizing transposedletter
Mark Input dependent function transposedletter
Finalizing transposedletter1
Mark Input dependent function transposedletter1
Finalizing transposedletter0
Mark Input dependent function transposedletter0
Finalizing makepossibilities1
Mark Input dependent function makepossibilities1
Finalizing missingletter
Mark Input dependent function missingletter
Finalizing missingletter2
Mark Input dependent function missingletter2
Finalizing missingletter1
Mark Input dependent function missingletter1
Finalizing missingletter0
Mark Input dependent function missingletter0
Finalizing wrongcapital
Mark Input dependent function wrongcapital
Finalizing ins_cap
Mark Input dependent function ins_cap
Finalizing ins_cap0
Mark Input dependent function ins_cap0
Finalizing save_cap
Mark Input dependent function save_cap
Finalizing save_cap4
Mark Input dependent function save_cap4
Finalizing save_cap3
Mark Input dependent function save_cap3
Finalizing save_cap2
Mark Input dependent function save_cap2
Finalizing save_cap1
Mark Input dependent function save_cap1
Finalizing save_cap0
Mark Input dependent function save_cap0
Finalizing makepossibilities0
Mark Input dependent function makepossibilities0
Finalizing checkline13
Mark Input dependent function checkline13
Finalizing checkline12
Mark Input dependent function checkline12
Finalizing checkline11
Mark Input dependent function checkline11
Finalizing checkline10
Mark Input dependent function checkline10
Finalizing checkline9
Mark Input dependent function checkline9
Finalizing compoundgood
Mark Input dependent function compoundgood
Finalizing compoundgood3
Mark Input dependent function compoundgood3
Finalizing compoundgood2
Mark Input dependent function compoundgood2
Finalizing compoundgood1
Mark Input dependent function compoundgood1
Finalizing compoundgood0
Mark Input dependent function compoundgood0
Finalizing good
Mark Input dependent function good
Finalizing good4
Mark Input dependent function good4
Finalizing chk_aff
Mark Input dependent function chk_aff
Finalizing chk_aff2
Mark Input dependent function chk_aff2
Finalizing chk_aff1
Mark Input dependent function chk_aff1
Finalizing chk_aff0
Mark Input dependent function chk_aff0
Finalizing pfx_list_chk
Mark Input dependent function pfx_list_chk
Finalizing pfx_list_chk5
Mark Input dependent function pfx_list_chk5
Finalizing chk_suf
Mark Input dependent function chk_suf
Finalizing chk_suf2
Mark Input dependent function chk_suf2
Finalizing chk_suf1
Mark Input dependent function chk_suf1
Finalizing chk_suf0
Mark Input dependent function chk_suf0
Finalizing suf_list_chk
Mark Input dependent function suf_list_chk
Finalizing suf_list_chk7
Mark Input dependent function suf_list_chk7
Finalizing suf_list_chk6
Mark Input dependent function suf_list_chk6
Finalizing suf_list_chk5
Mark Input dependent function suf_list_chk5
Finalizing suf_list_chk4
Mark Input dependent function suf_list_chk4
Finalizing suf_list_chk3
Mark Input dependent function suf_list_chk3
Finalizing suf_list_chk2
Mark Input dependent function suf_list_chk2
Finalizing suf_list_chk1
Mark Input dependent function suf_list_chk1
Finalizing suf_list_chk0
Mark Input dependent function suf_list_chk0
Finalizing pfx_list_chk4
Mark Input dependent function pfx_list_chk4
Finalizing ins_root_cap
Mark Input dependent function ins_root_cap
Finalizing ins_root_cap0
Mark Input dependent function ins_root_cap0
Finalizing insert
Mark Input dependent function insert
Finalizing insert2
Mark Input dependent function insert2
Finalizing insert1
Mark Input dependent function insert1
Finalizing insert0
Mark Input dependent function insert0
Finalizing save_root_cap
Mark Input dependent function save_root_cap
Finalizing save_root_cap11
Mark Input dependent function save_root_cap11
Finalizing save_root_cap10
Mark Input dependent function save_root_cap10
Finalizing save_root_cap9
Mark Input dependent function save_root_cap9
Finalizing save_root_cap8
Mark Input dependent function save_root_cap8
Finalizing save_root_cap7
Mark Input dependent function save_root_cap7
Finalizing save_root_cap6
Mark Input dependent function save_root_cap6
Finalizing save_root_cap5
Mark Input dependent function save_root_cap5
Finalizing save_root_cap4
Mark Input dependent function save_root_cap4
Finalizing lowcase
Mark Input dependent function lowcase
Finalizing lowcase0
Mark Input dependent function lowcase0
Finalizing save_root_cap3
Mark Input dependent function save_root_cap3
Finalizing save_root_cap2
Mark Input dependent function save_root_cap2
Finalizing save_root_cap1
Mark Input dependent function save_root_cap1
Finalizing save_root_cap0
Mark Input dependent function save_root_cap0
Finalizing pfx_list_chk3
Mark Input dependent function pfx_list_chk3
Finalizing pfx_list_chk2
Mark Input dependent function pfx_list_chk2
Finalizing flagpr
Mark Input dependent function flagpr
Finalizing flagpr16
Mark Input dependent function flagpr16
Finalizing flagpr15
Mark Input dependent function flagpr15
Finalizing flagpr14
Mark Input dependent function flagpr14
Finalizing flagpr13
Mark Input dependent function flagpr13
Finalizing flagpr12
Mark Input dependent function flagpr12
Finalizing flagpr11
Mark Input dependent function flagpr11
Finalizing flagpr10
Mark Input dependent function flagpr10
Finalizing flagpr9
Mark Input dependent function flagpr9
Finalizing flagpr8
Mark Input dependent function flagpr8
Finalizing flagpr7
Mark Input dependent function flagpr7
Finalizing printichar
Mark Input dependent function printichar
Finalizing printichar1
Mark Input dependent function printichar1
Finalizing printichar0
Mark Input dependent function printichar0
Finalizing flagpr6
Mark Input dependent function flagpr6
Finalizing flagpr5
Mark Input dependent function flagpr5
Finalizing flagpr4
Mark Input dependent function flagpr4
Finalizing flagpr3
Mark Input dependent function flagpr3
Finalizing flagpr2
Mark Input dependent function flagpr2
Finalizing flagpr1
Mark Input dependent function flagpr1
Finalizing flagpr0
Mark Input dependent function flagpr0
Finalizing pfx_list_chk1
Mark Input dependent function pfx_list_chk1
Finalizing pfx_list_chk0
Mark Input dependent function pfx_list_chk0
Finalizing cap_ok
Mark Input dependent function cap_ok
Finalizing cap_ok10
Mark Input dependent function cap_ok10
Finalizing cap_ok9
Mark Input dependent function cap_ok9
Finalizing cap_ok8
Mark Input dependent function cap_ok8
Finalizing cap_ok7
Mark Input dependent function cap_ok7
Finalizing cap_ok6
Mark Input dependent function cap_ok6
Finalizing cap_ok5
Mark Input dependent function cap_ok5
Finalizing cap_ok4
Mark Input dependent function cap_ok4
Finalizing cap_ok3
Mark Input dependent function cap_ok3
Finalizing entryhasaffixes
Mark Input dependent function entryhasaffixes
Finalizing cap_ok2
Mark Input dependent function cap_ok2
Finalizing cap_ok1
Mark Input dependent function cap_ok1
Finalizing cap_ok0
Mark Input dependent function cap_ok0
Finalizing good3
Mark Input dependent function good3
Finalizing good2
Mark Input dependent function good2
Finalizing ichartosstr
Mark Input dependent function ichartosstr
Finalizing ichartosstr0
Mark Input dependent function ichartosstr0
Finalizing good1
Mark Input dependent function good1
Finalizing good0
Mark Input dependent function good0
Finalizing checkline8
Mark Input dependent function checkline8
Finalizing checkline7
Mark Input dependent function checkline7
Finalizing checkline6
Mark Input dependent function checkline6
Finalizing skipoverword
Mark Input dependent function skipoverword
Finalizing skipoverword4
Mark Input dependent function skipoverword4
Finalizing skipoverword3
Mark Input dependent function skipoverword3
Finalizing skipoverword2
Mark Input dependent function skipoverword2
Finalizing skipoverword1
Mark Input dependent function skipoverword1
Finalizing skipoverword0
Mark Input dependent function skipoverword0
Finalizing checkline5
Mark Input dependent function checkline5
Finalizing skiptoword
Mark Input dependent function skiptoword
Finalizing skiptoword19
Mark Input dependent function skiptoword19
Finalizing skiptoword18
Mark Input dependent function skiptoword18
Finalizing skiptoword17
Mark Input dependent function skiptoword17
Finalizing skiptoword16
Mark Input dependent function skiptoword16
Finalizing skiptoword15
Mark Input dependent function skiptoword15
Finalizing skiptoword14
Mark Input dependent function skiptoword14
Finalizing skiptoword13
Mark Input dependent function skiptoword13
Finalizing skiptoword12
Mark Input dependent function skiptoword12
Finalizing skiptoword11
Mark Input dependent function skiptoword11
Finalizing skiptoword10
Mark Input dependent function skiptoword10
Finalizing skiptoword9
Mark Input dependent function skiptoword9
Finalizing skiptoword8
Mark Input dependent function skiptoword8
Finalizing TeX_math_begin
Mark Input dependent function TeX_math_begin
Finalizing TeX_math_begin4
Mark Input dependent function TeX_math_begin4
Finalizing TeX_math_begin3
Mark Input dependent function TeX_math_begin3
Finalizing TeX_skip_check
Mark Input dependent function TeX_skip_check
Finalizing TeX_skip_check3
Mark Input dependent function TeX_skip_check3
Finalizing TeX_skip_check2
Mark Input dependent function TeX_skip_check2
Finalizing TeX_skip_check1
Mark Input dependent function TeX_skip_check1
Finalizing TeX_skip_check0
Mark Input dependent function TeX_skip_check0
Finalizing TeX_math_begin2
Mark Input dependent function TeX_math_begin2
Finalizing TeX_math_begin1
Mark Input dependent function TeX_math_begin1
Finalizing TeX_math_begin0
Mark Input dependent function TeX_math_begin0
Finalizing skiptoword7
Mark Input dependent function skiptoword7
Finalizing skiptoword6
Mark Input dependent function skiptoword6
Finalizing skiptoword5
Mark Input dependent function skiptoword5
Finalizing skiptoword4
Mark Input dependent function skiptoword4
Finalizing skiptoword3
Mark Input dependent function skiptoword3
Finalizing TeX_math_end
Mark Input dependent function TeX_math_end
Finalizing TeX_math_end2
Mark Input dependent function TeX_math_end2
Finalizing TeX_LR_begin
Mark Input dependent function TeX_LR_begin
Finalizing TeX_LR_begin2
Mark Input dependent function TeX_LR_begin2
Finalizing TeX_LR_begin1
Mark Input dependent function TeX_LR_begin1
Finalizing TeX_LR_begin0
Mark Input dependent function TeX_LR_begin0
Finalizing TeX_strncmp
Mark Input dependent function TeX_strncmp
Finalizing TeX_strncmp0
Mark Input dependent function TeX_strncmp0
Finalizing TeX_math_end1
Mark Input dependent function TeX_math_end1
Finalizing TeX_math_end0
Mark Input dependent function TeX_math_end0
Finalizing skiptoword2
Mark Input dependent function skiptoword2
Finalizing skiptoword1
Mark Input dependent function skiptoword1
Finalizing TeX_LR_check
Mark Input dependent function TeX_LR_check
Finalizing TeX_LR_check4
Mark Input dependent function TeX_LR_check4
Finalizing TeX_LR_check3
Mark Input dependent function TeX_LR_check3
Finalizing TeX_LR_check2
Mark Input dependent function TeX_LR_check2
Finalizing TeX_LR_check1
Mark Input dependent function TeX_LR_check1
Finalizing TeX_LR_check0
Mark Input dependent function TeX_LR_check0
Finalizing TeX_math_check
Mark Input dependent function TeX_math_check
Finalizing TeX_math_check3
Mark Input dependent function TeX_math_check3
Finalizing TeX_math_check2
Mark Input dependent function TeX_math_check2
Finalizing TeX_skip_args
Mark Input dependent function TeX_skip_args
Finalizing TeX_skip_args3
Mark Input dependent function TeX_skip_args3
Finalizing TeX_skip_args2
Mark Input dependent function TeX_skip_args2
Finalizing TeX_skip_args1
Mark Input dependent function TeX_skip_args1
Finalizing TeX_skip_args0
Mark Input dependent function TeX_skip_args0
Finalizing TeX_math_check1
Mark Input dependent function TeX_math_check1
Finalizing TeX_skip_parens
Mark Input dependent function TeX_skip_parens
Finalizing TeX_skip_parens0
Mark Input dependent function TeX_skip_parens0
Finalizing TeX_math_check0
Mark Input dependent function TeX_math_check0
Finalizing TeX_open_paren
Mark Input dependent function TeX_open_paren
Finalizing TeX_open_paren0
Mark Input dependent function TeX_open_paren0
Finalizing skiptoword0
Mark Input dependent function skiptoword0
Finalizing checkline4
Mark Input dependent function checkline4
Finalizing checkline3
Mark Input dependent function checkline3
Finalizing checkline2
Mark Input dependent function checkline2
Finalizing checkline1
Mark Input dependent function checkline1
Finalizing copyout
Mark Input dependent function copyout
Finalizing copyout1
Mark Input dependent function copyout1
Finalizing copyout0
Mark Input dependent function copyout0
Finalizing checkline0
Mark Input dependent function checkline0
Finalizing askmode4
Mark Input dependent function askmode4
Finalizing askmode3
Mark Input dependent function askmode3
Finalizing askmode2
Mark Input dependent function askmode2
Finalizing xgets
Mark Input dependent function xgets
Finalizing xgets4
Mark Input dependent function xgets4
Finalizing xgets3
Mark Input dependent function xgets3
Finalizing xgets2
Mark Input dependent function xgets2
Finalizing xgets1
Mark Input dependent function xgets1
Finalizing xgets0
Mark Input dependent function xgets0
Finalizing askmode1
Mark Input dependent function askmode1
Finalizing askmode0
Mark Input dependent function askmode0
Finalizing main38
Mark Input dependent function main38
Finalizing treeinit
Mark Input dependent function treeinit
Finalizing treeinit8
Mark Input dependent function treeinit8
Finalizing treeinit7
Mark Input dependent function treeinit7
Finalizing treeinit6
Mark Input dependent function treeinit6
Finalizing treeinit5
Mark Input dependent function treeinit5
Finalizing treeinit4
Mark Input dependent function treeinit4
Finalizing treeinit3
Mark Input dependent function treeinit3
Finalizing treeinit2
Mark Input dependent function treeinit2
Finalizing treeload
Mark Input dependent function treeload
Finalizing treeinsert
Mark Input dependent function treeinsert
Finalizing treeinsert13
Mark Input dependent function treeinsert13
Finalizing treeinsert12
Mark Input dependent function treeinsert12
Finalizing treeinsert11
Mark Input dependent function treeinsert11
Finalizing combinecaps
Mark Input dependent function combinecaps
Finalizing combinecaps3
Mark Input dependent function combinecaps3
Finalizing combinecaps2
Mark Input dependent function combinecaps2
Finalizing combinecaps1
Mark Input dependent function combinecaps1
Finalizing forcevheader
Mark Input dependent function forcevheader
Finalizing forcevheader0
Mark Input dependent function forcevheader0
Finalizing combinecaps0
Mark Input dependent function combinecaps0
Finalizing combine_two_entries
Mark Input dependent function combine_two_entries
Finalizing combine_two_entries2
Mark Input dependent function combine_two_entries2
Finalizing addvheader
Mark Input dependent function addvheader
Finalizing addvheader4
Mark Input dependent function addvheader4
Finalizing addvheader3
Mark Input dependent function addvheader3
Finalizing addvheader2
Mark Input dependent function addvheader2
Finalizing addvheader1
Mark Input dependent function addvheader1
Finalizing addvheader0
Mark Input dependent function addvheader0
Finalizing combine_two_entries1
Mark Input dependent function combine_two_entries1
Finalizing combine_two_entries0
Mark Input dependent function combine_two_entries0
Finalizing myfree
Mark Input dependent function myfree
Finalizing myfree0
Mark Input dependent function myfree0
Finalizing combineaffixes
Mark Input dependent function combineaffixes
Finalizing combineaffixes0
Mark Input dependent function combineaffixes0
Finalizing acoversb
Mark Input dependent function acoversb
Finalizing issubset
Mark Input dependent function issubset
Finalizing lookup
Mark Input dependent function lookup
Finalizing lookup3
Mark Input dependent function lookup3
Finalizing treelookup
Mark Input dependent function treelookup
Finalizing treelookup2
Mark Input dependent function treelookup2
Finalizing treelookup1
Mark Input dependent function treelookup1
Finalizing treelookup0
Mark Input dependent function treelookup0
Finalizing lookup2
Mark Input dependent function lookup2
Finalizing lookup1
Mark Input dependent function lookup1
Finalizing lookup0
Mark Input dependent function lookup0
Finalizing treeinsert10
Mark Input dependent function treeinsert10
Finalizing makedent
Mark Input dependent function makedent
Finalizing makedent10
Mark Input dependent function makedent10
Finalizing makedent9
Mark Input dependent function makedent9
Finalizing makedent8
Mark Input dependent function makedent8
Finalizing makedent7
Mark Input dependent function makedent7
Finalizing chupcase
Mark Input dependent function chupcase
Finalizing chupcase0
Mark Input dependent function chupcase0
Finalizing upcase
Mark Input dependent function upcase
Finalizing upcase0
Mark Input dependent function upcase0
Finalizing strtosichar
Mark Input dependent function strtosichar
Finalizing strtosichar0
Mark Input dependent function strtosichar0
Finalizing makedent6
Mark Input dependent function makedent6
Finalizing mymalloc
Mark Input dependent function mymalloc
Finalizing makedent5
Mark Input dependent function makedent5
Finalizing whatcap
Mark Input dependent function whatcap
Finalizing whatcap4
Mark Input dependent function whatcap4
Finalizing whatcap3
Mark Input dependent function whatcap3
Finalizing whatcap2
Mark Input dependent function whatcap2
Finalizing whatcap1
Mark Input dependent function whatcap1
Finalizing whatcap0
Mark Input dependent function whatcap0
Finalizing makedent4
Mark Input dependent function makedent4
Finalizing makedent3
Mark Input dependent function makedent3
Finalizing makedent2
Mark Input dependent function makedent2
Finalizing ichartostr
Mark Input dependent function ichartostr
Finalizing ichartostr4
Mark Input dependent function ichartostr4
Finalizing ichartostr3
Mark Input dependent function ichartostr3
Finalizing ichartostr2
Mark Input dependent function ichartostr2
Finalizing ichartostr1
Mark Input dependent function ichartostr1
Finalizing ichartostr0
Mark Input dependent function ichartostr0
Finalizing makedent1
Mark Input dependent function makedent1
Finalizing makedent0
Mark Input dependent function makedent0
Finalizing treeinsert9
Mark Input dependent function treeinsert9
Finalizing treeinsert8
Mark Input dependent function treeinsert8
Finalizing treeinsert7
Mark Input dependent function treeinsert7
Finalizing treeinsert6
Mark Input dependent function treeinsert6
Finalizing treeinsert5
Mark Input dependent function treeinsert5
Finalizing tinsert
Mark Input dependent function tinsert
Finalizing tinsert3
Mark Input dependent function tinsert3
Finalizing tinsert2
Mark Input dependent function tinsert2
Finalizing tinsert1
Mark Input dependent function tinsert1
Finalizing hash
Mark Input dependent function hash
Finalizing hash1
Mark Input dependent function hash1
Finalizing hash0
Mark Input dependent function hash0
Finalizing tinsert0
Mark Input dependent function tinsert0
Finalizing strtoichar
Mark Input dependent function strtoichar
Finalizing strtoichar3
Mark Input dependent function strtoichar3
Finalizing strtoichar2
Mark Input dependent function strtoichar2
Finalizing strtoichar1
Mark Input dependent function strtoichar1
Finalizing stringcharlen
Mark Input dependent function stringcharlen
Finalizing stringcharlen8
Mark Input dependent function stringcharlen8
Finalizing stringcharlen7
Mark Input dependent function stringcharlen7
Finalizing stringcharlen6
Mark Input dependent function stringcharlen6
Finalizing stringcharlen5
Mark Input dependent function stringcharlen5
Finalizing stringcharlen4
Mark Input dependent function stringcharlen4
Finalizing stringcharlen3
Mark Input dependent function stringcharlen3
Finalizing stringcharlen2
Mark Input dependent function stringcharlen2
Finalizing stringcharlen1
Mark Input dependent function stringcharlen1
Finalizing stringcharlen0
Mark Input dependent function stringcharlen0
Finalizing strtoichar0
Mark Input dependent function strtoichar0
Finalizing treeinsert4
Mark Input dependent function treeinsert4
Finalizing treeinsert3
Mark Input dependent function treeinsert3
Finalizing treeinsert2
Mark Input dependent function treeinsert2
Finalizing treeinsert1
Mark Input dependent function treeinsert1
Finalizing treeinsert0
Mark Input dependent function treeinsert0
Finalizing treeinit1
Mark Input dependent function treeinit1
Finalizing trydict
Mark Input dependent function trydict
Finalizing trydict2
Mark Input dependent function trydict2
Finalizing trydict1
Mark Input dependent function trydict1
Finalizing trydict0
Mark Input dependent function trydict0
Finalizing treeinit0
Mark Input dependent function treeinit0
Finalizing main37
Mark Input dependent function main37
Finalizing initckch
Mark Input dependent function initckch
Finalizing initckch2
Mark Input dependent function initckch2
Finalizing initckch1
Mark Input dependent function initckch1
Finalizing initckch0
Mark Input dependent function initckch0
Finalizing main36
Mark Input dependent function main36
Finalizing main35
Mark Input dependent function main35
Finalizing main34
Mark Input dependent function main34
Finalizing main33
Mark Input dependent function main33
Finalizing findfiletype
Mark Input dependent function findfiletype
Finalizing findfiletype7
Mark Input dependent function findfiletype7
Finalizing findfiletype6
Mark Input dependent function findfiletype6
Finalizing findfiletype5
Mark Input dependent function findfiletype5
Finalizing findfiletype4
Mark Input dependent function findfiletype4
Finalizing findfiletype3
Mark Input dependent function findfiletype3
Finalizing findfiletype2
Mark Input dependent function findfiletype2
Finalizing findfiletype1
Mark Input dependent function findfiletype1
Finalizing findfiletype0
Mark Input dependent function findfiletype0
Finalizing linit
Mark Input dependent function linit
Finalizing linit49
Mark Input dependent function linit49
Finalizing linit48
Mark Input dependent function linit48
Finalizing linit47
Mark Input dependent function linit47
Finalizing linit46
Mark Input dependent function linit46
Finalizing linit45
Mark Input dependent function linit45
Finalizing linit44
Mark Input dependent function linit44
Finalizing linit43
Mark Input dependent function linit43
Finalizing linit42
Mark Input dependent function linit42
Finalizing linit41
Mark Input dependent function linit41
Finalizing linit40
Mark Input dependent function linit40
Finalizing linit39
Mark Input dependent function linit39
Finalizing linit38
Mark Input dependent function linit38
Finalizing linit37
Mark Input dependent function linit37
Finalizing linit36
Mark Input dependent function linit36
Finalizing linit35
Mark Input dependent function linit35
Finalizing linit34
Mark Input dependent function linit34
Finalizing linit33
Mark Input dependent function linit33
Finalizing linit32
Mark Input dependent function linit32
Finalizing linit31
Mark Input dependent function linit31
Finalizing linit30
Mark Input dependent function linit30
Finalizing linit29
Mark Input dependent function linit29
Finalizing linit28
Mark Input dependent function linit28
Finalizing linit27
Mark Input dependent function linit27
Finalizing linit26
Mark Input dependent function linit26
Finalizing linit25
Mark Input dependent function linit25
Finalizing linit24
Mark Input dependent function linit24
Finalizing linit23
Mark Input dependent function linit23
Finalizing linit22
Mark Input dependent function linit22
Finalizing linit21
Mark Input dependent function linit21
Finalizing linit20
Mark Input dependent function linit20
Finalizing linit19
Mark Input dependent function linit19
Finalizing linit18
Mark Input dependent function linit18
Finalizing linit17
Mark Input dependent function linit17
Finalizing linit16
Mark Input dependent function linit16
Finalizing linit15
Mark Input dependent function linit15
Finalizing linit14
Mark Input dependent function linit14
Finalizing linit13
Mark Input dependent function linit13
Finalizing linit12
Mark Input dependent function linit12
Finalizing linit11
Mark Input dependent function linit11
Finalizing linit10
Mark Input dependent function linit10
Finalizing linit9
Mark Input dependent function linit9
Finalizing linit8
Mark Input dependent function linit8
Finalizing linit7
Mark Input dependent function linit7
Finalizing linit6
Mark Input dependent function linit6
Finalizing linit5
Mark Input dependent function linit5
Finalizing linit4
Mark Input dependent function linit4
Finalizing linit3
Mark Input dependent function linit3
Finalizing linit2
Mark Input dependent function linit2
Finalizing linit1
Mark Input dependent function linit1
Finalizing linit0
Mark Input dependent function linit0
Finalizing main32
Mark Input dependent function main32
Finalizing main31
Mark Input dependent function main31
Finalizing main30
Mark Input dependent function main30
Finalizing main29
Mark Input dependent function main29
Finalizing main28
Mark Input dependent function main28
Finalizing main27
Mark Input dependent function main27
Finalizing main26
Mark Input dependent function main26
Finalizing main25
Mark Input dependent function main25
Finalizing main24
Mark Input dependent function main24
Finalizing main23
Mark Input dependent function main23
Finalizing main22
Mark Input dependent function main22
Finalizing main21
Mark Input dependent function main21
Finalizing main20
Mark Input dependent function main20
Finalizing main19
Mark Input dependent function main19
Finalizing main18
Mark Input dependent function main18
Finalizing main17
Mark Input dependent function main17
Finalizing main16
Mark Input dependent function main16
Finalizing main15
Mark Input dependent function main15
Finalizing main14
Mark Input dependent function main14
Finalizing main13
Mark Input dependent function main13
Finalizing main12
Mark Input dependent function main12
Finalizing main11
Mark Input dependent function main11
Finalizing main10
Mark Input dependent function main10
Finalizing main9
Mark Input dependent function main9
Finalizing main8
Mark Input dependent function main8
Finalizing main7
Mark Input dependent function main7
Finalizing main6
Mark Input dependent function main6
Finalizing usage
Mark Input dependent function usage
Finalizing givehelp
Mark Input dependent function givehelp
Finalizing givehelp2
Mark Input dependent function givehelp2
Finalizing givehelp1
Mark Input dependent function givehelp1
Finalizing givehelp0
Mark Input dependent function givehelp0
Finalizing usage0
Mark Input dependent function usage0
Finalizing main5
Finalizing main4
Mark Input dependent function main4
Finalizing main3
Mark Input dependent function main3
Finalizing main2
Mark Input dependent function main2
Finalizing main1
Mark Input dependent function main1
Finalizing main0
Finalizing shellescape
Mark Input dependent function shellescape
Finalizing shellescape5
Mark Input dependent function shellescape5
Finalizing shellescape4
Mark Input dependent function shellescape4
Finalizing shellescape3
Mark Input dependent function shellescape3
Finalizing shellescape2
Mark Input dependent function shellescape2
Finalizing shellescape1
Mark Input dependent function shellescape1
Finalizing shellescape0
Mark Input dependent function shellescape0
Finalizing stop
Mark Input dependent function stop
Finalizing onstop
Mark Input dependent function onstop
Finalizing onstop0
Mark Input dependent function onstop0
Finalizing done
Mark Input dependent function done
Finalizing terminit
Mark Input dependent function terminit
Finalizing terminit5
Mark Input dependent function terminit5
Finalizing terminit4
Mark Input dependent function terminit4
Finalizing terminit3
Mark Input dependent function terminit3
Finalizing terminit2
Mark Input dependent function terminit2
Finalizing terminit1
Mark Input dependent function terminit1
Finalizing terminit0
Mark Input dependent function terminit0
Finalizing backup
Mark Input dependent function backup
Finalizing normal
Mark Input dependent function normal
Finalizing inverse
Mark Input dependent function inverse
Finalizing move
Mark Input dependent function move
Finalizing erase
Mark Input dependent function erase
Finished input dependency analysis

In  mark function pass 
In  filter function pass 
Filter file:/home/anahitik/SIP/sip-eval/combination/ispell.x.bc/25/0
here!:linit3
here!:flagpr7
here!:inserttoken
here!:flagpr14
here!:save_root_cap2
here!:pr_pre_expansion2
here!:linit27
here!:correct6
here!:skiptoword5
here!:casecmp
here!:correct8
here!:pr_pre_expansion
here!:linit5
here!:myfree
here!:combine_two_entries1
here!:askmode7
here!:chupcase0
here!:good2
here!:findfiletype2
here!:treeinsert4
here!:linit33
here!:TeX_LR_check0
here!:wrongletter
here!:treeoutput23
here!:combinecaps1
here!:combine_two_entries2
here!:show_char4
here!:strtoichar0
here!:terminit5
here!:entdump4
here!:treeoutput16
here!:ichartosstr0
here!:main32
here!:treeoutput32
here!:askmode6
here!:flagpr16
here!:suf_list_chk6
here!:pdictcmp
here!:treeinsert12
here!:lookharder2
here!:main19
here!:checkline20
here!:suf_list_chk0
here!:correct20
here!:correct25
here!:expand_suf
here!:treeinsert5
here!:treeinsert
here!:tryveryhard
here!:good3
here!:linit12
here!:tbldump
here!:dumpmode1
here!:skipoverword4
here!:expand_suf2
here!:treeoutput7
here!:main34
here!:extraletter
here!:TeX_math_check1
here!:main3
here!:suf_list_chk2
here!:strtoichar3
here!:terminit2
here!:correct26
here!:missingspace0
here!:correct
here!:compoundgood3
here!:missingletter2
here!:linit4
here!:TeX_math_check0
here!:treeinit0
here!:skiptoword10
here!:treeinit2
here!:main11
here!:flagout1
here!:compoundgood
here!:forcevheader
here!:treeoutput10
here!:skiptoword
here!:linit41
here!:cap_ok3
here!:correct12
here!:lookup
here!:givehelp
here!:dofile1
here!:correct21
here!:TeX_math_check
here!:checkline4
here!:treeinsert0
here!:flagpr6
here!:main38
here!:linit7
here!:linit23
here!:posscmp
here!:show_line3
here!:ichartostr4
here!:tinsert0
here!:pfx_list_chk3
here!:printichar
here!:linit10
here!:linit8
here!:main37
here!:cap_ok1
here!:lookup3
here!:treeoutput1
here!:usage0
here!:pr_pre_expansion5
here!:initckch0
here!:makepossibilities0
here!:pr_suf_expansion2
here!:checkline12
here!:flagpr0
here!:dofile3
here!:combine_two_entries
here!:pr_pre_expansion1
here!:makedent3
here!:linit
here!:linit18
here!:wrongletter0
here!:whatcap4
here!:ins_root_cap0
here!:show_char9
here!:treeoutput3
here!:compoundgood1
here!:checkline15
here!:good0
here!:treeoutput30
here!:linit48
here!:main35
here!:linit37
here!:linit11
here!:skipoverword0
here!:dumpmode0
here!:addvheader0
here!:skipoverword2
here!:transposedletter1
here!:casecmp4
here!:save_root_cap1
here!:flagpr11
here!:skiptoword6
here!:correct9
here!:casecmp2
here!:update_file1
here!:flagpr
here!:flagpr15
here!:treeload
here!:backup
here!:cap_ok
here!:expandmode0
here!:main12
here!:treeoutput25
here!:combine_two_entries0
here!:treeoutput17
here!:linit17
here!:line_size
here!:linit15
here!:line_size0
here!:checkline9
here!:initckch2
here!:checkfile0
here!:flagpr5
here!:linit16
here!:checkfile7
here!:insert1
here!:linit21
here!:askmode0
here!:stringcharlen2
here!:entryhasaffixes
here!:treeoutput0
here!:strtosichar0
here!:main2
here!:main1
here!:save_root_cap6
here!:cap_ok7
here!:cap_ok7
got filter function names
did not find erase demangled to erase
did not find move demangled to move
did not find inverse demangled to inverse
did not find normal demangled to normal
Add filter function backup
FunctionInfo. Adding function:backup
did not find terminit demangled to terminit
did not find getenv demangled to getenv
did not find atoi demangled to atoi
did not find fprintf demangled to fprintf
did not find isatty demangled to isatty
did not find exit demangled to exit
did not find tcgetattr demangled to tcgetattr
did not find llvm.memcpy.p0i8.p0i8.i64 demangled to llvm.memcpy.p0i8.p0i8.i64
did not find tcsetattr demangled to tcsetattr
did not find signal demangled to signal
did not find done demangled to done
did not find onstop demangled to onstop
did not find kill demangled to kill
did not find unlink demangled to unlink
did not find stop demangled to stop
did not find shellescape demangled to shellescape
did not find fork demangled to fork
did not find execvp demangled to execvp
did not find _exit demangled to _exit
did not find wait demangled to wait
did not find printf demangled to printf
did not find fflush demangled to fflush
did not find getchar demangled to getchar
did not find main demangled to main
did not find index demangled to index
did not find strcpy demangled to strcpy
did not find sprintf demangled to sprintf
did not find rindex demangled to rindex
did not find strcmp demangled to strcmp
did not find strcat demangled to strcat
did not find strlen demangled to strlen
did not find usage demangled to usage
did not find strncmp demangled to strncmp
did not find access demangled to access
did not find initckch demangled to initckch
did not find expandmode demangled to expandmode
did not find setbuf demangled to setbuf
did not find dofile demangled to dofile
did not find fopen demangled to fopen
did not find sleep demangled to sleep
did not find fileno demangled to fileno
did not find fstat demangled to fstat
did not find mktemp demangled to mktemp
did not find chmod demangled to chmod
did not find fclose demangled to fclose
did not find update_file demangled to update_file
did not find link demangled to link
did not find _IO_getc demangled to _IO_getc
did not find _IO_putc demangled to _IO_putc
did not find fputs demangled to fputs
did not find llvm.memset.p0i8.i64 demangled to llvm.memset.p0i8.i64
did not find putchar demangled to putchar
did not find __ctype_b_loc demangled to __ctype_b_loc
Add filter function givehelp
FunctionInfo. Adding function:givehelp
did not find checkfile demangled to checkfile
did not find fgets demangled to fgets
Add filter function correct
FunctionInfo. Adding function:correct
Add filter function compoundgood
FunctionInfo. Adding function:compoundgood
did not find makepossibilities demangled to makepossibilities
did not find show_line demangled to show_line
Add filter function line_size
FunctionInfo. Adding function:line_size
did not find my_getline demangled to my_getline
Add filter function inserttoken
FunctionInfo. Adding function:inserttoken
did not find lookharder demangled to lookharder
did not find show_char demangled to show_char
did not find wrongcapital demangled to wrongcapital
did not find missingletter demangled to missingletter
did not find transposedletter demangled to transposedletter
Add filter function extraletter
FunctionInfo. Adding function:extraletter
Add filter function wrongletter
FunctionInfo. Adding function:wrongletter
did not find missingspace demangled to missingspace
Add filter function tryveryhard
FunctionInfo. Adding function:tryveryhard
Add filter function posscmp
FunctionInfo. Adding function:posscmp
did not find qsort demangled to qsort
Add filter function casecmp
FunctionInfo. Adding function:casecmp
did not find save_cap demangled to save_cap
did not find insert demangled to insert
did not find save_root_cap demangled to save_root_cap
did not find bcopy demangled to bcopy
did not find ins_cap demangled to ins_cap
did not find ins_root_cap demangled to ins_root_cap
did not find askmode demangled to askmode
did not find freopen demangled to freopen
did not find rewind demangled to rewind
did not find creat demangled to creat
did not find copyout demangled to copyout
did not find skipoverword demangled to skipoverword
did not find checkline demangled to checkline
Add filter function skiptoword
FunctionInfo. Adding function:skiptoword
Add filter function TeX_math_check
FunctionInfo. Adding function:TeX_math_check
did not find TeX_LR_check demangled to TeX_LR_check
did not find TeX_math_end demangled to TeX_math_end
did not find TeX_strncmp demangled to TeX_strncmp
did not find TeX_skip_parens demangled to TeX_skip_parens
did not find TeX_math_begin demangled to TeX_math_begin
did not find TeX_skip_check demangled to TeX_skip_check
did not find TeX_LR_begin demangled to TeX_LR_begin
did not find TeX_open_paren demangled to TeX_open_paren
did not find TeX_skip_args demangled to TeX_skip_args
did not find dumpmode demangled to dumpmode
Add filter function tbldump
FunctionInfo. Adding function:tbldump
did not find entdump demangled to entdump
did not find setdump demangled to setdump
did not find subsetdump demangled to subsetdump
did not find good demangled to good
Add filter function cap_ok
FunctionInfo. Adding function:cap_ok
Add filter function entryhasaffixes
FunctionInfo. Adding function:entryhasaffixes
Add filter function flagpr
FunctionInfo. Adding function:flagpr
Add filter function linit
FunctionInfo. Adding function:linit
did not find open demangled to open
did not find read demangled to read
did not find calloc demangled to calloc
did not find malloc demangled to malloc
did not find lseek demangled to lseek
did not find close demangled to close
Add filter function lookup
FunctionInfo. Adding function:lookup
did not find hash demangled to hash
did not find makedent demangled to makedent
did not find strtoichar demangled to strtoichar
did not find ichartostr demangled to ichartostr
did not find whatcap demangled to whatcap
did not find chupcase demangled to chupcase
did not find strtosichar demangled to strtosichar
did not find upcase demangled to upcase
did not find stringcharlen demangled to stringcharlen
did not find addvheader demangled to addvheader
did not find combinecaps demangled to combinecaps
Add filter function combine_two_entries
FunctionInfo. Adding function:combine_two_entries
Add filter function forcevheader
FunctionInfo. Adding function:forcevheader
did not find combineaffixes demangled to combineaffixes
did not find acoversb demangled to acoversb
did not find issubset demangled to issubset
did not find lowcase demangled to lowcase
did not find toutent demangled to toutent
did not find ichartosstr demangled to ichartosstr
did not find toutword demangled to toutword
did not find flagout demangled to flagout
Add filter function printichar
FunctionInfo. Adding function:printichar
did not find findfiletype demangled to findfiletype
did not find chk_aff demangled to chk_aff
did not find pfx_list_chk demangled to pfx_list_chk
did not find chk_suf demangled to chk_suf
did not find suf_list_chk demangled to suf_list_chk
did not find expand_pre demangled to expand_pre
Add filter function pr_pre_expansion
FunctionInfo. Adding function:pr_pre_expansion
did not find forcelc demangled to forcelc
Add filter function expand_suf
FunctionInfo. Adding function:expand_suf
did not find pr_suf_expansion demangled to pr_suf_expansion
did not find treeinit demangled to treeinit
did not find trydict demangled to trydict
Add filter function treeload
FunctionInfo. Adding function:treeload
did not find perror demangled to perror
did not find __errno_location demangled to __errno_location
Add filter function treeinsert
FunctionInfo. Adding function:treeinsert
did not find tinsert demangled to tinsert
did not find free demangled to free
did not find treelookup demangled to treelookup
did not find treeoutput demangled to treeoutput
Add filter function pdictcmp
FunctionInfo. Adding function:pdictcmp
did not find mymalloc demangled to mymalloc
Add filter function myfree
FunctionInfo. Adding function:myfree
did not find xgets demangled to xgets
did not find terminit0 demangled to terminit0
did not find terminit1 demangled to terminit1
Add filter function terminit2
FunctionInfo. Adding function:terminit2
did not find terminit3 demangled to terminit3
did not find terminit4 demangled to terminit4
Add filter function terminit5
FunctionInfo. Adding function:terminit5
did not find onstop0 demangled to onstop0
did not find shellescape0 demangled to shellescape0
did not find shellescape1 demangled to shellescape1
did not find shellescape2 demangled to shellescape2
did not find shellescape3 demangled to shellescape3
did not find shellescape4 demangled to shellescape4
did not find shellescape5 demangled to shellescape5
did not find main0 demangled to main0
Add filter function main1
FunctionInfo. Adding function:main1
Add filter function main2
FunctionInfo. Adding function:main2
Add filter function main3
FunctionInfo. Adding function:main3
did not find main4 demangled to main4
did not find main5 demangled to main5
did not find main6 demangled to main6
did not find main7 demangled to main7
did not find main8 demangled to main8
did not find main9 demangled to main9
did not find main10 demangled to main10
Add filter function main11
FunctionInfo. Adding function:main11
Add filter function main12
FunctionInfo. Adding function:main12
did not find main13 demangled to main13
did not find main14 demangled to main14
did not find main15 demangled to main15
did not find main16 demangled to main16
did not find main17 demangled to main17
did not find main18 demangled to main18
Add filter function main19
FunctionInfo. Adding function:main19
did not find main20 demangled to main20
did not find main21 demangled to main21
did not find main22 demangled to main22
did not find main23 demangled to main23
did not find main24 demangled to main24
did not find main25 demangled to main25
did not find main26 demangled to main26
did not find main27 demangled to main27
did not find main28 demangled to main28
did not find main29 demangled to main29
did not find main30 demangled to main30
did not find main31 demangled to main31
Add filter function main32
FunctionInfo. Adding function:main32
did not find main33 demangled to main33
Add filter function main34
FunctionInfo. Adding function:main34
Add filter function main35
FunctionInfo. Adding function:main35
did not find main36 demangled to main36
Add filter function main37
FunctionInfo. Adding function:main37
Add filter function main38
FunctionInfo. Adding function:main38
did not find main39 demangled to main39
did not find main40 demangled to main40
did not find main41 demangled to main41
did not find main42 demangled to main42
did not find main43 demangled to main43
Add filter function usage0
FunctionInfo. Adding function:usage0
Add filter function initckch0
FunctionInfo. Adding function:initckch0
did not find initckch1 demangled to initckch1
Add filter function initckch2
FunctionInfo. Adding function:initckch2
Add filter function expandmode0
FunctionInfo. Adding function:expandmode0
did not find expandmode1 demangled to expandmode1
did not find dofile0 demangled to dofile0
Add filter function dofile1
FunctionInfo. Adding function:dofile1
did not find dofile2 demangled to dofile2
Add filter function dofile3
FunctionInfo. Adding function:dofile3
did not find update_file0 demangled to update_file0
Add filter function update_file1
FunctionInfo. Adding function:update_file1
did not find update_file2 demangled to update_file2
did not find update_file3 demangled to update_file3
did not find update_file4 demangled to update_file4
did not find update_file5 demangled to update_file5
did not find givehelp0 demangled to givehelp0
did not find givehelp1 demangled to givehelp1
did not find givehelp2 demangled to givehelp2
Add filter function checkfile0
FunctionInfo. Adding function:checkfile0
did not find checkfile1 demangled to checkfile1
did not find checkfile2 demangled to checkfile2
did not find checkfile3 demangled to checkfile3
did not find checkfile4 demangled to checkfile4
did not find checkfile5 demangled to checkfile5
did not find checkfile6 demangled to checkfile6
Add filter function checkfile7
FunctionInfo. Adding function:checkfile7
did not find correct0 demangled to correct0
did not find correct1 demangled to correct1
did not find correct2 demangled to correct2
did not find correct3 demangled to correct3
did not find correct4 demangled to correct4
did not find correct5 demangled to correct5
Add filter function correct6
FunctionInfo. Adding function:correct6
did not find correct7 demangled to correct7
Add filter function correct8
FunctionInfo. Adding function:correct8
Add filter function correct9
FunctionInfo. Adding function:correct9
did not find correct10 demangled to correct10
did not find correct11 demangled to correct11
Add filter function correct12
FunctionInfo. Adding function:correct12
did not find correct13 demangled to correct13
did not find correct14 demangled to correct14
did not find correct15 demangled to correct15
did not find correct16 demangled to correct16
did not find correct17 demangled to correct17
did not find correct18 demangled to correct18
did not find correct19 demangled to correct19
Add filter function correct20
FunctionInfo. Adding function:correct20
Add filter function correct21
FunctionInfo. Adding function:correct21
did not find correct22 demangled to correct22
did not find correct23 demangled to correct23
did not find correct24 demangled to correct24
Add filter function correct25
FunctionInfo. Adding function:correct25
Add filter function correct26
FunctionInfo. Adding function:correct26
did not find compoundgood0 demangled to compoundgood0
Add filter function compoundgood1
FunctionInfo. Adding function:compoundgood1
did not find compoundgood2 demangled to compoundgood2
Add filter function compoundgood3
FunctionInfo. Adding function:compoundgood3
Add filter function makepossibilities0
FunctionInfo. Adding function:makepossibilities0
did not find makepossibilities1 demangled to makepossibilities1
did not find makepossibilities2 demangled to makepossibilities2
did not find makepossibilities3 demangled to makepossibilities3
did not find makepossibilities4 demangled to makepossibilities4
did not find makepossibilities5 demangled to makepossibilities5
did not find makepossibilities6 demangled to makepossibilities6
did not find makepossibilities7 demangled to makepossibilities7
did not find makepossibilities8 demangled to makepossibilities8
did not find show_line0 demangled to show_line0
did not find show_line1 demangled to show_line1
did not find show_line2 demangled to show_line2
Add filter function show_line3
FunctionInfo. Adding function:show_line3
Add filter function line_size0
FunctionInfo. Adding function:line_size0
did not find my_getline0 demangled to my_getline0
did not find my_getline1 demangled to my_getline1
did not find my_getline2 demangled to my_getline2
did not find my_getline3 demangled to my_getline3
did not find my_getline4 demangled to my_getline4
did not find my_getline5 demangled to my_getline5
did not find my_getline6 demangled to my_getline6
did not find inserttoken0 demangled to inserttoken0
did not find inserttoken1 demangled to inserttoken1
did not find inserttoken2 demangled to inserttoken2
did not find inserttoken3 demangled to inserttoken3
did not find inserttoken4 demangled to inserttoken4
did not find inserttoken5 demangled to inserttoken5
did not find inserttoken6 demangled to inserttoken6
did not find lookharder0 demangled to lookharder0
did not find lookharder1 demangled to lookharder1
Add filter function lookharder2
FunctionInfo. Adding function:lookharder2
did not find show_char0 demangled to show_char0
did not find show_char1 demangled to show_char1
did not find show_char2 demangled to show_char2
did not find show_char3 demangled to show_char3
Add filter function show_char4
FunctionInfo. Adding function:show_char4
did not find show_char5 demangled to show_char5
did not find show_char6 demangled to show_char6
did not find show_char7 demangled to show_char7
did not find show_char8 demangled to show_char8
Add filter function show_char9
FunctionInfo. Adding function:show_char9
did not find show_char10 demangled to show_char10
did not find show_char11 demangled to show_char11
did not find show_char12 demangled to show_char12
did not find show_char13 demangled to show_char13
did not find show_char14 demangled to show_char14
did not find missingletter0 demangled to missingletter0
did not find missingletter1 demangled to missingletter1
Add filter function missingletter2
FunctionInfo. Adding function:missingletter2
did not find transposedletter0 demangled to transposedletter0
Add filter function transposedletter1
FunctionInfo. Adding function:transposedletter1
did not find extraletter0 demangled to extraletter0
Add filter function wrongletter0
FunctionInfo. Adding function:wrongletter0
did not find wrongletter1 demangled to wrongletter1
Add filter function missingspace0
FunctionInfo. Adding function:missingspace0
did not find missingspace1 demangled to missingspace1
did not find missingspace2 demangled to missingspace2
did not find tryveryhard0 demangled to tryveryhard0
did not find casecmp0 demangled to casecmp0
did not find casecmp1 demangled to casecmp1
Add filter function casecmp2
FunctionInfo. Adding function:casecmp2
did not find casecmp3 demangled to casecmp3
Add filter function casecmp4
FunctionInfo. Adding function:casecmp4
did not find casecmp5 demangled to casecmp5
did not find casecmp6 demangled to casecmp6
did not find save_cap0 demangled to save_cap0
did not find save_cap1 demangled to save_cap1
did not find save_cap2 demangled to save_cap2
did not find save_cap3 demangled to save_cap3
did not find save_cap4 demangled to save_cap4
did not find insert0 demangled to insert0
Add filter function insert1
FunctionInfo. Adding function:insert1
did not find insert2 demangled to insert2
did not find save_root_cap0 demangled to save_root_cap0
Add filter function save_root_cap1
FunctionInfo. Adding function:save_root_cap1
Add filter function save_root_cap2
FunctionInfo. Adding function:save_root_cap2
did not find save_root_cap3 demangled to save_root_cap3
did not find save_root_cap4 demangled to save_root_cap4
did not find save_root_cap5 demangled to save_root_cap5
Add filter function save_root_cap6
FunctionInfo. Adding function:save_root_cap6
did not find save_root_cap7 demangled to save_root_cap7
did not find save_root_cap8 demangled to save_root_cap8
did not find save_root_cap9 demangled to save_root_cap9
did not find save_root_cap10 demangled to save_root_cap10
did not find save_root_cap11 demangled to save_root_cap11
did not find ins_cap0 demangled to ins_cap0
Add filter function ins_root_cap0
FunctionInfo. Adding function:ins_root_cap0
Add filter function askmode0
FunctionInfo. Adding function:askmode0
did not find askmode1 demangled to askmode1
did not find askmode2 demangled to askmode2
did not find askmode3 demangled to askmode3
did not find askmode4 demangled to askmode4
did not find askmode5 demangled to askmode5
Add filter function askmode6
FunctionInfo. Adding function:askmode6
Add filter function askmode7
FunctionInfo. Adding function:askmode7
did not find askmode8 demangled to askmode8
did not find askmode9 demangled to askmode9
did not find askmode10 demangled to askmode10
did not find copyout0 demangled to copyout0
did not find copyout1 demangled to copyout1
Add filter function skipoverword0
FunctionInfo. Adding function:skipoverword0
did not find skipoverword1 demangled to skipoverword1
Add filter function skipoverword2
FunctionInfo. Adding function:skipoverword2
did not find skipoverword3 demangled to skipoverword3
Add filter function skipoverword4
FunctionInfo. Adding function:skipoverword4
did not find checkline0 demangled to checkline0
did not find checkline1 demangled to checkline1
did not find checkline2 demangled to checkline2
did not find checkline3 demangled to checkline3
Add filter function checkline4
FunctionInfo. Adding function:checkline4
did not find checkline5 demangled to checkline5
did not find checkline6 demangled to checkline6
did not find checkline7 demangled to checkline7
did not find checkline8 demangled to checkline8
Add filter function checkline9
FunctionInfo. Adding function:checkline9
did not find checkline10 demangled to checkline10
did not find checkline11 demangled to checkline11
Add filter function checkline12
FunctionInfo. Adding function:checkline12
did not find checkline13 demangled to checkline13
did not find checkline14 demangled to checkline14
Add filter function checkline15
FunctionInfo. Adding function:checkline15
did not find checkline16 demangled to checkline16
did not find checkline17 demangled to checkline17
did not find checkline18 demangled to checkline18
did not find checkline19 demangled to checkline19
Add filter function checkline20
FunctionInfo. Adding function:checkline20
did not find skiptoword0 demangled to skiptoword0
did not find skiptoword1 demangled to skiptoword1
did not find skiptoword2 demangled to skiptoword2
did not find skiptoword3 demangled to skiptoword3
did not find skiptoword4 demangled to skiptoword4
Add filter function skiptoword5
FunctionInfo. Adding function:skiptoword5
Add filter function skiptoword6
FunctionInfo. Adding function:skiptoword6
did not find skiptoword7 demangled to skiptoword7
did not find skiptoword8 demangled to skiptoword8
did not find skiptoword9 demangled to skiptoword9
Add filter function skiptoword10
FunctionInfo. Adding function:skiptoword10
did not find skiptoword11 demangled to skiptoword11
did not find skiptoword12 demangled to skiptoword12
did not find skiptoword13 demangled to skiptoword13
did not find skiptoword14 demangled to skiptoword14
did not find skiptoword15 demangled to skiptoword15
did not find skiptoword16 demangled to skiptoword16
did not find skiptoword17 demangled to skiptoword17
did not find skiptoword18 demangled to skiptoword18
did not find skiptoword19 demangled to skiptoword19
Add filter function TeX_math_check0
FunctionInfo. Adding function:TeX_math_check0
Add filter function TeX_math_check1
FunctionInfo. Adding function:TeX_math_check1
did not find TeX_math_check2 demangled to TeX_math_check2
did not find TeX_math_check3 demangled to TeX_math_check3
Add filter function TeX_LR_check0
FunctionInfo. Adding function:TeX_LR_check0
did not find TeX_LR_check1 demangled to TeX_LR_check1
did not find TeX_LR_check2 demangled to TeX_LR_check2
did not find TeX_LR_check3 demangled to TeX_LR_check3
did not find TeX_LR_check4 demangled to TeX_LR_check4
did not find TeX_math_end0 demangled to TeX_math_end0
did not find TeX_math_end1 demangled to TeX_math_end1
did not find TeX_math_end2 demangled to TeX_math_end2
did not find TeX_strncmp0 demangled to TeX_strncmp0
did not find TeX_skip_parens0 demangled to TeX_skip_parens0
did not find TeX_math_begin0 demangled to TeX_math_begin0
did not find TeX_math_begin1 demangled to TeX_math_begin1
did not find TeX_math_begin2 demangled to TeX_math_begin2
did not find TeX_math_begin3 demangled to TeX_math_begin3
did not find TeX_math_begin4 demangled to TeX_math_begin4
did not find TeX_skip_check0 demangled to TeX_skip_check0
did not find TeX_skip_check1 demangled to TeX_skip_check1
did not find TeX_skip_check2 demangled to TeX_skip_check2
did not find TeX_skip_check3 demangled to TeX_skip_check3
did not find TeX_LR_begin0 demangled to TeX_LR_begin0
did not find TeX_LR_begin1 demangled to TeX_LR_begin1
did not find TeX_LR_begin2 demangled to TeX_LR_begin2
did not find TeX_open_paren0 demangled to TeX_open_paren0
did not find TeX_skip_args0 demangled to TeX_skip_args0
did not find TeX_skip_args1 demangled to TeX_skip_args1
did not find TeX_skip_args2 demangled to TeX_skip_args2
did not find TeX_skip_args3 demangled to TeX_skip_args3
Add filter function dumpmode0
FunctionInfo. Adding function:dumpmode0
Add filter function dumpmode1
FunctionInfo. Adding function:dumpmode1
did not find dumpmode2 demangled to dumpmode2
did not find dumpmode3 demangled to dumpmode3
did not find dumpmode4 demangled to dumpmode4
did not find tbldump0 demangled to tbldump0
did not find entdump0 demangled to entdump0
did not find entdump1 demangled to entdump1
did not find entdump2 demangled to entdump2
did not find entdump3 demangled to entdump3
Add filter function entdump4
FunctionInfo. Adding function:entdump4
did not find setdump0 demangled to setdump0
did not find setdump1 demangled to setdump1
did not find setdump2 demangled to setdump2
did not find setdump3 demangled to setdump3
did not find setdump4 demangled to setdump4
did not find subsetdump0 demangled to subsetdump0
did not find subsetdump1 demangled to subsetdump1
did not find subsetdump2 demangled to subsetdump2
did not find subsetdump3 demangled to subsetdump3
did not find subsetdump4 demangled to subsetdump4
did not find subsetdump5 demangled to subsetdump5
Add filter function good0
FunctionInfo. Adding function:good0
did not find good1 demangled to good1
Add filter function good2
FunctionInfo. Adding function:good2
Add filter function good3
FunctionInfo. Adding function:good3
did not find good4 demangled to good4
did not find cap_ok0 demangled to cap_ok0
Add filter function cap_ok1
FunctionInfo. Adding function:cap_ok1
did not find cap_ok2 demangled to cap_ok2
Add filter function cap_ok3
FunctionInfo. Adding function:cap_ok3
did not find cap_ok4 demangled to cap_ok4
did not find cap_ok5 demangled to cap_ok5
did not find cap_ok6 demangled to cap_ok6
Add filter function cap_ok7
FunctionInfo. Adding function:cap_ok7
did not find cap_ok8 demangled to cap_ok8
did not find cap_ok9 demangled to cap_ok9
did not find cap_ok10 demangled to cap_ok10
Add filter function flagpr0
FunctionInfo. Adding function:flagpr0
did not find flagpr1 demangled to flagpr1
did not find flagpr2 demangled to flagpr2
did not find flagpr3 demangled to flagpr3
did not find flagpr4 demangled to flagpr4
Add filter function flagpr5
FunctionInfo. Adding function:flagpr5
Add filter function flagpr6
FunctionInfo. Adding function:flagpr6
Add filter function flagpr7
FunctionInfo. Adding function:flagpr7
did not find flagpr8 demangled to flagpr8
did not find flagpr9 demangled to flagpr9
did not find flagpr10 demangled to flagpr10
Add filter function flagpr11
FunctionInfo. Adding function:flagpr11
did not find flagpr12 demangled to flagpr12
did not find flagpr13 demangled to flagpr13
Add filter function flagpr14
FunctionInfo. Adding function:flagpr14
Add filter function flagpr15
FunctionInfo. Adding function:flagpr15
Add filter function flagpr16
FunctionInfo. Adding function:flagpr16
did not find linit0 demangled to linit0
did not find linit1 demangled to linit1
did not find linit2 demangled to linit2
Add filter function linit3
FunctionInfo. Adding function:linit3
Add filter function linit4
FunctionInfo. Adding function:linit4
Add filter function linit5
FunctionInfo. Adding function:linit5
did not find linit6 demangled to linit6
Add filter function linit7
FunctionInfo. Adding function:linit7
Add filter function linit8
FunctionInfo. Adding function:linit8
did not find linit9 demangled to linit9
Add filter function linit10
FunctionInfo. Adding function:linit10
Add filter function linit11
FunctionInfo. Adding function:linit11
Add filter function linit12
FunctionInfo. Adding function:linit12
did not find linit13 demangled to linit13
did not find linit14 demangled to linit14
Add filter function linit15
FunctionInfo. Adding function:linit15
Add filter function linit16
FunctionInfo. Adding function:linit16
Add filter function linit17
FunctionInfo. Adding function:linit17
Add filter function linit18
FunctionInfo. Adding function:linit18
did not find linit19 demangled to linit19
did not find linit20 demangled to linit20
Add filter function linit21
FunctionInfo. Adding function:linit21
did not find linit22 demangled to linit22
Add filter function linit23
FunctionInfo. Adding function:linit23
did not find linit24 demangled to linit24
did not find linit25 demangled to linit25
did not find linit26 demangled to linit26
Add filter function linit27
FunctionInfo. Adding function:linit27
did not find linit28 demangled to linit28
did not find linit29 demangled to linit29
did not find linit30 demangled to linit30
did not find linit31 demangled to linit31
did not find linit32 demangled to linit32
Add filter function linit33
FunctionInfo. Adding function:linit33
did not find linit34 demangled to linit34
did not find linit35 demangled to linit35
did not find linit36 demangled to linit36
Add filter function linit37
FunctionInfo. Adding function:linit37
did not find linit38 demangled to linit38
did not find linit39 demangled to linit39
did not find linit40 demangled to linit40
Add filter function linit41
FunctionInfo. Adding function:linit41
did not find linit42 demangled to linit42
did not find linit43 demangled to linit43
did not find linit44 demangled to linit44
did not find linit45 demangled to linit45
did not find linit46 demangled to linit46
did not find linit47 demangled to linit47
Add filter function linit48
FunctionInfo. Adding function:linit48
did not find linit49 demangled to linit49
did not find lookup0 demangled to lookup0
did not find lookup1 demangled to lookup1
did not find lookup2 demangled to lookup2
Add filter function lookup3
FunctionInfo. Adding function:lookup3
did not find hash0 demangled to hash0
did not find hash1 demangled to hash1
did not find makedent0 demangled to makedent0
did not find makedent1 demangled to makedent1
did not find makedent2 demangled to makedent2
Add filter function makedent3
FunctionInfo. Adding function:makedent3
did not find makedent4 demangled to makedent4
did not find makedent5 demangled to makedent5
did not find makedent6 demangled to makedent6
did not find makedent7 demangled to makedent7
did not find makedent8 demangled to makedent8
did not find makedent9 demangled to makedent9
did not find makedent10 demangled to makedent10
Add filter function strtoichar0
FunctionInfo. Adding function:strtoichar0
did not find strtoichar1 demangled to strtoichar1
did not find strtoichar2 demangled to strtoichar2
Add filter function strtoichar3
FunctionInfo. Adding function:strtoichar3
did not find ichartostr0 demangled to ichartostr0
did not find ichartostr1 demangled to ichartostr1
did not find ichartostr2 demangled to ichartostr2
did not find ichartostr3 demangled to ichartostr3
Add filter function ichartostr4
FunctionInfo. Adding function:ichartostr4
did not find whatcap0 demangled to whatcap0
did not find whatcap1 demangled to whatcap1
did not find whatcap2 demangled to whatcap2
did not find whatcap3 demangled to whatcap3
Add filter function whatcap4
FunctionInfo. Adding function:whatcap4
Add filter function chupcase0
FunctionInfo. Adding function:chupcase0
Add filter function strtosichar0
FunctionInfo. Adding function:strtosichar0
did not find upcase0 demangled to upcase0
did not find stringcharlen0 demangled to stringcharlen0
did not find stringcharlen1 demangled to stringcharlen1
Add filter function stringcharlen2
FunctionInfo. Adding function:stringcharlen2
did not find stringcharlen3 demangled to stringcharlen3
did not find stringcharlen4 demangled to stringcharlen4
did not find stringcharlen5 demangled to stringcharlen5
did not find stringcharlen6 demangled to stringcharlen6
did not find stringcharlen7 demangled to stringcharlen7
did not find stringcharlen8 demangled to stringcharlen8
Add filter function addvheader0
FunctionInfo. Adding function:addvheader0
did not find addvheader1 demangled to addvheader1
did not find addvheader2 demangled to addvheader2
did not find addvheader3 demangled to addvheader3
did not find addvheader4 demangled to addvheader4
did not find combinecaps0 demangled to combinecaps0
Add filter function combinecaps1
FunctionInfo. Adding function:combinecaps1
did not find combinecaps2 demangled to combinecaps2
did not find combinecaps3 demangled to combinecaps3
Add filter function combine_two_entries0
FunctionInfo. Adding function:combine_two_entries0
Add filter function combine_two_entries1
FunctionInfo. Adding function:combine_two_entries1
Add filter function combine_two_entries2
FunctionInfo. Adding function:combine_two_entries2
did not find forcevheader0 demangled to forcevheader0
did not find combineaffixes0 demangled to combineaffixes0
did not find lowcase0 demangled to lowcase0
did not find toutent0 demangled to toutent0
did not find toutent1 demangled to toutent1
did not find toutent2 demangled to toutent2
Add filter function ichartosstr0
FunctionInfo. Adding function:ichartosstr0
did not find toutword0 demangled to toutword0
did not find toutword1 demangled to toutword1
did not find toutword2 demangled to toutword2
did not find flagout0 demangled to flagout0
Add filter function flagout1
FunctionInfo. Adding function:flagout1
did not find printichar0 demangled to printichar0
did not find printichar1 demangled to printichar1
did not find findfiletype0 demangled to findfiletype0
did not find findfiletype1 demangled to findfiletype1
Add filter function findfiletype2
FunctionInfo. Adding function:findfiletype2
did not find findfiletype3 demangled to findfiletype3
did not find findfiletype4 demangled to findfiletype4
did not find findfiletype5 demangled to findfiletype5
did not find findfiletype6 demangled to findfiletype6
did not find findfiletype7 demangled to findfiletype7
did not find chk_aff0 demangled to chk_aff0
did not find chk_aff1 demangled to chk_aff1
did not find chk_aff2 demangled to chk_aff2
did not find pfx_list_chk0 demangled to pfx_list_chk0
did not find pfx_list_chk1 demangled to pfx_list_chk1
did not find pfx_list_chk2 demangled to pfx_list_chk2
Add filter function pfx_list_chk3
FunctionInfo. Adding function:pfx_list_chk3
did not find pfx_list_chk4 demangled to pfx_list_chk4
did not find pfx_list_chk5 demangled to pfx_list_chk5
did not find chk_suf0 demangled to chk_suf0
did not find chk_suf1 demangled to chk_suf1
did not find chk_suf2 demangled to chk_suf2
Add filter function suf_list_chk0
FunctionInfo. Adding function:suf_list_chk0
did not find suf_list_chk1 demangled to suf_list_chk1
Add filter function suf_list_chk2
FunctionInfo. Adding function:suf_list_chk2
did not find suf_list_chk3 demangled to suf_list_chk3
did not find suf_list_chk4 demangled to suf_list_chk4
did not find suf_list_chk5 demangled to suf_list_chk5
Add filter function suf_list_chk6
FunctionInfo. Adding function:suf_list_chk6
did not find suf_list_chk7 demangled to suf_list_chk7
did not find expand_pre0 demangled to expand_pre0
did not find expand_pre1 demangled to expand_pre1
did not find expand_pre2 demangled to expand_pre2
did not find pr_pre_expansion0 demangled to pr_pre_expansion0
Add filter function pr_pre_expansion1
FunctionInfo. Adding function:pr_pre_expansion1
Add filter function pr_pre_expansion2
FunctionInfo. Adding function:pr_pre_expansion2
did not find pr_pre_expansion3 demangled to pr_pre_expansion3
did not find pr_pre_expansion4 demangled to pr_pre_expansion4
Add filter function pr_pre_expansion5
FunctionInfo. Adding function:pr_pre_expansion5
did not find pr_pre_expansion6 demangled to pr_pre_expansion6
did not find forcelc0 demangled to forcelc0
did not find forcelc1 demangled to forcelc1
did not find expand_suf0 demangled to expand_suf0
did not find expand_suf1 demangled to expand_suf1
Add filter function expand_suf2
FunctionInfo. Adding function:expand_suf2
did not find pr_suf_expansion0 demangled to pr_suf_expansion0
did not find pr_suf_expansion1 demangled to pr_suf_expansion1
Add filter function pr_suf_expansion2
FunctionInfo. Adding function:pr_suf_expansion2
did not find pr_suf_expansion3 demangled to pr_suf_expansion3
did not find pr_suf_expansion4 demangled to pr_suf_expansion4
Add filter function treeinit0
FunctionInfo. Adding function:treeinit0
did not find treeinit1 demangled to treeinit1
Add filter function treeinit2
FunctionInfo. Adding function:treeinit2
did not find treeinit3 demangled to treeinit3
did not find treeinit4 demangled to treeinit4
did not find treeinit5 demangled to treeinit5
did not find treeinit6 demangled to treeinit6
did not find treeinit7 demangled to treeinit7
did not find treeinit8 demangled to treeinit8
did not find trydict0 demangled to trydict0
did not find trydict1 demangled to trydict1
did not find trydict2 demangled to trydict2
Add filter function treeinsert0
FunctionInfo. Adding function:treeinsert0
did not find treeinsert1 demangled to treeinsert1
did not find treeinsert2 demangled to treeinsert2
did not find treeinsert3 demangled to treeinsert3
Add filter function treeinsert4
FunctionInfo. Adding function:treeinsert4
Add filter function treeinsert5
FunctionInfo. Adding function:treeinsert5
did not find treeinsert6 demangled to treeinsert6
did not find treeinsert7 demangled to treeinsert7
did not find treeinsert8 demangled to treeinsert8
did not find treeinsert9 demangled to treeinsert9
did not find treeinsert10 demangled to treeinsert10
did not find treeinsert11 demangled to treeinsert11
Add filter function treeinsert12
FunctionInfo. Adding function:treeinsert12
did not find treeinsert13 demangled to treeinsert13
Add filter function tinsert0
FunctionInfo. Adding function:tinsert0
did not find tinsert1 demangled to tinsert1
did not find tinsert2 demangled to tinsert2
did not find tinsert3 demangled to tinsert3
did not find treelookup0 demangled to treelookup0
did not find treelookup1 demangled to treelookup1
did not find treelookup2 demangled to treelookup2
Add filter function treeoutput0
FunctionInfo. Adding function:treeoutput0
Add filter function treeoutput1
FunctionInfo. Adding function:treeoutput1
did not find treeoutput2 demangled to treeoutput2
Add filter function treeoutput3
FunctionInfo. Adding function:treeoutput3
did not find treeoutput4 demangled to treeoutput4
did not find treeoutput5 demangled to treeoutput5
did not find treeoutput6 demangled to treeoutput6
Add filter function treeoutput7
FunctionInfo. Adding function:treeoutput7
did not find treeoutput8 demangled to treeoutput8
did not find treeoutput9 demangled to treeoutput9
Add filter function treeoutput10
FunctionInfo. Adding function:treeoutput10
did not find treeoutput11 demangled to treeoutput11
did not find treeoutput12 demangled to treeoutput12
did not find treeoutput13 demangled to treeoutput13
did not find treeoutput14 demangled to treeoutput14
did not find treeoutput15 demangled to treeoutput15
Add filter function treeoutput16
FunctionInfo. Adding function:treeoutput16
Add filter function treeoutput17
FunctionInfo. Adding function:treeoutput17
did not find treeoutput18 demangled to treeoutput18
did not find treeoutput19 demangled to treeoutput19
did not find treeoutput20 demangled to treeoutput20
did not find treeoutput21 demangled to treeoutput21
did not find treeoutput22 demangled to treeoutput22
Add filter function treeoutput23
FunctionInfo. Adding function:treeoutput23
did not find treeoutput24 demangled to treeoutput24
Add filter function treeoutput25
FunctionInfo. Adding function:treeoutput25
did not find treeoutput26 demangled to treeoutput26
did not find treeoutput27 demangled to treeoutput27
did not find treeoutput28 demangled to treeoutput28
did not find treeoutput29 demangled to treeoutput29
Add filter function treeoutput30
FunctionInfo. Adding function:treeoutput30
did not find treeoutput31 demangled to treeoutput31
Add filter function treeoutput32
FunctionInfo. Adding function:treeoutput32
did not find myfree0 demangled to myfree0
did not find xgets0 demangled to xgets0
did not find xgets1 demangled to xgets1
did not find xgets2 demangled to xgets2
did not find xgets3 demangled to xgets3
did not find xgets4 demangled to xgets4
Adding erase other functions, ExtractedOnly mode uses other functions
Adding move other functions, ExtractedOnly mode uses other functions
Adding inverse other functions, ExtractedOnly mode uses other functions
Adding normal other functions, ExtractedOnly mode uses other functions
Adding backup other functions, ExtractedOnly mode uses other functions
Adding terminit other functions, ExtractedOnly mode uses other functions
Adding done other functions, ExtractedOnly mode uses other functions
Adding onstop other functions, ExtractedOnly mode uses other functions
Adding stop other functions, ExtractedOnly mode uses other functions
Adding shellescape other functions, ExtractedOnly mode uses other functions
Adding main other functions, ExtractedOnly mode uses other functions
Adding usage other functions, ExtractedOnly mode uses other functions
Adding initckch other functions, ExtractedOnly mode uses other functions
Adding expandmode other functions, ExtractedOnly mode uses other functions
Adding dofile other functions, ExtractedOnly mode uses other functions
Adding update_file other functions, ExtractedOnly mode uses other functions
Adding givehelp other functions, ExtractedOnly mode uses other functions
Adding checkfile other functions, ExtractedOnly mode uses other functions
Adding correct other functions, ExtractedOnly mode uses other functions
Adding compoundgood other functions, ExtractedOnly mode uses other functions
Adding makepossibilities other functions, ExtractedOnly mode uses other functions
Adding show_line other functions, ExtractedOnly mode uses other functions
Adding line_size other functions, ExtractedOnly mode uses other functions
Adding my_getline other functions, ExtractedOnly mode uses other functions
Adding inserttoken other functions, ExtractedOnly mode uses other functions
Adding lookharder other functions, ExtractedOnly mode uses other functions
Adding show_char other functions, ExtractedOnly mode uses other functions
Adding wrongcapital other functions, ExtractedOnly mode uses other functions
Adding missingletter other functions, ExtractedOnly mode uses other functions
Adding transposedletter other functions, ExtractedOnly mode uses other functions
Adding extraletter other functions, ExtractedOnly mode uses other functions
Adding wrongletter other functions, ExtractedOnly mode uses other functions
Adding missingspace other functions, ExtractedOnly mode uses other functions
Adding tryveryhard other functions, ExtractedOnly mode uses other functions
Adding posscmp other functions, ExtractedOnly mode uses other functions
Adding casecmp other functions, ExtractedOnly mode uses other functions
Adding save_cap other functions, ExtractedOnly mode uses other functions
Adding insert other functions, ExtractedOnly mode uses other functions
Adding save_root_cap other functions, ExtractedOnly mode uses other functions
Adding ins_cap other functions, ExtractedOnly mode uses other functions
Adding ins_root_cap other functions, ExtractedOnly mode uses other functions
Adding askmode other functions, ExtractedOnly mode uses other functions
Adding copyout other functions, ExtractedOnly mode uses other functions
Adding skipoverword other functions, ExtractedOnly mode uses other functions
Adding checkline other functions, ExtractedOnly mode uses other functions
Adding skiptoword other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check other functions, ExtractedOnly mode uses other functions
Adding TeX_math_end other functions, ExtractedOnly mode uses other functions
Adding TeX_strncmp other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_parens other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_begin other functions, ExtractedOnly mode uses other functions
Adding TeX_open_paren other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args other functions, ExtractedOnly mode uses other functions
Adding dumpmode other functions, ExtractedOnly mode uses other functions
Adding tbldump other functions, ExtractedOnly mode uses other functions
Adding entdump other functions, ExtractedOnly mode uses other functions
Adding setdump other functions, ExtractedOnly mode uses other functions
Adding subsetdump other functions, ExtractedOnly mode uses other functions
Adding good other functions, ExtractedOnly mode uses other functions
Adding cap_ok other functions, ExtractedOnly mode uses other functions
Adding entryhasaffixes other functions, ExtractedOnly mode uses other functions
Adding flagpr other functions, ExtractedOnly mode uses other functions
Adding linit other functions, ExtractedOnly mode uses other functions
Adding lookup other functions, ExtractedOnly mode uses other functions
Adding hash other functions, ExtractedOnly mode uses other functions
Adding makedent other functions, ExtractedOnly mode uses other functions
Adding strtoichar other functions, ExtractedOnly mode uses other functions
Adding ichartostr other functions, ExtractedOnly mode uses other functions
Adding whatcap other functions, ExtractedOnly mode uses other functions
Adding chupcase other functions, ExtractedOnly mode uses other functions
Adding strtosichar other functions, ExtractedOnly mode uses other functions
Adding upcase other functions, ExtractedOnly mode uses other functions
Adding stringcharlen other functions, ExtractedOnly mode uses other functions
Adding addvheader other functions, ExtractedOnly mode uses other functions
Adding combinecaps other functions, ExtractedOnly mode uses other functions
Adding combine_two_entries other functions, ExtractedOnly mode uses other functions
Adding forcevheader other functions, ExtractedOnly mode uses other functions
Adding combineaffixes other functions, ExtractedOnly mode uses other functions
Adding acoversb other functions, ExtractedOnly mode uses other functions
Adding issubset other functions, ExtractedOnly mode uses other functions
Adding lowcase other functions, ExtractedOnly mode uses other functions
Adding toutent other functions, ExtractedOnly mode uses other functions
Adding ichartosstr other functions, ExtractedOnly mode uses other functions
Adding toutword other functions, ExtractedOnly mode uses other functions
Adding flagout other functions, ExtractedOnly mode uses other functions
Adding printichar other functions, ExtractedOnly mode uses other functions
Adding findfiletype other functions, ExtractedOnly mode uses other functions
Adding chk_aff other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk other functions, ExtractedOnly mode uses other functions
Adding chk_suf other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk other functions, ExtractedOnly mode uses other functions
Adding expand_pre other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion other functions, ExtractedOnly mode uses other functions
Adding forcelc other functions, ExtractedOnly mode uses other functions
Adding expand_suf other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion other functions, ExtractedOnly mode uses other functions
Adding treeinit other functions, ExtractedOnly mode uses other functions
Adding trydict other functions, ExtractedOnly mode uses other functions
Adding treeload other functions, ExtractedOnly mode uses other functions
Adding treeinsert other functions, ExtractedOnly mode uses other functions
Adding tinsert other functions, ExtractedOnly mode uses other functions
Adding treelookup other functions, ExtractedOnly mode uses other functions
Adding treeoutput other functions, ExtractedOnly mode uses other functions
Adding pdictcmp other functions, ExtractedOnly mode uses other functions
Adding mymalloc other functions, ExtractedOnly mode uses other functions
Adding myfree other functions, ExtractedOnly mode uses other functions
Adding xgets other functions, ExtractedOnly mode uses other functions
Adding terminit0 other functions, ExtractedOnly mode uses other functions
Adding terminit1 other functions, ExtractedOnly mode uses other functions
Adding terminit2 other functions, ExtractedOnly mode uses other functions
Adding terminit3 other functions, ExtractedOnly mode uses other functions
Adding terminit4 other functions, ExtractedOnly mode uses other functions
Adding terminit5 other functions, ExtractedOnly mode uses other functions
Adding onstop0 other functions, ExtractedOnly mode uses other functions
Adding shellescape0 other functions, ExtractedOnly mode uses other functions
Adding shellescape1 other functions, ExtractedOnly mode uses other functions
Adding shellescape2 other functions, ExtractedOnly mode uses other functions
Adding shellescape3 other functions, ExtractedOnly mode uses other functions
Adding shellescape4 other functions, ExtractedOnly mode uses other functions
Adding shellescape5 other functions, ExtractedOnly mode uses other functions
Adding main0 other functions, ExtractedOnly mode uses other functions
Adding main1 other functions, ExtractedOnly mode uses other functions
Adding main2 other functions, ExtractedOnly mode uses other functions
Adding main3 other functions, ExtractedOnly mode uses other functions
Adding main4 other functions, ExtractedOnly mode uses other functions
Adding main5 other functions, ExtractedOnly mode uses other functions
Adding main6 other functions, ExtractedOnly mode uses other functions
Adding main7 other functions, ExtractedOnly mode uses other functions
Adding main8 other functions, ExtractedOnly mode uses other functions
Adding main9 other functions, ExtractedOnly mode uses other functions
Adding main10 other functions, ExtractedOnly mode uses other functions
Adding main11 other functions, ExtractedOnly mode uses other functions
Adding main12 other functions, ExtractedOnly mode uses other functions
Adding main13 other functions, ExtractedOnly mode uses other functions
Adding main14 other functions, ExtractedOnly mode uses other functions
Adding main15 other functions, ExtractedOnly mode uses other functions
Adding main16 other functions, ExtractedOnly mode uses other functions
Adding main17 other functions, ExtractedOnly mode uses other functions
Adding main18 other functions, ExtractedOnly mode uses other functions
Adding main19 other functions, ExtractedOnly mode uses other functions
Adding main20 other functions, ExtractedOnly mode uses other functions
Adding main21 other functions, ExtractedOnly mode uses other functions
Adding main22 other functions, ExtractedOnly mode uses other functions
Adding main23 other functions, ExtractedOnly mode uses other functions
Adding main24 other functions, ExtractedOnly mode uses other functions
Adding main25 other functions, ExtractedOnly mode uses other functions
Adding main26 other functions, ExtractedOnly mode uses other functions
Adding main27 other functions, ExtractedOnly mode uses other functions
Adding main28 other functions, ExtractedOnly mode uses other functions
Adding main29 other functions, ExtractedOnly mode uses other functions
Adding main30 other functions, ExtractedOnly mode uses other functions
Adding main31 other functions, ExtractedOnly mode uses other functions
Adding main32 other functions, ExtractedOnly mode uses other functions
Adding main33 other functions, ExtractedOnly mode uses other functions
Adding main34 other functions, ExtractedOnly mode uses other functions
Adding main35 other functions, ExtractedOnly mode uses other functions
Adding main36 other functions, ExtractedOnly mode uses other functions
Adding main37 other functions, ExtractedOnly mode uses other functions
Adding main38 other functions, ExtractedOnly mode uses other functions
Adding main39 other functions, ExtractedOnly mode uses other functions
Adding main40 other functions, ExtractedOnly mode uses other functions
Adding main41 other functions, ExtractedOnly mode uses other functions
Adding main42 other functions, ExtractedOnly mode uses other functions
Adding main43 other functions, ExtractedOnly mode uses other functions
Adding usage0 other functions, ExtractedOnly mode uses other functions
Adding initckch0 other functions, ExtractedOnly mode uses other functions
Adding initckch1 other functions, ExtractedOnly mode uses other functions
Adding initckch2 other functions, ExtractedOnly mode uses other functions
Adding expandmode0 other functions, ExtractedOnly mode uses other functions
Adding expandmode1 other functions, ExtractedOnly mode uses other functions
Adding dofile0 other functions, ExtractedOnly mode uses other functions
Adding dofile1 other functions, ExtractedOnly mode uses other functions
Adding dofile2 other functions, ExtractedOnly mode uses other functions
Adding dofile3 other functions, ExtractedOnly mode uses other functions
Adding update_file0 other functions, ExtractedOnly mode uses other functions
Adding update_file1 other functions, ExtractedOnly mode uses other functions
Adding update_file2 other functions, ExtractedOnly mode uses other functions
Adding update_file3 other functions, ExtractedOnly mode uses other functions
Adding update_file4 other functions, ExtractedOnly mode uses other functions
Adding update_file5 other functions, ExtractedOnly mode uses other functions
Adding givehelp0 other functions, ExtractedOnly mode uses other functions
Adding givehelp1 other functions, ExtractedOnly mode uses other functions
Adding givehelp2 other functions, ExtractedOnly mode uses other functions
Adding checkfile0 other functions, ExtractedOnly mode uses other functions
Adding checkfile1 other functions, ExtractedOnly mode uses other functions
Adding checkfile2 other functions, ExtractedOnly mode uses other functions
Adding checkfile3 other functions, ExtractedOnly mode uses other functions
Adding checkfile4 other functions, ExtractedOnly mode uses other functions
Adding checkfile5 other functions, ExtractedOnly mode uses other functions
Adding checkfile6 other functions, ExtractedOnly mode uses other functions
Adding checkfile7 other functions, ExtractedOnly mode uses other functions
Adding correct0 other functions, ExtractedOnly mode uses other functions
Adding correct1 other functions, ExtractedOnly mode uses other functions
Adding correct2 other functions, ExtractedOnly mode uses other functions
Adding correct3 other functions, ExtractedOnly mode uses other functions
Adding correct4 other functions, ExtractedOnly mode uses other functions
Adding correct5 other functions, ExtractedOnly mode uses other functions
Adding correct6 other functions, ExtractedOnly mode uses other functions
Adding correct7 other functions, ExtractedOnly mode uses other functions
Adding correct8 other functions, ExtractedOnly mode uses other functions
Adding correct9 other functions, ExtractedOnly mode uses other functions
Adding correct10 other functions, ExtractedOnly mode uses other functions
Adding correct11 other functions, ExtractedOnly mode uses other functions
Adding correct12 other functions, ExtractedOnly mode uses other functions
Adding correct13 other functions, ExtractedOnly mode uses other functions
Adding correct14 other functions, ExtractedOnly mode uses other functions
Adding correct15 other functions, ExtractedOnly mode uses other functions
Adding correct16 other functions, ExtractedOnly mode uses other functions
Adding correct17 other functions, ExtractedOnly mode uses other functions
Adding correct18 other functions, ExtractedOnly mode uses other functions
Adding correct19 other functions, ExtractedOnly mode uses other functions
Adding correct20 other functions, ExtractedOnly mode uses other functions
Adding correct21 other functions, ExtractedOnly mode uses other functions
Adding correct22 other functions, ExtractedOnly mode uses other functions
Adding correct23 other functions, ExtractedOnly mode uses other functions
Adding correct24 other functions, ExtractedOnly mode uses other functions
Adding correct25 other functions, ExtractedOnly mode uses other functions
Adding correct26 other functions, ExtractedOnly mode uses other functions
Adding compoundgood0 other functions, ExtractedOnly mode uses other functions
Adding compoundgood1 other functions, ExtractedOnly mode uses other functions
Adding compoundgood2 other functions, ExtractedOnly mode uses other functions
Adding compoundgood3 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities0 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities1 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities2 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities3 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities4 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities5 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities6 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities7 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities8 other functions, ExtractedOnly mode uses other functions
Adding show_line0 other functions, ExtractedOnly mode uses other functions
Adding show_line1 other functions, ExtractedOnly mode uses other functions
Adding show_line2 other functions, ExtractedOnly mode uses other functions
Adding show_line3 other functions, ExtractedOnly mode uses other functions
Adding line_size0 other functions, ExtractedOnly mode uses other functions
Adding my_getline0 other functions, ExtractedOnly mode uses other functions
Adding my_getline1 other functions, ExtractedOnly mode uses other functions
Adding my_getline2 other functions, ExtractedOnly mode uses other functions
Adding my_getline3 other functions, ExtractedOnly mode uses other functions
Adding my_getline4 other functions, ExtractedOnly mode uses other functions
Adding my_getline5 other functions, ExtractedOnly mode uses other functions
Adding my_getline6 other functions, ExtractedOnly mode uses other functions
Adding inserttoken0 other functions, ExtractedOnly mode uses other functions
Adding inserttoken1 other functions, ExtractedOnly mode uses other functions
Adding inserttoken2 other functions, ExtractedOnly mode uses other functions
Adding inserttoken3 other functions, ExtractedOnly mode uses other functions
Adding inserttoken4 other functions, ExtractedOnly mode uses other functions
Adding inserttoken5 other functions, ExtractedOnly mode uses other functions
Adding inserttoken6 other functions, ExtractedOnly mode uses other functions
Adding lookharder0 other functions, ExtractedOnly mode uses other functions
Adding lookharder1 other functions, ExtractedOnly mode uses other functions
Adding lookharder2 other functions, ExtractedOnly mode uses other functions
Adding show_char0 other functions, ExtractedOnly mode uses other functions
Adding show_char1 other functions, ExtractedOnly mode uses other functions
Adding show_char2 other functions, ExtractedOnly mode uses other functions
Adding show_char3 other functions, ExtractedOnly mode uses other functions
Adding show_char4 other functions, ExtractedOnly mode uses other functions
Adding show_char5 other functions, ExtractedOnly mode uses other functions
Adding show_char6 other functions, ExtractedOnly mode uses other functions
Adding show_char7 other functions, ExtractedOnly mode uses other functions
Adding show_char8 other functions, ExtractedOnly mode uses other functions
Adding show_char9 other functions, ExtractedOnly mode uses other functions
Adding show_char10 other functions, ExtractedOnly mode uses other functions
Adding show_char11 other functions, ExtractedOnly mode uses other functions
Adding show_char12 other functions, ExtractedOnly mode uses other functions
Adding show_char13 other functions, ExtractedOnly mode uses other functions
Adding show_char14 other functions, ExtractedOnly mode uses other functions
Adding missingletter0 other functions, ExtractedOnly mode uses other functions
Adding missingletter1 other functions, ExtractedOnly mode uses other functions
Adding missingletter2 other functions, ExtractedOnly mode uses other functions
Adding transposedletter0 other functions, ExtractedOnly mode uses other functions
Adding transposedletter1 other functions, ExtractedOnly mode uses other functions
Adding extraletter0 other functions, ExtractedOnly mode uses other functions
Adding wrongletter0 other functions, ExtractedOnly mode uses other functions
Adding wrongletter1 other functions, ExtractedOnly mode uses other functions
Adding missingspace0 other functions, ExtractedOnly mode uses other functions
Adding missingspace1 other functions, ExtractedOnly mode uses other functions
Adding missingspace2 other functions, ExtractedOnly mode uses other functions
Adding tryveryhard0 other functions, ExtractedOnly mode uses other functions
Adding casecmp0 other functions, ExtractedOnly mode uses other functions
Adding casecmp1 other functions, ExtractedOnly mode uses other functions
Adding casecmp2 other functions, ExtractedOnly mode uses other functions
Adding casecmp3 other functions, ExtractedOnly mode uses other functions
Adding casecmp4 other functions, ExtractedOnly mode uses other functions
Adding casecmp5 other functions, ExtractedOnly mode uses other functions
Adding casecmp6 other functions, ExtractedOnly mode uses other functions
Adding save_cap0 other functions, ExtractedOnly mode uses other functions
Adding save_cap1 other functions, ExtractedOnly mode uses other functions
Adding save_cap2 other functions, ExtractedOnly mode uses other functions
Adding save_cap3 other functions, ExtractedOnly mode uses other functions
Adding save_cap4 other functions, ExtractedOnly mode uses other functions
Adding insert0 other functions, ExtractedOnly mode uses other functions
Adding insert1 other functions, ExtractedOnly mode uses other functions
Adding insert2 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap0 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap1 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap2 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap3 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap4 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap5 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap6 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap7 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap8 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap9 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap10 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap11 other functions, ExtractedOnly mode uses other functions
Adding ins_cap0 other functions, ExtractedOnly mode uses other functions
Adding ins_root_cap0 other functions, ExtractedOnly mode uses other functions
Adding askmode0 other functions, ExtractedOnly mode uses other functions
Adding askmode1 other functions, ExtractedOnly mode uses other functions
Adding askmode2 other functions, ExtractedOnly mode uses other functions
Adding askmode3 other functions, ExtractedOnly mode uses other functions
Adding askmode4 other functions, ExtractedOnly mode uses other functions
Adding askmode5 other functions, ExtractedOnly mode uses other functions
Adding askmode6 other functions, ExtractedOnly mode uses other functions
Adding askmode7 other functions, ExtractedOnly mode uses other functions
Adding askmode8 other functions, ExtractedOnly mode uses other functions
Adding askmode9 other functions, ExtractedOnly mode uses other functions
Adding askmode10 other functions, ExtractedOnly mode uses other functions
Adding copyout0 other functions, ExtractedOnly mode uses other functions
Adding copyout1 other functions, ExtractedOnly mode uses other functions
Adding skipoverword0 other functions, ExtractedOnly mode uses other functions
Adding skipoverword1 other functions, ExtractedOnly mode uses other functions
Adding skipoverword2 other functions, ExtractedOnly mode uses other functions
Adding skipoverword3 other functions, ExtractedOnly mode uses other functions
Adding skipoverword4 other functions, ExtractedOnly mode uses other functions
Adding checkline0 other functions, ExtractedOnly mode uses other functions
Adding checkline1 other functions, ExtractedOnly mode uses other functions
Adding checkline2 other functions, ExtractedOnly mode uses other functions
Adding checkline3 other functions, ExtractedOnly mode uses other functions
Adding checkline4 other functions, ExtractedOnly mode uses other functions
Adding checkline5 other functions, ExtractedOnly mode uses other functions
Adding checkline6 other functions, ExtractedOnly mode uses other functions
Adding checkline7 other functions, ExtractedOnly mode uses other functions
Adding checkline8 other functions, ExtractedOnly mode uses other functions
Adding checkline9 other functions, ExtractedOnly mode uses other functions
Adding checkline10 other functions, ExtractedOnly mode uses other functions
Adding checkline11 other functions, ExtractedOnly mode uses other functions
Adding checkline12 other functions, ExtractedOnly mode uses other functions
Adding checkline13 other functions, ExtractedOnly mode uses other functions
Adding checkline14 other functions, ExtractedOnly mode uses other functions
Adding checkline15 other functions, ExtractedOnly mode uses other functions
Adding checkline16 other functions, ExtractedOnly mode uses other functions
Adding checkline17 other functions, ExtractedOnly mode uses other functions
Adding checkline18 other functions, ExtractedOnly mode uses other functions
Adding checkline19 other functions, ExtractedOnly mode uses other functions
Adding checkline20 other functions, ExtractedOnly mode uses other functions
Adding skiptoword0 other functions, ExtractedOnly mode uses other functions
Adding skiptoword1 other functions, ExtractedOnly mode uses other functions
Adding skiptoword2 other functions, ExtractedOnly mode uses other functions
Adding skiptoword3 other functions, ExtractedOnly mode uses other functions
Adding skiptoword4 other functions, ExtractedOnly mode uses other functions
Adding skiptoword5 other functions, ExtractedOnly mode uses other functions
Adding skiptoword6 other functions, ExtractedOnly mode uses other functions
Adding skiptoword7 other functions, ExtractedOnly mode uses other functions
Adding skiptoword8 other functions, ExtractedOnly mode uses other functions
Adding skiptoword9 other functions, ExtractedOnly mode uses other functions
Adding skiptoword10 other functions, ExtractedOnly mode uses other functions
Adding skiptoword11 other functions, ExtractedOnly mode uses other functions
Adding skiptoword12 other functions, ExtractedOnly mode uses other functions
Adding skiptoword13 other functions, ExtractedOnly mode uses other functions
Adding skiptoword14 other functions, ExtractedOnly mode uses other functions
Adding skiptoword15 other functions, ExtractedOnly mode uses other functions
Adding skiptoword16 other functions, ExtractedOnly mode uses other functions
Adding skiptoword17 other functions, ExtractedOnly mode uses other functions
Adding skiptoword18 other functions, ExtractedOnly mode uses other functions
Adding skiptoword19 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check0 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check1 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check2 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check3 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check0 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check1 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check2 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check3 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check4 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_end0 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_end1 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_end2 other functions, ExtractedOnly mode uses other functions
Adding TeX_strncmp0 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_parens0 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin0 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin1 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin2 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin3 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin4 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check0 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check1 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check2 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check3 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_begin0 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_begin1 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_begin2 other functions, ExtractedOnly mode uses other functions
Adding TeX_open_paren0 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args0 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args1 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args2 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args3 other functions, ExtractedOnly mode uses other functions
Adding dumpmode0 other functions, ExtractedOnly mode uses other functions
Adding dumpmode1 other functions, ExtractedOnly mode uses other functions
Adding dumpmode2 other functions, ExtractedOnly mode uses other functions
Adding dumpmode3 other functions, ExtractedOnly mode uses other functions
Adding dumpmode4 other functions, ExtractedOnly mode uses other functions
Adding tbldump0 other functions, ExtractedOnly mode uses other functions
Adding entdump0 other functions, ExtractedOnly mode uses other functions
Adding entdump1 other functions, ExtractedOnly mode uses other functions
Adding entdump2 other functions, ExtractedOnly mode uses other functions
Adding entdump3 other functions, ExtractedOnly mode uses other functions
Adding entdump4 other functions, ExtractedOnly mode uses other functions
Adding setdump0 other functions, ExtractedOnly mode uses other functions
Adding setdump1 other functions, ExtractedOnly mode uses other functions
Adding setdump2 other functions, ExtractedOnly mode uses other functions
Adding setdump3 other functions, ExtractedOnly mode uses other functions
Adding setdump4 other functions, ExtractedOnly mode uses other functions
Adding subsetdump0 other functions, ExtractedOnly mode uses other functions
Adding subsetdump1 other functions, ExtractedOnly mode uses other functions
Adding subsetdump2 other functions, ExtractedOnly mode uses other functions
Adding subsetdump3 other functions, ExtractedOnly mode uses other functions
Adding subsetdump4 other functions, ExtractedOnly mode uses other functions
Adding subsetdump5 other functions, ExtractedOnly mode uses other functions
Adding good0 other functions, ExtractedOnly mode uses other functions
Adding good1 other functions, ExtractedOnly mode uses other functions
Adding good2 other functions, ExtractedOnly mode uses other functions
Adding good3 other functions, ExtractedOnly mode uses other functions
Adding good4 other functions, ExtractedOnly mode uses other functions
Adding cap_ok0 other functions, ExtractedOnly mode uses other functions
Adding cap_ok1 other functions, ExtractedOnly mode uses other functions
Adding cap_ok2 other functions, ExtractedOnly mode uses other functions
Adding cap_ok3 other functions, ExtractedOnly mode uses other functions
Adding cap_ok4 other functions, ExtractedOnly mode uses other functions
Adding cap_ok5 other functions, ExtractedOnly mode uses other functions
Adding cap_ok6 other functions, ExtractedOnly mode uses other functions
Adding cap_ok7 other functions, ExtractedOnly mode uses other functions
Adding cap_ok8 other functions, ExtractedOnly mode uses other functions
Adding cap_ok9 other functions, ExtractedOnly mode uses other functions
Adding cap_ok10 other functions, ExtractedOnly mode uses other functions
Adding flagpr0 other functions, ExtractedOnly mode uses other functions
Adding flagpr1 other functions, ExtractedOnly mode uses other functions
Adding flagpr2 other functions, ExtractedOnly mode uses other functions
Adding flagpr3 other functions, ExtractedOnly mode uses other functions
Adding flagpr4 other functions, ExtractedOnly mode uses other functions
Adding flagpr5 other functions, ExtractedOnly mode uses other functions
Adding flagpr6 other functions, ExtractedOnly mode uses other functions
Adding flagpr7 other functions, ExtractedOnly mode uses other functions
Adding flagpr8 other functions, ExtractedOnly mode uses other functions
Adding flagpr9 other functions, ExtractedOnly mode uses other functions
Adding flagpr10 other functions, ExtractedOnly mode uses other functions
Adding flagpr11 other functions, ExtractedOnly mode uses other functions
Adding flagpr12 other functions, ExtractedOnly mode uses other functions
Adding flagpr13 other functions, ExtractedOnly mode uses other functions
Adding flagpr14 other functions, ExtractedOnly mode uses other functions
Adding flagpr15 other functions, ExtractedOnly mode uses other functions
Adding flagpr16 other functions, ExtractedOnly mode uses other functions
Adding linit0 other functions, ExtractedOnly mode uses other functions
Adding linit1 other functions, ExtractedOnly mode uses other functions
Adding linit2 other functions, ExtractedOnly mode uses other functions
Adding linit3 other functions, ExtractedOnly mode uses other functions
Adding linit4 other functions, ExtractedOnly mode uses other functions
Adding linit5 other functions, ExtractedOnly mode uses other functions
Adding linit6 other functions, ExtractedOnly mode uses other functions
Adding linit7 other functions, ExtractedOnly mode uses other functions
Adding linit8 other functions, ExtractedOnly mode uses other functions
Adding linit9 other functions, ExtractedOnly mode uses other functions
Adding linit10 other functions, ExtractedOnly mode uses other functions
Adding linit11 other functions, ExtractedOnly mode uses other functions
Adding linit12 other functions, ExtractedOnly mode uses other functions
Adding linit13 other functions, ExtractedOnly mode uses other functions
Adding linit14 other functions, ExtractedOnly mode uses other functions
Adding linit15 other functions, ExtractedOnly mode uses other functions
Adding linit16 other functions, ExtractedOnly mode uses other functions
Adding linit17 other functions, ExtractedOnly mode uses other functions
Adding linit18 other functions, ExtractedOnly mode uses other functions
Adding linit19 other functions, ExtractedOnly mode uses other functions
Adding linit20 other functions, ExtractedOnly mode uses other functions
Adding linit21 other functions, ExtractedOnly mode uses other functions
Adding linit22 other functions, ExtractedOnly mode uses other functions
Adding linit23 other functions, ExtractedOnly mode uses other functions
Adding linit24 other functions, ExtractedOnly mode uses other functions
Adding linit25 other functions, ExtractedOnly mode uses other functions
Adding linit26 other functions, ExtractedOnly mode uses other functions
Adding linit27 other functions, ExtractedOnly mode uses other functions
Adding linit28 other functions, ExtractedOnly mode uses other functions
Adding linit29 other functions, ExtractedOnly mode uses other functions
Adding linit30 other functions, ExtractedOnly mode uses other functions
Adding linit31 other functions, ExtractedOnly mode uses other functions
Adding linit32 other functions, ExtractedOnly mode uses other functions
Adding linit33 other functions, ExtractedOnly mode uses other functions
Adding linit34 other functions, ExtractedOnly mode uses other functions
Adding linit35 other functions, ExtractedOnly mode uses other functions
Adding linit36 other functions, ExtractedOnly mode uses other functions
Adding linit37 other functions, ExtractedOnly mode uses other functions
Adding linit38 other functions, ExtractedOnly mode uses other functions
Adding linit39 other functions, ExtractedOnly mode uses other functions
Adding linit40 other functions, ExtractedOnly mode uses other functions
Adding linit41 other functions, ExtractedOnly mode uses other functions
Adding linit42 other functions, ExtractedOnly mode uses other functions
Adding linit43 other functions, ExtractedOnly mode uses other functions
Adding linit44 other functions, ExtractedOnly mode uses other functions
Adding linit45 other functions, ExtractedOnly mode uses other functions
Adding linit46 other functions, ExtractedOnly mode uses other functions
Adding linit47 other functions, ExtractedOnly mode uses other functions
Adding linit48 other functions, ExtractedOnly mode uses other functions
Adding linit49 other functions, ExtractedOnly mode uses other functions
Adding lookup0 other functions, ExtractedOnly mode uses other functions
Adding lookup1 other functions, ExtractedOnly mode uses other functions
Adding lookup2 other functions, ExtractedOnly mode uses other functions
Adding lookup3 other functions, ExtractedOnly mode uses other functions
Adding hash0 other functions, ExtractedOnly mode uses other functions
Adding hash1 other functions, ExtractedOnly mode uses other functions
Adding makedent0 other functions, ExtractedOnly mode uses other functions
Adding makedent1 other functions, ExtractedOnly mode uses other functions
Adding makedent2 other functions, ExtractedOnly mode uses other functions
Adding makedent3 other functions, ExtractedOnly mode uses other functions
Adding makedent4 other functions, ExtractedOnly mode uses other functions
Adding makedent5 other functions, ExtractedOnly mode uses other functions
Adding makedent6 other functions, ExtractedOnly mode uses other functions
Adding makedent7 other functions, ExtractedOnly mode uses other functions
Adding makedent8 other functions, ExtractedOnly mode uses other functions
Adding makedent9 other functions, ExtractedOnly mode uses other functions
Adding makedent10 other functions, ExtractedOnly mode uses other functions
Adding strtoichar0 other functions, ExtractedOnly mode uses other functions
Adding strtoichar1 other functions, ExtractedOnly mode uses other functions
Adding strtoichar2 other functions, ExtractedOnly mode uses other functions
Adding strtoichar3 other functions, ExtractedOnly mode uses other functions
Adding ichartostr0 other functions, ExtractedOnly mode uses other functions
Adding ichartostr1 other functions, ExtractedOnly mode uses other functions
Adding ichartostr2 other functions, ExtractedOnly mode uses other functions
Adding ichartostr3 other functions, ExtractedOnly mode uses other functions
Adding ichartostr4 other functions, ExtractedOnly mode uses other functions
Adding whatcap0 other functions, ExtractedOnly mode uses other functions
Adding whatcap1 other functions, ExtractedOnly mode uses other functions
Adding whatcap2 other functions, ExtractedOnly mode uses other functions
Adding whatcap3 other functions, ExtractedOnly mode uses other functions
Adding whatcap4 other functions, ExtractedOnly mode uses other functions
Adding chupcase0 other functions, ExtractedOnly mode uses other functions
Adding strtosichar0 other functions, ExtractedOnly mode uses other functions
Adding upcase0 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen0 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen1 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen2 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen3 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen4 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen5 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen6 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen7 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen8 other functions, ExtractedOnly mode uses other functions
Adding addvheader0 other functions, ExtractedOnly mode uses other functions
Adding addvheader1 other functions, ExtractedOnly mode uses other functions
Adding addvheader2 other functions, ExtractedOnly mode uses other functions
Adding addvheader3 other functions, ExtractedOnly mode uses other functions
Adding addvheader4 other functions, ExtractedOnly mode uses other functions
Adding combinecaps0 other functions, ExtractedOnly mode uses other functions
Adding combinecaps1 other functions, ExtractedOnly mode uses other functions
Adding combinecaps2 other functions, ExtractedOnly mode uses other functions
Adding combinecaps3 other functions, ExtractedOnly mode uses other functions
Adding combine_two_entries0 other functions, ExtractedOnly mode uses other functions
Adding combine_two_entries1 other functions, ExtractedOnly mode uses other functions
Adding combine_two_entries2 other functions, ExtractedOnly mode uses other functions
Adding forcevheader0 other functions, ExtractedOnly mode uses other functions
Adding combineaffixes0 other functions, ExtractedOnly mode uses other functions
Adding lowcase0 other functions, ExtractedOnly mode uses other functions
Adding toutent0 other functions, ExtractedOnly mode uses other functions
Adding toutent1 other functions, ExtractedOnly mode uses other functions
Adding toutent2 other functions, ExtractedOnly mode uses other functions
Adding ichartosstr0 other functions, ExtractedOnly mode uses other functions
Adding toutword0 other functions, ExtractedOnly mode uses other functions
Adding toutword1 other functions, ExtractedOnly mode uses other functions
Adding toutword2 other functions, ExtractedOnly mode uses other functions
Adding flagout0 other functions, ExtractedOnly mode uses other functions
Adding flagout1 other functions, ExtractedOnly mode uses other functions
Adding printichar0 other functions, ExtractedOnly mode uses other functions
Adding printichar1 other functions, ExtractedOnly mode uses other functions
Adding findfiletype0 other functions, ExtractedOnly mode uses other functions
Adding findfiletype1 other functions, ExtractedOnly mode uses other functions
Adding findfiletype2 other functions, ExtractedOnly mode uses other functions
Adding findfiletype3 other functions, ExtractedOnly mode uses other functions
Adding findfiletype4 other functions, ExtractedOnly mode uses other functions
Adding findfiletype5 other functions, ExtractedOnly mode uses other functions
Adding findfiletype6 other functions, ExtractedOnly mode uses other functions
Adding findfiletype7 other functions, ExtractedOnly mode uses other functions
Adding chk_aff0 other functions, ExtractedOnly mode uses other functions
Adding chk_aff1 other functions, ExtractedOnly mode uses other functions
Adding chk_aff2 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk0 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk1 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk2 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk3 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk4 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk5 other functions, ExtractedOnly mode uses other functions
Adding chk_suf0 other functions, ExtractedOnly mode uses other functions
Adding chk_suf1 other functions, ExtractedOnly mode uses other functions
Adding chk_suf2 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk0 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk1 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk2 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk3 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk4 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk5 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk6 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk7 other functions, ExtractedOnly mode uses other functions
Adding expand_pre0 other functions, ExtractedOnly mode uses other functions
Adding expand_pre1 other functions, ExtractedOnly mode uses other functions
Adding expand_pre2 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion0 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion1 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion2 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion3 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion4 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion5 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion6 other functions, ExtractedOnly mode uses other functions
Adding forcelc0 other functions, ExtractedOnly mode uses other functions
Adding forcelc1 other functions, ExtractedOnly mode uses other functions
Adding expand_suf0 other functions, ExtractedOnly mode uses other functions
Adding expand_suf1 other functions, ExtractedOnly mode uses other functions
Adding expand_suf2 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion0 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion1 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion2 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion3 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion4 other functions, ExtractedOnly mode uses other functions
Adding treeinit0 other functions, ExtractedOnly mode uses other functions
Adding treeinit1 other functions, ExtractedOnly mode uses other functions
Adding treeinit2 other functions, ExtractedOnly mode uses other functions
Adding treeinit3 other functions, ExtractedOnly mode uses other functions
Adding treeinit4 other functions, ExtractedOnly mode uses other functions
Adding treeinit5 other functions, ExtractedOnly mode uses other functions
Adding treeinit6 other functions, ExtractedOnly mode uses other functions
Adding treeinit7 other functions, ExtractedOnly mode uses other functions
Adding treeinit8 other functions, ExtractedOnly mode uses other functions
Adding trydict0 other functions, ExtractedOnly mode uses other functions
Adding trydict1 other functions, ExtractedOnly mode uses other functions
Adding trydict2 other functions, ExtractedOnly mode uses other functions
Adding treeinsert0 other functions, ExtractedOnly mode uses other functions
Adding treeinsert1 other functions, ExtractedOnly mode uses other functions
Adding treeinsert2 other functions, ExtractedOnly mode uses other functions
Adding treeinsert3 other functions, ExtractedOnly mode uses other functions
Adding treeinsert4 other functions, ExtractedOnly mode uses other functions
Adding treeinsert5 other functions, ExtractedOnly mode uses other functions
Adding treeinsert6 other functions, ExtractedOnly mode uses other functions
Adding treeinsert7 other functions, ExtractedOnly mode uses other functions
Adding treeinsert8 other functions, ExtractedOnly mode uses other functions
Adding treeinsert9 other functions, ExtractedOnly mode uses other functions
Adding treeinsert10 other functions, ExtractedOnly mode uses other functions
Adding treeinsert11 other functions, ExtractedOnly mode uses other functions
Adding treeinsert12 other functions, ExtractedOnly mode uses other functions
Adding treeinsert13 other functions, ExtractedOnly mode uses other functions
Adding tinsert0 other functions, ExtractedOnly mode uses other functions
Adding tinsert1 other functions, ExtractedOnly mode uses other functions
Adding tinsert2 other functions, ExtractedOnly mode uses other functions
Adding tinsert3 other functions, ExtractedOnly mode uses other functions
Adding treelookup0 other functions, ExtractedOnly mode uses other functions
Adding treelookup1 other functions, ExtractedOnly mode uses other functions
Adding treelookup2 other functions, ExtractedOnly mode uses other functions
Adding treeoutput0 other functions, ExtractedOnly mode uses other functions
Adding treeoutput1 other functions, ExtractedOnly mode uses other functions
Adding treeoutput2 other functions, ExtractedOnly mode uses other functions
Adding treeoutput3 other functions, ExtractedOnly mode uses other functions
Adding treeoutput4 other functions, ExtractedOnly mode uses other functions
Adding treeoutput5 other functions, ExtractedOnly mode uses other functions
Adding treeoutput6 other functions, ExtractedOnly mode uses other functions
Adding treeoutput7 other functions, ExtractedOnly mode uses other functions
Adding treeoutput8 other functions, ExtractedOnly mode uses other functions
Adding treeoutput9 other functions, ExtractedOnly mode uses other functions
Adding treeoutput10 other functions, ExtractedOnly mode uses other functions
Adding treeoutput11 other functions, ExtractedOnly mode uses other functions
Adding treeoutput12 other functions, ExtractedOnly mode uses other functions
Adding treeoutput13 other functions, ExtractedOnly mode uses other functions
Adding treeoutput14 other functions, ExtractedOnly mode uses other functions
Adding treeoutput15 other functions, ExtractedOnly mode uses other functions
Adding treeoutput16 other functions, ExtractedOnly mode uses other functions
Adding treeoutput17 other functions, ExtractedOnly mode uses other functions
Adding treeoutput18 other functions, ExtractedOnly mode uses other functions
Adding treeoutput19 other functions, ExtractedOnly mode uses other functions
Adding treeoutput20 other functions, ExtractedOnly mode uses other functions
Adding treeoutput21 other functions, ExtractedOnly mode uses other functions
Adding treeoutput22 other functions, ExtractedOnly mode uses other functions
Adding treeoutput23 other functions, ExtractedOnly mode uses other functions
Adding treeoutput24 other functions, ExtractedOnly mode uses other functions
Adding treeoutput25 other functions, ExtractedOnly mode uses other functions
Adding treeoutput26 other functions, ExtractedOnly mode uses other functions
Adding treeoutput27 other functions, ExtractedOnly mode uses other functions
Adding treeoutput28 other functions, ExtractedOnly mode uses other functions
Adding treeoutput29 other functions, ExtractedOnly mode uses other functions
Adding treeoutput30 other functions, ExtractedOnly mode uses other functions
Adding treeoutput31 other functions, ExtractedOnly mode uses other functions
Adding treeoutput32 other functions, ExtractedOnly mode uses other functions
Adding myfree0 other functions, ExtractedOnly mode uses other functions
Adding xgets0 other functions, ExtractedOnly mode uses other functions
Adding xgets1 other functions, ExtractedOnly mode uses other functions
Adding xgets2 other functions, ExtractedOnly mode uses other functions
Adding xgets3 other functions, ExtractedOnly mode uses other functions
Adding xgets4 other functions, ExtractedOnly mode uses other functions
Sensitive functions:0 other functions:696
DesiredConnectivity is :1
Other functions to be fed to the network of checkers
cap_ok7
findfiletype4
linit16
entdump3
correct26
skiptoword11
makedent
compoundgood
TeX_math_check3
makedent3
issubset
shellescape4
cap_ok9
TeX_strncmp
treeoutput1
treeoutput8
dofile0
treeoutput19
linit39
treeinit2
main34
treeinit0
expandmode0
setdump3
suf_list_chk6
shellescape1
tinsert3
suf_list_chk5
dofile1
setdump4
insert1
TeX_math_begin3
show_line0
main41
strtoichar0
addvheader
ins_cap0
expand_pre1
linit27
linit20
checkfile0
main7
entdump4
TeX_math_end
treeoutput12
askmode5
printichar1
checkfile3
treeinsert
main32
lookharder
askmode6
treeoutput23
linit14
pr_pre_expansion3
terminit0
pr_pre_expansion
stringcharlen1
xgets
toutent0
TeX_LR_check0
pdictcmp
combineaffixes
treelookup2
good2
insert2
chupcase0
subsetdump0
main14
save_root_cap9
initckch2
usage0
treelookup1
main27
transposedletter0
save_cap4
my_getline
main39
chk_aff2
missingspace1
main20
lookup1
update_file5
linit17
linit49
checkline1
upcase0
correct16
flagout
my_getline6
checkfile5
ichartostr4
suf_list_chk7
dofile
treeoutput13
treeinsert4
askmode
checkfile6
linit13
skiptoword12
pfx_list_chk2
tinsert2
copyout1
treeinsert13
askmode3
show_char14
missingletter2
TeX_strncmp0
combine_two_entries
chk_aff0
linit41
xgets1
checkline19
treeoutput18
linit40
linit2
checkfile7
compoundgood1
linit47
main17
main4
givehelp2
toutent1
expand_suf1
pr_pre_expansion2
subsetdump2
skipoverword
entdump2
treeoutput9
main37
checkline6
checkline3
mymalloc
strtosichar
pr_pre_expansion1
entdump
whatcap3
upcase
main10
toutword2
update_file2
pr_suf_expansion
skiptoword2
expand_suf2
pfx_list_chk
chk_aff
treeinit7
main29
correct1
treeoutput15
main43
flagout1
entdump0
expandmode1
findfiletype5
TeX_skip_args3
makepossibilities3
inserttoken3
flagpr9
checkline5
forcelc0
checkline20
flagpr15
lowcase0
askmode0
TeX_LR_check3
cap_ok10
transposedletter
show_char10
TeX_math_check1
skipoverword4
TeX_skip_check3
skipoverword1
chk_suf0
ichartostr0
correct11
linit32
save_root_cap
stringcharlen5
askmode10
linit22
main40
skiptoword0
save_root_cap8
inverse
askmode2
linit45
correct21
skiptoword9
save_root_cap0
xgets4
transposedletter1
TeX_math_begin2
subsetdump5
casecmp
linit3
lookharder0
suf_list_chk2
whatcap0
treeinsert3
stringcharlen3
combinecaps1
subsetdump4
save_root_cap5
givehelp0
TeX_LR_begin2
pfx_list_chk5
treeinit6
save_root_cap1
main21
save_root_cap3
linit9
main38
my_getline2
onstop0
addvheader3
save_root_cap11
TeX_skip_args0
dumpmode3
terminit3
printichar0
TeX_LR_check4
askmode4
main35
combine_two_entries0
treelookup0
done
main15
save_root_cap4
checkline11
makedent8
treeoutput11
strtoichar1
expand_suf0
skiptoword13
casecmp3
ichartostr1
forcevheader0
flagpr4
skiptoword6
linit28
save_cap1
line_size0
expand_pre
TeX_skip_parens
linit34
strtoichar3
inserttoken1
findfiletype7
cap_ok1
flagpr13
checkline14
dumpmode0
compoundgood0
combinecaps3
missingletter
treeoutput16
printichar
makedent6
main13
main5
askmode9
chk_suf
update_file1
correct15
findfiletype0
combineaffixes0
TeX_LR_check2
show_char11
show_char8
pr_suf_expansion0
makedent9
missingletter0
trydict0
flagpr11
main3
flagpr10
pr_suf_expansion4
show_char4
TeX_skip_check
stringcharlen0
linit42
main2
missingspace2
findfiletype3
linit18
TeX_math_end0
dumpmode2
tbldump
correct23
TeX_skip_parens0
pr_suf_expansion1
terminit
TeX_skip_check2
treeoutput27
casecmp2
main31
linit
givehelp
cap_ok0
ichartosstr0
treeinsert7
correct20
pr_pre_expansion6
posscmp
TeX_math_check2
TeX_skip_check1
makedent4
main33
linit44
whatcap
main1
linit11
skiptoword19
show_char5
expand_pre2
stringcharlen7
makepossibilities4
save_cap0
makedent1
subsetdump
setdump1
initckch
linit8
terminit4
erase
linit43
treeinit1
checkline18
linit21
linit48
linit36
tbldump0
treelookup
onstop
correct0
combinecaps0
linit37
lookup3
xgets0
main9
treeoutput0
treeoutput4
show_char2
main0
main24
toutword
treeoutput28
save_root_cap6
missingspace
treeinsert11
skiptoword4
checkfile1
linit7
wrongletter0
update_file3
show_char3
good4
myfree0
correct10
correct3
show_char
ichartostr
main36
show_line2
TeX_skip_args
trydict
save_root_cap10
copyout0
linit35
treeoutput2
treeinsert12
treeinit4
shellescape
makedent5
linit38
insert
linit33
lookup0
suf_list_chk4
show_line
toutword0
TeX_LR_check1
flagpr16
save_cap3
strtoichar
addvheader2
findfiletype6
cap_ok
update_file4
checkline0
stringcharlen6
show_line3
checkfile2
ichartostr2
treeoutput17
TeX_LR_begin
checkline8
show_char6
xgets3
checkline10
TeX_skip_args1
treeoutput24
TeX_math_end2
makedent10
wrongletter1
my_getline4
flagout0
makepossibilities2
treeload
makepossibilities8
treeinsert6
copyout
skiptoword3
treeoutput31
linit5
main6
addvheader0
acoversb
show_char9
checkline9
show_char13
save_cap
skipoverword3
main42
shellescape5
dofile3
correct17
pr_pre_expansion4
cap_ok5
checkline15
my_getline0
main22
pr_pre_expansion5
suf_list_chk1
suf_list_chk
flagpr7
main23
forcelc1
combinecaps
setdump0
expandmode
checkline16
correct5
show_line1
shellescape3
treeinsert9
treeoutput5
treeoutput10
skiptoword
askmode8
ichartosstr
show_char12
correct24
terminit1
toutent2
show_char0
stringcharlen2
missingspace0
casecmp5
findfiletype2
addvheader1
skiptoword18
checkline
treeoutput7
save_root_cap2
makepossibilities5
pfx_list_chk0
treeoutput20
flagpr6
linit25
makedent2
treeinit3
TeX_LR_begin0
main18
entryhasaffixes
line_size
casecmp4
main28
stringcharlen8
inserttoken5
suf_list_chk3
skiptoword16
compoundgood3
inserttoken2
treeoutput22
hash1
flagpr
good3
treeoutput6
update_file
findfiletype
chk_suf2
toutword1
correct19
linit4
shellescape0
dumpmode4
suf_list_chk0
treeoutput32
givehelp1
move
whatcap1
linit6
linit1
correct8
flagpr8
TeX_math_end1
lookharder2
cap_ok4
treeinit
TeX_math_begin4
tryveryhard
wrongletter
strtoichar2
skiptoword5
dumpmode
treeoutput21
treeinit5
addvheader4
backup
lookup
show_char1
TeX_math_begin
makepossibilities
setdump
correct22
treeinsert10
casecmp6
cap_ok6
wrongcapital
toutent
setdump2
myfree
correct18
tinsert1
main19
main26
TeX_math_begin0
TeX_math_check
TeX_skip_args2
casecmp1
treeinsert1
casecmp0
makepossibilities6
TeX_LR_begin1
initckch0
terminit2
main8
main16
tinsert
cap_ok8
lowcase
flagpr0
treeinsert2
skiptoword15
correct9
pfx_list_chk1
flagpr1
ins_root_cap
extraletter
save_cap2
ins_root_cap0
dumpmode1
pr_pre_expansion0
linit24
treeoutput3
linit30
skiptoword10
correct6
shellescape2
treeoutput29
correct
normal
good0
combine_two_entries2
forcelc
combine_two_entries1
skiptoword8
strtosichar0
TeX_math_begin1
inserttoken4
stringcharlen
makedent0
ichartostr3
correct25
extraletter0
skiptoword7
flagpr3
main
checkline2
whatcap4
linit19
askmode1
subsetdump1
correct2
makepossibilities1
flagpr14
my_getline5
correct12
main11
treeinsert8
lookup2
chupcase
TeX_skip_check0
pfx_list_chk4
hash
chk_aff1
pr_suf_expansion3
my_getline1
linit12
skiptoword17
show_char7
chk_suf1
checkline17
tinsert0
skiptoword1
linit10
treeoutput14
stop
checkfile
insert0
findfiletype1
TeX_open_paren
subsetdump3
flagpr2
main30
trydict2
expand_suf
linit29
makepossibilities7
forcevheader
treeoutput30
my_getline3
correct14
treeoutput26
dofile2
flagpr12
linit15
skiptoword14
treeinsert5
good
tryveryhard0
combinecaps2
makedent7
linit0
main12
makepossibilities0
missingletter1
compoundgood2
treeinsert0
pr_suf_expansion2
skipoverword2
TeX_open_paren0
initckch1
terminit5
hash0
update_file0
linit26
treeoutput
linit31
usage
inserttoken6
checkline13
expand_pre0
flagpr5
TeX_LR_check
main25
stringcharlen4
skipoverword0
checkline7
cap_ok3
checkline4
trydict1
checkline12
linit46
save_root_cap7
xgets2
whatcap2
ins_cap
inserttoken0
linit23
correct4
TeX_math_check0
cap_ok2
inserttoken
correct7
treeoutput25
lookharder1
entdump1
pfx_list_chk3
treeinit8
correct13
checkfile4
askmode7
good1
***
Sensitive functions to be fed to the network of checkers
***
Sensitive functions only checked:0
DAGCheckersNetwork::getReverseTopologicalSort freed visited
Constructed the network of checkers!
Sensitive functions are never checkers as SensitiveOnlyChecked is set to:0
Dumping checkers network info
{
    "allCheckees": [],
    "topologicalsort": []
}
SC stats is requested, dumping stat file...
{
    "avgConnectivity": -nan.0,
    "desiredConnectivity": 1,
    "numberOfGuardInstructions": 0,
    "numberOfGuards": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveInstructions": 0,
    "stdConnectivity": -nan.0
}
Recieved marked functions 0
ERR. processed 696 function, while filter count is 174
Functions called in loop
Function call numbers
main5 -- 1
main0 -- 1
main -- 0
Insert hash computation
Pointer Subgraph is broken!
Invalid number of operands for PSNodeType::PHI with ID 14317
  - operands: []
No reaching definition for: @stdout = external global %struct._IO_FILE*, align 8 off: 0
No reaching definition for: @stderr = external global %struct._IO_FILE*, align 8 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
DEF-USE: no information for: pdictcmp
DEF-USE: no information for: onstop
DEF-USE: no information for: done
No reaching definition for:   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %cp.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %p.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %6 = alloca [8192 x i8], align 16, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 in:   store i8* %incdec.ptr16, i8** %q, align 8, !control_dep_instr !7, !data_dep_instr !8 off: 18446744073709551615
No reaching definition for:   %ew = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %ew.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %helpout = alloca %struct._IO_FILE*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %helpout.el = alloca %struct._IO_FILE*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca %struct.dent*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca %struct.dent*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %p.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %ichar = alloca i8, align 1, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %ichar.el = alloca i8, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
DEF-USE: no information for: posscmp
No reaching definition for:   %realword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %realword.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %skip_ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %skip_ch.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
IntToPtr with constant:   <badref> = inttoptr i64 1 to void (i32)*
No reaching definition for: @stdin = external global %struct._IO_FILE*, align 8 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %nextchar = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %nextchar.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %entry1.el = alloca %struct.flagent*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %dp.el = alloca %struct.dent*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %i.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %call57 = call noalias i8* @calloc(i64 1, i64 24) #8, !control_dep_instr !7, !data_indep_instr !10, !global_dep_instr !9 in:   store %struct.dent* null, %struct.dent** %5, align 8, !control_dep_instr !8, !input_indep_instr !11, !data_indep_instr !12 off: 16
No tags were supplied to be skipped! 
'guard' metadata was found in the input bitcode
Recieved marked functions 0
Recieved filter functions 174
 Skipping function per FilterFunctionPass:erase
 Skipping function per FilterFunctionPass:move
 Skipping function per FilterFunctionPass:inverse
 Skipping function per FilterFunctionPass:normal
Collecting defining blocks for backup
 Skipping function per FilterFunctionPass:terminit
 Skipping function per FilterFunctionPass:done
 Skipping function per FilterFunctionPass:onstop
 Skipping function per FilterFunctionPass:stop
 Skipping function per FilterFunctionPass:shellescape
 Skipping function per FilterFunctionPass:main
 Skipping function per FilterFunctionPass:usage
 Skipping function per FilterFunctionPass:initckch
 Skipping function per FilterFunctionPass:expandmode
 Skipping function per FilterFunctionPass:dofile
 Skipping function per FilterFunctionPass:update_file
Collecting defining blocks for givehelp
 Skipping function per FilterFunctionPass:checkfile
Collecting defining blocks for correct
Collecting defining blocks for compoundgood
 Skipping function per FilterFunctionPass:makepossibilities
 Skipping function per FilterFunctionPass:show_line
Collecting defining blocks for line_size
 Skipping function per FilterFunctionPass:my_getline
Collecting defining blocks for inserttoken
 Skipping function per FilterFunctionPass:lookharder
 Skipping function per FilterFunctionPass:show_char
 Skipping function per FilterFunctionPass:wrongcapital
 Skipping function per FilterFunctionPass:missingletter
 Skipping function per FilterFunctionPass:transposedletter
Collecting defining blocks for extraletter
Collecting defining blocks for wrongletter
 Skipping function per FilterFunctionPass:missingspace
Collecting defining blocks for tryveryhard
Skip. No dependence graph for function posscmp
Skip. No dependence graph for function casecmp
 Skipping function per FilterFunctionPass:save_cap
 Skipping function per FilterFunctionPass:insert
 Skipping function per FilterFunctionPass:save_root_cap
 Skipping function per FilterFunctionPass:ins_cap
 Skipping function per FilterFunctionPass:ins_root_cap
 Skipping function per FilterFunctionPass:askmode
 Skipping function per FilterFunctionPass:copyout
 Skipping function per FilterFunctionPass:skipoverword
 Skipping function per FilterFunctionPass:checkline
Collecting defining blocks for skiptoword
Collecting defining blocks for TeX_math_check
 Skipping function per FilterFunctionPass:TeX_LR_check
 Skipping function per FilterFunctionPass:TeX_math_end
 Skipping function per FilterFunctionPass:TeX_strncmp
 Skipping function per FilterFunctionPass:TeX_skip_parens
 Skipping function per FilterFunctionPass:TeX_math_begin
 Skipping function per FilterFunctionPass:TeX_skip_check
 Skipping function per FilterFunctionPass:TeX_LR_begin
 Skipping function per FilterFunctionPass:TeX_open_paren
 Skipping function per FilterFunctionPass:TeX_skip_args
 Skipping function per FilterFunctionPass:dumpmode
Collecting defining blocks for tbldump
 Skipping function per FilterFunctionPass:entdump
 Skipping function per FilterFunctionPass:setdump
 Skipping function per FilterFunctionPass:subsetdump
 Skipping function per FilterFunctionPass:good
Collecting defining blocks for cap_ok
Collecting defining blocks for entryhasaffixes
Collecting defining blocks for flagpr
Collecting defining blocks for linit
Collecting defining blocks for lookup
 Skipping function per FilterFunctionPass:hash
 Skipping function per FilterFunctionPass:makedent
 Skipping function per FilterFunctionPass:strtoichar
 Skipping function per FilterFunctionPass:ichartostr
 Skipping function per FilterFunctionPass:whatcap
 Skipping function per FilterFunctionPass:chupcase
 Skipping function per FilterFunctionPass:strtosichar
 Skipping function per FilterFunctionPass:upcase
 Skipping function per FilterFunctionPass:stringcharlen
 Skipping function per FilterFunctionPass:addvheader
 Skipping function per FilterFunctionPass:combinecaps
Collecting defining blocks for combine_two_entries
Collecting defining blocks for forcevheader
 Skipping function per FilterFunctionPass:combineaffixes
 Skipping function per FilterFunctionPass:acoversb
 Skipping function per FilterFunctionPass:issubset
 Skipping function per FilterFunctionPass:lowcase
 Skipping function per FilterFunctionPass:toutent
 Skipping function per FilterFunctionPass:ichartosstr
 Skipping function per FilterFunctionPass:toutword
 Skipping function per FilterFunctionPass:flagout
Collecting defining blocks for printichar
 Skipping function per FilterFunctionPass:findfiletype
 Skipping function per FilterFunctionPass:chk_aff
 Skipping function per FilterFunctionPass:pfx_list_chk
 Skipping function per FilterFunctionPass:chk_suf
 Skipping function per FilterFunctionPass:suf_list_chk
 Skipping function per FilterFunctionPass:expand_pre
Collecting defining blocks for pr_pre_expansion
 Skipping function per FilterFunctionPass:forcelc
Collecting defining blocks for expand_suf
 Skipping function per FilterFunctionPass:pr_suf_expansion
 Skipping function per FilterFunctionPass:treeinit
 Skipping function per FilterFunctionPass:trydict
Collecting defining blocks for treeload
Collecting defining blocks for treeinsert
 Skipping function per FilterFunctionPass:tinsert
 Skipping function per FilterFunctionPass:treelookup
 Skipping function per FilterFunctionPass:treeoutput
Skip. No dependence graph for function pdictcmp
 Skipping function per FilterFunctionPass:mymalloc
Collecting defining blocks for myfree
 Skipping function per FilterFunctionPass:xgets
 Skipping function per FilterFunctionPass:erase
 Skipping function per FilterFunctionPass:move
 Skipping function per FilterFunctionPass:inverse
 Skipping function per FilterFunctionPass:normal
 Processing function:backup
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
 Skipping function per FilterFunctionPass:terminit
 Skipping function per FilterFunctionPass:done
 Skipping function per FilterFunctionPass:onstop
 Skipping function per FilterFunctionPass:stop
 Skipping function per FilterFunctionPass:shellescape
 Skipping function per FilterFunctionPass:main
 Skipping function per FilterFunctionPass:usage
 Skipping function per FilterFunctionPass:initckch
 Skipping function per FilterFunctionPass:expandmode
 Skipping function per FilterFunctionPass:dofile
 Skipping function per FilterFunctionPass:update_file
 Processing function:givehelp
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  if.then24  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.end  if.then24  
After path modifications process path
entry  if.end  if.then24  
Processing path: entry  if.end  if.then24  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  if.end  if.then24  while.end  
After path modifications process path
entry  if.end  if.then24  while.end  
Processing path: entry  if.end  if.end29  
After path modifications process path
entry  if.end  if.end29  
Processing path: entry  if.else  
After path modifications process path
entry  if.else  
 Skipping function per FilterFunctionPass:checkfile
 Processing function:correct
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  checkagain  if.then6  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  
After path modifications process path
entry  if.end  if.then6  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.then10  
After path modifications process path
if.end7  if.then10  
Hash path invariants only
Invariants are
  br label %if.end12, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  call void @correct0(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !12
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.then14  
After path modifications process path
if.end7  if.end12  if.then14  
Hash path invariants only
Invariants are
  br label %if.end16, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.then22  
After path modifications process path
if.end7  if.end12  if.end16  if.then22  
Hash path invariants only
Invariants are
  call void @correct1(i32* %col_ht, i32* %ncols), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
Can't handle this operand   %col_ht = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct1(i32* %col_ht, i32* %ncols), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %ncols = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct1(i32* %col_ht, i32* %ncols), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.then34  
After path modifications process path
for.body  if.then34  
Hash path invariants only
Invariants are
  br label %if.end51, !control_dep_instr !7, !data_indep_instr !11
  call void @correct2(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct2(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.end51  for.inc  
After path modifications process path
for.body  if.end51  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !12
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.else  land.lhs.true  if.then40  
After path modifications process path
for.body  if.else  land.lhs.true  if.then40  
Hash path invariants only
Invariants are
  br label %if.end50, !control_dep_instr !7, !data_indep_instr !11
  call void @correct3(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct3(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.else  if.end50  
After path modifications process path
for.body  if.else  if.end50  
Hash path invariants only
Invariants are
  br label %if.end51, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !12
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.else  if.else45  
After path modifications process path
for.body  if.else  if.else45  
Hash path invariants only
Invariants are
  br label %if.end50, !control_dep_instr !7, !data_indep_instr !11
  call void @correct4(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct4(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond52  for.body55  
After path modifications process path is empty
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  
Hash path invariants only
Invariants are
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  if.then80  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  if.then80  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  while.body  if.end81  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.then87  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.then87  
Hash path invariants only
Invariants are
  br label %if.end88, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @correct10(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct10(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct10(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.end88  if.then91  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.end88  if.then91  
Hash path invariants only
Invariants are
  br label %if.end92, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.end88  if.end92  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.end88  if.end92  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end93, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.then98  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.then98  
Hash path invariants only
Invariants are
  call void @correct11(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %if.end101, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond102  sw.default  
After path modifications process path
sw.default  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  %call242 = call i32 @putchar(i32 7), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.epilog  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb105  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb105  
After path modifications process path
entry  if.end  sw.bb105  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb105  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  sw.bb105  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  sw.bb105  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.then109  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.then109  
Hash path invariants only
Invariants are
  call void @correct13(i32* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  br label %if.end115, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %c = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct13(i32* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  if.then121  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  if.then121  
Hash path invariants only
Invariants are
  br label %if.end123, !control_dep_instr !7, !data_indep_instr !11
  call void @done(i32 0), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct14(), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  if.end123  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  lor.lhs.false118  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  lor.lhs.false118  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.else114  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.else114  
Hash path invariants only
Invariants are
  br label %if.end115, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i32 121, i32* %c, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb124  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb124  
After path modifications process path
entry  if.end  sw.bb124  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb124  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  sw.bb124  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  sw.bb124  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb128  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb128  
After path modifications process path
entry  if.end  sw.bb128  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb128  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  sw.bb128  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  sw.bb128  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb132  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb132  
After path modifications process path
entry  if.end  sw.bb132  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb132  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  sw.bb132  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  sw.bb132  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb136  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb137  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb138  if.then145  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb138  
Hash path invariants only
Invariants are
  %arraydecay141 = getelementptr inbounds [200 x i8], [200 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  %call140 = call i32 @putchar(i32 33), !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb138  if.end148  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb138  
Hash path invariants only
Invariants are
  %arraydecay141 = getelementptr inbounds [200 x i8], [200 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  %call140 = call i32 @putchar(i32 33), !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.then156  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.then156  
Hash path invariants only
Invariants are
  br label %if.end159, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  call void @correct19(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !12
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.then164  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.then164  
Hash path invariants only
Invariants are
  br label %if.end174, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct20(i32* %ctokl.addr, i8** %itok.addr, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %ctokl.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct20(i32* %ctokl.addr, i8** %itok.addr, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %itok.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct20(i32* %ctokl.addr, i8** %itok.addr, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %ctok.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct20(i32* %ctokl.addr, i8** %itok.addr, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  if.then179  
After path modifications process path is empty
Processing path: entry  if.end  if.then179  
After path modifications process path
entry  if.end  if.then179  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.end174  if.then179  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  if.then179  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  if.then179  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.end174  if.end180  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.else167  if.then170  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.else167  if.then170  
Hash path invariants only
Invariants are
  br label %if.end173, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct21(i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %ctok.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct21(i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.else167  if.end173  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.else167  if.end173  
Hash path invariants only
Invariants are
  br label %if.end174, !control_dep_instr !7, !data_indep_instr !11
  store i32 1, i32* @changes, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.then185  land.lhs.true190  if.then193  
After path modifications process path
sw.bb181  if.then185  land.lhs.true190  if.then193  
Hash path invariants only
Invariants are
  %call186 = call i32 @getchar(), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  br label %if.end206, !control_dep_instr !7, !data_indep_instr !11
  store i32 %and187, i32* %c, align 4, !control_dep_instr !7, !data_dep_instr !8
  %and187 = and i32 %call186, 127, !control_dep_instr !7, !data_dep_instr !8
  call void @correct22(i32* %c, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %c = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct22(i32* %c, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct22(i32* %c, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.then185  if.end206  
After path modifications process path
sw.bb181  if.then185  if.end206  
Hash path invariants only
Invariants are
  %call186 = call i32 @getchar(), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  br label %if.end207, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %and187 = and i32 %call186, 127, !control_dep_instr !7, !data_dep_instr !8
  store i32 %and187, i32* %c, align 4, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.then185  if.else197  land.lhs.true200  if.then203  
After path modifications process path
sw.bb181  if.then185  if.else197  land.lhs.true200  if.then203  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11
  store i32 %and187, i32* %c, align 4, !control_dep_instr !7, !data_dep_instr !8
  %and187 = and i32 %call186, 127, !control_dep_instr !7, !data_dep_instr !8
  %call186 = call i32 @getchar(), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %call204 = call i32 @putchar(i32 7), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.then185  if.else197  if.end205  
After path modifications process path
sw.bb181  if.then185  if.else197  if.end205  
Hash path invariants only
Invariants are
  br label %if.end206, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %call186 = call i32 @getchar(), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %and187 = and i32 %call186, 127, !control_dep_instr !7, !data_dep_instr !8
  store i32 %and187, i32* %c, align 4, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.end207  if.then210  if.then216  
After path modifications process path
sw.bb181  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.then210  if.then216  
After path modifications process path
entry  if.end  if.then210  if.then216  
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct23(i32* %i, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %ctok.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct23(i32* %i, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %curchar.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct24(i8*** %curchar.addr, i8** %ctok.addr, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11
Can't handle this operand   %ctok.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct24(i8*** %curchar.addr, i8** %ctok.addr, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct24(i8*** %curchar.addr, i8** %ctok.addr, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  if.then210  if.then216  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  if.then210  if.then216  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  if.then210  if.then216  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.end207  if.then210  if.end222  
After path modifications process path
sw.bb181  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.then210  if.end222  
After path modifications process path
entry  if.end  if.then210  if.end222  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  if.then210  if.end222  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  if.then210  if.end222  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  if.then210  if.end222  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.end207  if.end223  
After path modifications process path
sw.bb181  if.end223  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  %call224 = call i32 @putchar(i32 7), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb225  
After path modifications process path
sw.bb225  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb226  if.then234  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb226  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %arraydecay230 = getelementptr inbounds [100 x i8], [100 x i8]* %buf227, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb226  if.end236  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb226  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %arraydecay230 = getelementptr inbounds [100 x i8], [100 x i8]* %buf227, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb240  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb240  
After path modifications process path
entry  if.end  sw.bb240  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb240  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond  sw.bb240  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  sw.bb240  
After path modifications process path is empty
 Processing function:compoundgood
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then4  
After path modifications process path
entry  if.end  if.then4  
Processing path: entry  if.end  if.end5  for.cond  for.body  if.then15  if.then20  sw.epilog  
After path modifications process path
for.body  if.then15  sw.epilog  
Hash path invariants only
Invariants are
  br label %if.end29, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  
After path modifications process path
entry  if.end  if.end5  
Processing path: entry  if.end  if.end5  for.cond  for.body  if.then15  if.then20  sw.bb  
After path modifications process path
for.body  if.then15  
Hash path invariants only
Invariants are
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  sw.bb  
After path modifications process path
entry  if.end  if.end5  sw.bb  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood0(i32* %retval, i64* %secondcap), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %secondcap = alloca i64, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood0(i32* %retval, i64* %secondcap), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end5  for.cond  for.body  if.then15  if.then20  sw.bb26  
After path modifications process path
for.body  if.then15  
Hash path invariants only
Invariants are
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  sw.bb26  
After path modifications process path
entry  if.end  if.end5  sw.bb26  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood1(i32* %retval, i64* %secondcap), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %secondcap = alloca i64, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood1(i32* %retval, i64* %secondcap), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end5  for.cond  for.body  if.then15  if.end29  
After path modifications process path
for.body  if.then15  if.end29  
Hash path invariants only
Invariants are
  br label %if.end30, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  
After path modifications process path
entry  if.end  if.end5  
Processing path: entry  if.end  if.end5  for.cond  for.body  if.then15  lor.lhs.false  
After path modifications process path
for.body  if.then15  lor.lhs.false  
Hash path invariants only
Invariants are
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  
After path modifications process path
entry  if.end  if.end5  
Processing path: entry  if.end  if.end5  for.cond  for.body  if.end30  for.inc  
After path modifications process path
for.body  if.end30  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  
After path modifications process path
entry  if.end  if.end5  
Processing path: entry  if.end  if.end5  for.cond  for.body  if.else  
After path modifications process path
for.body  if.else  
Hash path invariants only
Invariants are
  br label %if.end30, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  call void @compoundgood2(i8** %p, i8* %savech), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !12
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood2(i8** %p, i8* %savech), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !12
Can't handle this operand   %savech = alloca i8, align 1, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood2(i8** %p, i8* %savech), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !12
Processing path: entry  if.end  if.end5  
After path modifications process path
entry  if.end  if.end5  
Processing path: entry  if.end  if.end5  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end5  for.end  
After path modifications process path
entry  if.end  if.end5  for.end  
 Skipping function per FilterFunctionPass:makepossibilities
 Skipping function per FilterFunctionPass:show_line
 Processing function:line_size
Short range hashing enabled.
Processing path: entry  for.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  land.end  for.body  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  land.end  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
 Skipping function per FilterFunctionPass:my_getline
 Processing function:inserttoken
Short range hashing enabled.
Processing path: entry  for.cond  for.body  for.inc  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11
  call void @inserttoken1(i8** %p, i8** %q), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken1(i8** %p, i8** %q), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %q = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken1(i8** %p, i8** %q), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %q = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken0(i8** %q, i8** %p, i8** %buf.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken0(i8** %q, i8** %p, i8** %buf.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %buf.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken0(i8** %q, i8** %p, i8** %buf.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  for.end  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing call instruction..
Can't handle this operand   %ew = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %curchar.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %start.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %q = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %tok.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  for.end  while.cond  while.end  if.then  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  while.end  if.then  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.then  while.cond9  while.body11  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.then  
After path modifications process path
entry  for.end  while.end  if.then  
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken5(i8** %p, i8** %tok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %tok.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken5(i8** %p, i8** %tok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.end  while.cond  while.end  if.then  while.end14  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  while.end  if.then  while.end14  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.then  while.cond9  while.end14  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.then  while.end14  
After path modifications process path
entry  for.end  while.end  if.then  while.end14  
Processing path: entry  for.end  while.end  if.end  while.cond15  while.body20  
After path modifications process path is empty
Processing path: entry  for.end  while.cond  while.end  if.end  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  while.end  if.end  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.end  
After path modifications process path
entry  for.end  while.end  if.end  
Processing path: entry  for.end  while.end  if.end  while.cond15  while.end21  
After path modifications process path is empty
Processing path: entry  for.end  while.cond  while.end  if.end  while.end21  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  while.end  if.end  while.end21  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.end  while.end21  
After path modifications process path
entry  for.end  while.end  if.end  while.end21  
 Skipping function per FilterFunctionPass:lookharder
 Skipping function per FilterFunctionPass:show_char
 Skipping function per FilterFunctionPass:wrongcapital
 Skipping function per FilterFunctionPass:missingletter
 Skipping function per FilterFunctionPass:transposedletter
 Processing function:extraletter
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing path: entry  if.end  for.cond  for.body  if.then7  if.then12  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  %arraydecay5 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  if.end  if.then12  
After path modifications process path
entry  if.end  if.then12  
Processing path: entry  if.end  for.cond  for.body  if.then7  if.end13  
After path modifications process path
for.body  if.end13  
Hash path invariants only
Invariants are
  br label %if.end14, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay5 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.end14  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  %arraydecay5 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
 Processing function:wrongletter
Short range hashing enabled.
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  for.cond4  for.body7  if.then  
After path modifications process path
for.body7  if.then  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  for.cond4  for.body7  for.inc  
After path modifications process path
for.body7  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  for.cond4  for.body7  if.else  land.lhs.true  if.then23  
After path modifications process path
for.body7  if.else  land.lhs.true  if.then23  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  for.cond4  for.body7  if.else  land.lhs.true  lor.lhs.false  
After path modifications process path
for.body7  if.else  land.lhs.true  lor.lhs.false  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.then37  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  for.cond4  for.body7  if.else  if.end  if.end24  if.then32  if.then37  
After path modifications process path
for.body7  if.else  if.end  if.end24  
Hash path invariants only
Invariants are
  %arraydecay29 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.then37  
After path modifications process path
entry  if.then37  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  for.cond4  for.body7  if.else  if.end  if.end24  if.then32  if.end38  
After path modifications process path
for.body7  if.else  if.end  if.end24  if.end38  
Hash path invariants only
Invariants are
  br label %if.end39, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay29 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  for.cond4  for.body7  if.else  if.end  if.end24  if.end39  
After path modifications process path
for.body7  if.else  if.end  if.end24  if.end39  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay29 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  for.end  for.inc42  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc42, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  for.cond4  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end44  
After path modifications process path is empty
Processing path: entry  for.end44  
After path modifications process path
entry  for.end44  
 Skipping function per FilterFunctionPass:missingspace
 Processing function:tryveryhard
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @tryveryhard0(i8** %word.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Skip. No dependence graph for function posscmp
Skip. No dependence graph for function casecmp
 Skipping function per FilterFunctionPass:save_cap
 Skipping function per FilterFunctionPass:insert
 Skipping function per FilterFunctionPass:save_root_cap
 Skipping function per FilterFunctionPass:ins_cap
 Skipping function per FilterFunctionPass:ins_root_cap
 Skipping function per FilterFunctionPass:askmode
 Skipping function per FilterFunctionPass:copyout
 Skipping function per FilterFunctionPass:skipoverword
 Skipping function per FilterFunctionPass:checkline
 Processing function:skiptoword
Short range hashing enabled.
Processing path: entry  while.cond  land.rhs  land.lhs.true  
After path modifications process path
land.rhs  land.lhs.true  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.rhs  lor.lhs.false  lor.rhs  land.rhs13  
After path modifications process path
land.rhs  lor.lhs.false  lor.rhs  land.rhs13  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.rhs  lor.lhs.false  lor.rhs  land.end  
After path modifications process path
land.rhs  lor.lhs.false  lor.rhs  land.end  
Hash path invariants only
Invariants are
  br label %lor.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.rhs  lor.end  
After path modifications process path
land.rhs  lor.end  
Hash path invariants only
Invariants are
  br label %land.end15, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.rhs  land.lhs.true4  
After path modifications process path
land.rhs  land.lhs.true4  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.then21  if.end  
After path modifications process path
while.body  if.then  if.then21  if.end  
Hash path invariants only
Invariants are
  br label %if.end138, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.then21  if.then23  
After path modifications process path
while.body  if.then  if.then21  if.then23  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @math_mode, align 4, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword0(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i8 80, i8* @LaTeX_Mode, align 1, !control_dep_instr !7, !data_indep_instr !11
  store i32 1, i32* @TeX_comment, align 4, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.end138  if.then142  
After path modifications process path
while.body  if.then  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.then142  
After path modifications process path
entry  if.then142  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.end138  if.end143  
After path modifications process path
while.body  if.then  if.end143  
Hash path invariants only
Invariants are
  br label %if.end211, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  land.lhs.true30  
After path modifications process path
while.body  if.then  if.else  if.then26  land.lhs.true30  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  if.then40  
After path modifications process path
while.body  if.then  if.else  if.then26  if.then40  
Hash path invariants only
Invariants are
  br label %if.end73, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword1(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  if.end73  if.then76  
After path modifications process path
while.body  if.then  if.else  if.then26  if.end73  if.then76  
Hash path invariants only
Invariants are
  store i32 0, i32* @math_mode, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end78, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword4(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  if.end73  if.end78  
After path modifications process path
while.body  if.then  if.else  if.then26  if.end73  if.end78  
Hash path invariants only
Invariants are
  br label %if.end137, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  land.lhs.true37  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  land.lhs.true37  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
Hash path invariants only
Invariants are
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  while.cond42  land.rhs45  lor.end60  
After path modifications process path
land.rhs45  lor.end60  
Hash path invariants only
Invariants are
  br label %land.end61, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
Hash path invariants only
Invariants are
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  while.cond42  land.rhs45  lor.lhs.false50  lor.rhs55  
After path modifications process path
land.rhs45  lor.lhs.false50  lor.rhs55  
Hash path invariants only
Invariants are
  br label %lor.end60, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
Hash path invariants only
Invariants are
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  while.cond42  land.end61  while.body62  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  while.end  if.then66  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
Hash path invariants only
Invariants are
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  while.cond42  land.end61  if.then66  
After path modifications process path is empty
Processing path: entry  if.then66  
After path modifications process path
entry  if.then66  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  while.end  if.end67  if.then70  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  if.end67  if.then70  
Hash path invariants only
Invariants are
  br label %if.end72, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword3(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  while.cond42  land.end61  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  while.end  if.end67  if.end72  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  if.end67  if.end72  
Hash path invariants only
Invariants are
  br label %if.end73, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  while.cond42  land.end61  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.end137  
After path modifications process path
while.body  if.then  if.else  if.end137  
Hash path invariants only
Invariants are
  br label %if.end138, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  land.lhs.true82  land.lhs.true87  if.then91  
After path modifications process path
while.body  if.then  if.else  if.else79  land.lhs.true82  land.lhs.true87  if.then91  
Hash path invariants only
Invariants are
  br label %if.end136, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword5(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.end136  
After path modifications process path
while.body  if.then  if.else  if.else79  if.end136  
Hash path invariants only
Invariants are
  br label %if.end137, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  if.then108  if.then111  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  if.then108  if.then111  
Hash path invariants only
Invariants are
  br label %if.end113, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword6(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  if.then108  if.end113  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  if.then108  if.end113  
Hash path invariants only
Invariants are
  br label %if.end135, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  if.end135  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  if.end135  
Hash path invariants only
Invariants are
  br label %if.end136, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  land.lhs.true99  land.lhs.true104  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  land.lhs.true99  land.lhs.true104  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  land.lhs.true118  if.then121  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  land.lhs.true118  if.then121  
Hash path invariants only
Invariants are
  br label %if.end134, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword7(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.end134  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.end134  
Hash path invariants only
Invariants are
  br label %if.end135, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.then126  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.then126  
Hash path invariants only
Invariants are
  br label %if.end133, !control_dep_instr !7, !data_indep_instr !11
  store i8 80, i8* @LaTeX_Mode, align 1, !control_dep_instr !7, !data_indep_instr !11
  call void @TeX_skip_parens(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_skip_parens(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.end133  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.end133  
Hash path invariants only
Invariants are
  br label %if.end134, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.else127  if.then130  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.else127  if.then130  
Hash path invariants only
Invariants are
  br label %if.end132, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword8(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.else127  if.end132  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.else127  if.end132  
Hash path invariants only
Invariants are
  br label %if.end133, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond231  while.body239  
After path modifications process path is empty
Processing path: entry  while.cond  land.end15  while.body  if.end211  land.lhs.true215  land.lhs.true225  if.then229  
After path modifications process path
while.body  if.end211  land.lhs.true215  land.lhs.true225  if.then229  
Hash path invariants only
Invariants are
  br label %while.cond231, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword16(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword16(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond231  
After path modifications process path is empty
Processing path: entry  while.cond  land.end15  while.body  if.end211  land.lhs.true215  land.lhs.true225  if.then229  while.end241  
After path modifications process path
while.body  if.end211  land.lhs.true215  land.lhs.true225  if.then229  while.end241  
Hash path invariants only
Invariants are
  br label %if.end244, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
  br label %while.cond231, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword16(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword16(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.end211  land.lhs.true215  land.lhs.true225  lor.lhs.false227  
After path modifications process path
while.body  if.end211  land.lhs.true215  land.lhs.true225  lor.lhs.false227  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.end211  land.lhs.true215  lor.lhs.false220  
After path modifications process path
while.body  if.end211  land.lhs.true215  lor.lhs.false220  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.end211  if.end244  
After path modifications process path
while.body  if.end211  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.end211  if.else242  
After path modifications process path
while.body  if.end211  if.else242  
Hash path invariants only
Invariants are
  br label %if.end244, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword18(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword18(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.default  if.then189  
After path modifications process path
while.body  if.else144  if.then149  sw.default  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.default  if.else191  if.then197  if.then203  
After path modifications process path
while.body  if.else144  if.then149  sw.default  if.else191  if.then197  if.then203  
Hash path invariants only
Invariants are
  br label %if.end207, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword14(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword14(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.default  if.else191  if.then197  if.end207  
After path modifications process path
while.body  if.else144  if.then149  sw.default  if.else191  if.then197  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.default  if.else191  if.then197  if.else205  
After path modifications process path
while.body  if.else144  if.then149  sw.default  if.else191  if.then197  if.else205  
Hash path invariants only
Invariants are
  br label %if.end207, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword15(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword15(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.default  if.else191  if.end208  if.end209  sw.epilog  
After path modifications process path
while.body  if.else144  if.then149  sw.default  if.else191  if.end208  if.end209  sw.epilog  
Hash path invariants only
Invariants are
  br label %if.end210, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
  br label %if.end209, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb  if.then157  
After path modifications process path
while.body  if.else144  if.then149  sw.bb  if.then157  
Hash path invariants only
Invariants are
  br label %if.end160, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword9(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword9(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb  if.end160  
After path modifications process path
while.body  if.else144  if.then149  sw.bb  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb  if.else158  
After path modifications process path
while.body  if.else144  if.then149  sw.bb  if.else158  
Hash path invariants only
Invariants are
  br label %if.end160, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword10(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword10(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb161  if.then170  
After path modifications process path
while.body  if.else144  if.then149  sw.bb161  if.then170  
Hash path invariants only
Invariants are
  br label %if.end172, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword11(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword11(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb161  if.end172  if.then181  
After path modifications process path
while.body  if.else144  if.then149  sw.bb161  if.end172  if.then181  
Hash path invariants only
Invariants are
  br label %if.end183, !control_dep_instr !7, !data_indep_instr !11
  %307 = load i16*, i16** %call176, align 8, !control_dep_instr !7, !data_dep_instr !8
  call void @skiptoword12(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %call176 = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword12(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb161  if.end172  if.end183  
After path modifications process path
while.body  if.else144  if.then149  sw.bb161  if.end172  
Hash path invariants only
Invariants are
  %call176 = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  %310 = load i16*, i16** %call176, align 8, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb161  lor.lhs.false166  
After path modifications process path
while.body  if.else144  if.then149  sw.bb161  lor.lhs.false166  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.end210  
After path modifications process path
while.body  if.else144  if.end210  
Hash path invariants only
Invariants are
  br label %if.end211, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.end245  if.then249  if.then251  
After path modifications process path is empty
Processing path: entry  while.end245  if.then249  if.then251  
After path modifications process path
entry  while.end245  if.then249  if.then251  
Processing call instruction..
Processing path: entry  while.cond  land.end15  while.end245  if.then249  if.end252  
After path modifications process path is empty
Processing path: entry  while.end245  if.then249  if.end252  
After path modifications process path
entry  while.end245  if.then249  if.end252  
Processing path: entry  while.cond  land.end15  while.end245  if.end253  
After path modifications process path is empty
Processing path: entry  while.end245  if.end253  
After path modifications process path
entry  while.end245  if.end253  
 Processing function:TeX_math_check
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.else  if.end  if.then20  
After path modifications process path
entry  if.else  if.end  if.then20  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_math_check1(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.then25  
After path modifications process path
entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.then25  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_math_check2(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.end27  
After path modifications process path
entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.end27  
Processing path: entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.else26  
After path modifications process path
entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.else26  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_math_check3(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
 Skipping function per FilterFunctionPass:TeX_LR_check
 Skipping function per FilterFunctionPass:TeX_math_end
 Skipping function per FilterFunctionPass:TeX_strncmp
 Skipping function per FilterFunctionPass:TeX_skip_parens
 Skipping function per FilterFunctionPass:TeX_math_begin
 Skipping function per FilterFunctionPass:TeX_skip_check
 Skipping function per FilterFunctionPass:TeX_LR_begin
 Skipping function per FilterFunctionPass:TeX_open_paren
 Skipping function per FilterFunctionPass:TeX_skip_args
 Skipping function per FilterFunctionPass:dumpmode
 Processing function:tbldump
Short range hashing enabled.
Processing path: entry  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
No oh has been applied in the path
 Skipping function per FilterFunctionPass:entdump
 Skipping function per FilterFunctionPass:setdump
 Skipping function per FilterFunctionPass:subsetdump
 Skipping function per FilterFunctionPass:good
 Processing function:cap_ok
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.else  if.then2  if.then3  
After path modifications process path
entry  if.else  if.then2  if.then3  
Processing path: entry  if.else  if.then2  if.end  cond.true  
After path modifications process path
entry  if.else  if.then2  if.end  cond.true  
Processing path: entry  if.else  if.then2  if.end  cond.end  
After path modifications process path
entry  if.else  if.then2  if.end  cond.end  
Processing path: entry  if.else  if.then2  if.end  cond.false  
After path modifications process path
entry  if.else  if.then2  if.end  cond.false  
Processing path: entry  if.else  if.then2  if.else7  
After path modifications process path
entry  if.else  if.then2  if.else7  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.then16  land.lhs.true  land.lhs.true21  if.then24  
After path modifications process path
if.then16  land.lhs.true  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.else  if.end12  if.end13  if.then24  
After path modifications process path
entry  if.else  if.end12  if.end13  if.then24  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.then16  if.end25  
After path modifications process path
if.then16  if.end25  
Hash path invariants only
Invariants are
  br label %if.end118, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.end118  if.then124  for.end126  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  if.then124  for.end126  
After path modifications process path
entry  if.else  if.end12  if.end13  if.then124  for.end126  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.end118  if.end125  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.then29  if.then32  
After path modifications process path
if.else26  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.else  if.end12  if.end13  if.then32  
After path modifications process path
entry  if.else  if.end12  if.end13  if.then32  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.then29  if.end33  
After path modifications process path
if.else26  if.end33  
Hash path invariants only
Invariants are
  br label %if.end117, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.end117  
After path modifications process path
if.else26  if.end117  
Hash path invariants only
Invariants are
  br label %if.end118, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond43  for.body  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.then42  if.then49  
After path modifications process path
if.else26  if.else34  if.then42  if.then49  
Hash path invariants only
Invariants are
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond43, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond43  for.body  if.end50  for.inc  
After path modifications process path
if.end50  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.then42  
After path modifications process path
if.else26  if.else34  if.then42  
Hash path invariants only
Invariants are
  call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond43, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond43  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.then42  for.end  
After path modifications process path
if.else26  if.else34  if.then42  for.end  
Hash path invariants only
Invariants are
  call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %if.end64, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond43, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  doublecontinue  
After path modifications process path
if.else26  if.else34  doublecontinue  
Hash path invariants only
Invariants are
  br label %if.end117, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  if.then82  
After path modifications process path
if.else26  if.else34  if.end64  if.then82  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  while.cond  while.body  if.end83  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  
After path modifications process path
if.else26  if.else34  if.end64  
Hash path invariants only
Invariants are
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond89  for.body91  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.then88  if.then95  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.then88  if.then95  
Hash path invariants only
Invariants are
  br label %for.cond89, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond89  for.body91  if.end96  for.inc97  
After path modifications process path
if.end96  
Hash path invariants only
Invariants are
  br label %for.inc97, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.then88  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.then88  
Hash path invariants only
Invariants are
  br label %for.cond89, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond89  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.then88  for.end99  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.then88  for.end99  
Hash path invariants only
Invariants are
  br label %if.end112, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond89, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  while.cond  if.then115  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.end112  if.then115  
After path modifications process path
if.else26  if.else34  if.end64  while.end  
Hash path invariants only
Invariants are
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  if.then115  
After path modifications process path
entry  if.else  if.end12  if.end13  if.then115  
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.end112  if.end116  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.end116  
Hash path invariants only
Invariants are
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond101  for.body103  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.else100  if.then107  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.else100  if.then107  
Hash path invariants only
Invariants are
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond101, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond101  for.body103  if.end108  for.inc109  
After path modifications process path
if.end108  
Hash path invariants only
Invariants are
  br label %for.inc109, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.else100  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.else100  
Hash path invariants only
Invariants are
  br label %for.cond101, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond101  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.else100  for.end111  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.else100  for.end111  
Hash path invariants only
Invariants are
  br label %if.end112, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond101, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond52  for.body55  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.else51  if.then59  
After path modifications process path
if.else26  if.else34  if.else51  if.then59  
Hash path invariants only
Invariants are
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
  call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond52  for.body55  if.end60  for.inc61  
After path modifications process path
if.end60  
Hash path invariants only
Invariants are
  br label %for.inc61, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.else51  
After path modifications process path
if.else26  if.else34  if.else51  
Hash path invariants only
Invariants are
  call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond52  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.else51  for.end63  
After path modifications process path
if.else26  if.else34  if.else51  for.end63  
Hash path invariants only
Invariants are
  call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %if.end64, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
 Processing function:entryhasaffixes
Short range hashing enabled.
Processing path: entry  land.lhs.true  if.then  
After path modifications process path
entry  land.lhs.true  if.then  
Processing path: entry  if.end  land.lhs.true4  if.then14  
After path modifications process path
entry  if.end  land.lhs.true4  if.then14  
Processing path: entry  if.end  if.end15  
After path modifications process path
entry  if.end  if.end15  
Processing path: entry  return  
After path modifications process path
entry  return  
 Processing function:flagpr
Short range hashing enabled.
Processing path: entry  if.then  if.then2  for.cond  for.body  if.then10  
After path modifications process path is empty
Processing path: entry  if.then  if.then2  if.then10  
After path modifications process path
entry  if.then  if.then2  if.then10  
Processing path: entry  if.then  if.then2  for.cond  for.body  if.end  for.inc  
After path modifications process path
if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.then  if.then2  
After path modifications process path
entry  if.then  if.then2  
Processing path: entry  if.then  if.then2  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.then  if.then2  for.end  
After path modifications process path
entry  if.then  if.then2  for.end  
Processing path: entry  if.then  if.end25  
After path modifications process path
entry  if.then  if.end25  
Processing path: entry  if.then  if.else  for.cond11  for.body16  if.then20  
After path modifications process path is empty
Processing path: entry  if.then  if.else  if.then20  
After path modifications process path
entry  if.then  if.else  if.then20  
Processing path: entry  if.then  if.else  for.cond11  for.body16  if.end21  for.inc22  
After path modifications process path
if.end21  
Hash path invariants only
Invariants are
  br label %for.inc22, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.then  if.else  
After path modifications process path
entry  if.then  if.else  
Processing path: entry  if.then  if.else  for.cond11  for.end24  
After path modifications process path is empty
Processing path: entry  if.then  if.else  for.end24  
After path modifications process path
entry  if.then  if.else  for.end24  
Processing path: entry  if.end147  
After path modifications process path
entry  if.end147  
Processing path: entry  if.end26  if.then29  if.then38  for.cond39  for.body43  if.then47  
After path modifications process path is empty
Processing path: entry  if.end26  if.then29  if.then38  if.then47  
After path modifications process path
entry  if.end26  if.then29  if.then38  if.then47  
Processing path: entry  if.end26  if.then29  if.then38  for.cond39  for.body43  if.end48  for.inc49  
After path modifications process path
if.end48  
Hash path invariants only
Invariants are
  br label %for.inc49, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.then29  if.then38  
After path modifications process path
entry  if.end26  if.then29  if.then38  
Processing path: entry  if.end26  if.then29  if.then38  for.cond39  for.end51  
After path modifications process path is empty
Processing path: entry  if.end26  if.then29  if.then38  for.end51  
After path modifications process path
entry  if.end26  if.then29  if.then38  for.end51  
Processing path: entry  if.end26  if.then29  if.end71  
After path modifications process path
entry  if.end26  if.then29  if.end71  
Processing path: entry  if.end26  if.then29  if.else52  for.cond58  for.body62  if.then66  
After path modifications process path is empty
Processing path: entry  if.end26  if.then29  if.else52  if.then66  
After path modifications process path
entry  if.end26  if.then29  if.else52  if.then66  
Processing path: entry  if.end26  if.then29  if.else52  for.cond58  for.body62  if.end67  for.inc68  
After path modifications process path
if.end67  
Hash path invariants only
Invariants are
  br label %for.inc68, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.then29  if.else52  
After path modifications process path
entry  if.end26  if.then29  if.else52  
Processing path: entry  if.end26  if.then29  if.else52  for.cond58  for.end70  
After path modifications process path is empty
Processing path: entry  if.end26  if.then29  if.else52  for.end70  
After path modifications process path
entry  if.end26  if.then29  if.else52  for.end70  
Processing path: entry  if.end26  if.end72  if.then79  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.then79  
After path modifications process path
entry  if.end26  if.end72  if.then79  
Processing path: entry  if.end26  if.end72  if.then79  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.then79  while.end  
After path modifications process path
entry  if.end26  if.end72  if.then79  while.end  
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.body105  for.inc110  
After path modifications process path
for.body105  
Hash path invariants only
Invariants are
  br label %for.inc110, !control_dep_instr !7, !data_indep_instr !11
  call void @flagpr10(i8** %origp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %origp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr10(i8** %origp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  
After path modifications process path
entry  if.end26  if.end72  if.end99  
Processing call instruction..
Can't handle this operand   %prestrip.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr9(i32* %prestrip.addr, i32* %sufadd.addr, i32* %preadd.addr, i32* %orig_len), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sufadd.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr9(i32* %prestrip.addr, i32* %sufadd.addr, i32* %preadd.addr, i32* %orig_len), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %preadd.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr9(i32* %prestrip.addr, i32* %sufadd.addr, i32* %preadd.addr, i32* %orig_len), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %orig_len = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr9(i32* %prestrip.addr, i32* %sufadd.addr, i32* %preadd.addr, i32* %orig_len), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.then115  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.then115  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.then115  
Processing call instruction..
Can't handle this operand   %origp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr12(i8** %origp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.end117  if.then121  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.then121  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.then121  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr13(i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.end117  if.end135  if.then140  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.end135  if.then140  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.end135  if.then140  
Processing call instruction..
Can't handle this operand   %preflag.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr15(i32* %preflag.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.end117  if.end135  if.end142  if.then145  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.end135  if.end142  if.then145  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.end135  if.end142  if.then145  
Processing call instruction..
Can't handle this operand   %sufflag.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr16(i32* %sufflag.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.end117  if.else124  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  while.cond125  while.body127  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.end117  if.else124  while.end134  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  while.cond125  while.end134  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  while.end134  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  while.end134  
Processing path: entry  if.end26  if.end72  if.else86  while.cond87  while.body91  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.else86  
After path modifications process path
entry  if.end26  if.end72  if.else86  
Processing path: entry  if.end26  if.end72  if.else86  while.cond87  while.end98  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.else86  while.end98  
After path modifications process path
entry  if.end26  if.end72  if.else86  while.end98  
 Processing function:linit
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then2  
After path modifications process path
entry  if.end  if.then2  
Processing path: entry  if.end  if.end4  if.then8  if.then11  
After path modifications process path
entry  if.end  if.end4  if.then8  if.then11  
Processing path: entry  if.end  if.end4  if.then8  if.end20  
After path modifications process path
entry  if.end  if.end4  if.then8  if.end20  
Processing path: entry  if.end  if.end4  if.then8  if.else  if.then15  
After path modifications process path
entry  if.end  if.end4  if.then8  if.else  if.then15  
Processing path: entry  if.end  if.end4  if.then8  if.else  if.end19  
After path modifications process path
entry  if.end  if.end4  if.then8  if.else  if.end19  
Processing path: entry  if.end  if.end4  if.then8  if.else  if.else17  
After path modifications process path
entry  if.end  if.end4  if.then8  if.else  if.else17  
Processing path: entry  if.end  if.end4  if.else21  if.then25  
After path modifications process path
entry  if.end  if.end4  if.else21  if.then25  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.then32  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.then32  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  if.then46  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  if.then46  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.then56  if.then60  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.then56  if.then60  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.then56  if.end62  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.then56  if.end62  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  if.then85  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  if.then85  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.then89  if.then93  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.then89  if.then93  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.then89  if.end95  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.then89  if.end95  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.then129  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.then129  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.body164  if.then166  
After path modifications process path
for.body164  if.then166  
Hash path invariants only
Invariants are
  br label %if.end172, !control_dep_instr !7, !data_indep_instr !10
  call void @linit22(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit22(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.body164  if.end172  if.then174  
After path modifications process path
for.body164  if.end172  if.then174  
Hash path invariants only
Invariants are
  br label %if.end180, !control_dep_instr !7, !data_indep_instr !10
  call void @linit24(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit24(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.body164  if.end172  if.end180  for.inc181  
After path modifications process path
for.body164  if.end172  if.end180  
Hash path invariants only
Invariants are
  br label %for.inc181, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.body164  if.end172  if.else178  
After path modifications process path
for.body164  if.end172  if.else178  
Hash path invariants only
Invariants are
  br label %if.end180, !control_dep_instr !7, !data_indep_instr !10
  call void @linit25(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit25(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.body164  if.else170  
After path modifications process path
for.body164  if.else170  
Hash path invariants only
Invariants are
  br label %if.end172, !control_dep_instr !7, !data_indep_instr !10
  call void @linit23(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit23(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.then192  
After path modifications process path
for.body187  if.then192  
Hash path invariants only
Invariants are
  store i32 1, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  store %struct.flagptr* getelementptr inbounds ([228 x %struct.flagptr], [228 x %struct.flagptr]* @sflagindex, i64 0, i64 0), %struct.flagptr** %ind, align 8, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end220, !control_dep_instr !7, !data_indep_instr !10
  store i8* null, i8** %cp, align 8, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Non numeric pointers (int and float) are skipped:  %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Non numeric pointers (int and float) are skipped:  %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 %struct.flagptr*
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit27(%struct.flagent** %entry1, i32* %i), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit27(%struct.flagent** %entry1, i32* %i), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.end220  if.then224  
After path modifications process path
for.body187  if.end220  if.then224  
Hash path invariants only
Invariants are
  br label %if.end226, !control_dep_instr !7, !data_indep_instr !10
  call void @linit31(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit31(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit31(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.end220  if.end226  if.end260  for.inc261  
After path modifications process path
for.body187  if.end220  if.end226  if.end260  
Hash path invariants only
Invariants are
  br label %for.inc261, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  if.then256  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.end220  if.end226  land.lhs.true  land.lhs.true232  if.then240  if.then256  
After path modifications process path
for.body187  if.end220  if.end226  land.lhs.true  land.lhs.true232  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  if.then256  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  if.then256  
Processing call instruction..
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.end220  if.end226  land.lhs.true  land.lhs.true232  if.then240  if.end258  
After path modifications process path
for.body187  if.end220  if.end226  land.lhs.true  land.lhs.true232  if.end258  
Hash path invariants only
Invariants are
  br label %if.end260, !control_dep_instr !7, !data_indep_instr !10
  call void @linit33(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit33(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.else193  
After path modifications process path
for.body187  if.else193  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !10
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  while.cond  land.end  while.body  if.then209  
After path modifications process path
while.body  if.then209  
Hash path invariants only
Invariants are
  br label %if.end219, !control_dep_instr !7, !data_indep_instr !10
  store i32 1, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  call void @linit29(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit29(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.else193  
After path modifications process path
for.body187  if.else193  
Hash path invariants only
Invariants are
  call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  while.cond  land.end  while.body  if.end219  
After path modifications process path
while.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.else193  
After path modifications process path
for.body187  if.else193  
Hash path invariants only
Invariants are
  call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  while.cond  land.end  while.body  if.else213  
After path modifications process path
while.body  if.else213  
Hash path invariants only
Invariants are
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end219, !control_dep_instr !7, !data_indep_instr !10
  call void @linit30(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit30(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit30(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.else193  
After path modifications process path
for.body187  if.else193  
Hash path invariants only
Invariants are
  call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  while.cond  land.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.else193  while.end  
After path modifications process path
for.body187  if.else193  while.end  
Hash path invariants only
Invariants are
  call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end220, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.then273  
After path modifications process path
for.body268  if.then273  
Hash path invariants only
Invariants are
  store i32 1, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  store %struct.flagptr* getelementptr inbounds ([228 x %struct.flagptr], [228 x %struct.flagptr]* @pflagindex, i64 0, i64 0), %struct.flagptr** %ind, align 8, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end305, !control_dep_instr !7, !data_indep_instr !10
  store i8* null, i8** %cp, align 8, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Non numeric pointers (int and float) are skipped:  %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Non numeric pointers (int and float) are skipped:  %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 %struct.flagptr*
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit35(%struct.flagent** %entry1, i32* %i), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit35(%struct.flagent** %entry1, i32* %i), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.end305  if.then309  
After path modifications process path
for.body268  if.end305  if.then309  
Hash path invariants only
Invariants are
  br label %if.end312, !control_dep_instr !7, !data_indep_instr !10
  call void @linit39(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit39(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit39(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.end305  if.end312  if.end352  for.inc353  
After path modifications process path
for.body268  if.end305  if.end312  if.end352  
Hash path invariants only
Invariants are
  br label %for.inc353, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.end305  if.end312  land.lhs.true316  land.lhs.true320  if.then328  if.then348  
After path modifications process path
for.body268  if.end305  if.end312  land.lhs.true316  land.lhs.true320  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  if.then348  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  if.then348  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  if.then348  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  if.then348  
Processing call instruction..
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.end305  if.end312  land.lhs.true316  land.lhs.true320  if.then328  if.end350  
After path modifications process path
for.body268  if.end305  if.end312  land.lhs.true316  land.lhs.true320  if.end350  
Hash path invariants only
Invariants are
  br label %if.end352, !control_dep_instr !7, !data_indep_instr !10
  call void @linit41(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit41(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  while.cond279  land.rhs283  
After path modifications process path
land.rhs283  
Hash path invariants only
Invariants are
  br label %land.end288, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.else274  
After path modifications process path
for.body268  if.else274  
Hash path invariants only
Invariants are
  br label %while.cond279, !control_dep_instr !7, !data_indep_instr !10
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  while.cond279  land.end288  while.body289  if.then293  
After path modifications process path
while.body289  if.then293  
Hash path invariants only
Invariants are
  br label %if.end303, !control_dep_instr !7, !data_indep_instr !10
  store i32 1, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  call void @linit37(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit37(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.else274  
After path modifications process path
for.body268  if.else274  
Hash path invariants only
Invariants are
  call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond279, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  while.cond279  land.end288  while.body289  if.end303  
After path modifications process path
while.body289  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.else274  
After path modifications process path
for.body268  if.else274  
Hash path invariants only
Invariants are
  call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond279, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  while.cond279  land.end288  while.body289  if.else297  
After path modifications process path
while.body289  if.else297  
Hash path invariants only
Invariants are
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end303, !control_dep_instr !7, !data_indep_instr !10
  call void @linit38(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit38(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit38(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.else274  
After path modifications process path
for.body268  if.else274  
Hash path invariants only
Invariants are
  call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond279, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  while.cond279  land.end288  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.else274  while.end304  
After path modifications process path
for.body268  if.else274  while.end304  
Hash path invariants only
Invariants are
  call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end305, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  br label %while.cond279, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.then359  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.then359  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.then359  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.then359  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.then359  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.end420  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.end420  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.end420  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.end420  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.end420  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.else360  if.then366  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.else360  if.then366  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.else360  if.then366  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.then366  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.then366  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  while.cond401  while.body407  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  for.cond369  for.body372  
After path modifications process path
for.body372  
Hash path invariants only
Invariants are
  br label %while.cond401, !control_dep_instr !7, !data_indep_instr !10
  call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %nextchar = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  while.cond401  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  for.cond369  for.body372  while.end415  for.inc417  
After path modifications process path
for.body372  while.end415  
Hash path invariants only
Invariants are
  br label %for.inc417, !control_dep_instr !7, !data_indep_instr !10
  call void @linit47(i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  br label %while.cond401, !control_dep_instr !7, !data_indep_instr !10
  call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %nextchar = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %nextchar = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit47(i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  for.cond369  for.end419  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  for.end419  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  for.end419  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.else360  if.end368  for.end419  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.else360  if.end368  for.end419  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.else360  if.end368  for.end419  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.body  if.then140  
After path modifications process path
for.body  if.then140  
Hash path invariants only
Invariants are
  br label %if.end146, !control_dep_instr !7, !data_indep_instr !10
  call void @linit16(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit16(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.body  if.end146  if.then150  
After path modifications process path
for.body  if.end146  if.then150  
Hash path invariants only
Invariants are
  br label %if.end157, !control_dep_instr !7, !data_indep_instr !10
  call void @linit18(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit18(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.body  if.end146  if.end157  for.inc  
After path modifications process path
for.body  if.end146  if.end157  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.body  if.end146  if.else152  
After path modifications process path
for.body  if.end146  if.else152  
Hash path invariants only
Invariants are
  br label %if.end157, !control_dep_instr !7, !data_indep_instr !10
  call void @linit19(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit19(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.body  if.else142  
After path modifications process path
for.body  if.else142  
Hash path invariants only
Invariants are
  br label %if.end146, !control_dep_instr !7, !data_indep_instr !10
  call void @linit17(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit17(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.end  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.end  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.else102  if.then115  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.else102  if.then115  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.else102  lor.lhs.false106  if.end117  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.else102  lor.lhs.false106  if.end117  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.else68  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.else68  
 Processing function:lookup
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  for.cond  for.body  land.lhs.true  land.lhs.true10  if.then16  
After path modifications process path
for.body  land.lhs.true  
Hash path invariants only
Invariants are
  %arrayidx6 = getelementptr inbounds [120 x i8], [120 x i8]* %schar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.then16  
After path modifications process path
entry  if.end  if.then16  
Processing call instruction..
Can't handle this operand   %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookup0(%struct.dent** %retval, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookup0(%struct.dent** %retval, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  for.cond  for.body  if.end17  
After path modifications process path
for.body  if.end17  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.end17  while.end  for.inc  
After path modifications process path
for.body  if.end17  while.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  while.cond  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  return  
After path modifications process path is empty
Processing path: entry  if.end  return  
After path modifications process path
entry  if.end  return  
Processing path: entry  if.end  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  if.end  for.end  if.then22  
After path modifications process path
entry  if.end  for.end  if.then22  
Processing call instruction..
Can't handle this operand   %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookup3(%struct.dent** %retval, %struct.dent** %dp, i8** %s.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookup3(%struct.dent** %retval, %struct.dent** %dp, i8** %s.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %s.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookup3(%struct.dent** %retval, %struct.dent** %dp, i8** %s.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  for.cond  for.end  if.else  
After path modifications process path is empty
Processing path: entry  if.end  for.end  if.else  
After path modifications process path
entry  if.end  for.end  if.else  
Non numeric pointers (int and float) are skipped:  %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 %struct.dent*
 Skipping function per FilterFunctionPass:hash
 Skipping function per FilterFunctionPass:makedent
 Skipping function per FilterFunctionPass:strtoichar
 Skipping function per FilterFunctionPass:ichartostr
 Skipping function per FilterFunctionPass:whatcap
 Skipping function per FilterFunctionPass:chupcase
 Skipping function per FilterFunctionPass:strtosichar
 Skipping function per FilterFunctionPass:upcase
 Skipping function per FilterFunctionPass:stringcharlen
 Skipping function per FilterFunctionPass:addvheader
 Skipping function per FilterFunctionPass:combinecaps
 Processing function:combine_two_entries
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %hdrp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combine_two_entries0(%struct.dent** %hdrp.addr, %struct.dent** %newp.addr, %struct.dent** %oldp.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %newp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combine_two_entries0(%struct.dent** %hdrp.addr, %struct.dent** %newp.addr, %struct.dent** %oldp.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %oldp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combine_two_entries0(%struct.dent** %hdrp.addr, %struct.dent** %newp.addr, %struct.dent** %oldp.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.else  if.then11  if.then26  
After path modifications process path
entry  if.else  if.then11  if.then26  
Processing path: entry  if.else  if.then11  if.end  land.lhs.true  if.then41  
After path modifications process path
entry  if.else  if.then11  if.end  land.lhs.true  if.then41  
Processing path: entry  if.else  if.then11  if.end  if.end43  
After path modifications process path
entry  if.else  if.then11  if.end  if.end43  
Processing path: entry  if.else  if.else44  
After path modifications process path
entry  if.else  if.else44  
 Processing function:forcevheader
Short range hashing enabled.
Processing path: entry  land.lhs.true  if.then  
After path modifications process path
entry  land.lhs.true  if.then  
Processing path: entry  if.end12  
After path modifications process path
entry  if.end12  
Processing path: entry  if.else  if.then11  
After path modifications process path
entry  if.else  if.then11  
Processing path: entry  if.else  if.end  
After path modifications process path
entry  if.else  if.end  
 Skipping function per FilterFunctionPass:combineaffixes
 Skipping function per FilterFunctionPass:acoversb
 Skipping function per FilterFunctionPass:issubset
 Skipping function per FilterFunctionPass:lowcase
 Skipping function per FilterFunctionPass:toutent
 Skipping function per FilterFunctionPass:ichartosstr
 Skipping function per FilterFunctionPass:toutword
 Skipping function per FilterFunctionPass:flagout
 Processing function:printichar
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.else  
After path modifications process path
entry  if.else  
 Skipping function per FilterFunctionPass:findfiletype
 Skipping function per FilterFunctionPass:chk_aff
 Skipping function per FilterFunctionPass:pfx_list_chk
 Skipping function per FilterFunctionPass:chk_suf
 Skipping function per FilterFunctionPass:suf_list_chk
 Skipping function per FilterFunctionPass:expand_pre
 Processing function:pr_pre_expansion
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then6  
After path modifications process path
entry  if.end  if.then6  
Processing path: entry  if.end  if.end7  for.cond  for.body  if.then18  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  if.then18  
After path modifications process path
entry  if.end  if.end7  if.then18  
Processing path: entry  if.end  if.end7  for.cond  for.body  if.end19  for.inc  
After path modifications process path
if.end19  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  
After path modifications process path
entry  if.end  if.end7  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.then21  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.then21  
After path modifications process path
entry  if.end  if.end7  for.end  if.then21  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.body40  if.end45  for.inc46  
After path modifications process path
if.end45  
Hash path invariants only
Invariants are
  br label %for.inc46, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  
Processing call instruction..
Can't handle this operand   %nextc = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion2(i8** %nextc, i8** %rootword.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %rootword.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion2(i8** %nextc, i8** %rootword.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.body40  if.then44  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  if.then44  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  if.then44  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  if.then44  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  if.then57  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  if.then57  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.body53  if.then57  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  if.then57  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  if.then57  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.body53  if.end58  for.inc59  
After path modifications process path
if.end58  
Hash path invariants only
Invariants are
  br label %for.inc59, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  for.end61  if.then63  if.end74  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.end74  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.end61  if.then63  if.end74  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.end74  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.end74  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  for.end61  if.then63  if.then70  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.then70  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.end61  if.then63  if.then70  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.then70  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.then70  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  for.end61  if.end78  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.end78  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.end61  if.end78  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.end78  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.end78  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  for.end61  if.else  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.else  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.end61  if.else  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.else  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.else  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.end79  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.end79  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.end79  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.end79  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.end89  if.then92  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.end89  if.then92  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.end89  if.then92  
Processing call instruction..
Can't handle this operand   %croot.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion5(i8** %croot.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.end89  if.end94  if.then97  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.then97  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.then97  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.end89  if.end94  if.end101  if.then105  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.end101  if.then105  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.end101  if.then105  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.end89  if.end94  if.end101  if.else109  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.end101  if.else109  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.end101  if.else109  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion6(i32* %retval, i32* %tlen), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %tlen = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion6(i32* %retval, i32* %tlen), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.else80  if.end88  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.else80  if.end88  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.else80  if.end88  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.else80  if.then84  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.else80  if.then84  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.else80  if.then84  
 Skipping function per FilterFunctionPass:forcelc
 Processing function:expand_suf
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  if.then7  
After path modifications process path
for.body  if.then  if.then7  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
  call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %explength = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %croot.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %extra.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %rootword.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %option.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %entcount = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf0(i32* %entcount, %struct.flagent** %flent), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf0(i32* %entcount, %struct.flagent** %flent), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  for.cond  for.body  if.then  if.end  
After path modifications process path
for.body  if.then  if.end  
Hash path invariants only
Invariants are
  br label %if.end8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.then  lor.lhs.false  
After path modifications process path
for.body  if.then  lor.lhs.false  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end8  for.inc  
After path modifications process path
for.body  if.end8  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
 Skipping function per FilterFunctionPass:pr_suf_expansion
 Skipping function per FilterFunctionPass:treeinit
 Skipping function per FilterFunctionPass:trydict
 Processing function:treeload
Short range hashing enabled.
Processing path: entry  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
No oh has been applied in the path
 Processing function:treeinsert
Short range hashing enabled.
Processing path: entry  if.end68  if.then72  
After path modifications process path
entry  if.end68  if.then72  
Processing path: entry  if.end68  return  
After path modifications process path
entry  if.end68  return  
Processing path: entry  if.end68  if.end73  if.then75  
After path modifications process path
entry  if.end68  if.end73  if.then75  
Processing path: entry  if.end68  if.end73  if.end78  if.then85  if.then89  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.then85  if.then89  
Processing path: entry  if.end68  if.end73  if.end78  if.then85  if.end91  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.then85  if.end91  
Processing path: entry  if.end68  if.end73  if.end78  if.end102  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.end102  
Processing path: entry  if.end68  if.end73  if.end78  if.else92  if.then99  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.else92  if.then99  
Processing path: entry  if.end68  if.end73  if.end78  if.else92  if.end101  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.else92  if.end101  
Processing path: entry  land.lhs.true  if.then  for.cond  for.body  if.then5  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  if.then5  
After path modifications process path
entry  land.lhs.true  if.then  if.then5  
Processing path: entry  land.lhs.true  if.then  for.cond  for.body  if.end  for.inc  
After path modifications process path
if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !12
Processing path: entry  land.lhs.true  if.then  
After path modifications process path
entry  land.lhs.true  if.then  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.then9  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.then9  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.then9  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.then17  if.then21  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.then17  if.then21  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.then17  if.then21  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.then17  if.end22  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.then17  if.end22  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.then17  if.end22  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.end67  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.end67  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.end67  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.then33  
After path modifications process path
for.body28  if.then33  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  while.cond  while.body  if.then42  
After path modifications process path
while.body  if.then42  
Hash path invariants only
Invariants are
  br label %if.end58, !control_dep_instr !7, !data_indep_instr !11
  call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %olddp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.then33  
After path modifications process path
for.body28  if.then33  
Hash path invariants only
Invariants are
  call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  while.cond  while.body  if.end58  
After path modifications process path
while.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.then33  
After path modifications process path
for.body28  if.then33  
Hash path invariants only
Invariants are
  call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  while.cond  while.body  if.else51  
After path modifications process path
while.body  if.else51  
Hash path invariants only
Invariants are
  br label %if.end58, !control_dep_instr !7, !data_indep_instr !11
  call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %olddp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.then33  while.end  
After path modifications process path
for.body28  if.then33  while.end  
Hash path invariants only
Invariants are
  br label %if.end59, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  while.cond  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.end59  for.inc60  
After path modifications process path
for.body28  if.end59  
Hash path invariants only
Invariants are
  br label %for.inc60, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.end62  if.then65  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  for.end62  if.then65  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.end62  if.then65  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.end62  if.then65  
Processing call instruction..
Can't handle this operand   %oldhtab = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert9(%struct.dent** %oldhtab), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.end62  if.end66  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  for.end62  if.end66  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.end62  if.end66  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.end62  if.end66  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.else  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.else  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.else  
 Skipping function per FilterFunctionPass:tinsert
 Skipping function per FilterFunctionPass:treelookup
 Skipping function per FilterFunctionPass:treeoutput
Skip. No dependence graph for function pdictcmp
 Skipping function per FilterFunctionPass:mymalloc
 Processing function:myfree
Short range hashing enabled.
Processing path: entry  land.lhs.true  land.lhs.true2  if.then  
After path modifications process path
entry  land.lhs.true  land.lhs.true2  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
 Skipping function per FilterFunctionPass:xgets
Extract path function for assertion assert_myfree_path_0
Extract path function for assertion assert_myfree_path_1
Extract path function for assertion assert_myfree_path_2
Extract path function for assertion assert_treeinsert_path_0
Extract path function for assertion assert_treeinsert_path_1
Extract path function for assertion assert_treeinsert_path_2
Extract path function for assertion assert_treeinsert_path_3
Extract path function for assertion assert_treeinsert_path_4
Extract path function for assertion assert_treeinsert_path_5
Extract path function for assertion assert_treeinsert_path_6
Extract path function for assertion assert_treeinsert_path_7
Extract path function for assertion assert_treeinsert_path_9
Extract path function for assertion assert_treeinsert_path_10
Extract path function for assertion assert_treeinsert_path_11
Extract path function for assertion assert_treeinsert_path_13
Extract path function for assertion assert_treeinsert_path_15
Extract path function for assertion assert_treeinsert_path_17
Extract path function for assertion assert_treeinsert_path_19
Extract path function for assertion assert_treeinsert_path_20
Extract path function for assertion assert_treeinsert_path_22
Extract path function for assertion assert_treeinsert_path_23
Extract path function for assertion assert_treeinsert_path_24
Extract path function for assertion assert_treeinsert_path_27
Extract path function for assertion assert_treeinsert_path_28
Extract path function for assertion assert_treeinsert_path_30
Extract path function for assertion assert_treeinsert_path_31
Extract path function for assertion assert_treeinsert_path_32
Extract path function for assertion assert_treeinsert_path_35
Extract path function for assertion assert_treeinsert_path_36
Extract path function for assertion assert_treeinsert_path_38
Extract path function for assertion assert_treeinsert_path_41
Extract path function for assertion assert_treeinsert_path_44
Extract path function for assertion assert_treeinsert_path_46
Extract path function for assertion assert_lookup_path_0
Extract path function for assertion assert_lookup_path_1
Extract path function for assertion assert_lookup_path_2
Extract path function for assertion assert_lookup_path_3
Extract path function for assertion assert_lookup_path_5
Extract path function for assertion assert_lookup_path_6
Extract path function for assertion assert_lookup_path_8
Extract path function for assertion assert_lookup_path_10
Extract path function for assertion assert_lookup_path_12
Extract path function for assertion assert_lookup_path_14
Extract path function for assertion assert_wrongletter_path_0
Extract path function for assertion assert_wrongletter_path_1
Extract path function for assertion assert_wrongletter_path_2
Extract path function for assertion assert_wrongletter_path_3
Extract path function for assertion assert_wrongletter_path_5
Extract path function for assertion assert_wrongletter_path_6
Extract path function for assertion assert_wrongletter_path_7
Extract path function for assertion assert_wrongletter_path_8
Extract path function for assertion assert_wrongletter_path_9
Extract path function for assertion assert_wrongletter_path_11
Extract path function for assertion assert_wrongletter_path_12
Extract path function for assertion assert_wrongletter_path_13
Extract path function for assertion assert_wrongletter_path_14
Extract path function for assertion assert_wrongletter_path_15
Extract path function for assertion assert_wrongletter_path_16
Extract path function for assertion assert_wrongletter_path_17
Extract path function for assertion assert_wrongletter_path_18
Extract path function for assertion assert_wrongletter_path_19
Extract path function for assertion assert_wrongletter_path_20
Extract path function for assertion assert_wrongletter_path_21
Extract path function for assertion assert_wrongletter_path_23
Extract path function for assertion assert_wrongletter_path_25
Extract path function for assertion assert_flagpr_path_1
Extract path function for assertion assert_flagpr_path_2
Extract path function for assertion assert_flagpr_path_3
Extract path function for assertion assert_flagpr_path_5
Extract path function for assertion assert_flagpr_path_6
Extract path function for assertion assert_flagpr_path_8
Extract path function for assertion assert_flagpr_path_9
Extract path function for assertion assert_flagpr_path_10
Extract path function for assertion assert_flagpr_path_12
Extract path function for assertion assert_flagpr_path_13
Extract path function for assertion assert_flagpr_path_15
Extract path function for assertion assert_flagpr_path_16
Extract path function for assertion assert_flagpr_path_17
Extract path function for assertion assert_flagpr_path_19
Extract path function for assertion assert_flagpr_path_20
Extract path function for assertion assert_flagpr_path_22
Extract path function for assertion assert_flagpr_path_23
Extract path function for assertion assert_flagpr_path_24
Extract path function for assertion assert_flagpr_path_26
Extract path function for assertion assert_flagpr_path_28
Extract path function for assertion assert_flagpr_path_30
Extract path function for assertion assert_flagpr_path_31
Extract path function for assertion assert_flagpr_path_32
Extract path function for assertion assert_flagpr_path_34
Extract path function for assertion assert_flagpr_path_36
Extract path function for assertion assert_flagpr_path_38
Extract path function for assertion assert_flagpr_path_40
Extract path function for assertion assert_flagpr_path_43
Extract path function for assertion assert_flagpr_path_46
Extract path function for assertion assert_flagpr_path_48
Extract path function for assertion assert_flagpr_path_50
Extract path function for assertion assert_skiptoword_path_2
Extract path function for assertion assert_skiptoword_path_4
Extract path function for assertion assert_skiptoword_path_6
Extract path function for assertion assert_skiptoword_path_10
Extract path function for assertion assert_skiptoword_path_12
Extract path function for assertion assert_skiptoword_path_16
Extract path function for assertion assert_skiptoword_path_20
Extract path function for assertion assert_skiptoword_path_22
Extract path function for assertion assert_skiptoword_path_24
Extract path function for assertion assert_skiptoword_path_28
Extract path function for assertion assert_skiptoword_path_29
Extract path function for assertion assert_skiptoword_path_31
Extract path function for assertion assert_skiptoword_path_32
Extract path function for assertion assert_skiptoword_path_34
Extract path function for assertion assert_skiptoword_path_37
Extract path function for assertion assert_skiptoword_path_40
Extract path function for assertion assert_skiptoword_path_43
Extract path function for assertion assert_skiptoword_path_46
Extract path function for assertion assert_skiptoword_path_48
Extract path function for assertion assert_skiptoword_path_50
Extract path function for assertion assert_skiptoword_path_52
Extract path function for assertion assert_skiptoword_path_54
Extract path function for assertion assert_skiptoword_path_56
Extract path function for assertion assert_skiptoword_path_60
Extract path function for assertion assert_skiptoword_path_62
Extract path function for assertion assert_skiptoword_path_64
Extract path function for assertion assert_skiptoword_path_66
Extract path function for assertion assert_skiptoword_path_68
Extract path function for assertion assert_skiptoword_path_70
Extract path function for assertion assert_skiptoword_path_73
Extract path function for assertion assert_skiptoword_path_76
Extract path function for assertion assert_skiptoword_path_84
Extract path function for assertion assert_skiptoword_path_88
Extract path function for assertion assert_skiptoword_path_92
Extract path function for assertion assert_skiptoword_path_94
Extract path function for assertion assert_skiptoword_path_96
Extract path function for assertion assert_skiptoword_path_100
Extract path function for assertion assert_skiptoword_path_102
Extract path function for assertion assert_skiptoword_path_104
Extract path function for assertion assert_skiptoword_path_106
Extract path function for assertion assert_skiptoword_path_110
Extract path function for assertion assert_skiptoword_path_113
Extract path function for assertion assert_skiptoword_path_115
Extract path function for assertion assert_skiptoword_path_117
Extract path function for assertion assert_correct_path_0
Extract path function for assertion assert_correct_path_1
Extract path function for assertion assert_correct_path_3
Extract path function for assertion assert_correct_path_4
Extract path function for assertion assert_correct_path_5
Extract path function for assertion assert_correct_path_6
Extract path function for assertion assert_correct_path_7
Extract path function for assertion assert_correct_path_8
Extract path function for assertion assert_correct_path_9
Extract path function for assertion assert_correct_path_10
Extract path function for assertion assert_correct_path_11
Extract path function for assertion assert_correct_path_12
Extract path function for assertion assert_correct_path_13
Extract path function for assertion assert_correct_path_14
Extract path function for assertion assert_correct_path_15
Extract path function for assertion assert_correct_path_16
Extract path function for assertion assert_correct_path_17
Extract path function for assertion assert_correct_path_18
Extract path function for assertion assert_correct_path_19
Extract path function for assertion assert_correct_path_20
Extract path function for assertion assert_correct_path_21
Extract path function for assertion assert_correct_path_22
Extract path function for assertion assert_correct_path_23
Extract path function for assertion assert_correct_path_24
Extract path function for assertion assert_correct_path_27
Extract path function for assertion assert_correct_path_28
Extract path function for assertion assert_correct_path_30
Extract path function for assertion assert_correct_path_31
Extract path function for assertion assert_correct_path_35
Extract path function for assertion assert_correct_path_36
Extract path function for assertion assert_correct_path_40
Extract path function for assertion assert_correct_path_41
Extract path function for assertion assert_correct_path_45
Extract path function for assertion assert_correct_path_46
Extract path function for assertion assert_correct_path_50
Extract path function for assertion assert_correct_path_51
Extract path function for assertion assert_correct_path_56
Extract path function for assertion assert_correct_path_57
Extract path function for assertion assert_correct_path_58
Extract path function for assertion assert_correct_path_59
Extract path function for assertion assert_correct_path_60
Extract path function for assertion assert_correct_path_64
Extract path function for assertion assert_correct_path_65
Extract path function for assertion assert_correct_path_69
Extract path function for assertion assert_correct_path_70
Extract path function for assertion assert_correct_path_74
Extract path function for assertion assert_correct_path_75
Extract path function for assertion assert_correct_path_79
Extract path function for assertion assert_correct_path_80
Extract path function for assertion assert_correct_path_84
Extract path function for assertion assert_correct_path_85
Extract path function for assertion assert_correct_path_89
Extract path function for assertion assert_correct_path_90
Extract path function for assertion assert_correct_path_94
Extract path function for assertion assert_correct_path_95
Extract path function for assertion assert_correct_path_99
Extract path function for assertion assert_correct_path_100
Extract path function for assertion assert_correct_path_104
Extract path function for assertion assert_correct_path_105
Extract path function for assertion assert_correct_path_109
Extract path function for assertion assert_correct_path_110
Extract path function for assertion assert_correct_path_114
Extract path function for assertion assert_correct_path_115
Extract path function for assertion assert_correct_path_119
Extract path function for assertion assert_correct_path_120
Extract path function for assertion assert_correct_path_124
Extract path function for assertion assert_correct_path_125
Extract path function for assertion assert_correct_path_129
Extract path function for assertion assert_correct_path_130
Extract path function for assertion assert_correct_path_134
Extract path function for assertion assert_correct_path_135
Extract path function for assertion assert_correct_path_139
Extract path function for assertion assert_correct_path_140
Extract path function for assertion assert_correct_path_144
Extract path function for assertion assert_correct_path_145
Extract path function for assertion assert_correct_path_149
Extract path function for assertion assert_correct_path_150
Extract path function for assertion assert_correct_path_154
Extract path function for assertion assert_correct_path_155
Extract path function for assertion assert_correct_path_159
Extract path function for assertion assert_correct_path_160
Extract path function for assertion assert_correct_path_164
Extract path function for assertion assert_correct_path_165
Extract path function for assertion assert_correct_path_168
Extract path function for assertion assert_correct_path_169
Extract path function for assertion assert_correct_path_170
Extract path function for assertion assert_correct_path_173
Extract path function for assertion assert_correct_path_174
Extract path function for assertion assert_correct_path_175
Extract path function for assertion assert_correct_path_178
Extract path function for assertion assert_correct_path_179
Extract path function for assertion assert_correct_path_180
Extract path function for assertion assert_correct_path_183
Extract path function for assertion assert_correct_path_184
Extract path function for assertion assert_correct_path_185
Extract path function for assertion assert_correct_path_189
Extract path function for assertion assert_correct_path_190
Extract path function for assertion assert_correct_path_194
Extract path function for assertion assert_correct_path_195
Extract path function for assertion assert_correct_path_198
Extract path function for assertion assert_correct_path_199
Extract path function for assertion assert_correct_path_200
Extract path function for assertion assert_correct_path_203
Extract path function for assertion assert_correct_path_204
Extract path function for assertion assert_correct_path_205
Extract path function for assertion assert_correct_path_209
Extract path function for assertion assert_correct_path_210
Extract path function for assertion assert_correct_path_214
Extract path function for assertion assert_correct_path_215
Extract path function for assertion assert_correct_path_219
Extract path function for assertion assert_correct_path_220
Extract path function for assertion assert_extraletter_path_0
Extract path function for assertion assert_extraletter_path_1
Extract path function for assertion assert_extraletter_path_2
Extract path function for assertion assert_extraletter_path_3
Extract path function for assertion assert_extraletter_path_4
Extract path function for assertion assert_extraletter_path_5
Extract path function for assertion assert_extraletter_path_6
Extract path function for assertion assert_extraletter_path_7
Extract path function for assertion assert_TeX_math_check_path_0
Extract path function for assertion assert_TeX_math_check_path_1
Extract path function for assertion assert_TeX_math_check_path_2
Extract path function for assertion assert_TeX_math_check_path_3
Extract path function for assertion assert_TeX_math_check_path_4
Extract path function for assertion assert_TeX_math_check_path_5
Extract path function for assertion assert_combine_two_entries_path_0
Extract path function for assertion assert_combine_two_entries_path_1
Extract path function for assertion assert_combine_two_entries_path_2
Extract path function for assertion assert_combine_two_entries_path_3
Extract path function for assertion assert_combine_two_entries_path_4
Extract path function for assertion assert_combine_two_entries_path_5
Extract path function for assertion assert_linit_path_0
Extract path function for assertion assert_linit_path_1
Extract path function for assertion assert_linit_path_2
Extract path function for assertion assert_linit_path_3
Extract path function for assertion assert_linit_path_4
Extract path function for assertion assert_linit_path_5
Extract path function for assertion assert_linit_path_6
Extract path function for assertion assert_linit_path_7
Extract path function for assertion assert_linit_path_8
Extract path function for assertion assert_linit_path_9
Extract path function for assertion assert_linit_path_10
Extract path function for assertion assert_linit_path_11
Extract path function for assertion assert_linit_path_12
Extract path function for assertion assert_linit_path_13
Extract path function for assertion assert_linit_path_14
Extract path function for assertion assert_linit_path_15
Extract path function for assertion assert_linit_path_16
Extract path function for assertion assert_linit_path_17
Extract path function for assertion assert_linit_path_18
Extract path function for assertion assert_linit_path_19
Extract path function for assertion assert_linit_path_20
Extract path function for assertion assert_linit_path_21
Extract path function for assertion assert_linit_path_22
Extract path function for assertion assert_linit_path_23
Extract path function for assertion assert_linit_path_24
Extract path function for assertion assert_linit_path_25
Extract path function for assertion assert_linit_path_26
Extract path function for assertion assert_linit_path_28
Extract path function for assertion assert_linit_path_29
Extract path function for assertion assert_linit_path_31
Extract path function for assertion assert_linit_path_32
Extract path function for assertion assert_linit_path_34
Extract path function for assertion assert_linit_path_35
Extract path function for assertion assert_linit_path_38
Extract path function for assertion assert_linit_path_40
Extract path function for assertion assert_linit_path_41
Extract path function for assertion assert_linit_path_43
Extract path function for assertion assert_linit_path_44
Extract path function for assertion assert_linit_path_45
Extract path function for assertion assert_linit_path_47
Extract path function for assertion assert_linit_path_48
Extract path function for assertion assert_linit_path_49
Extract path function for assertion assert_linit_path_52
Extract path function for assertion assert_linit_path_53
Extract path function for assertion assert_linit_path_55
Extract path function for assertion assert_linit_path_56
Extract path function for assertion assert_linit_path_57
Extract path function for assertion assert_linit_path_60
Extract path function for assertion assert_linit_path_61
Extract path function for assertion assert_linit_path_62
Extract path function for assertion assert_linit_path_65
Extract path function for assertion assert_linit_path_66
Extract path function for assertion assert_linit_path_69
Extract path function for assertion assert_linit_path_70
Extract path function for assertion assert_linit_path_73
Extract path function for assertion assert_linit_path_77
Extract path function for assertion assert_linit_path_78
Extract path function for assertion assert_linit_path_81
Extract path function for assertion assert_linit_path_82
Extract path function for assertion assert_linit_path_83
Extract path function for assertion assert_linit_path_86
Extract path function for assertion assert_linit_path_87
Extract path function for assertion assert_linit_path_88
Extract path function for assertion assert_linit_path_91
Extract path function for assertion assert_linit_path_93
Extract path function for assertion assert_linit_path_96
Extract path function for assertion assert_linit_path_97
Extract path function for assertion assert_linit_path_98
Extract path function for assertion assert_linit_path_101
Extract path function for assertion assert_linit_path_103
Extract path function for assertion assert_linit_path_106
Extract path function for assertion assert_linit_path_110
Extract path function for assertion assert_linit_path_114
Extract path function for assertion assert_linit_path_118
Extract path function for assertion assert_linit_path_120
Extract path function for assertion assert_linit_path_121
Extract path function for assertion assert_linit_path_126
Extract path function for assertion assert_linit_path_127
Extract path function for assertion assert_linit_path_132
Extract path function for assertion assert_linit_path_136
Extract path function for assertion assert_linit_path_137
Extract path function for assertion assert_linit_path_138
Extract path function for assertion assert_linit_path_139
Extract path function for assertion assert_linit_path_140
Extract path function for assertion assert_linit_path_141
Extract path function for assertion assert_linit_path_142
Extract path function for assertion assert_linit_path_143
Extract path function for assertion assert_linit_path_144
Extract path function for assertion assert_linit_path_145
Extract path function for assertion assert_linit_path_147
Extract path function for assertion assert_linit_path_148
Extract path function for assertion assert_linit_path_149
Extract path function for assertion assert_linit_path_150
Extract path function for assertion assert_compoundgood_path_0
Extract path function for assertion assert_compoundgood_path_1
Extract path function for assertion assert_compoundgood_path_2
Extract path function for assertion assert_compoundgood_path_3
Extract path function for assertion assert_compoundgood_path_4
Extract path function for assertion assert_compoundgood_path_5
Extract path function for assertion assert_compoundgood_path_6
Extract path function for assertion assert_compoundgood_path_7
Extract path function for assertion assert_compoundgood_path_8
Extract path function for assertion assert_compoundgood_path_9
Extract path function for assertion assert_compoundgood_path_10
Extract path function for assertion assert_compoundgood_path_11
Extract path function for assertion assert_compoundgood_path_12
Extract path function for assertion assert_compoundgood_path_13
Extract path function for assertion assert_compoundgood_path_14
Extract path function for assertion assert_compoundgood_path_15
Extract path function for assertion assert_compoundgood_path_16
Extract path function for assertion assert_compoundgood_path_18
Extract path function for assertion assert_cap_ok_path_0
Extract path function for assertion assert_cap_ok_path_1
Extract path function for assertion assert_cap_ok_path_2
Extract path function for assertion assert_cap_ok_path_3
Extract path function for assertion assert_cap_ok_path_4
Extract path function for assertion assert_cap_ok_path_5
Extract path function for assertion assert_cap_ok_path_6
Extract path function for assertion assert_cap_ok_path_8
Extract path function for assertion assert_cap_ok_path_9
Extract path function for assertion assert_cap_ok_path_10
Extract path function for assertion assert_cap_ok_path_12
Extract path function for assertion assert_cap_ok_path_14
Extract path function for assertion assert_cap_ok_path_16
Extract path function for assertion assert_cap_ok_path_17
Extract path function for assertion assert_cap_ok_path_18
Extract path function for assertion assert_cap_ok_path_19
Extract path function for assertion assert_cap_ok_path_20
Extract path function for assertion assert_cap_ok_path_22
Extract path function for assertion assert_cap_ok_path_23
Extract path function for assertion assert_cap_ok_path_24
Extract path function for assertion assert_cap_ok_path_25
Extract path function for assertion assert_cap_ok_path_26
Extract path function for assertion assert_cap_ok_path_28
Extract path function for assertion assert_cap_ok_path_29
Extract path function for assertion assert_cap_ok_path_30
Extract path function for assertion assert_cap_ok_path_31
Extract path function for assertion assert_cap_ok_path_33
Extract path function for assertion assert_cap_ok_path_34
Extract path function for assertion assert_cap_ok_path_36
Extract path function for assertion assert_cap_ok_path_37
Extract path function for assertion assert_cap_ok_path_40
Extract path function for assertion assert_cap_ok_path_41
Extract path function for assertion assert_cap_ok_path_42
Extract path function for assertion assert_cap_ok_path_44
Extract path function for assertion assert_cap_ok_path_45
Extract path function for assertion assert_cap_ok_path_48
Extract path function for assertion assert_cap_ok_path_49
Extract path function for assertion assert_cap_ok_path_51
Extract path function for assertion assert_cap_ok_path_52
Extract path function for assertion assert_cap_ok_path_54
Extract path function for assertion assert_cap_ok_path_55
Extract path function for assertion assert_cap_ok_path_58
Extract path function for assertion assert_cap_ok_path_59
Extract path function for assertion assert_cap_ok_path_60
Extract path function for assertion assert_cap_ok_path_62
Extract path function for assertion assert_cap_ok_path_63
Extract path function for assertion assert_cap_ok_path_66
Extract path function for assertion assert_cap_ok_path_67
Extract path function for assertion assert_cap_ok_path_69
Extract path function for assertion assert_cap_ok_path_70
Extract path function for assertion assert_cap_ok_path_71
Extract path function for assertion assert_cap_ok_path_72
Extract path function for assertion assert_cap_ok_path_73
Extract path function for assertion assert_cap_ok_path_75
Extract path function for assertion assert_cap_ok_path_76
Extract path function for assertion assert_line_size_path_1
Extract path function for assertion assert_line_size_path_3
Extract path function for assertion assert_line_size_path_5
Extract path function for assertion assert_expand_suf_path_0
Extract path function for assertion assert_expand_suf_path_1
Extract path function for assertion assert_expand_suf_path_2
Extract path function for assertion assert_expand_suf_path_3
Extract path function for assertion assert_expand_suf_path_5
Extract path function for assertion assert_expand_suf_path_6
Extract path function for assertion assert_expand_suf_path_7
Extract path function for assertion assert_expand_suf_path_9
Extract path function for assertion assert_inserttoken_path_8
Extract path function for assertion assert_inserttoken_path_12
Extract path function for assertion assert_inserttoken_path_16
Extract path function for assertion assert_inserttoken_path_20
Extract path function for assertion assert_givehelp_path_0
Extract path function for assertion assert_givehelp_path_2
Extract path function for assertion assert_givehelp_path_4
Extract path function for assertion assert_givehelp_path_5
Extract path function for assertion assert_givehelp_path_6
Extract path function for assertion assert_entryhasaffixes_path_0
Extract path function for assertion assert_entryhasaffixes_path_1
Extract path function for assertion assert_entryhasaffixes_path_2
Extract path function for assertion assert_entryhasaffixes_path_3
Extract path function for assertion assert_printichar_path_0
Extract path function for assertion assert_printichar_path_1
Extract path function for assertion assert_printichar_path_2
Extract path function for assertion assert_forcevheader_path_0
Extract path function for assertion assert_forcevheader_path_1
Extract path function for assertion assert_forcevheader_path_2
Extract path function for assertion assert_forcevheader_path_3
Extract path function for assertion assert_pr_pre_expansion_path_0
Extract path function for assertion assert_pr_pre_expansion_path_1
Extract path function for assertion assert_pr_pre_expansion_path_2
Extract path function for assertion assert_pr_pre_expansion_path_4
Extract path function for assertion assert_pr_pre_expansion_path_5
Extract path function for assertion assert_pr_pre_expansion_path_6
Extract path function for assertion assert_pr_pre_expansion_path_8
Extract path function for assertion assert_pr_pre_expansion_path_9
Extract path function for assertion assert_pr_pre_expansion_path_11
Extract path function for assertion assert_pr_pre_expansion_path_14
Extract path function for assertion assert_pr_pre_expansion_path_18
Extract path function for assertion assert_pr_pre_expansion_path_21
Extract path function for assertion assert_pr_pre_expansion_path_22
Extract path function for assertion assert_pr_pre_expansion_path_26
Extract path function for assertion assert_pr_pre_expansion_path_30
Extract path function for assertion assert_pr_pre_expansion_path_34
Extract path function for assertion assert_pr_pre_expansion_path_38
Extract path function for assertion assert_pr_pre_expansion_path_41
Extract path function for assertion assert_pr_pre_expansion_path_43
Extract path function for assertion assert_pr_pre_expansion_path_45
Extract path function for assertion assert_pr_pre_expansion_path_47
Extract path function for assertion assert_pr_pre_expansion_path_49
Extract path function for assertion assert_pr_pre_expansion_path_51
Extract path function for assertion assert_pr_pre_expansion_path_53
OH stats is requested, dumping stat file...
Processed instructions number 11014
{
    "numberOfAssertCalls": 0,
    "numberOfBlocksInFunctionsWithNoDG": 30,
    "numberOfDataDependentInstructions": 1182,
    "numberOfHashVariables": 1,
    "numberOfImplicitlyProtectedInstructions": 0,
    "numberOfInstructionsInFilteredFunctions": 7985,
    "numberOfInstructionsInFunctionsWithNoDG": 155,
    "numberOfNonHashableBlocks": 26,
    "numberOfNonHashableInstructions": 369,
    "numberOfOHProcessedInstr": 2874,
    "numberOfOtherUnprotectedInstructions": 8,
    "numberOfOtherUnprotectedLoopVariantInstructions": 36,
    "numberOfProtectedArguments": 0,
    "numberOfProtectedBlocks": 0,
    "numberOfProtectedFunctions": 21,
    "numberOfProtectedGuardArguments": 0,
    "numberOfProtectedGuardInstructions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveBlocks": 700,
    "numberOfSensitiveFunctions": 25,
    "numberOfShortRangeAssertCalls": 492,
    "numberOfShortRangeImplicitlyProtectedInstructions": 0,
    "numberOfShortRangeProtectedArguments": 81,
    "numberOfShortRangeProtectedBlocks": 514,
    "numberOfShortRangeProtectedGuardArguments": 0,
    "numberOfShortRangeProtectedGuardInstructions": 0,
    "numberOfShortRangeProtectedInstructions": 366,
    "numberOfUnprotectedArgumentReachableInstructions": 81,
    "numberOfUnprotectedArgumentReachableLoopBlocks": 0,
    "numberOfUnprotectedDataDependentBlocks": 0,
    "numberOfUnprotectedDataDependentLoopBlocks": 160,
    "numberOfUnprotectedGlobalReachableInstructions": 127,
    "numberOfUnprotectedGlobalReachableLoopBlocks": 0,
    "numberOfUnprotectedInputDependentInstructions": 0,
    "numberOfUnprotectedLoopInstructions": 705
}
ERR. processed 25 function, while filter count is 174
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 181.6334 seconds (181.9040 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
  158.4425 ( 88.0%)   1.0919 ( 72.5%)  159.5344 ( 87.8%)  159.6754 ( 87.8%)  Instruments bitcode with hashing and logging functions
  20.7232 ( 11.5%)   0.3878 ( 25.7%)  21.1110 ( 11.6%)  21.1142 ( 11.6%)  runs input dependency analysis
   0.6258 (  0.3%)   0.0104 (  0.7%)   0.6362 (  0.4%)   0.6353 (  0.3%)  Memory SSA
   0.1120 (  0.1%)   0.0040 (  0.3%)   0.1160 (  0.1%)   0.1805 (  0.1%)  Bitcode Writer
   0.0921 (  0.1%)   0.0016 (  0.1%)   0.0937 (  0.1%)   0.0946 (  0.1%)  Dominator Tree Construction
   0.0001 (  0.0%)   0.0040 (  0.3%)   0.0042 (  0.0%)   0.0661 (  0.0%)  Include functions in a given file in any transformation
   0.0605 (  0.0%)   0.0012 (  0.1%)   0.0617 (  0.0%)   0.0616 (  0.0%)  Natural Loop Information
   0.0249 (  0.0%)   0.0000 (  0.0%)   0.0249 (  0.0%)   0.0248 (  0.0%)  Module Verifier
   0.0117 (  0.0%)   0.0004 (  0.0%)   0.0121 (  0.0%)   0.0120 (  0.0%)  Post-Dominator Tree Construction
   0.0110 (  0.0%)   0.0004 (  0.0%)   0.0114 (  0.0%)   0.0118 (  0.0%)  Dominator Tree Construction
   0.0078 (  0.0%)   0.0002 (  0.0%)   0.0081 (  0.0%)   0.0080 (  0.0%)  Natural Loop Information
   0.0010 (  0.0%)   0.0040 (  0.3%)   0.0051 (  0.0%)   0.0051 (  0.0%)  Instruments bitcode with guards
   0.0033 (  0.0%)   0.0001 (  0.0%)   0.0034 (  0.0%)   0.0034 (  0.0%)  Function Alias Analysis Results
   0.0031 (  0.0%)   0.0001 (  0.0%)   0.0032 (  0.0%)   0.0032 (  0.0%)  Basic Alias Analysis (stateless AA impl)
   0.0020 (  0.0%)   0.0000 (  0.0%)   0.0020 (  0.0%)   0.0020 (  0.0%)  Call site information
   0.0020 (  0.0%)   0.0000 (  0.0%)   0.0020 (  0.0%)   0.0020 (  0.0%)  CallGraph Construction
   0.0014 (  0.0%)   0.0001 (  0.0%)   0.0015 (  0.0%)   0.0015 (  0.0%)  Remove unreachable blocks from the CFG
   0.0013 (  0.0%)   0.0000 (  0.0%)   0.0013 (  0.0%)   0.0013 (  0.0%)  runs indirect and virtual calls analysis
   0.0010 (  0.0%)   0.0000 (  0.0%)   0.0010 (  0.0%)   0.0010 (  0.0%)  Dead Global Elimination
   0.0002 (  0.0%)   0.0000 (  0.0%)   0.0002 (  0.0%)   0.0002 (  0.0%)  Dominator Tree Construction
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Natural Loop Information
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Marks functions in a given file as assert functions
  180.1272 (100.0%)   1.5061 (100.0%)  181.6334 (100.0%)  181.9040 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0493 seconds (0.0503 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.0409 (100.0%)   0.0084 (100.0%)   0.0493 (100.0%)   0.0503 (100.0%)  Parse IR
   0.0409 (100.0%)   0.0084 (100.0%)   0.0493 (100.0%)   0.0503 (100.0%)  Total

Running input dependency analysis pass
Processing function erase
Processing function move
Processing function inverse
Processing function normal
Processing function backup
Processing function terminit0
Processing function terminit1
Processing function terminit2
Processing function terminit3
Processing function terminit4
Processing function terminit5
Processing function terminit
Did not find function assigned   store void (...)* %11, void (...)** @oldint, align 8, !control_dep_instr !7, !data_dep_instr !8
Did not find function assigned   store void (...)* %12, void (...)** @oldterm, align 8, !control_dep_instr !7, !data_dep_instr !8
Did not find function assigned   store void (...)* %13, void (...)** @oldttin, align 8, !control_dep_instr !7, !data_dep_instr !8
Did not find function assigned   store void (...)* %14, void (...)** @oldttou, align 8, !control_dep_instr !7, !data_dep_instr !8
Did not find function assigned   store void (...)* %15, void (...)** @oldtstp, align 8, !control_dep_instr !7, !data_dep_instr !8
Processing function done
Processing function onstop0
Processing function onstop
Processing function stop
Processing function shellescape0
Processing function shellescape1
Processing function shellescape2
Processing function shellescape3
Processing function shellescape4
Processing function shellescape5
Processing function shellescape
Processing function main0
Processing function main1
Processing function main2
Processing function main3
Processing function main4
Processing function main5
Processing function usage0
Processing function givehelp0
Processing function givehelp1
Processing function givehelp2
Processing function givehelp
Processing function usage
Processing function main6
Processing function main7
Processing function main8
Processing function main9
Processing function main10
Processing function main11
Processing function main12
Processing function main13
Processing function main14
Processing function main15
Processing function main16
Processing function main17
Processing function main18
Processing function main19
Processing function main20
Processing function main21
Processing function main22
Processing function main23
Processing function main24
Processing function main25
Processing function main26
Processing function main27
Processing function main28
Processing function main29
Processing function main30
Processing function main31
Processing function main32
Processing function linit0
Processing function linit1
Processing function linit2
Processing function linit3
Processing function linit4
Processing function linit5
Processing function linit6
Processing function linit7
Processing function linit8
Processing function linit9
Processing function linit10
Processing function linit11
Processing function linit12
Processing function linit13
Processing function linit14
Processing function linit15
Processing function linit16
Processing function linit17
Processing function linit18
Processing function linit19
Processing function linit20
Processing function linit21
Processing function linit22
Processing function linit23
Processing function linit24
Processing function linit25
Processing function linit26
Processing function linit27
Processing function linit28
Processing function linit29
Processing function linit30
Processing function linit31
Processing function linit32
Processing function linit33
Processing function linit34
Processing function linit35
Processing function linit36
Processing function linit37
Processing function linit38
Processing function linit39
Processing function linit40
Processing function linit41
Processing function linit42
Processing function linit43
Processing function linit44
Processing function linit45
Processing function linit46
Processing function linit47
Processing function linit48
Processing function linit49
Processing function linit
Processing function findfiletype0
Processing function findfiletype1
Processing function findfiletype2
Processing function findfiletype3
Processing function findfiletype4
Processing function findfiletype5
Processing function findfiletype6
Processing function findfiletype7
Processing function findfiletype
Processing function main33
Processing function main34
Processing function main35
Processing function main36
Processing function initckch0
Processing function initckch1
Processing function initckch2
Processing function initckch
Processing function main37
Processing function treeinit0
Processing function trydict0
Processing function trydict1
Processing function trydict2
Processing function trydict
Processing function treeinit1
Processing function treeinsert0
Processing function treeinsert1
Processing function treeinsert2
Processing function treeinsert3
Processing function treeinsert4
Processing function strtoichar0
Processing function stringcharlen0
Processing function stringcharlen1
Processing function stringcharlen2
Processing function stringcharlen3
Processing function stringcharlen4
Processing function stringcharlen5
Processing function stringcharlen6
Processing function stringcharlen7
Processing function stringcharlen8
Processing function stringcharlen
Processing function strtoichar1
Processing function strtoichar2
Processing function strtoichar3
Processing function strtoichar
Processing function tinsert0
Processing function hash0
Processing function hash1
Processing function hash
Processing function tinsert1
Processing function tinsert2
Processing function tinsert3
Processing function tinsert
Processing function treeinsert5
Processing function treeinsert6
Processing function treeinsert7
Processing function treeinsert8
Processing function treeinsert9
Processing function makedent0
Processing function makedent1
Processing function ichartostr0
Processing function ichartostr1
Processing function ichartostr2
Processing function ichartostr3
Processing function ichartostr4
Processing function ichartostr
Processing function makedent2
Processing function makedent3
Processing function makedent4
Processing function whatcap0
Processing function whatcap1
Processing function whatcap2
Processing function whatcap3
Processing function whatcap4
Processing function whatcap
Processing function makedent5
Processing function mymalloc
Processing function makedent6
Processing function strtosichar0
Processing function strtosichar
Processing function upcase0
Processing function upcase
Processing function chupcase0
Processing function chupcase
Processing function makedent7
Processing function makedent8
Processing function makedent9
Processing function makedent10
Processing function makedent
Processing function treeinsert10
Processing function lookup0
Processing function lookup1
Processing function lookup2
Processing function treelookup0
Processing function treelookup1
Processing function treelookup2
Processing function treelookup
Processing function lookup3
Processing function lookup
Processing function issubset
Processing function acoversb
Processing function combineaffixes0
Processing function combineaffixes
Processing function myfree0
Processing function myfree
Processing function combine_two_entries0
Processing function combine_two_entries1
Processing function addvheader0
Processing function addvheader1
Processing function addvheader2
Processing function addvheader3
Processing function addvheader4
Processing function addvheader
Processing function combine_two_entries2
Processing function combine_two_entries
Processing function combinecaps0
Processing function forcevheader0
Processing function forcevheader
Processing function combinecaps1
Processing function combinecaps2
Processing function combinecaps3
Processing function combinecaps
Processing function treeinsert11
Processing function treeinsert12
Processing function treeinsert13
Processing function treeinsert
Processing function treeload
Processing function treeinit2
Processing function treeinit3
Processing function treeinit4
Processing function treeinit5
Processing function treeinit6
Processing function treeinit7
Processing function treeinit8
Processing function treeinit
Processing function main38
Processing function askmode0
Processing function askmode1
Processing function xgets0
Processing function xgets1
Processing function xgets2
Processing function xgets3
Processing function xgets4
Processing function xgets
Processing function askmode2
Processing function askmode3
Processing function askmode4
Processing function checkline0
Processing function copyout0
Processing function copyout1
Processing function copyout
Processing function checkline1
Processing function checkline2
Processing function checkline3
Processing function checkline4
Processing function skiptoword0
Processing function TeX_open_paren0
Processing function TeX_open_paren
Processing function TeX_math_check0
Processing function TeX_skip_parens0
Processing function TeX_skip_parens
Processing function TeX_math_check1
Processing function TeX_skip_args0
Processing function TeX_skip_args1
Processing function TeX_skip_args2
Processing function TeX_skip_args3
Processing function TeX_skip_args
Processing function TeX_math_check2
Processing function TeX_math_check3
Processing function TeX_math_check
Processing function TeX_LR_check0
Processing function TeX_LR_check1
Processing function TeX_LR_check2
Processing function TeX_LR_check3
Processing function TeX_LR_check4
Processing function TeX_LR_check
Processing function skiptoword1
Processing function skiptoword2
Processing function TeX_math_end0
Processing function TeX_math_end1
Processing function TeX_strncmp0
Processing function TeX_strncmp
Processing function TeX_LR_begin0
Processing function TeX_LR_begin1
Processing function TeX_LR_begin2
Processing function TeX_LR_begin
Processing function TeX_math_end2
Processing function TeX_math_end
Processing function skiptoword3
Processing function skiptoword4
Processing function skiptoword5
Processing function skiptoword6
Processing function skiptoword7
Processing function TeX_math_begin0
Processing function TeX_math_begin1
Processing function TeX_math_begin2
Processing function TeX_skip_check0
Processing function TeX_skip_check1
Processing function TeX_skip_check2
Processing function TeX_skip_check3
Processing function TeX_skip_check
Processing function TeX_math_begin3
Processing function TeX_math_begin4
Processing function TeX_math_begin
Processing function skiptoword8
Processing function skiptoword9
Processing function skiptoword10
Processing function skiptoword11
Processing function skiptoword12
Processing function skiptoword13
Processing function skiptoword14
Processing function skiptoword15
Processing function skiptoword16
Processing function skiptoword17
Processing function skiptoword18
Processing function skiptoword19
Processing function skiptoword
Processing function checkline5
Processing function skipoverword0
Processing function skipoverword1
Processing function skipoverword2
Processing function skipoverword3
Processing function skipoverword4
Processing function skipoverword
Processing function checkline6
Processing function checkline7
Processing function checkline8
Processing function good0
Processing function good1
Processing function ichartosstr0
Processing function ichartosstr
Processing function good2
Processing function good3
Processing function cap_ok0
Processing function cap_ok1
Processing function cap_ok2
Processing function entryhasaffixes
Processing function cap_ok3
Processing function cap_ok4
Processing function cap_ok5
Processing function cap_ok6
Processing function cap_ok7
Processing function cap_ok8
Processing function cap_ok9
Processing function cap_ok10
Processing function cap_ok
Processing function pfx_list_chk0
Processing function pfx_list_chk1
Processing function flagpr0
Processing function flagpr1
Processing function flagpr2
Processing function flagpr3
Processing function flagpr4
Processing function flagpr5
Processing function flagpr6
Processing function printichar0
Processing function printichar1
Processing function printichar
Processing function flagpr7
Processing function flagpr8
Processing function flagpr9
Processing function flagpr10
Processing function flagpr11
Processing function flagpr12
Processing function flagpr13
Processing function flagpr14
Processing function flagpr15
Processing function flagpr16
Processing function flagpr
Processing function pfx_list_chk2
Processing function pfx_list_chk3
Processing function save_root_cap0
Processing function save_root_cap1
Processing function save_root_cap2
Processing function save_root_cap3
Processing function lowcase0
Processing function lowcase
Processing function save_root_cap4
Processing function save_root_cap5
Processing function save_root_cap6
Processing function save_root_cap7
Processing function save_root_cap8
Processing function save_root_cap9
Processing function save_root_cap10
Processing function save_root_cap11
Processing function save_root_cap
Processing function insert0
Processing function insert1
Processing function insert2
Processing function insert
Processing function ins_root_cap0
Processing function ins_root_cap
Processing function pfx_list_chk4
Processing function suf_list_chk0
Processing function suf_list_chk1
Processing function suf_list_chk2
Processing function suf_list_chk3
Processing function suf_list_chk4
Processing function suf_list_chk5
Processing function suf_list_chk6
Processing function suf_list_chk7
Processing function suf_list_chk
Processing function chk_suf0
Processing function chk_suf1
Processing function chk_suf2
Processing function chk_suf
Processing function pfx_list_chk5
Processing function pfx_list_chk
Processing function chk_aff0
Processing function chk_aff1
Processing function chk_aff2
Processing function chk_aff
Processing function good4
Processing function good
Processing function compoundgood0
Processing function compoundgood1
Processing function compoundgood2
Processing function compoundgood3
Processing function compoundgood
Processing function checkline9
Processing function checkline10
Processing function checkline11
Processing function checkline12
Processing function checkline13
Processing function makepossibilities0
Processing function save_cap0
Processing function save_cap1
Processing function save_cap2
Processing function save_cap3
Processing function save_cap4
Processing function save_cap
Processing function ins_cap0
Processing function ins_cap
Processing function wrongcapital
Processing function missingletter0
Processing function missingletter1
Processing function missingletter2
Processing function missingletter
Processing function makepossibilities1
Processing function transposedletter0
Processing function transposedletter1
Processing function transposedletter
Processing function makepossibilities2
Processing function extraletter0
Processing function extraletter
Processing function makepossibilities3
Processing function wrongletter0
Processing function wrongletter1
Processing function wrongletter
Processing function makepossibilities4
Processing function missingspace0
Processing function missingspace1
Processing function missingspace2
Processing function missingspace
Processing function makepossibilities5
Processing function tryveryhard0
Processing function tryveryhard
Processing function makepossibilities6
Processing function makepossibilities7
Processing function makepossibilities8
Processing function makepossibilities
Processing function checkline14
Processing function checkline15
Processing function checkline16
Processing function checkline17
Processing function checkline18
Processing function correct0
Processing function correct1
Processing function correct2
Processing function correct3
Processing function correct4
Processing function correct5
Processing function correct6
Processing function show_char0
Processing function show_char1
Processing function show_char2
Processing function show_char3
Processing function show_char4
Processing function show_char5
Processing function show_char6
Processing function show_char7
Processing function show_char8
Processing function show_char9
Processing function show_char10
Processing function show_char11
Processing function show_char12
Processing function show_char13
Processing function show_char14
Processing function show_char
Processing function show_line0
Processing function show_line1
Processing function show_line2
Processing function show_line3
Processing function show_line
Processing function correct7
Processing function line_size0
Processing function line_size
Processing function correct8
Processing function correct9
Processing function correct10
Processing function correct11
Processing function correct12
Processing function correct13
Processing function correct14
Processing function correct15
Processing function correct16
Processing function correct17
Processing function my_getline0
Processing function my_getline1
Processing function my_getline2
Processing function my_getline3
Processing function my_getline4
Processing function my_getline5
Processing function my_getline6
Processing function my_getline
Processing function correct18
Processing function correct19
Processing function correct20
Processing function inserttoken0
Processing function inserttoken1
Processing function inserttoken2
Processing function inserttoken3
Processing function inserttoken4
Processing function inserttoken5
Processing function inserttoken6
Processing function inserttoken
Processing function correct21
Processing function correct22
Processing function correct23
Processing function correct24
Processing function correct25
Processing function lookharder0
Processing function lookharder1
Processing function lookharder2
Processing function lookharder
Processing function correct26
Processing function correct
Processing function checkline19
Processing function checkline20
Processing function checkline
Processing function askmode5
Processing function askmode6
Processing function treeoutput0
Processing function treeoutput1
Processing function treeoutput2
Processing function treeoutput3
Processing function treeoutput4
Processing function treeoutput5
Processing function treeoutput6
Processing function treeoutput7
Processing function treeoutput8
Processing function treeoutput9
Processing function treeoutput10
Processing function treeoutput11
Processing function treeoutput12
Processing function toutent0
Processing function toutword0
Processing function flagout0
Processing function flagout1
Processing function flagout
Processing function toutword1
Processing function toutword2
Processing function toutword
Processing function toutent1
Processing function toutent2
Processing function toutent
Processing function treeoutput13
Processing function treeoutput14
Processing function treeoutput15
Processing function treeoutput16
Processing function treeoutput17
Processing function treeoutput18
Processing function treeoutput19
Processing function treeoutput20
Processing function treeoutput21
Processing function treeoutput22
Processing function treeoutput23
Processing function treeoutput24
Processing function treeoutput25
Processing function treeoutput26
Processing function treeoutput27
Processing function treeoutput28
Processing function treeoutput29
Processing function treeoutput30
Processing function treeoutput31
Processing function treeoutput32
Processing function treeoutput
Processing function askmode7
Processing function askmode8
Processing function askmode9
Processing function askmode10
Processing function askmode
Processing function main39
Processing function expandmode0
Processing function expandmode1
Processing function expand_pre0
Processing function pr_pre_expansion0
Processing function pr_pre_expansion1
Processing function pr_pre_expansion2
Processing function pr_pre_expansion3
Processing function pr_pre_expansion4
Processing function forcelc0
Processing function forcelc1
Processing function forcelc
Processing function pr_pre_expansion5
Processing function expand_suf0
Processing function pr_suf_expansion0
Processing function pr_suf_expansion1
Processing function pr_suf_expansion2
Processing function pr_suf_expansion3
Processing function pr_suf_expansion4
Processing function pr_suf_expansion
Processing function expand_suf1
Processing function expand_suf2
Processing function expand_suf
Processing function pr_pre_expansion6
Processing function pr_pre_expansion
Processing function expand_pre1
Processing function expand_pre2
Processing function expand_pre
Processing function expandmode
Processing function main40
Processing function dumpmode0
Processing function dumpmode1
Processing function dumpmode2
Processing function entdump0
Processing function setdump0
Processing function setdump1
Processing function setdump2
Processing function subsetdump0
Processing function subsetdump1
Processing function subsetdump2
Processing function subsetdump3
Processing function subsetdump4
Processing function subsetdump5
Processing function subsetdump
Processing function setdump3
Processing function setdump4
Processing function setdump
Processing function entdump1
Processing function entdump2
Processing function entdump3
Processing function entdump4
Processing function entdump
Processing function tbldump0
Processing function tbldump
Processing function dumpmode3
Processing function dumpmode4
Processing function dumpmode
Processing function main41
Processing function checkfile0
Processing function checkfile1
Processing function checkfile2
Processing function checkfile3
Processing function checkfile4
Processing function checkfile5
Processing function checkfile6
Processing function checkfile7
Processing function checkfile
Processing function main42
Processing function dofile0
Processing function dofile1
Processing function dofile2
Processing function update_file0
Processing function update_file1
Processing function update_file2
Processing function update_file3
Processing function update_file4
Processing function update_file5
Processing function update_file
Processing function dofile3
Processing function dofile
Processing function main43
Processing function main
Processing function casecmp0
Processing function casecmp1
Processing function casecmp2
Processing function casecmp3
Processing function casecmp4
Processing function casecmp5
Processing function casecmp6
Processing function casecmp
Processing function posscmp
Processing function pdictcmp
Finalizing pdictcmp
Finalizing posscmp
Finalizing casecmp
Mark Input dependent function casecmp
Finalizing casecmp6
Mark Input dependent function casecmp6
Finalizing casecmp5
Mark Input dependent function casecmp5
Finalizing casecmp4
Mark Input dependent function casecmp4
Finalizing casecmp3
Mark Input dependent function casecmp3
Finalizing casecmp2
Mark Input dependent function casecmp2
Finalizing casecmp1
Mark Input dependent function casecmp1
Finalizing casecmp0
Mark Input dependent function casecmp0
Finalizing main
Finalizing main43
Mark Input dependent function main43
Finalizing dofile
Mark Input dependent function dofile
Finalizing dofile3
Mark Input dependent function dofile3
Finalizing update_file
Mark Input dependent function update_file
Finalizing update_file5
Mark Input dependent function update_file5
Finalizing update_file4
Mark Input dependent function update_file4
Finalizing update_file3
Mark Input dependent function update_file3
Finalizing update_file2
Mark Input dependent function update_file2
Finalizing update_file1
Mark Input dependent function update_file1
Finalizing update_file0
Mark Input dependent function update_file0
Finalizing dofile2
Mark Input dependent function dofile2
Finalizing dofile1
Mark Input dependent function dofile1
Finalizing dofile0
Mark Input dependent function dofile0
Finalizing main42
Mark Input dependent function main42
Finalizing checkfile
Mark Input dependent function checkfile
Finalizing checkfile7
Mark Input dependent function checkfile7
Finalizing checkfile6
Mark Input dependent function checkfile6
Finalizing checkfile5
Mark Input dependent function checkfile5
Finalizing checkfile4
Mark Input dependent function checkfile4
Finalizing checkfile3
Mark Input dependent function checkfile3
Finalizing checkfile2
Mark Input dependent function checkfile2
Finalizing checkfile1
Mark Input dependent function checkfile1
Finalizing checkfile0
Mark Input dependent function checkfile0
Finalizing main41
Mark Input dependent function main41
Finalizing dumpmode
Mark Input dependent function dumpmode
Finalizing dumpmode4
Mark Input dependent function dumpmode4
Finalizing dumpmode3
Mark Input dependent function dumpmode3
Finalizing tbldump
Mark Input dependent function tbldump
Finalizing tbldump0
Mark Input dependent function tbldump0
Finalizing entdump
Mark Input dependent function entdump
Finalizing entdump4
Mark Input dependent function entdump4
Finalizing entdump3
Mark Input dependent function entdump3
Finalizing entdump2
Mark Input dependent function entdump2
Finalizing entdump1
Mark Input dependent function entdump1
Finalizing setdump
Mark Input dependent function setdump
Finalizing setdump4
Mark Input dependent function setdump4
Finalizing setdump3
Mark Input dependent function setdump3
Finalizing subsetdump
Mark Input dependent function subsetdump
Finalizing subsetdump5
Mark Input dependent function subsetdump5
Finalizing subsetdump4
Mark Input dependent function subsetdump4
Finalizing subsetdump3
Mark Input dependent function subsetdump3
Finalizing subsetdump2
Mark Input dependent function subsetdump2
Finalizing subsetdump1
Mark Input dependent function subsetdump1
Finalizing subsetdump0
Mark Input dependent function subsetdump0
Finalizing setdump2
Mark Input dependent function setdump2
Finalizing setdump1
Mark Input dependent function setdump1
Finalizing setdump0
Mark Input dependent function setdump0
Finalizing entdump0
Mark Input dependent function entdump0
Finalizing dumpmode2
Mark Input dependent function dumpmode2
Finalizing dumpmode1
Mark Input dependent function dumpmode1
Finalizing dumpmode0
Mark Input dependent function dumpmode0
Finalizing main40
Mark Input dependent function main40
Finalizing expandmode
Mark Input dependent function expandmode
Finalizing expand_pre
Mark Input dependent function expand_pre
Finalizing expand_pre2
Mark Input dependent function expand_pre2
Finalizing expand_pre1
Mark Input dependent function expand_pre1
Finalizing pr_pre_expansion
Mark Input dependent function pr_pre_expansion
Finalizing pr_pre_expansion6
Mark Input dependent function pr_pre_expansion6
Finalizing expand_suf
Mark Input dependent function expand_suf
Finalizing expand_suf2
Mark Input dependent function expand_suf2
Finalizing expand_suf1
Mark Input dependent function expand_suf1
Finalizing pr_suf_expansion
Mark Input dependent function pr_suf_expansion
Finalizing pr_suf_expansion4
Mark Input dependent function pr_suf_expansion4
Finalizing pr_suf_expansion3
Mark Input dependent function pr_suf_expansion3
Finalizing pr_suf_expansion2
Mark Input dependent function pr_suf_expansion2
Finalizing pr_suf_expansion1
Mark Input dependent function pr_suf_expansion1
Finalizing pr_suf_expansion0
Mark Input dependent function pr_suf_expansion0
Finalizing expand_suf0
Mark Input dependent function expand_suf0
Finalizing pr_pre_expansion5
Mark Input dependent function pr_pre_expansion5
Finalizing forcelc
Mark Input dependent function forcelc
Finalizing forcelc1
Mark Input dependent function forcelc1
Finalizing forcelc0
Mark Input dependent function forcelc0
Finalizing pr_pre_expansion4
Mark Input dependent function pr_pre_expansion4
Finalizing pr_pre_expansion3
Mark Input dependent function pr_pre_expansion3
Finalizing pr_pre_expansion2
Mark Input dependent function pr_pre_expansion2
Finalizing pr_pre_expansion1
Mark Input dependent function pr_pre_expansion1
Finalizing pr_pre_expansion0
Mark Input dependent function pr_pre_expansion0
Finalizing expand_pre0
Mark Input dependent function expand_pre0
Finalizing expandmode1
Mark Input dependent function expandmode1
Finalizing expandmode0
Mark Input dependent function expandmode0
Finalizing main39
Mark Input dependent function main39
Finalizing askmode
Mark Input dependent function askmode
Finalizing askmode10
Mark Input dependent function askmode10
Finalizing askmode9
Mark Input dependent function askmode9
Finalizing askmode8
Mark Input dependent function askmode8
Finalizing askmode7
Mark Input dependent function askmode7
Finalizing treeoutput
Mark Input dependent function treeoutput
Finalizing treeoutput32
Mark Input dependent function treeoutput32
Finalizing treeoutput31
Mark Input dependent function treeoutput31
Finalizing treeoutput30
Mark Input dependent function treeoutput30
Finalizing treeoutput29
Mark Input dependent function treeoutput29
Finalizing treeoutput28
Mark Input dependent function treeoutput28
Finalizing treeoutput27
Mark Input dependent function treeoutput27
Finalizing treeoutput26
Mark Input dependent function treeoutput26
Finalizing treeoutput25
Mark Input dependent function treeoutput25
Finalizing treeoutput24
Mark Input dependent function treeoutput24
Finalizing treeoutput23
Mark Input dependent function treeoutput23
Finalizing treeoutput22
Mark Input dependent function treeoutput22
Finalizing treeoutput21
Mark Input dependent function treeoutput21
Finalizing treeoutput20
Mark Input dependent function treeoutput20
Finalizing treeoutput19
Mark Input dependent function treeoutput19
Finalizing treeoutput18
Mark Input dependent function treeoutput18
Finalizing treeoutput17
Mark Input dependent function treeoutput17
Finalizing treeoutput16
Mark Input dependent function treeoutput16
Finalizing treeoutput15
Mark Input dependent function treeoutput15
Finalizing treeoutput14
Mark Input dependent function treeoutput14
Finalizing treeoutput13
Mark Input dependent function treeoutput13
Finalizing toutent
Mark Input dependent function toutent
Finalizing toutent2
Mark Input dependent function toutent2
Finalizing toutent1
Mark Input dependent function toutent1
Finalizing toutword
Mark Input dependent function toutword
Finalizing toutword2
Mark Input dependent function toutword2
Finalizing toutword1
Mark Input dependent function toutword1
Finalizing flagout
Mark Input dependent function flagout
Finalizing flagout1
Mark Input dependent function flagout1
Finalizing flagout0
Mark Input dependent function flagout0
Finalizing toutword0
Mark Input dependent function toutword0
Finalizing toutent0
Mark Input dependent function toutent0
Finalizing treeoutput12
Mark Input dependent function treeoutput12
Finalizing treeoutput11
Mark Input dependent function treeoutput11
Finalizing treeoutput10
Mark Input dependent function treeoutput10
Finalizing treeoutput9
Mark Input dependent function treeoutput9
Finalizing treeoutput8
Mark Input dependent function treeoutput8
Finalizing treeoutput7
Mark Input dependent function treeoutput7
Finalizing treeoutput6
Mark Input dependent function treeoutput6
Finalizing treeoutput5
Mark Input dependent function treeoutput5
Finalizing treeoutput4
Mark Input dependent function treeoutput4
Finalizing treeoutput3
Mark Input dependent function treeoutput3
Finalizing treeoutput2
Mark Input dependent function treeoutput2
Finalizing treeoutput1
Mark Input dependent function treeoutput1
Finalizing treeoutput0
Mark Input dependent function treeoutput0
Finalizing askmode6
Mark Input dependent function askmode6
Finalizing askmode5
Mark Input dependent function askmode5
Finalizing checkline
Mark Input dependent function checkline
Finalizing checkline20
Mark Input dependent function checkline20
Finalizing checkline19
Mark Input dependent function checkline19
Finalizing correct
Mark Input dependent function correct
Finalizing correct26
Mark Input dependent function correct26
Finalizing lookharder
Mark Input dependent function lookharder
Finalizing lookharder2
Mark Input dependent function lookharder2
Finalizing lookharder1
Mark Input dependent function lookharder1
Finalizing lookharder0
Mark Input dependent function lookharder0
Finalizing correct25
Mark Input dependent function correct25
Finalizing correct24
Mark Input dependent function correct24
Finalizing correct23
Mark Input dependent function correct23
Finalizing correct22
Mark Input dependent function correct22
Finalizing correct21
Mark Input dependent function correct21
Finalizing inserttoken
Mark Input dependent function inserttoken
Finalizing inserttoken6
Mark Input dependent function inserttoken6
Finalizing inserttoken5
Mark Input dependent function inserttoken5
Finalizing inserttoken4
Mark Input dependent function inserttoken4
Finalizing inserttoken3
Mark Input dependent function inserttoken3
Finalizing inserttoken2
Mark Input dependent function inserttoken2
Finalizing inserttoken1
Mark Input dependent function inserttoken1
Finalizing inserttoken0
Mark Input dependent function inserttoken0
Finalizing correct20
Mark Input dependent function correct20
Finalizing correct19
Mark Input dependent function correct19
Finalizing correct18
Mark Input dependent function correct18
Finalizing my_getline
Mark Input dependent function my_getline
Finalizing my_getline6
Mark Input dependent function my_getline6
Finalizing my_getline5
Mark Input dependent function my_getline5
Finalizing my_getline4
Mark Input dependent function my_getline4
Finalizing my_getline3
Mark Input dependent function my_getline3
Finalizing my_getline2
Mark Input dependent function my_getline2
Finalizing my_getline1
Mark Input dependent function my_getline1
Finalizing my_getline0
Mark Input dependent function my_getline0
Finalizing correct17
Mark Input dependent function correct17
Finalizing correct16
Mark Input dependent function correct16
Finalizing correct15
Mark Input dependent function correct15
Finalizing correct14
Mark Input dependent function correct14
Finalizing correct13
Mark Input dependent function correct13
Finalizing correct12
Mark Input dependent function correct12
Finalizing correct11
Mark Input dependent function correct11
Finalizing correct10
Mark Input dependent function correct10
Finalizing correct9
Mark Input dependent function correct9
Finalizing correct8
Mark Input dependent function correct8
Finalizing line_size
Mark Input dependent function line_size
Finalizing line_size0
Mark Input dependent function line_size0
Finalizing correct7
Mark Input dependent function correct7
Finalizing show_line
Mark Input dependent function show_line
Finalizing show_line3
Mark Input dependent function show_line3
Finalizing show_line2
Mark Input dependent function show_line2
Finalizing show_line1
Mark Input dependent function show_line1
Finalizing show_line0
Mark Input dependent function show_line0
Finalizing show_char
Mark Input dependent function show_char
Finalizing show_char14
Mark Input dependent function show_char14
Finalizing show_char13
Mark Input dependent function show_char13
Finalizing show_char12
Mark Input dependent function show_char12
Finalizing show_char11
Mark Input dependent function show_char11
Finalizing show_char10
Mark Input dependent function show_char10
Finalizing show_char9
Mark Input dependent function show_char9
Finalizing show_char8
Mark Input dependent function show_char8
Finalizing show_char7
Mark Input dependent function show_char7
Finalizing show_char6
Mark Input dependent function show_char6
Finalizing show_char5
Mark Input dependent function show_char5
Finalizing show_char4
Mark Input dependent function show_char4
Finalizing show_char3
Mark Input dependent function show_char3
Finalizing show_char2
Mark Input dependent function show_char2
Finalizing show_char1
Mark Input dependent function show_char1
Finalizing show_char0
Mark Input dependent function show_char0
Finalizing correct6
Mark Input dependent function correct6
Finalizing correct5
Mark Input dependent function correct5
Finalizing correct4
Mark Input dependent function correct4
Finalizing correct3
Mark Input dependent function correct3
Finalizing correct2
Mark Input dependent function correct2
Finalizing correct1
Mark Input dependent function correct1
Finalizing correct0
Mark Input dependent function correct0
Finalizing checkline18
Mark Input dependent function checkline18
Finalizing checkline17
Mark Input dependent function checkline17
Finalizing checkline16
Mark Input dependent function checkline16
Finalizing checkline15
Mark Input dependent function checkline15
Finalizing checkline14
Mark Input dependent function checkline14
Finalizing makepossibilities
Mark Input dependent function makepossibilities
Finalizing makepossibilities8
Mark Input dependent function makepossibilities8
Finalizing makepossibilities7
Mark Input dependent function makepossibilities7
Finalizing makepossibilities6
Mark Input dependent function makepossibilities6
Finalizing tryveryhard
Mark Input dependent function tryveryhard
Finalizing tryveryhard0
Mark Input dependent function tryveryhard0
Finalizing makepossibilities5
Mark Input dependent function makepossibilities5
Finalizing missingspace
Mark Input dependent function missingspace
Finalizing missingspace2
Mark Input dependent function missingspace2
Finalizing missingspace1
Mark Input dependent function missingspace1
Finalizing missingspace0
Mark Input dependent function missingspace0
Finalizing makepossibilities4
Mark Input dependent function makepossibilities4
Finalizing wrongletter
Mark Input dependent function wrongletter
Finalizing wrongletter1
Mark Input dependent function wrongletter1
Finalizing wrongletter0
Mark Input dependent function wrongletter0
Finalizing makepossibilities3
Mark Input dependent function makepossibilities3
Finalizing extraletter
Mark Input dependent function extraletter
Finalizing extraletter0
Mark Input dependent function extraletter0
Finalizing makepossibilities2
Mark Input dependent function makepossibilities2
Finalizing transposedletter
Mark Input dependent function transposedletter
Finalizing transposedletter1
Mark Input dependent function transposedletter1
Finalizing transposedletter0
Mark Input dependent function transposedletter0
Finalizing makepossibilities1
Mark Input dependent function makepossibilities1
Finalizing missingletter
Mark Input dependent function missingletter
Finalizing missingletter2
Mark Input dependent function missingletter2
Finalizing missingletter1
Mark Input dependent function missingletter1
Finalizing missingletter0
Mark Input dependent function missingletter0
Finalizing wrongcapital
Mark Input dependent function wrongcapital
Finalizing ins_cap
Mark Input dependent function ins_cap
Finalizing ins_cap0
Mark Input dependent function ins_cap0
Finalizing save_cap
Mark Input dependent function save_cap
Finalizing save_cap4
Mark Input dependent function save_cap4
Finalizing save_cap3
Mark Input dependent function save_cap3
Finalizing save_cap2
Mark Input dependent function save_cap2
Finalizing save_cap1
Mark Input dependent function save_cap1
Finalizing save_cap0
Mark Input dependent function save_cap0
Finalizing makepossibilities0
Mark Input dependent function makepossibilities0
Finalizing checkline13
Mark Input dependent function checkline13
Finalizing checkline12
Mark Input dependent function checkline12
Finalizing checkline11
Mark Input dependent function checkline11
Finalizing checkline10
Mark Input dependent function checkline10
Finalizing checkline9
Mark Input dependent function checkline9
Finalizing compoundgood
Mark Input dependent function compoundgood
Finalizing compoundgood3
Mark Input dependent function compoundgood3
Finalizing compoundgood2
Mark Input dependent function compoundgood2
Finalizing compoundgood1
Mark Input dependent function compoundgood1
Finalizing compoundgood0
Mark Input dependent function compoundgood0
Finalizing good
Mark Input dependent function good
Finalizing good4
Mark Input dependent function good4
Finalizing chk_aff
Mark Input dependent function chk_aff
Finalizing chk_aff2
Mark Input dependent function chk_aff2
Finalizing chk_aff1
Mark Input dependent function chk_aff1
Finalizing chk_aff0
Mark Input dependent function chk_aff0
Finalizing pfx_list_chk
Mark Input dependent function pfx_list_chk
Finalizing pfx_list_chk5
Mark Input dependent function pfx_list_chk5
Finalizing chk_suf
Mark Input dependent function chk_suf
Finalizing chk_suf2
Mark Input dependent function chk_suf2
Finalizing chk_suf1
Mark Input dependent function chk_suf1
Finalizing chk_suf0
Mark Input dependent function chk_suf0
Finalizing suf_list_chk
Mark Input dependent function suf_list_chk
Finalizing suf_list_chk7
Mark Input dependent function suf_list_chk7
Finalizing suf_list_chk6
Mark Input dependent function suf_list_chk6
Finalizing suf_list_chk5
Mark Input dependent function suf_list_chk5
Finalizing suf_list_chk4
Mark Input dependent function suf_list_chk4
Finalizing suf_list_chk3
Mark Input dependent function suf_list_chk3
Finalizing suf_list_chk2
Mark Input dependent function suf_list_chk2
Finalizing suf_list_chk1
Mark Input dependent function suf_list_chk1
Finalizing suf_list_chk0
Mark Input dependent function suf_list_chk0
Finalizing pfx_list_chk4
Mark Input dependent function pfx_list_chk4
Finalizing ins_root_cap
Mark Input dependent function ins_root_cap
Finalizing ins_root_cap0
Mark Input dependent function ins_root_cap0
Finalizing insert
Mark Input dependent function insert
Finalizing insert2
Mark Input dependent function insert2
Finalizing insert1
Mark Input dependent function insert1
Finalizing insert0
Mark Input dependent function insert0
Finalizing save_root_cap
Mark Input dependent function save_root_cap
Finalizing save_root_cap11
Mark Input dependent function save_root_cap11
Finalizing save_root_cap10
Mark Input dependent function save_root_cap10
Finalizing save_root_cap9
Mark Input dependent function save_root_cap9
Finalizing save_root_cap8
Mark Input dependent function save_root_cap8
Finalizing save_root_cap7
Mark Input dependent function save_root_cap7
Finalizing save_root_cap6
Mark Input dependent function save_root_cap6
Finalizing save_root_cap5
Mark Input dependent function save_root_cap5
Finalizing save_root_cap4
Mark Input dependent function save_root_cap4
Finalizing lowcase
Mark Input dependent function lowcase
Finalizing lowcase0
Mark Input dependent function lowcase0
Finalizing save_root_cap3
Mark Input dependent function save_root_cap3
Finalizing save_root_cap2
Mark Input dependent function save_root_cap2
Finalizing save_root_cap1
Mark Input dependent function save_root_cap1
Finalizing save_root_cap0
Mark Input dependent function save_root_cap0
Finalizing pfx_list_chk3
Mark Input dependent function pfx_list_chk3
Finalizing pfx_list_chk2
Mark Input dependent function pfx_list_chk2
Finalizing flagpr
Mark Input dependent function flagpr
Finalizing flagpr16
Mark Input dependent function flagpr16
Finalizing flagpr15
Mark Input dependent function flagpr15
Finalizing flagpr14
Mark Input dependent function flagpr14
Finalizing flagpr13
Mark Input dependent function flagpr13
Finalizing flagpr12
Mark Input dependent function flagpr12
Finalizing flagpr11
Mark Input dependent function flagpr11
Finalizing flagpr10
Mark Input dependent function flagpr10
Finalizing flagpr9
Mark Input dependent function flagpr9
Finalizing flagpr8
Mark Input dependent function flagpr8
Finalizing flagpr7
Mark Input dependent function flagpr7
Finalizing printichar
Mark Input dependent function printichar
Finalizing printichar1
Mark Input dependent function printichar1
Finalizing printichar0
Mark Input dependent function printichar0
Finalizing flagpr6
Mark Input dependent function flagpr6
Finalizing flagpr5
Mark Input dependent function flagpr5
Finalizing flagpr4
Mark Input dependent function flagpr4
Finalizing flagpr3
Mark Input dependent function flagpr3
Finalizing flagpr2
Mark Input dependent function flagpr2
Finalizing flagpr1
Mark Input dependent function flagpr1
Finalizing flagpr0
Mark Input dependent function flagpr0
Finalizing pfx_list_chk1
Mark Input dependent function pfx_list_chk1
Finalizing pfx_list_chk0
Mark Input dependent function pfx_list_chk0
Finalizing cap_ok
Mark Input dependent function cap_ok
Finalizing cap_ok10
Mark Input dependent function cap_ok10
Finalizing cap_ok9
Mark Input dependent function cap_ok9
Finalizing cap_ok8
Mark Input dependent function cap_ok8
Finalizing cap_ok7
Mark Input dependent function cap_ok7
Finalizing cap_ok6
Mark Input dependent function cap_ok6
Finalizing cap_ok5
Mark Input dependent function cap_ok5
Finalizing cap_ok4
Mark Input dependent function cap_ok4
Finalizing cap_ok3
Mark Input dependent function cap_ok3
Finalizing entryhasaffixes
Mark Input dependent function entryhasaffixes
Finalizing cap_ok2
Mark Input dependent function cap_ok2
Finalizing cap_ok1
Mark Input dependent function cap_ok1
Finalizing cap_ok0
Mark Input dependent function cap_ok0
Finalizing good3
Mark Input dependent function good3
Finalizing good2
Mark Input dependent function good2
Finalizing ichartosstr
Mark Input dependent function ichartosstr
Finalizing ichartosstr0
Mark Input dependent function ichartosstr0
Finalizing good1
Mark Input dependent function good1
Finalizing good0
Mark Input dependent function good0
Finalizing checkline8
Mark Input dependent function checkline8
Finalizing checkline7
Mark Input dependent function checkline7
Finalizing checkline6
Mark Input dependent function checkline6
Finalizing skipoverword
Mark Input dependent function skipoverword
Finalizing skipoverword4
Mark Input dependent function skipoverword4
Finalizing skipoverword3
Mark Input dependent function skipoverword3
Finalizing skipoverword2
Mark Input dependent function skipoverword2
Finalizing skipoverword1
Mark Input dependent function skipoverword1
Finalizing skipoverword0
Mark Input dependent function skipoverword0
Finalizing checkline5
Mark Input dependent function checkline5
Finalizing skiptoword
Mark Input dependent function skiptoword
Finalizing skiptoword19
Mark Input dependent function skiptoword19
Finalizing skiptoword18
Mark Input dependent function skiptoword18
Finalizing skiptoword17
Mark Input dependent function skiptoword17
Finalizing skiptoword16
Mark Input dependent function skiptoword16
Finalizing skiptoword15
Mark Input dependent function skiptoword15
Finalizing skiptoword14
Mark Input dependent function skiptoword14
Finalizing skiptoword13
Mark Input dependent function skiptoword13
Finalizing skiptoword12
Mark Input dependent function skiptoword12
Finalizing skiptoword11
Mark Input dependent function skiptoword11
Finalizing skiptoword10
Mark Input dependent function skiptoword10
Finalizing skiptoword9
Mark Input dependent function skiptoword9
Finalizing skiptoword8
Mark Input dependent function skiptoword8
Finalizing TeX_math_begin
Mark Input dependent function TeX_math_begin
Finalizing TeX_math_begin4
Mark Input dependent function TeX_math_begin4
Finalizing TeX_math_begin3
Mark Input dependent function TeX_math_begin3
Finalizing TeX_skip_check
Mark Input dependent function TeX_skip_check
Finalizing TeX_skip_check3
Mark Input dependent function TeX_skip_check3
Finalizing TeX_skip_check2
Mark Input dependent function TeX_skip_check2
Finalizing TeX_skip_check1
Mark Input dependent function TeX_skip_check1
Finalizing TeX_skip_check0
Mark Input dependent function TeX_skip_check0
Finalizing TeX_math_begin2
Mark Input dependent function TeX_math_begin2
Finalizing TeX_math_begin1
Mark Input dependent function TeX_math_begin1
Finalizing TeX_math_begin0
Mark Input dependent function TeX_math_begin0
Finalizing skiptoword7
Mark Input dependent function skiptoword7
Finalizing skiptoword6
Mark Input dependent function skiptoword6
Finalizing skiptoword5
Mark Input dependent function skiptoword5
Finalizing skiptoword4
Mark Input dependent function skiptoword4
Finalizing skiptoword3
Mark Input dependent function skiptoword3
Finalizing TeX_math_end
Mark Input dependent function TeX_math_end
Finalizing TeX_math_end2
Mark Input dependent function TeX_math_end2
Finalizing TeX_LR_begin
Mark Input dependent function TeX_LR_begin
Finalizing TeX_LR_begin2
Mark Input dependent function TeX_LR_begin2
Finalizing TeX_LR_begin1
Mark Input dependent function TeX_LR_begin1
Finalizing TeX_LR_begin0
Mark Input dependent function TeX_LR_begin0
Finalizing TeX_strncmp
Mark Input dependent function TeX_strncmp
Finalizing TeX_strncmp0
Mark Input dependent function TeX_strncmp0
Finalizing TeX_math_end1
Mark Input dependent function TeX_math_end1
Finalizing TeX_math_end0
Mark Input dependent function TeX_math_end0
Finalizing skiptoword2
Mark Input dependent function skiptoword2
Finalizing skiptoword1
Mark Input dependent function skiptoword1
Finalizing TeX_LR_check
Mark Input dependent function TeX_LR_check
Finalizing TeX_LR_check4
Mark Input dependent function TeX_LR_check4
Finalizing TeX_LR_check3
Mark Input dependent function TeX_LR_check3
Finalizing TeX_LR_check2
Mark Input dependent function TeX_LR_check2
Finalizing TeX_LR_check1
Mark Input dependent function TeX_LR_check1
Finalizing TeX_LR_check0
Mark Input dependent function TeX_LR_check0
Finalizing TeX_math_check
Mark Input dependent function TeX_math_check
Finalizing TeX_math_check3
Mark Input dependent function TeX_math_check3
Finalizing TeX_math_check2
Mark Input dependent function TeX_math_check2
Finalizing TeX_skip_args
Mark Input dependent function TeX_skip_args
Finalizing TeX_skip_args3
Mark Input dependent function TeX_skip_args3
Finalizing TeX_skip_args2
Mark Input dependent function TeX_skip_args2
Finalizing TeX_skip_args1
Mark Input dependent function TeX_skip_args1
Finalizing TeX_skip_args0
Mark Input dependent function TeX_skip_args0
Finalizing TeX_math_check1
Mark Input dependent function TeX_math_check1
Finalizing TeX_skip_parens
Mark Input dependent function TeX_skip_parens
Finalizing TeX_skip_parens0
Mark Input dependent function TeX_skip_parens0
Finalizing TeX_math_check0
Mark Input dependent function TeX_math_check0
Finalizing TeX_open_paren
Mark Input dependent function TeX_open_paren
Finalizing TeX_open_paren0
Mark Input dependent function TeX_open_paren0
Finalizing skiptoword0
Mark Input dependent function skiptoword0
Finalizing checkline4
Mark Input dependent function checkline4
Finalizing checkline3
Mark Input dependent function checkline3
Finalizing checkline2
Mark Input dependent function checkline2
Finalizing checkline1
Mark Input dependent function checkline1
Finalizing copyout
Mark Input dependent function copyout
Finalizing copyout1
Mark Input dependent function copyout1
Finalizing copyout0
Mark Input dependent function copyout0
Finalizing checkline0
Mark Input dependent function checkline0
Finalizing askmode4
Mark Input dependent function askmode4
Finalizing askmode3
Mark Input dependent function askmode3
Finalizing askmode2
Mark Input dependent function askmode2
Finalizing xgets
Mark Input dependent function xgets
Finalizing xgets4
Mark Input dependent function xgets4
Finalizing xgets3
Mark Input dependent function xgets3
Finalizing xgets2
Mark Input dependent function xgets2
Finalizing xgets1
Mark Input dependent function xgets1
Finalizing xgets0
Mark Input dependent function xgets0
Finalizing askmode1
Mark Input dependent function askmode1
Finalizing askmode0
Mark Input dependent function askmode0
Finalizing main38
Mark Input dependent function main38
Finalizing treeinit
Mark Input dependent function treeinit
Finalizing treeinit8
Mark Input dependent function treeinit8
Finalizing treeinit7
Mark Input dependent function treeinit7
Finalizing treeinit6
Mark Input dependent function treeinit6
Finalizing treeinit5
Mark Input dependent function treeinit5
Finalizing treeinit4
Mark Input dependent function treeinit4
Finalizing treeinit3
Mark Input dependent function treeinit3
Finalizing treeinit2
Mark Input dependent function treeinit2
Finalizing treeload
Mark Input dependent function treeload
Finalizing treeinsert
Mark Input dependent function treeinsert
Finalizing treeinsert13
Mark Input dependent function treeinsert13
Finalizing treeinsert12
Mark Input dependent function treeinsert12
Finalizing treeinsert11
Mark Input dependent function treeinsert11
Finalizing combinecaps
Mark Input dependent function combinecaps
Finalizing combinecaps3
Mark Input dependent function combinecaps3
Finalizing combinecaps2
Mark Input dependent function combinecaps2
Finalizing combinecaps1
Mark Input dependent function combinecaps1
Finalizing forcevheader
Mark Input dependent function forcevheader
Finalizing forcevheader0
Mark Input dependent function forcevheader0
Finalizing combinecaps0
Mark Input dependent function combinecaps0
Finalizing combine_two_entries
Mark Input dependent function combine_two_entries
Finalizing combine_two_entries2
Mark Input dependent function combine_two_entries2
Finalizing addvheader
Mark Input dependent function addvheader
Finalizing addvheader4
Mark Input dependent function addvheader4
Finalizing addvheader3
Mark Input dependent function addvheader3
Finalizing addvheader2
Mark Input dependent function addvheader2
Finalizing addvheader1
Mark Input dependent function addvheader1
Finalizing addvheader0
Mark Input dependent function addvheader0
Finalizing combine_two_entries1
Mark Input dependent function combine_two_entries1
Finalizing combine_two_entries0
Mark Input dependent function combine_two_entries0
Finalizing myfree
Mark Input dependent function myfree
Finalizing myfree0
Mark Input dependent function myfree0
Finalizing combineaffixes
Mark Input dependent function combineaffixes
Finalizing combineaffixes0
Mark Input dependent function combineaffixes0
Finalizing acoversb
Mark Input dependent function acoversb
Finalizing issubset
Mark Input dependent function issubset
Finalizing lookup
Mark Input dependent function lookup
Finalizing lookup3
Mark Input dependent function lookup3
Finalizing treelookup
Mark Input dependent function treelookup
Finalizing treelookup2
Mark Input dependent function treelookup2
Finalizing treelookup1
Mark Input dependent function treelookup1
Finalizing treelookup0
Mark Input dependent function treelookup0
Finalizing lookup2
Mark Input dependent function lookup2
Finalizing lookup1
Mark Input dependent function lookup1
Finalizing lookup0
Mark Input dependent function lookup0
Finalizing treeinsert10
Mark Input dependent function treeinsert10
Finalizing makedent
Mark Input dependent function makedent
Finalizing makedent10
Mark Input dependent function makedent10
Finalizing makedent9
Mark Input dependent function makedent9
Finalizing makedent8
Mark Input dependent function makedent8
Finalizing makedent7
Mark Input dependent function makedent7
Finalizing chupcase
Mark Input dependent function chupcase
Finalizing chupcase0
Mark Input dependent function chupcase0
Finalizing upcase
Mark Input dependent function upcase
Finalizing upcase0
Mark Input dependent function upcase0
Finalizing strtosichar
Mark Input dependent function strtosichar
Finalizing strtosichar0
Mark Input dependent function strtosichar0
Finalizing makedent6
Mark Input dependent function makedent6
Finalizing mymalloc
Mark Input dependent function mymalloc
Finalizing makedent5
Mark Input dependent function makedent5
Finalizing whatcap
Mark Input dependent function whatcap
Finalizing whatcap4
Mark Input dependent function whatcap4
Finalizing whatcap3
Mark Input dependent function whatcap3
Finalizing whatcap2
Mark Input dependent function whatcap2
Finalizing whatcap1
Mark Input dependent function whatcap1
Finalizing whatcap0
Mark Input dependent function whatcap0
Finalizing makedent4
Mark Input dependent function makedent4
Finalizing makedent3
Mark Input dependent function makedent3
Finalizing makedent2
Mark Input dependent function makedent2
Finalizing ichartostr
Mark Input dependent function ichartostr
Finalizing ichartostr4
Mark Input dependent function ichartostr4
Finalizing ichartostr3
Mark Input dependent function ichartostr3
Finalizing ichartostr2
Mark Input dependent function ichartostr2
Finalizing ichartostr1
Mark Input dependent function ichartostr1
Finalizing ichartostr0
Mark Input dependent function ichartostr0
Finalizing makedent1
Mark Input dependent function makedent1
Finalizing makedent0
Mark Input dependent function makedent0
Finalizing treeinsert9
Mark Input dependent function treeinsert9
Finalizing treeinsert8
Mark Input dependent function treeinsert8
Finalizing treeinsert7
Mark Input dependent function treeinsert7
Finalizing treeinsert6
Mark Input dependent function treeinsert6
Finalizing treeinsert5
Mark Input dependent function treeinsert5
Finalizing tinsert
Mark Input dependent function tinsert
Finalizing tinsert3
Mark Input dependent function tinsert3
Finalizing tinsert2
Mark Input dependent function tinsert2
Finalizing tinsert1
Mark Input dependent function tinsert1
Finalizing hash
Mark Input dependent function hash
Finalizing hash1
Mark Input dependent function hash1
Finalizing hash0
Mark Input dependent function hash0
Finalizing tinsert0
Mark Input dependent function tinsert0
Finalizing strtoichar
Mark Input dependent function strtoichar
Finalizing strtoichar3
Mark Input dependent function strtoichar3
Finalizing strtoichar2
Mark Input dependent function strtoichar2
Finalizing strtoichar1
Mark Input dependent function strtoichar1
Finalizing stringcharlen
Mark Input dependent function stringcharlen
Finalizing stringcharlen8
Mark Input dependent function stringcharlen8
Finalizing stringcharlen7
Mark Input dependent function stringcharlen7
Finalizing stringcharlen6
Mark Input dependent function stringcharlen6
Finalizing stringcharlen5
Mark Input dependent function stringcharlen5
Finalizing stringcharlen4
Mark Input dependent function stringcharlen4
Finalizing stringcharlen3
Mark Input dependent function stringcharlen3
Finalizing stringcharlen2
Mark Input dependent function stringcharlen2
Finalizing stringcharlen1
Mark Input dependent function stringcharlen1
Finalizing stringcharlen0
Mark Input dependent function stringcharlen0
Finalizing strtoichar0
Mark Input dependent function strtoichar0
Finalizing treeinsert4
Mark Input dependent function treeinsert4
Finalizing treeinsert3
Mark Input dependent function treeinsert3
Finalizing treeinsert2
Mark Input dependent function treeinsert2
Finalizing treeinsert1
Mark Input dependent function treeinsert1
Finalizing treeinsert0
Mark Input dependent function treeinsert0
Finalizing treeinit1
Mark Input dependent function treeinit1
Finalizing trydict
Mark Input dependent function trydict
Finalizing trydict2
Mark Input dependent function trydict2
Finalizing trydict1
Mark Input dependent function trydict1
Finalizing trydict0
Mark Input dependent function trydict0
Finalizing treeinit0
Mark Input dependent function treeinit0
Finalizing main37
Mark Input dependent function main37
Finalizing initckch
Mark Input dependent function initckch
Finalizing initckch2
Mark Input dependent function initckch2
Finalizing initckch1
Mark Input dependent function initckch1
Finalizing initckch0
Mark Input dependent function initckch0
Finalizing main36
Mark Input dependent function main36
Finalizing main35
Mark Input dependent function main35
Finalizing main34
Mark Input dependent function main34
Finalizing main33
Mark Input dependent function main33
Finalizing findfiletype
Mark Input dependent function findfiletype
Finalizing findfiletype7
Mark Input dependent function findfiletype7
Finalizing findfiletype6
Mark Input dependent function findfiletype6
Finalizing findfiletype5
Mark Input dependent function findfiletype5
Finalizing findfiletype4
Mark Input dependent function findfiletype4
Finalizing findfiletype3
Mark Input dependent function findfiletype3
Finalizing findfiletype2
Mark Input dependent function findfiletype2
Finalizing findfiletype1
Mark Input dependent function findfiletype1
Finalizing findfiletype0
Mark Input dependent function findfiletype0
Finalizing linit
Mark Input dependent function linit
Finalizing linit49
Mark Input dependent function linit49
Finalizing linit48
Mark Input dependent function linit48
Finalizing linit47
Mark Input dependent function linit47
Finalizing linit46
Mark Input dependent function linit46
Finalizing linit45
Mark Input dependent function linit45
Finalizing linit44
Mark Input dependent function linit44
Finalizing linit43
Mark Input dependent function linit43
Finalizing linit42
Mark Input dependent function linit42
Finalizing linit41
Mark Input dependent function linit41
Finalizing linit40
Mark Input dependent function linit40
Finalizing linit39
Mark Input dependent function linit39
Finalizing linit38
Mark Input dependent function linit38
Finalizing linit37
Mark Input dependent function linit37
Finalizing linit36
Mark Input dependent function linit36
Finalizing linit35
Mark Input dependent function linit35
Finalizing linit34
Mark Input dependent function linit34
Finalizing linit33
Mark Input dependent function linit33
Finalizing linit32
Mark Input dependent function linit32
Finalizing linit31
Mark Input dependent function linit31
Finalizing linit30
Mark Input dependent function linit30
Finalizing linit29
Mark Input dependent function linit29
Finalizing linit28
Mark Input dependent function linit28
Finalizing linit27
Mark Input dependent function linit27
Finalizing linit26
Mark Input dependent function linit26
Finalizing linit25
Mark Input dependent function linit25
Finalizing linit24
Mark Input dependent function linit24
Finalizing linit23
Mark Input dependent function linit23
Finalizing linit22
Mark Input dependent function linit22
Finalizing linit21
Mark Input dependent function linit21
Finalizing linit20
Mark Input dependent function linit20
Finalizing linit19
Mark Input dependent function linit19
Finalizing linit18
Mark Input dependent function linit18
Finalizing linit17
Mark Input dependent function linit17
Finalizing linit16
Mark Input dependent function linit16
Finalizing linit15
Mark Input dependent function linit15
Finalizing linit14
Mark Input dependent function linit14
Finalizing linit13
Mark Input dependent function linit13
Finalizing linit12
Mark Input dependent function linit12
Finalizing linit11
Mark Input dependent function linit11
Finalizing linit10
Mark Input dependent function linit10
Finalizing linit9
Mark Input dependent function linit9
Finalizing linit8
Mark Input dependent function linit8
Finalizing linit7
Mark Input dependent function linit7
Finalizing linit6
Mark Input dependent function linit6
Finalizing linit5
Mark Input dependent function linit5
Finalizing linit4
Mark Input dependent function linit4
Finalizing linit3
Mark Input dependent function linit3
Finalizing linit2
Mark Input dependent function linit2
Finalizing linit1
Mark Input dependent function linit1
Finalizing linit0
Mark Input dependent function linit0
Finalizing main32
Mark Input dependent function main32
Finalizing main31
Mark Input dependent function main31
Finalizing main30
Mark Input dependent function main30
Finalizing main29
Mark Input dependent function main29
Finalizing main28
Mark Input dependent function main28
Finalizing main27
Mark Input dependent function main27
Finalizing main26
Mark Input dependent function main26
Finalizing main25
Mark Input dependent function main25
Finalizing main24
Mark Input dependent function main24
Finalizing main23
Mark Input dependent function main23
Finalizing main22
Mark Input dependent function main22
Finalizing main21
Mark Input dependent function main21
Finalizing main20
Mark Input dependent function main20
Finalizing main19
Mark Input dependent function main19
Finalizing main18
Mark Input dependent function main18
Finalizing main17
Mark Input dependent function main17
Finalizing main16
Mark Input dependent function main16
Finalizing main15
Mark Input dependent function main15
Finalizing main14
Mark Input dependent function main14
Finalizing main13
Mark Input dependent function main13
Finalizing main12
Mark Input dependent function main12
Finalizing main11
Mark Input dependent function main11
Finalizing main10
Mark Input dependent function main10
Finalizing main9
Mark Input dependent function main9
Finalizing main8
Mark Input dependent function main8
Finalizing main7
Mark Input dependent function main7
Finalizing main6
Mark Input dependent function main6
Finalizing usage
Mark Input dependent function usage
Finalizing givehelp
Mark Input dependent function givehelp
Finalizing givehelp2
Mark Input dependent function givehelp2
Finalizing givehelp1
Mark Input dependent function givehelp1
Finalizing givehelp0
Mark Input dependent function givehelp0
Finalizing usage0
Mark Input dependent function usage0
Finalizing main5
Finalizing main4
Mark Input dependent function main4
Finalizing main3
Mark Input dependent function main3
Finalizing main2
Mark Input dependent function main2
Finalizing main1
Mark Input dependent function main1
Finalizing main0
Finalizing shellescape
Mark Input dependent function shellescape
Finalizing shellescape5
Mark Input dependent function shellescape5
Finalizing shellescape4
Mark Input dependent function shellescape4
Finalizing shellescape3
Mark Input dependent function shellescape3
Finalizing shellescape2
Mark Input dependent function shellescape2
Finalizing shellescape1
Mark Input dependent function shellescape1
Finalizing shellescape0
Mark Input dependent function shellescape0
Finalizing stop
Mark Input dependent function stop
Finalizing onstop
Mark Input dependent function onstop
Finalizing onstop0
Mark Input dependent function onstop0
Finalizing done
Mark Input dependent function done
Finalizing terminit
Mark Input dependent function terminit
Finalizing terminit5
Mark Input dependent function terminit5
Finalizing terminit4
Mark Input dependent function terminit4
Finalizing terminit3
Mark Input dependent function terminit3
Finalizing terminit2
Mark Input dependent function terminit2
Finalizing terminit1
Mark Input dependent function terminit1
Finalizing terminit0
Mark Input dependent function terminit0
Finalizing backup
Mark Input dependent function backup
Finalizing normal
Mark Input dependent function normal
Finalizing inverse
Mark Input dependent function inverse
Finalizing move
Mark Input dependent function move
Finalizing erase
Mark Input dependent function erase
Finished input dependency analysis

In  mark function pass 
In  filter function pass 
Filter file:/home/anahitik/SIP/sip-eval/combination/ispell.x.bc/50/0
here!:linit3
here!:flagpr7
here!:inserttoken
here!:flagpr14
here!:save_root_cap2
here!:pr_pre_expansion2
here!:linit27
here!:correct6
here!:skiptoword5
here!:casecmp
here!:correct8
here!:pr_pre_expansion
here!:linit5
here!:myfree
here!:combine_two_entries1
here!:askmode7
here!:chupcase0
here!:good2
here!:findfiletype2
here!:treeinsert4
here!:linit33
here!:TeX_LR_check0
here!:wrongletter
here!:treeoutput23
here!:combinecaps1
here!:combine_two_entries2
here!:show_char4
here!:strtoichar0
here!:terminit5
here!:entdump4
here!:treeoutput16
here!:ichartosstr0
here!:main32
here!:treeoutput32
here!:askmode6
here!:flagpr16
here!:suf_list_chk6
here!:pdictcmp
here!:treeinsert12
here!:lookharder2
here!:main19
here!:checkline20
here!:suf_list_chk0
here!:correct20
here!:correct25
here!:expand_suf
here!:treeinsert5
here!:treeinsert
here!:tryveryhard
here!:good3
here!:linit12
here!:tbldump
here!:dumpmode1
here!:skipoverword4
here!:expand_suf2
here!:treeoutput7
here!:main34
here!:extraletter
here!:TeX_math_check1
here!:main3
here!:suf_list_chk2
here!:strtoichar3
here!:terminit2
here!:correct26
here!:missingspace0
here!:correct
here!:compoundgood3
here!:missingletter2
here!:linit4
here!:TeX_math_check0
here!:treeinit0
here!:skiptoword10
here!:treeinit2
here!:main11
here!:flagout1
here!:compoundgood
here!:forcevheader
here!:treeoutput10
here!:skiptoword
here!:linit41
here!:cap_ok3
here!:correct12
here!:lookup
here!:givehelp
here!:dofile1
here!:correct21
here!:TeX_math_check
here!:checkline4
here!:treeinsert0
here!:flagpr6
here!:main38
here!:linit7
here!:linit23
here!:posscmp
here!:show_line3
here!:ichartostr4
here!:tinsert0
here!:pfx_list_chk3
here!:printichar
here!:linit10
here!:linit8
here!:main37
here!:cap_ok1
here!:lookup3
here!:treeoutput1
here!:usage0
here!:pr_pre_expansion5
here!:initckch0
here!:makepossibilities0
here!:pr_suf_expansion2
here!:checkline12
here!:flagpr0
here!:dofile3
here!:combine_two_entries
here!:pr_pre_expansion1
here!:makedent3
here!:linit
here!:linit18
here!:wrongletter0
here!:whatcap4
here!:ins_root_cap0
here!:show_char9
here!:treeoutput3
here!:compoundgood1
here!:checkline15
here!:good0
here!:treeoutput30
here!:linit48
here!:main35
here!:linit37
here!:linit11
here!:skipoverword0
here!:dumpmode0
here!:addvheader0
here!:skipoverword2
here!:transposedletter1
here!:casecmp4
here!:save_root_cap1
here!:flagpr11
here!:skiptoword6
here!:correct9
here!:casecmp2
here!:update_file1
here!:flagpr
here!:flagpr15
here!:treeload
here!:backup
here!:cap_ok
here!:expandmode0
here!:main12
here!:treeoutput25
here!:combine_two_entries0
here!:treeoutput17
here!:linit17
here!:line_size
here!:linit15
here!:line_size0
here!:checkline9
here!:initckch2
here!:checkfile0
here!:flagpr5
here!:linit16
here!:checkfile7
here!:insert1
here!:linit21
here!:askmode0
here!:stringcharlen2
here!:entryhasaffixes
here!:treeoutput0
here!:strtosichar0
here!:main2
here!:main1
here!:save_root_cap6
here!:cap_ok7
here!:show_char3
here!:save_cap0
here!:dumpmode3
here!:dofile2
here!:main6
here!:missingletter
here!:setdump0
here!:correct5
here!:printichar1
here!:treelookup0
here!:move
here!:subsetdump5
here!:expand_pre
here!:combinecaps3
here!:TeX_skip_check0
here!:casecmp1
here!:main43
here!:my_getline3
here!:main0
here!:makepossibilities5
here!:treelookup1
here!:checkline17
here!:show_char7
here!:addvheader3
here!:linit28
here!:treeoutput28
here!:terminit0
here!:shellescape1
here!:main15
here!:skiptoword18
here!:findfiletype3
here!:checkline7
here!:inserttoken2
here!:ichartostr1
here!:checkline0
here!:toutent0
here!:show_char1
here!:shellescape2
here!:skiptoword1
here!:stringcharlen
here!:linit42
here!:combinecaps0
here!:main28
here!:insert2
here!:makepossibilities6
here!:TeX_LR_begin
here!:main24
here!:initckch
here!:copyout
here!:treeoutput15
here!:main30
here!:TeX_math_begin2
here!:save_cap
here!:show_line
here!:findfiletype1
here!:skiptoword0
here!:cap_ok10
here!:combineaffixes
here!:checkfile4
here!:entdump
here!:makedent2
here!:whatcap2
here!:TeX_LR_begin0
here!:linit1
here!:xgets1
here!:pr_pre_expansion3
here!:suf_list_chk1
here!:stop
here!:treeinsert8
here!:main27
here!:save_root_cap7
here!:main14
here!:update_file2
here!:onstop
here!:main10
here!:wrongletter1
here!:update_file5
here!:correct19
here!:linit43
here!:treeoutput29
here!:TeX_math_check2
here!:show_char10
here!:stringcharlen6
here!:main4
here!:show_char6
here!:makepossibilities
here!:entdump1
here!:hash0
here!:addvheader4
here!:treeinsert11
here!:dumpmode
here!:treeinit6
here!:combinecaps
here!:pfx_list_chk
here!:pr_suf_expansion3
here!:TeX_math_end0
here!:expand_pre0
here!:treeoutput27
here!:compoundgood2
here!:my_getline4
here!:TeX_math_end
here!:linit49
here!:correct24
here!:correct3
here!:toutword1
here!:main18
here!:findfiletype6
here!:ichartosstr
here!:shellescape4
here!:lookup1
here!:main31
here!:flagpr8
here!:linit6
here!:chk_suf1
here!:linit31
here!:hash1
here!:show_line0
here!:trydict2
here!:treeoutput5
here!:linit9
here!:dofile
here!:show_char12
here!:save_root_cap3
here!:treeoutput20
here!:terminit4
here!:linit39
here!:skiptoword11
here!:askmode2
here!:show_line1
here!:TeX_math_begin
here!:subsetdump4
here!:copyout1
here!:makedent
here!:linit44
here!:flagpr2
here!:wrongcapital
here!:stringcharlen7
here!:askmode
here!:makedent10
here!:checkline2
here!:show_char2
here!:main5
here!:askmode1
here!:myfree0
here!:casecmp5
here!:checkline5
here!:pr_suf_expansion0
here!:dumpmode2
here!:ichartostr
here!:linit47
here!:show_char11
here!:missingspace
here!:ins_cap0
here!:chk_suf
here!:checkfile3
here!:TeX_open_paren0
here!:good1
here!:show_char13
here!:checkfile6
here!:treeoutput2
here!:save_root_cap
here!:treeinit5
here!:shellescape3
here!:correct14
here!:treeoutput4
here!:inserttoken3
here!:initckch1
here!:skiptoword14
here!:flagpr12
here!:TeX_math_check3
here!:treeoutput19
here!:makedent5
here!:subsetdump1
here!:makepossibilities7
here!:makepossibilities7
got filter function names
did not find erase demangled to erase
Add filter function move
FunctionInfo. Adding function:move
did not find inverse demangled to inverse
did not find normal demangled to normal
Add filter function backup
FunctionInfo. Adding function:backup
did not find terminit demangled to terminit
did not find getenv demangled to getenv
did not find atoi demangled to atoi
did not find fprintf demangled to fprintf
did not find isatty demangled to isatty
did not find exit demangled to exit
did not find tcgetattr demangled to tcgetattr
did not find llvm.memcpy.p0i8.p0i8.i64 demangled to llvm.memcpy.p0i8.p0i8.i64
did not find tcsetattr demangled to tcsetattr
did not find signal demangled to signal
did not find done demangled to done
Add filter function onstop
FunctionInfo. Adding function:onstop
did not find kill demangled to kill
did not find unlink demangled to unlink
Add filter function stop
FunctionInfo. Adding function:stop
did not find shellescape demangled to shellescape
did not find fork demangled to fork
did not find execvp demangled to execvp
did not find _exit demangled to _exit
did not find wait demangled to wait
did not find printf demangled to printf
did not find fflush demangled to fflush
did not find getchar demangled to getchar
did not find main demangled to main
did not find index demangled to index
did not find strcpy demangled to strcpy
did not find sprintf demangled to sprintf
did not find rindex demangled to rindex
did not find strcmp demangled to strcmp
did not find strcat demangled to strcat
did not find strlen demangled to strlen
did not find usage demangled to usage
did not find strncmp demangled to strncmp
did not find access demangled to access
Add filter function initckch
FunctionInfo. Adding function:initckch
did not find expandmode demangled to expandmode
did not find setbuf demangled to setbuf
Add filter function dofile
FunctionInfo. Adding function:dofile
did not find fopen demangled to fopen
did not find sleep demangled to sleep
did not find fileno demangled to fileno
did not find fstat demangled to fstat
did not find mktemp demangled to mktemp
did not find chmod demangled to chmod
did not find fclose demangled to fclose
did not find update_file demangled to update_file
did not find link demangled to link
did not find _IO_getc demangled to _IO_getc
did not find _IO_putc demangled to _IO_putc
did not find fputs demangled to fputs
did not find llvm.memset.p0i8.i64 demangled to llvm.memset.p0i8.i64
did not find putchar demangled to putchar
did not find __ctype_b_loc demangled to __ctype_b_loc
Add filter function givehelp
FunctionInfo. Adding function:givehelp
did not find checkfile demangled to checkfile
did not find fgets demangled to fgets
Add filter function correct
FunctionInfo. Adding function:correct
Add filter function compoundgood
FunctionInfo. Adding function:compoundgood
Add filter function makepossibilities
FunctionInfo. Adding function:makepossibilities
Add filter function show_line
FunctionInfo. Adding function:show_line
Add filter function line_size
FunctionInfo. Adding function:line_size
did not find my_getline demangled to my_getline
Add filter function inserttoken
FunctionInfo. Adding function:inserttoken
did not find lookharder demangled to lookharder
did not find show_char demangled to show_char
Add filter function wrongcapital
FunctionInfo. Adding function:wrongcapital
Add filter function missingletter
FunctionInfo. Adding function:missingletter
did not find transposedletter demangled to transposedletter
Add filter function extraletter
FunctionInfo. Adding function:extraletter
Add filter function wrongletter
FunctionInfo. Adding function:wrongletter
Add filter function missingspace
FunctionInfo. Adding function:missingspace
Add filter function tryveryhard
FunctionInfo. Adding function:tryveryhard
Add filter function posscmp
FunctionInfo. Adding function:posscmp
did not find qsort demangled to qsort
Add filter function casecmp
FunctionInfo. Adding function:casecmp
Add filter function save_cap
FunctionInfo. Adding function:save_cap
did not find insert demangled to insert
Add filter function save_root_cap
FunctionInfo. Adding function:save_root_cap
did not find bcopy demangled to bcopy
did not find ins_cap demangled to ins_cap
did not find ins_root_cap demangled to ins_root_cap
Add filter function askmode
FunctionInfo. Adding function:askmode
did not find freopen demangled to freopen
did not find rewind demangled to rewind
did not find creat demangled to creat
Add filter function copyout
FunctionInfo. Adding function:copyout
did not find skipoverword demangled to skipoverword
did not find checkline demangled to checkline
Add filter function skiptoword
FunctionInfo. Adding function:skiptoword
Add filter function TeX_math_check
FunctionInfo. Adding function:TeX_math_check
did not find TeX_LR_check demangled to TeX_LR_check
Add filter function TeX_math_end
FunctionInfo. Adding function:TeX_math_end
did not find TeX_strncmp demangled to TeX_strncmp
did not find TeX_skip_parens demangled to TeX_skip_parens
Add filter function TeX_math_begin
FunctionInfo. Adding function:TeX_math_begin
did not find TeX_skip_check demangled to TeX_skip_check
Add filter function TeX_LR_begin
FunctionInfo. Adding function:TeX_LR_begin
did not find TeX_open_paren demangled to TeX_open_paren
did not find TeX_skip_args demangled to TeX_skip_args
Add filter function dumpmode
FunctionInfo. Adding function:dumpmode
Add filter function tbldump
FunctionInfo. Adding function:tbldump
Add filter function entdump
FunctionInfo. Adding function:entdump
did not find setdump demangled to setdump
did not find subsetdump demangled to subsetdump
did not find good demangled to good
Add filter function cap_ok
FunctionInfo. Adding function:cap_ok
Add filter function entryhasaffixes
FunctionInfo. Adding function:entryhasaffixes
Add filter function flagpr
FunctionInfo. Adding function:flagpr
Add filter function linit
FunctionInfo. Adding function:linit
did not find open demangled to open
did not find read demangled to read
did not find calloc demangled to calloc
did not find malloc demangled to malloc
did not find lseek demangled to lseek
did not find close demangled to close
Add filter function lookup
FunctionInfo. Adding function:lookup
did not find hash demangled to hash
Add filter function makedent
FunctionInfo. Adding function:makedent
did not find strtoichar demangled to strtoichar
Add filter function ichartostr
FunctionInfo. Adding function:ichartostr
did not find whatcap demangled to whatcap
did not find chupcase demangled to chupcase
did not find strtosichar demangled to strtosichar
did not find upcase demangled to upcase
Add filter function stringcharlen
FunctionInfo. Adding function:stringcharlen
did not find addvheader demangled to addvheader
Add filter function combinecaps
FunctionInfo. Adding function:combinecaps
Add filter function combine_two_entries
FunctionInfo. Adding function:combine_two_entries
Add filter function forcevheader
FunctionInfo. Adding function:forcevheader
Add filter function combineaffixes
FunctionInfo. Adding function:combineaffixes
did not find acoversb demangled to acoversb
did not find issubset demangled to issubset
did not find lowcase demangled to lowcase
did not find toutent demangled to toutent
Add filter function ichartosstr
FunctionInfo. Adding function:ichartosstr
did not find toutword demangled to toutword
did not find flagout demangled to flagout
Add filter function printichar
FunctionInfo. Adding function:printichar
did not find findfiletype demangled to findfiletype
did not find chk_aff demangled to chk_aff
Add filter function pfx_list_chk
FunctionInfo. Adding function:pfx_list_chk
Add filter function chk_suf
FunctionInfo. Adding function:chk_suf
did not find suf_list_chk demangled to suf_list_chk
Add filter function expand_pre
FunctionInfo. Adding function:expand_pre
Add filter function pr_pre_expansion
FunctionInfo. Adding function:pr_pre_expansion
did not find forcelc demangled to forcelc
Add filter function expand_suf
FunctionInfo. Adding function:expand_suf
did not find pr_suf_expansion demangled to pr_suf_expansion
did not find treeinit demangled to treeinit
did not find trydict demangled to trydict
Add filter function treeload
FunctionInfo. Adding function:treeload
did not find perror demangled to perror
did not find __errno_location demangled to __errno_location
Add filter function treeinsert
FunctionInfo. Adding function:treeinsert
did not find tinsert demangled to tinsert
did not find free demangled to free
did not find treelookup demangled to treelookup
did not find treeoutput demangled to treeoutput
Add filter function pdictcmp
FunctionInfo. Adding function:pdictcmp
did not find mymalloc demangled to mymalloc
Add filter function myfree
FunctionInfo. Adding function:myfree
did not find xgets demangled to xgets
Add filter function terminit0
FunctionInfo. Adding function:terminit0
did not find terminit1 demangled to terminit1
Add filter function terminit2
FunctionInfo. Adding function:terminit2
did not find terminit3 demangled to terminit3
Add filter function terminit4
FunctionInfo. Adding function:terminit4
Add filter function terminit5
FunctionInfo. Adding function:terminit5
did not find onstop0 demangled to onstop0
did not find shellescape0 demangled to shellescape0
Add filter function shellescape1
FunctionInfo. Adding function:shellescape1
Add filter function shellescape2
FunctionInfo. Adding function:shellescape2
Add filter function shellescape3
FunctionInfo. Adding function:shellescape3
Add filter function shellescape4
FunctionInfo. Adding function:shellescape4
did not find shellescape5 demangled to shellescape5
Add filter function main0
FunctionInfo. Adding function:main0
Add filter function main1
FunctionInfo. Adding function:main1
Add filter function main2
FunctionInfo. Adding function:main2
Add filter function main3
FunctionInfo. Adding function:main3
Add filter function main4
FunctionInfo. Adding function:main4
Add filter function main5
FunctionInfo. Adding function:main5
Add filter function main6
FunctionInfo. Adding function:main6
did not find main7 demangled to main7
did not find main8 demangled to main8
did not find main9 demangled to main9
Add filter function main10
FunctionInfo. Adding function:main10
Add filter function main11
FunctionInfo. Adding function:main11
Add filter function main12
FunctionInfo. Adding function:main12
did not find main13 demangled to main13
Add filter function main14
FunctionInfo. Adding function:main14
Add filter function main15
FunctionInfo. Adding function:main15
did not find main16 demangled to main16
did not find main17 demangled to main17
Add filter function main18
FunctionInfo. Adding function:main18
Add filter function main19
FunctionInfo. Adding function:main19
did not find main20 demangled to main20
did not find main21 demangled to main21
did not find main22 demangled to main22
did not find main23 demangled to main23
Add filter function main24
FunctionInfo. Adding function:main24
did not find main25 demangled to main25
did not find main26 demangled to main26
Add filter function main27
FunctionInfo. Adding function:main27
Add filter function main28
FunctionInfo. Adding function:main28
did not find main29 demangled to main29
Add filter function main30
FunctionInfo. Adding function:main30
Add filter function main31
FunctionInfo. Adding function:main31
Add filter function main32
FunctionInfo. Adding function:main32
did not find main33 demangled to main33
Add filter function main34
FunctionInfo. Adding function:main34
Add filter function main35
FunctionInfo. Adding function:main35
did not find main36 demangled to main36
Add filter function main37
FunctionInfo. Adding function:main37
Add filter function main38
FunctionInfo. Adding function:main38
did not find main39 demangled to main39
did not find main40 demangled to main40
did not find main41 demangled to main41
did not find main42 demangled to main42
Add filter function main43
FunctionInfo. Adding function:main43
Add filter function usage0
FunctionInfo. Adding function:usage0
Add filter function initckch0
FunctionInfo. Adding function:initckch0
Add filter function initckch1
FunctionInfo. Adding function:initckch1
Add filter function initckch2
FunctionInfo. Adding function:initckch2
Add filter function expandmode0
FunctionInfo. Adding function:expandmode0
did not find expandmode1 demangled to expandmode1
did not find dofile0 demangled to dofile0
Add filter function dofile1
FunctionInfo. Adding function:dofile1
Add filter function dofile2
FunctionInfo. Adding function:dofile2
Add filter function dofile3
FunctionInfo. Adding function:dofile3
did not find update_file0 demangled to update_file0
Add filter function update_file1
FunctionInfo. Adding function:update_file1
Add filter function update_file2
FunctionInfo. Adding function:update_file2
did not find update_file3 demangled to update_file3
did not find update_file4 demangled to update_file4
Add filter function update_file5
FunctionInfo. Adding function:update_file5
did not find givehelp0 demangled to givehelp0
did not find givehelp1 demangled to givehelp1
did not find givehelp2 demangled to givehelp2
Add filter function checkfile0
FunctionInfo. Adding function:checkfile0
did not find checkfile1 demangled to checkfile1
did not find checkfile2 demangled to checkfile2
Add filter function checkfile3
FunctionInfo. Adding function:checkfile3
Add filter function checkfile4
FunctionInfo. Adding function:checkfile4
did not find checkfile5 demangled to checkfile5
Add filter function checkfile6
FunctionInfo. Adding function:checkfile6
Add filter function checkfile7
FunctionInfo. Adding function:checkfile7
did not find correct0 demangled to correct0
did not find correct1 demangled to correct1
did not find correct2 demangled to correct2
Add filter function correct3
FunctionInfo. Adding function:correct3
did not find correct4 demangled to correct4
Add filter function correct5
FunctionInfo. Adding function:correct5
Add filter function correct6
FunctionInfo. Adding function:correct6
did not find correct7 demangled to correct7
Add filter function correct8
FunctionInfo. Adding function:correct8
Add filter function correct9
FunctionInfo. Adding function:correct9
did not find correct10 demangled to correct10
did not find correct11 demangled to correct11
Add filter function correct12
FunctionInfo. Adding function:correct12
did not find correct13 demangled to correct13
Add filter function correct14
FunctionInfo. Adding function:correct14
did not find correct15 demangled to correct15
did not find correct16 demangled to correct16
did not find correct17 demangled to correct17
did not find correct18 demangled to correct18
Add filter function correct19
FunctionInfo. Adding function:correct19
Add filter function correct20
FunctionInfo. Adding function:correct20
Add filter function correct21
FunctionInfo. Adding function:correct21
did not find correct22 demangled to correct22
did not find correct23 demangled to correct23
Add filter function correct24
FunctionInfo. Adding function:correct24
Add filter function correct25
FunctionInfo. Adding function:correct25
Add filter function correct26
FunctionInfo. Adding function:correct26
did not find compoundgood0 demangled to compoundgood0
Add filter function compoundgood1
FunctionInfo. Adding function:compoundgood1
Add filter function compoundgood2
FunctionInfo. Adding function:compoundgood2
Add filter function compoundgood3
FunctionInfo. Adding function:compoundgood3
Add filter function makepossibilities0
FunctionInfo. Adding function:makepossibilities0
did not find makepossibilities1 demangled to makepossibilities1
did not find makepossibilities2 demangled to makepossibilities2
did not find makepossibilities3 demangled to makepossibilities3
did not find makepossibilities4 demangled to makepossibilities4
Add filter function makepossibilities5
FunctionInfo. Adding function:makepossibilities5
Add filter function makepossibilities6
FunctionInfo. Adding function:makepossibilities6
Add filter function makepossibilities7
FunctionInfo. Adding function:makepossibilities7
did not find makepossibilities8 demangled to makepossibilities8
Add filter function show_line0
FunctionInfo. Adding function:show_line0
Add filter function show_line1
FunctionInfo. Adding function:show_line1
did not find show_line2 demangled to show_line2
Add filter function show_line3
FunctionInfo. Adding function:show_line3
Add filter function line_size0
FunctionInfo. Adding function:line_size0
did not find my_getline0 demangled to my_getline0
did not find my_getline1 demangled to my_getline1
did not find my_getline2 demangled to my_getline2
Add filter function my_getline3
FunctionInfo. Adding function:my_getline3
Add filter function my_getline4
FunctionInfo. Adding function:my_getline4
did not find my_getline5 demangled to my_getline5
did not find my_getline6 demangled to my_getline6
did not find inserttoken0 demangled to inserttoken0
did not find inserttoken1 demangled to inserttoken1
Add filter function inserttoken2
FunctionInfo. Adding function:inserttoken2
Add filter function inserttoken3
FunctionInfo. Adding function:inserttoken3
did not find inserttoken4 demangled to inserttoken4
did not find inserttoken5 demangled to inserttoken5
did not find inserttoken6 demangled to inserttoken6
did not find lookharder0 demangled to lookharder0
did not find lookharder1 demangled to lookharder1
Add filter function lookharder2
FunctionInfo. Adding function:lookharder2
did not find show_char0 demangled to show_char0
Add filter function show_char1
FunctionInfo. Adding function:show_char1
Add filter function show_char2
FunctionInfo. Adding function:show_char2
Add filter function show_char3
FunctionInfo. Adding function:show_char3
Add filter function show_char4
FunctionInfo. Adding function:show_char4
did not find show_char5 demangled to show_char5
Add filter function show_char6
FunctionInfo. Adding function:show_char6
Add filter function show_char7
FunctionInfo. Adding function:show_char7
did not find show_char8 demangled to show_char8
Add filter function show_char9
FunctionInfo. Adding function:show_char9
Add filter function show_char10
FunctionInfo. Adding function:show_char10
Add filter function show_char11
FunctionInfo. Adding function:show_char11
Add filter function show_char12
FunctionInfo. Adding function:show_char12
Add filter function show_char13
FunctionInfo. Adding function:show_char13
did not find show_char14 demangled to show_char14
did not find missingletter0 demangled to missingletter0
did not find missingletter1 demangled to missingletter1
Add filter function missingletter2
FunctionInfo. Adding function:missingletter2
did not find transposedletter0 demangled to transposedletter0
Add filter function transposedletter1
FunctionInfo. Adding function:transposedletter1
did not find extraletter0 demangled to extraletter0
Add filter function wrongletter0
FunctionInfo. Adding function:wrongletter0
Add filter function wrongletter1
FunctionInfo. Adding function:wrongletter1
Add filter function missingspace0
FunctionInfo. Adding function:missingspace0
did not find missingspace1 demangled to missingspace1
did not find missingspace2 demangled to missingspace2
did not find tryveryhard0 demangled to tryveryhard0
did not find casecmp0 demangled to casecmp0
Add filter function casecmp1
FunctionInfo. Adding function:casecmp1
Add filter function casecmp2
FunctionInfo. Adding function:casecmp2
did not find casecmp3 demangled to casecmp3
Add filter function casecmp4
FunctionInfo. Adding function:casecmp4
Add filter function casecmp5
FunctionInfo. Adding function:casecmp5
did not find casecmp6 demangled to casecmp6
Add filter function save_cap0
FunctionInfo. Adding function:save_cap0
did not find save_cap1 demangled to save_cap1
did not find save_cap2 demangled to save_cap2
did not find save_cap3 demangled to save_cap3
did not find save_cap4 demangled to save_cap4
did not find insert0 demangled to insert0
Add filter function insert1
FunctionInfo. Adding function:insert1
Add filter function insert2
FunctionInfo. Adding function:insert2
did not find save_root_cap0 demangled to save_root_cap0
Add filter function save_root_cap1
FunctionInfo. Adding function:save_root_cap1
Add filter function save_root_cap2
FunctionInfo. Adding function:save_root_cap2
Add filter function save_root_cap3
FunctionInfo. Adding function:save_root_cap3
did not find save_root_cap4 demangled to save_root_cap4
did not find save_root_cap5 demangled to save_root_cap5
Add filter function save_root_cap6
FunctionInfo. Adding function:save_root_cap6
Add filter function save_root_cap7
FunctionInfo. Adding function:save_root_cap7
did not find save_root_cap8 demangled to save_root_cap8
did not find save_root_cap9 demangled to save_root_cap9
did not find save_root_cap10 demangled to save_root_cap10
did not find save_root_cap11 demangled to save_root_cap11
Add filter function ins_cap0
FunctionInfo. Adding function:ins_cap0
Add filter function ins_root_cap0
FunctionInfo. Adding function:ins_root_cap0
Add filter function askmode0
FunctionInfo. Adding function:askmode0
Add filter function askmode1
FunctionInfo. Adding function:askmode1
Add filter function askmode2
FunctionInfo. Adding function:askmode2
did not find askmode3 demangled to askmode3
did not find askmode4 demangled to askmode4
did not find askmode5 demangled to askmode5
Add filter function askmode6
FunctionInfo. Adding function:askmode6
Add filter function askmode7
FunctionInfo. Adding function:askmode7
did not find askmode8 demangled to askmode8
did not find askmode9 demangled to askmode9
did not find askmode10 demangled to askmode10
did not find copyout0 demangled to copyout0
Add filter function copyout1
FunctionInfo. Adding function:copyout1
Add filter function skipoverword0
FunctionInfo. Adding function:skipoverword0
did not find skipoverword1 demangled to skipoverword1
Add filter function skipoverword2
FunctionInfo. Adding function:skipoverword2
did not find skipoverword3 demangled to skipoverword3
Add filter function skipoverword4
FunctionInfo. Adding function:skipoverword4
Add filter function checkline0
FunctionInfo. Adding function:checkline0
did not find checkline1 demangled to checkline1
Add filter function checkline2
FunctionInfo. Adding function:checkline2
did not find checkline3 demangled to checkline3
Add filter function checkline4
FunctionInfo. Adding function:checkline4
Add filter function checkline5
FunctionInfo. Adding function:checkline5
did not find checkline6 demangled to checkline6
Add filter function checkline7
FunctionInfo. Adding function:checkline7
did not find checkline8 demangled to checkline8
Add filter function checkline9
FunctionInfo. Adding function:checkline9
did not find checkline10 demangled to checkline10
did not find checkline11 demangled to checkline11
Add filter function checkline12
FunctionInfo. Adding function:checkline12
did not find checkline13 demangled to checkline13
did not find checkline14 demangled to checkline14
Add filter function checkline15
FunctionInfo. Adding function:checkline15
did not find checkline16 demangled to checkline16
Add filter function checkline17
FunctionInfo. Adding function:checkline17
did not find checkline18 demangled to checkline18
did not find checkline19 demangled to checkline19
Add filter function checkline20
FunctionInfo. Adding function:checkline20
Add filter function skiptoword0
FunctionInfo. Adding function:skiptoword0
Add filter function skiptoword1
FunctionInfo. Adding function:skiptoword1
did not find skiptoword2 demangled to skiptoword2
did not find skiptoword3 demangled to skiptoword3
did not find skiptoword4 demangled to skiptoword4
Add filter function skiptoword5
FunctionInfo. Adding function:skiptoword5
Add filter function skiptoword6
FunctionInfo. Adding function:skiptoword6
did not find skiptoword7 demangled to skiptoword7
did not find skiptoword8 demangled to skiptoword8
did not find skiptoword9 demangled to skiptoword9
Add filter function skiptoword10
FunctionInfo. Adding function:skiptoword10
Add filter function skiptoword11
FunctionInfo. Adding function:skiptoword11
did not find skiptoword12 demangled to skiptoword12
did not find skiptoword13 demangled to skiptoword13
Add filter function skiptoword14
FunctionInfo. Adding function:skiptoword14
did not find skiptoword15 demangled to skiptoword15
did not find skiptoword16 demangled to skiptoword16
did not find skiptoword17 demangled to skiptoword17
Add filter function skiptoword18
FunctionInfo. Adding function:skiptoword18
did not find skiptoword19 demangled to skiptoword19
Add filter function TeX_math_check0
FunctionInfo. Adding function:TeX_math_check0
Add filter function TeX_math_check1
FunctionInfo. Adding function:TeX_math_check1
Add filter function TeX_math_check2
FunctionInfo. Adding function:TeX_math_check2
Add filter function TeX_math_check3
FunctionInfo. Adding function:TeX_math_check3
Add filter function TeX_LR_check0
FunctionInfo. Adding function:TeX_LR_check0
did not find TeX_LR_check1 demangled to TeX_LR_check1
did not find TeX_LR_check2 demangled to TeX_LR_check2
did not find TeX_LR_check3 demangled to TeX_LR_check3
did not find TeX_LR_check4 demangled to TeX_LR_check4
Add filter function TeX_math_end0
FunctionInfo. Adding function:TeX_math_end0
did not find TeX_math_end1 demangled to TeX_math_end1
did not find TeX_math_end2 demangled to TeX_math_end2
did not find TeX_strncmp0 demangled to TeX_strncmp0
did not find TeX_skip_parens0 demangled to TeX_skip_parens0
did not find TeX_math_begin0 demangled to TeX_math_begin0
did not find TeX_math_begin1 demangled to TeX_math_begin1
Add filter function TeX_math_begin2
FunctionInfo. Adding function:TeX_math_begin2
did not find TeX_math_begin3 demangled to TeX_math_begin3
did not find TeX_math_begin4 demangled to TeX_math_begin4
Add filter function TeX_skip_check0
FunctionInfo. Adding function:TeX_skip_check0
did not find TeX_skip_check1 demangled to TeX_skip_check1
did not find TeX_skip_check2 demangled to TeX_skip_check2
did not find TeX_skip_check3 demangled to TeX_skip_check3
Add filter function TeX_LR_begin0
FunctionInfo. Adding function:TeX_LR_begin0
did not find TeX_LR_begin1 demangled to TeX_LR_begin1
did not find TeX_LR_begin2 demangled to TeX_LR_begin2
Add filter function TeX_open_paren0
FunctionInfo. Adding function:TeX_open_paren0
did not find TeX_skip_args0 demangled to TeX_skip_args0
did not find TeX_skip_args1 demangled to TeX_skip_args1
did not find TeX_skip_args2 demangled to TeX_skip_args2
did not find TeX_skip_args3 demangled to TeX_skip_args3
Add filter function dumpmode0
FunctionInfo. Adding function:dumpmode0
Add filter function dumpmode1
FunctionInfo. Adding function:dumpmode1
Add filter function dumpmode2
FunctionInfo. Adding function:dumpmode2
Add filter function dumpmode3
FunctionInfo. Adding function:dumpmode3
did not find dumpmode4 demangled to dumpmode4
did not find tbldump0 demangled to tbldump0
did not find entdump0 demangled to entdump0
Add filter function entdump1
FunctionInfo. Adding function:entdump1
did not find entdump2 demangled to entdump2
did not find entdump3 demangled to entdump3
Add filter function entdump4
FunctionInfo. Adding function:entdump4
Add filter function setdump0
FunctionInfo. Adding function:setdump0
did not find setdump1 demangled to setdump1
did not find setdump2 demangled to setdump2
did not find setdump3 demangled to setdump3
did not find setdump4 demangled to setdump4
did not find subsetdump0 demangled to subsetdump0
Add filter function subsetdump1
FunctionInfo. Adding function:subsetdump1
did not find subsetdump2 demangled to subsetdump2
did not find subsetdump3 demangled to subsetdump3
Add filter function subsetdump4
FunctionInfo. Adding function:subsetdump4
Add filter function subsetdump5
FunctionInfo. Adding function:subsetdump5
Add filter function good0
FunctionInfo. Adding function:good0
Add filter function good1
FunctionInfo. Adding function:good1
Add filter function good2
FunctionInfo. Adding function:good2
Add filter function good3
FunctionInfo. Adding function:good3
did not find good4 demangled to good4
did not find cap_ok0 demangled to cap_ok0
Add filter function cap_ok1
FunctionInfo. Adding function:cap_ok1
did not find cap_ok2 demangled to cap_ok2
Add filter function cap_ok3
FunctionInfo. Adding function:cap_ok3
did not find cap_ok4 demangled to cap_ok4
did not find cap_ok5 demangled to cap_ok5
did not find cap_ok6 demangled to cap_ok6
Add filter function cap_ok7
FunctionInfo. Adding function:cap_ok7
did not find cap_ok8 demangled to cap_ok8
did not find cap_ok9 demangled to cap_ok9
Add filter function cap_ok10
FunctionInfo. Adding function:cap_ok10
Add filter function flagpr0
FunctionInfo. Adding function:flagpr0
did not find flagpr1 demangled to flagpr1
Add filter function flagpr2
FunctionInfo. Adding function:flagpr2
did not find flagpr3 demangled to flagpr3
did not find flagpr4 demangled to flagpr4
Add filter function flagpr5
FunctionInfo. Adding function:flagpr5
Add filter function flagpr6
FunctionInfo. Adding function:flagpr6
Add filter function flagpr7
FunctionInfo. Adding function:flagpr7
Add filter function flagpr8
FunctionInfo. Adding function:flagpr8
did not find flagpr9 demangled to flagpr9
did not find flagpr10 demangled to flagpr10
Add filter function flagpr11
FunctionInfo. Adding function:flagpr11
Add filter function flagpr12
FunctionInfo. Adding function:flagpr12
did not find flagpr13 demangled to flagpr13
Add filter function flagpr14
FunctionInfo. Adding function:flagpr14
Add filter function flagpr15
FunctionInfo. Adding function:flagpr15
Add filter function flagpr16
FunctionInfo. Adding function:flagpr16
did not find linit0 demangled to linit0
Add filter function linit1
FunctionInfo. Adding function:linit1
did not find linit2 demangled to linit2
Add filter function linit3
FunctionInfo. Adding function:linit3
Add filter function linit4
FunctionInfo. Adding function:linit4
Add filter function linit5
FunctionInfo. Adding function:linit5
Add filter function linit6
FunctionInfo. Adding function:linit6
Add filter function linit7
FunctionInfo. Adding function:linit7
Add filter function linit8
FunctionInfo. Adding function:linit8
Add filter function linit9
FunctionInfo. Adding function:linit9
Add filter function linit10
FunctionInfo. Adding function:linit10
Add filter function linit11
FunctionInfo. Adding function:linit11
Add filter function linit12
FunctionInfo. Adding function:linit12
did not find linit13 demangled to linit13
did not find linit14 demangled to linit14
Add filter function linit15
FunctionInfo. Adding function:linit15
Add filter function linit16
FunctionInfo. Adding function:linit16
Add filter function linit17
FunctionInfo. Adding function:linit17
Add filter function linit18
FunctionInfo. Adding function:linit18
did not find linit19 demangled to linit19
did not find linit20 demangled to linit20
Add filter function linit21
FunctionInfo. Adding function:linit21
did not find linit22 demangled to linit22
Add filter function linit23
FunctionInfo. Adding function:linit23
did not find linit24 demangled to linit24
did not find linit25 demangled to linit25
did not find linit26 demangled to linit26
Add filter function linit27
FunctionInfo. Adding function:linit27
Add filter function linit28
FunctionInfo. Adding function:linit28
did not find linit29 demangled to linit29
did not find linit30 demangled to linit30
Add filter function linit31
FunctionInfo. Adding function:linit31
did not find linit32 demangled to linit32
Add filter function linit33
FunctionInfo. Adding function:linit33
did not find linit34 demangled to linit34
did not find linit35 demangled to linit35
did not find linit36 demangled to linit36
Add filter function linit37
FunctionInfo. Adding function:linit37
did not find linit38 demangled to linit38
Add filter function linit39
FunctionInfo. Adding function:linit39
did not find linit40 demangled to linit40
Add filter function linit41
FunctionInfo. Adding function:linit41
Add filter function linit42
FunctionInfo. Adding function:linit42
Add filter function linit43
FunctionInfo. Adding function:linit43
Add filter function linit44
FunctionInfo. Adding function:linit44
did not find linit45 demangled to linit45
did not find linit46 demangled to linit46
Add filter function linit47
FunctionInfo. Adding function:linit47
Add filter function linit48
FunctionInfo. Adding function:linit48
Add filter function linit49
FunctionInfo. Adding function:linit49
did not find lookup0 demangled to lookup0
Add filter function lookup1
FunctionInfo. Adding function:lookup1
did not find lookup2 demangled to lookup2
Add filter function lookup3
FunctionInfo. Adding function:lookup3
Add filter function hash0
FunctionInfo. Adding function:hash0
Add filter function hash1
FunctionInfo. Adding function:hash1
did not find makedent0 demangled to makedent0
did not find makedent1 demangled to makedent1
Add filter function makedent2
FunctionInfo. Adding function:makedent2
Add filter function makedent3
FunctionInfo. Adding function:makedent3
did not find makedent4 demangled to makedent4
Add filter function makedent5
FunctionInfo. Adding function:makedent5
did not find makedent6 demangled to makedent6
did not find makedent7 demangled to makedent7
did not find makedent8 demangled to makedent8
did not find makedent9 demangled to makedent9
Add filter function makedent10
FunctionInfo. Adding function:makedent10
Add filter function strtoichar0
FunctionInfo. Adding function:strtoichar0
did not find strtoichar1 demangled to strtoichar1
did not find strtoichar2 demangled to strtoichar2
Add filter function strtoichar3
FunctionInfo. Adding function:strtoichar3
did not find ichartostr0 demangled to ichartostr0
Add filter function ichartostr1
FunctionInfo. Adding function:ichartostr1
did not find ichartostr2 demangled to ichartostr2
did not find ichartostr3 demangled to ichartostr3
Add filter function ichartostr4
FunctionInfo. Adding function:ichartostr4
did not find whatcap0 demangled to whatcap0
did not find whatcap1 demangled to whatcap1
Add filter function whatcap2
FunctionInfo. Adding function:whatcap2
did not find whatcap3 demangled to whatcap3
Add filter function whatcap4
FunctionInfo. Adding function:whatcap4
Add filter function chupcase0
FunctionInfo. Adding function:chupcase0
Add filter function strtosichar0
FunctionInfo. Adding function:strtosichar0
did not find upcase0 demangled to upcase0
did not find stringcharlen0 demangled to stringcharlen0
did not find stringcharlen1 demangled to stringcharlen1
Add filter function stringcharlen2
FunctionInfo. Adding function:stringcharlen2
did not find stringcharlen3 demangled to stringcharlen3
did not find stringcharlen4 demangled to stringcharlen4
did not find stringcharlen5 demangled to stringcharlen5
Add filter function stringcharlen6
FunctionInfo. Adding function:stringcharlen6
Add filter function stringcharlen7
FunctionInfo. Adding function:stringcharlen7
did not find stringcharlen8 demangled to stringcharlen8
Add filter function addvheader0
FunctionInfo. Adding function:addvheader0
did not find addvheader1 demangled to addvheader1
did not find addvheader2 demangled to addvheader2
Add filter function addvheader3
FunctionInfo. Adding function:addvheader3
Add filter function addvheader4
FunctionInfo. Adding function:addvheader4
Add filter function combinecaps0
FunctionInfo. Adding function:combinecaps0
Add filter function combinecaps1
FunctionInfo. Adding function:combinecaps1
did not find combinecaps2 demangled to combinecaps2
Add filter function combinecaps3
FunctionInfo. Adding function:combinecaps3
Add filter function combine_two_entries0
FunctionInfo. Adding function:combine_two_entries0
Add filter function combine_two_entries1
FunctionInfo. Adding function:combine_two_entries1
Add filter function combine_two_entries2
FunctionInfo. Adding function:combine_two_entries2
did not find forcevheader0 demangled to forcevheader0
did not find combineaffixes0 demangled to combineaffixes0
did not find lowcase0 demangled to lowcase0
Add filter function toutent0
FunctionInfo. Adding function:toutent0
did not find toutent1 demangled to toutent1
did not find toutent2 demangled to toutent2
Add filter function ichartosstr0
FunctionInfo. Adding function:ichartosstr0
did not find toutword0 demangled to toutword0
Add filter function toutword1
FunctionInfo. Adding function:toutword1
did not find toutword2 demangled to toutword2
did not find flagout0 demangled to flagout0
Add filter function flagout1
FunctionInfo. Adding function:flagout1
did not find printichar0 demangled to printichar0
Add filter function printichar1
FunctionInfo. Adding function:printichar1
did not find findfiletype0 demangled to findfiletype0
Add filter function findfiletype1
FunctionInfo. Adding function:findfiletype1
Add filter function findfiletype2
FunctionInfo. Adding function:findfiletype2
Add filter function findfiletype3
FunctionInfo. Adding function:findfiletype3
did not find findfiletype4 demangled to findfiletype4
did not find findfiletype5 demangled to findfiletype5
Add filter function findfiletype6
FunctionInfo. Adding function:findfiletype6
did not find findfiletype7 demangled to findfiletype7
did not find chk_aff0 demangled to chk_aff0
did not find chk_aff1 demangled to chk_aff1
did not find chk_aff2 demangled to chk_aff2
did not find pfx_list_chk0 demangled to pfx_list_chk0
did not find pfx_list_chk1 demangled to pfx_list_chk1
did not find pfx_list_chk2 demangled to pfx_list_chk2
Add filter function pfx_list_chk3
FunctionInfo. Adding function:pfx_list_chk3
did not find pfx_list_chk4 demangled to pfx_list_chk4
did not find pfx_list_chk5 demangled to pfx_list_chk5
did not find chk_suf0 demangled to chk_suf0
Add filter function chk_suf1
FunctionInfo. Adding function:chk_suf1
did not find chk_suf2 demangled to chk_suf2
Add filter function suf_list_chk0
FunctionInfo. Adding function:suf_list_chk0
Add filter function suf_list_chk1
FunctionInfo. Adding function:suf_list_chk1
Add filter function suf_list_chk2
FunctionInfo. Adding function:suf_list_chk2
did not find suf_list_chk3 demangled to suf_list_chk3
did not find suf_list_chk4 demangled to suf_list_chk4
did not find suf_list_chk5 demangled to suf_list_chk5
Add filter function suf_list_chk6
FunctionInfo. Adding function:suf_list_chk6
did not find suf_list_chk7 demangled to suf_list_chk7
Add filter function expand_pre0
FunctionInfo. Adding function:expand_pre0
did not find expand_pre1 demangled to expand_pre1
did not find expand_pre2 demangled to expand_pre2
did not find pr_pre_expansion0 demangled to pr_pre_expansion0
Add filter function pr_pre_expansion1
FunctionInfo. Adding function:pr_pre_expansion1
Add filter function pr_pre_expansion2
FunctionInfo. Adding function:pr_pre_expansion2
Add filter function pr_pre_expansion3
FunctionInfo. Adding function:pr_pre_expansion3
did not find pr_pre_expansion4 demangled to pr_pre_expansion4
Add filter function pr_pre_expansion5
FunctionInfo. Adding function:pr_pre_expansion5
did not find pr_pre_expansion6 demangled to pr_pre_expansion6
did not find forcelc0 demangled to forcelc0
did not find forcelc1 demangled to forcelc1
did not find expand_suf0 demangled to expand_suf0
did not find expand_suf1 demangled to expand_suf1
Add filter function expand_suf2
FunctionInfo. Adding function:expand_suf2
Add filter function pr_suf_expansion0
FunctionInfo. Adding function:pr_suf_expansion0
did not find pr_suf_expansion1 demangled to pr_suf_expansion1
Add filter function pr_suf_expansion2
FunctionInfo. Adding function:pr_suf_expansion2
Add filter function pr_suf_expansion3
FunctionInfo. Adding function:pr_suf_expansion3
did not find pr_suf_expansion4 demangled to pr_suf_expansion4
Add filter function treeinit0
FunctionInfo. Adding function:treeinit0
did not find treeinit1 demangled to treeinit1
Add filter function treeinit2
FunctionInfo. Adding function:treeinit2
did not find treeinit3 demangled to treeinit3
did not find treeinit4 demangled to treeinit4
Add filter function treeinit5
FunctionInfo. Adding function:treeinit5
Add filter function treeinit6
FunctionInfo. Adding function:treeinit6
did not find treeinit7 demangled to treeinit7
did not find treeinit8 demangled to treeinit8
did not find trydict0 demangled to trydict0
did not find trydict1 demangled to trydict1
Add filter function trydict2
FunctionInfo. Adding function:trydict2
Add filter function treeinsert0
FunctionInfo. Adding function:treeinsert0
did not find treeinsert1 demangled to treeinsert1
did not find treeinsert2 demangled to treeinsert2
did not find treeinsert3 demangled to treeinsert3
Add filter function treeinsert4
FunctionInfo. Adding function:treeinsert4
Add filter function treeinsert5
FunctionInfo. Adding function:treeinsert5
did not find treeinsert6 demangled to treeinsert6
did not find treeinsert7 demangled to treeinsert7
Add filter function treeinsert8
FunctionInfo. Adding function:treeinsert8
did not find treeinsert9 demangled to treeinsert9
did not find treeinsert10 demangled to treeinsert10
Add filter function treeinsert11
FunctionInfo. Adding function:treeinsert11
Add filter function treeinsert12
FunctionInfo. Adding function:treeinsert12
did not find treeinsert13 demangled to treeinsert13
Add filter function tinsert0
FunctionInfo. Adding function:tinsert0
did not find tinsert1 demangled to tinsert1
did not find tinsert2 demangled to tinsert2
did not find tinsert3 demangled to tinsert3
Add filter function treelookup0
FunctionInfo. Adding function:treelookup0
Add filter function treelookup1
FunctionInfo. Adding function:treelookup1
did not find treelookup2 demangled to treelookup2
Add filter function treeoutput0
FunctionInfo. Adding function:treeoutput0
Add filter function treeoutput1
FunctionInfo. Adding function:treeoutput1
Add filter function treeoutput2
FunctionInfo. Adding function:treeoutput2
Add filter function treeoutput3
FunctionInfo. Adding function:treeoutput3
Add filter function treeoutput4
FunctionInfo. Adding function:treeoutput4
Add filter function treeoutput5
FunctionInfo. Adding function:treeoutput5
did not find treeoutput6 demangled to treeoutput6
Add filter function treeoutput7
FunctionInfo. Adding function:treeoutput7
did not find treeoutput8 demangled to treeoutput8
did not find treeoutput9 demangled to treeoutput9
Add filter function treeoutput10
FunctionInfo. Adding function:treeoutput10
did not find treeoutput11 demangled to treeoutput11
did not find treeoutput12 demangled to treeoutput12
did not find treeoutput13 demangled to treeoutput13
did not find treeoutput14 demangled to treeoutput14
Add filter function treeoutput15
FunctionInfo. Adding function:treeoutput15
Add filter function treeoutput16
FunctionInfo. Adding function:treeoutput16
Add filter function treeoutput17
FunctionInfo. Adding function:treeoutput17
did not find treeoutput18 demangled to treeoutput18
Add filter function treeoutput19
FunctionInfo. Adding function:treeoutput19
Add filter function treeoutput20
FunctionInfo. Adding function:treeoutput20
did not find treeoutput21 demangled to treeoutput21
did not find treeoutput22 demangled to treeoutput22
Add filter function treeoutput23
FunctionInfo. Adding function:treeoutput23
did not find treeoutput24 demangled to treeoutput24
Add filter function treeoutput25
FunctionInfo. Adding function:treeoutput25
did not find treeoutput26 demangled to treeoutput26
Add filter function treeoutput27
FunctionInfo. Adding function:treeoutput27
Add filter function treeoutput28
FunctionInfo. Adding function:treeoutput28
Add filter function treeoutput29
FunctionInfo. Adding function:treeoutput29
Add filter function treeoutput30
FunctionInfo. Adding function:treeoutput30
did not find treeoutput31 demangled to treeoutput31
Add filter function treeoutput32
FunctionInfo. Adding function:treeoutput32
Add filter function myfree0
FunctionInfo. Adding function:myfree0
did not find xgets0 demangled to xgets0
Add filter function xgets1
FunctionInfo. Adding function:xgets1
did not find xgets2 demangled to xgets2
did not find xgets3 demangled to xgets3
did not find xgets4 demangled to xgets4
Adding erase other functions, ExtractedOnly mode uses other functions
Adding move other functions, ExtractedOnly mode uses other functions
Adding inverse other functions, ExtractedOnly mode uses other functions
Adding normal other functions, ExtractedOnly mode uses other functions
Adding backup other functions, ExtractedOnly mode uses other functions
Adding terminit other functions, ExtractedOnly mode uses other functions
Adding done other functions, ExtractedOnly mode uses other functions
Adding onstop other functions, ExtractedOnly mode uses other functions
Adding stop other functions, ExtractedOnly mode uses other functions
Adding shellescape other functions, ExtractedOnly mode uses other functions
Adding main other functions, ExtractedOnly mode uses other functions
Adding usage other functions, ExtractedOnly mode uses other functions
Adding initckch other functions, ExtractedOnly mode uses other functions
Adding expandmode other functions, ExtractedOnly mode uses other functions
Adding dofile other functions, ExtractedOnly mode uses other functions
Adding update_file other functions, ExtractedOnly mode uses other functions
Adding givehelp other functions, ExtractedOnly mode uses other functions
Adding checkfile other functions, ExtractedOnly mode uses other functions
Adding correct other functions, ExtractedOnly mode uses other functions
Adding compoundgood other functions, ExtractedOnly mode uses other functions
Adding makepossibilities other functions, ExtractedOnly mode uses other functions
Adding show_line other functions, ExtractedOnly mode uses other functions
Adding line_size other functions, ExtractedOnly mode uses other functions
Adding my_getline other functions, ExtractedOnly mode uses other functions
Adding inserttoken other functions, ExtractedOnly mode uses other functions
Adding lookharder other functions, ExtractedOnly mode uses other functions
Adding show_char other functions, ExtractedOnly mode uses other functions
Adding wrongcapital other functions, ExtractedOnly mode uses other functions
Adding missingletter other functions, ExtractedOnly mode uses other functions
Adding transposedletter other functions, ExtractedOnly mode uses other functions
Adding extraletter other functions, ExtractedOnly mode uses other functions
Adding wrongletter other functions, ExtractedOnly mode uses other functions
Adding missingspace other functions, ExtractedOnly mode uses other functions
Adding tryveryhard other functions, ExtractedOnly mode uses other functions
Adding posscmp other functions, ExtractedOnly mode uses other functions
Adding casecmp other functions, ExtractedOnly mode uses other functions
Adding save_cap other functions, ExtractedOnly mode uses other functions
Adding insert other functions, ExtractedOnly mode uses other functions
Adding save_root_cap other functions, ExtractedOnly mode uses other functions
Adding ins_cap other functions, ExtractedOnly mode uses other functions
Adding ins_root_cap other functions, ExtractedOnly mode uses other functions
Adding askmode other functions, ExtractedOnly mode uses other functions
Adding copyout other functions, ExtractedOnly mode uses other functions
Adding skipoverword other functions, ExtractedOnly mode uses other functions
Adding checkline other functions, ExtractedOnly mode uses other functions
Adding skiptoword other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check other functions, ExtractedOnly mode uses other functions
Adding TeX_math_end other functions, ExtractedOnly mode uses other functions
Adding TeX_strncmp other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_parens other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_begin other functions, ExtractedOnly mode uses other functions
Adding TeX_open_paren other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args other functions, ExtractedOnly mode uses other functions
Adding dumpmode other functions, ExtractedOnly mode uses other functions
Adding tbldump other functions, ExtractedOnly mode uses other functions
Adding entdump other functions, ExtractedOnly mode uses other functions
Adding setdump other functions, ExtractedOnly mode uses other functions
Adding subsetdump other functions, ExtractedOnly mode uses other functions
Adding good other functions, ExtractedOnly mode uses other functions
Adding cap_ok other functions, ExtractedOnly mode uses other functions
Adding entryhasaffixes other functions, ExtractedOnly mode uses other functions
Adding flagpr other functions, ExtractedOnly mode uses other functions
Adding linit other functions, ExtractedOnly mode uses other functions
Adding lookup other functions, ExtractedOnly mode uses other functions
Adding hash other functions, ExtractedOnly mode uses other functions
Adding makedent other functions, ExtractedOnly mode uses other functions
Adding strtoichar other functions, ExtractedOnly mode uses other functions
Adding ichartostr other functions, ExtractedOnly mode uses other functions
Adding whatcap other functions, ExtractedOnly mode uses other functions
Adding chupcase other functions, ExtractedOnly mode uses other functions
Adding strtosichar other functions, ExtractedOnly mode uses other functions
Adding upcase other functions, ExtractedOnly mode uses other functions
Adding stringcharlen other functions, ExtractedOnly mode uses other functions
Adding addvheader other functions, ExtractedOnly mode uses other functions
Adding combinecaps other functions, ExtractedOnly mode uses other functions
Adding combine_two_entries other functions, ExtractedOnly mode uses other functions
Adding forcevheader other functions, ExtractedOnly mode uses other functions
Adding combineaffixes other functions, ExtractedOnly mode uses other functions
Adding acoversb other functions, ExtractedOnly mode uses other functions
Adding issubset other functions, ExtractedOnly mode uses other functions
Adding lowcase other functions, ExtractedOnly mode uses other functions
Adding toutent other functions, ExtractedOnly mode uses other functions
Adding ichartosstr other functions, ExtractedOnly mode uses other functions
Adding toutword other functions, ExtractedOnly mode uses other functions
Adding flagout other functions, ExtractedOnly mode uses other functions
Adding printichar other functions, ExtractedOnly mode uses other functions
Adding findfiletype other functions, ExtractedOnly mode uses other functions
Adding chk_aff other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk other functions, ExtractedOnly mode uses other functions
Adding chk_suf other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk other functions, ExtractedOnly mode uses other functions
Adding expand_pre other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion other functions, ExtractedOnly mode uses other functions
Adding forcelc other functions, ExtractedOnly mode uses other functions
Adding expand_suf other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion other functions, ExtractedOnly mode uses other functions
Adding treeinit other functions, ExtractedOnly mode uses other functions
Adding trydict other functions, ExtractedOnly mode uses other functions
Adding treeload other functions, ExtractedOnly mode uses other functions
Adding treeinsert other functions, ExtractedOnly mode uses other functions
Adding tinsert other functions, ExtractedOnly mode uses other functions
Adding treelookup other functions, ExtractedOnly mode uses other functions
Adding treeoutput other functions, ExtractedOnly mode uses other functions
Adding pdictcmp other functions, ExtractedOnly mode uses other functions
Adding mymalloc other functions, ExtractedOnly mode uses other functions
Adding myfree other functions, ExtractedOnly mode uses other functions
Adding xgets other functions, ExtractedOnly mode uses other functions
Adding terminit0 other functions, ExtractedOnly mode uses other functions
Adding terminit1 other functions, ExtractedOnly mode uses other functions
Adding terminit2 other functions, ExtractedOnly mode uses other functions
Adding terminit3 other functions, ExtractedOnly mode uses other functions
Adding terminit4 other functions, ExtractedOnly mode uses other functions
Adding terminit5 other functions, ExtractedOnly mode uses other functions
Adding onstop0 other functions, ExtractedOnly mode uses other functions
Adding shellescape0 other functions, ExtractedOnly mode uses other functions
Adding shellescape1 other functions, ExtractedOnly mode uses other functions
Adding shellescape2 other functions, ExtractedOnly mode uses other functions
Adding shellescape3 other functions, ExtractedOnly mode uses other functions
Adding shellescape4 other functions, ExtractedOnly mode uses other functions
Adding shellescape5 other functions, ExtractedOnly mode uses other functions
Adding main0 other functions, ExtractedOnly mode uses other functions
Adding main1 other functions, ExtractedOnly mode uses other functions
Adding main2 other functions, ExtractedOnly mode uses other functions
Adding main3 other functions, ExtractedOnly mode uses other functions
Adding main4 other functions, ExtractedOnly mode uses other functions
Adding main5 other functions, ExtractedOnly mode uses other functions
Adding main6 other functions, ExtractedOnly mode uses other functions
Adding main7 other functions, ExtractedOnly mode uses other functions
Adding main8 other functions, ExtractedOnly mode uses other functions
Adding main9 other functions, ExtractedOnly mode uses other functions
Adding main10 other functions, ExtractedOnly mode uses other functions
Adding main11 other functions, ExtractedOnly mode uses other functions
Adding main12 other functions, ExtractedOnly mode uses other functions
Adding main13 other functions, ExtractedOnly mode uses other functions
Adding main14 other functions, ExtractedOnly mode uses other functions
Adding main15 other functions, ExtractedOnly mode uses other functions
Adding main16 other functions, ExtractedOnly mode uses other functions
Adding main17 other functions, ExtractedOnly mode uses other functions
Adding main18 other functions, ExtractedOnly mode uses other functions
Adding main19 other functions, ExtractedOnly mode uses other functions
Adding main20 other functions, ExtractedOnly mode uses other functions
Adding main21 other functions, ExtractedOnly mode uses other functions
Adding main22 other functions, ExtractedOnly mode uses other functions
Adding main23 other functions, ExtractedOnly mode uses other functions
Adding main24 other functions, ExtractedOnly mode uses other functions
Adding main25 other functions, ExtractedOnly mode uses other functions
Adding main26 other functions, ExtractedOnly mode uses other functions
Adding main27 other functions, ExtractedOnly mode uses other functions
Adding main28 other functions, ExtractedOnly mode uses other functions
Adding main29 other functions, ExtractedOnly mode uses other functions
Adding main30 other functions, ExtractedOnly mode uses other functions
Adding main31 other functions, ExtractedOnly mode uses other functions
Adding main32 other functions, ExtractedOnly mode uses other functions
Adding main33 other functions, ExtractedOnly mode uses other functions
Adding main34 other functions, ExtractedOnly mode uses other functions
Adding main35 other functions, ExtractedOnly mode uses other functions
Adding main36 other functions, ExtractedOnly mode uses other functions
Adding main37 other functions, ExtractedOnly mode uses other functions
Adding main38 other functions, ExtractedOnly mode uses other functions
Adding main39 other functions, ExtractedOnly mode uses other functions
Adding main40 other functions, ExtractedOnly mode uses other functions
Adding main41 other functions, ExtractedOnly mode uses other functions
Adding main42 other functions, ExtractedOnly mode uses other functions
Adding main43 other functions, ExtractedOnly mode uses other functions
Adding usage0 other functions, ExtractedOnly mode uses other functions
Adding initckch0 other functions, ExtractedOnly mode uses other functions
Adding initckch1 other functions, ExtractedOnly mode uses other functions
Adding initckch2 other functions, ExtractedOnly mode uses other functions
Adding expandmode0 other functions, ExtractedOnly mode uses other functions
Adding expandmode1 other functions, ExtractedOnly mode uses other functions
Adding dofile0 other functions, ExtractedOnly mode uses other functions
Adding dofile1 other functions, ExtractedOnly mode uses other functions
Adding dofile2 other functions, ExtractedOnly mode uses other functions
Adding dofile3 other functions, ExtractedOnly mode uses other functions
Adding update_file0 other functions, ExtractedOnly mode uses other functions
Adding update_file1 other functions, ExtractedOnly mode uses other functions
Adding update_file2 other functions, ExtractedOnly mode uses other functions
Adding update_file3 other functions, ExtractedOnly mode uses other functions
Adding update_file4 other functions, ExtractedOnly mode uses other functions
Adding update_file5 other functions, ExtractedOnly mode uses other functions
Adding givehelp0 other functions, ExtractedOnly mode uses other functions
Adding givehelp1 other functions, ExtractedOnly mode uses other functions
Adding givehelp2 other functions, ExtractedOnly mode uses other functions
Adding checkfile0 other functions, ExtractedOnly mode uses other functions
Adding checkfile1 other functions, ExtractedOnly mode uses other functions
Adding checkfile2 other functions, ExtractedOnly mode uses other functions
Adding checkfile3 other functions, ExtractedOnly mode uses other functions
Adding checkfile4 other functions, ExtractedOnly mode uses other functions
Adding checkfile5 other functions, ExtractedOnly mode uses other functions
Adding checkfile6 other functions, ExtractedOnly mode uses other functions
Adding checkfile7 other functions, ExtractedOnly mode uses other functions
Adding correct0 other functions, ExtractedOnly mode uses other functions
Adding correct1 other functions, ExtractedOnly mode uses other functions
Adding correct2 other functions, ExtractedOnly mode uses other functions
Adding correct3 other functions, ExtractedOnly mode uses other functions
Adding correct4 other functions, ExtractedOnly mode uses other functions
Adding correct5 other functions, ExtractedOnly mode uses other functions
Adding correct6 other functions, ExtractedOnly mode uses other functions
Adding correct7 other functions, ExtractedOnly mode uses other functions
Adding correct8 other functions, ExtractedOnly mode uses other functions
Adding correct9 other functions, ExtractedOnly mode uses other functions
Adding correct10 other functions, ExtractedOnly mode uses other functions
Adding correct11 other functions, ExtractedOnly mode uses other functions
Adding correct12 other functions, ExtractedOnly mode uses other functions
Adding correct13 other functions, ExtractedOnly mode uses other functions
Adding correct14 other functions, ExtractedOnly mode uses other functions
Adding correct15 other functions, ExtractedOnly mode uses other functions
Adding correct16 other functions, ExtractedOnly mode uses other functions
Adding correct17 other functions, ExtractedOnly mode uses other functions
Adding correct18 other functions, ExtractedOnly mode uses other functions
Adding correct19 other functions, ExtractedOnly mode uses other functions
Adding correct20 other functions, ExtractedOnly mode uses other functions
Adding correct21 other functions, ExtractedOnly mode uses other functions
Adding correct22 other functions, ExtractedOnly mode uses other functions
Adding correct23 other functions, ExtractedOnly mode uses other functions
Adding correct24 other functions, ExtractedOnly mode uses other functions
Adding correct25 other functions, ExtractedOnly mode uses other functions
Adding correct26 other functions, ExtractedOnly mode uses other functions
Adding compoundgood0 other functions, ExtractedOnly mode uses other functions
Adding compoundgood1 other functions, ExtractedOnly mode uses other functions
Adding compoundgood2 other functions, ExtractedOnly mode uses other functions
Adding compoundgood3 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities0 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities1 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities2 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities3 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities4 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities5 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities6 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities7 other functions, ExtractedOnly mode uses other functions
Adding makepossibilities8 other functions, ExtractedOnly mode uses other functions
Adding show_line0 other functions, ExtractedOnly mode uses other functions
Adding show_line1 other functions, ExtractedOnly mode uses other functions
Adding show_line2 other functions, ExtractedOnly mode uses other functions
Adding show_line3 other functions, ExtractedOnly mode uses other functions
Adding line_size0 other functions, ExtractedOnly mode uses other functions
Adding my_getline0 other functions, ExtractedOnly mode uses other functions
Adding my_getline1 other functions, ExtractedOnly mode uses other functions
Adding my_getline2 other functions, ExtractedOnly mode uses other functions
Adding my_getline3 other functions, ExtractedOnly mode uses other functions
Adding my_getline4 other functions, ExtractedOnly mode uses other functions
Adding my_getline5 other functions, ExtractedOnly mode uses other functions
Adding my_getline6 other functions, ExtractedOnly mode uses other functions
Adding inserttoken0 other functions, ExtractedOnly mode uses other functions
Adding inserttoken1 other functions, ExtractedOnly mode uses other functions
Adding inserttoken2 other functions, ExtractedOnly mode uses other functions
Adding inserttoken3 other functions, ExtractedOnly mode uses other functions
Adding inserttoken4 other functions, ExtractedOnly mode uses other functions
Adding inserttoken5 other functions, ExtractedOnly mode uses other functions
Adding inserttoken6 other functions, ExtractedOnly mode uses other functions
Adding lookharder0 other functions, ExtractedOnly mode uses other functions
Adding lookharder1 other functions, ExtractedOnly mode uses other functions
Adding lookharder2 other functions, ExtractedOnly mode uses other functions
Adding show_char0 other functions, ExtractedOnly mode uses other functions
Adding show_char1 other functions, ExtractedOnly mode uses other functions
Adding show_char2 other functions, ExtractedOnly mode uses other functions
Adding show_char3 other functions, ExtractedOnly mode uses other functions
Adding show_char4 other functions, ExtractedOnly mode uses other functions
Adding show_char5 other functions, ExtractedOnly mode uses other functions
Adding show_char6 other functions, ExtractedOnly mode uses other functions
Adding show_char7 other functions, ExtractedOnly mode uses other functions
Adding show_char8 other functions, ExtractedOnly mode uses other functions
Adding show_char9 other functions, ExtractedOnly mode uses other functions
Adding show_char10 other functions, ExtractedOnly mode uses other functions
Adding show_char11 other functions, ExtractedOnly mode uses other functions
Adding show_char12 other functions, ExtractedOnly mode uses other functions
Adding show_char13 other functions, ExtractedOnly mode uses other functions
Adding show_char14 other functions, ExtractedOnly mode uses other functions
Adding missingletter0 other functions, ExtractedOnly mode uses other functions
Adding missingletter1 other functions, ExtractedOnly mode uses other functions
Adding missingletter2 other functions, ExtractedOnly mode uses other functions
Adding transposedletter0 other functions, ExtractedOnly mode uses other functions
Adding transposedletter1 other functions, ExtractedOnly mode uses other functions
Adding extraletter0 other functions, ExtractedOnly mode uses other functions
Adding wrongletter0 other functions, ExtractedOnly mode uses other functions
Adding wrongletter1 other functions, ExtractedOnly mode uses other functions
Adding missingspace0 other functions, ExtractedOnly mode uses other functions
Adding missingspace1 other functions, ExtractedOnly mode uses other functions
Adding missingspace2 other functions, ExtractedOnly mode uses other functions
Adding tryveryhard0 other functions, ExtractedOnly mode uses other functions
Adding casecmp0 other functions, ExtractedOnly mode uses other functions
Adding casecmp1 other functions, ExtractedOnly mode uses other functions
Adding casecmp2 other functions, ExtractedOnly mode uses other functions
Adding casecmp3 other functions, ExtractedOnly mode uses other functions
Adding casecmp4 other functions, ExtractedOnly mode uses other functions
Adding casecmp5 other functions, ExtractedOnly mode uses other functions
Adding casecmp6 other functions, ExtractedOnly mode uses other functions
Adding save_cap0 other functions, ExtractedOnly mode uses other functions
Adding save_cap1 other functions, ExtractedOnly mode uses other functions
Adding save_cap2 other functions, ExtractedOnly mode uses other functions
Adding save_cap3 other functions, ExtractedOnly mode uses other functions
Adding save_cap4 other functions, ExtractedOnly mode uses other functions
Adding insert0 other functions, ExtractedOnly mode uses other functions
Adding insert1 other functions, ExtractedOnly mode uses other functions
Adding insert2 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap0 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap1 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap2 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap3 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap4 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap5 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap6 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap7 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap8 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap9 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap10 other functions, ExtractedOnly mode uses other functions
Adding save_root_cap11 other functions, ExtractedOnly mode uses other functions
Adding ins_cap0 other functions, ExtractedOnly mode uses other functions
Adding ins_root_cap0 other functions, ExtractedOnly mode uses other functions
Adding askmode0 other functions, ExtractedOnly mode uses other functions
Adding askmode1 other functions, ExtractedOnly mode uses other functions
Adding askmode2 other functions, ExtractedOnly mode uses other functions
Adding askmode3 other functions, ExtractedOnly mode uses other functions
Adding askmode4 other functions, ExtractedOnly mode uses other functions
Adding askmode5 other functions, ExtractedOnly mode uses other functions
Adding askmode6 other functions, ExtractedOnly mode uses other functions
Adding askmode7 other functions, ExtractedOnly mode uses other functions
Adding askmode8 other functions, ExtractedOnly mode uses other functions
Adding askmode9 other functions, ExtractedOnly mode uses other functions
Adding askmode10 other functions, ExtractedOnly mode uses other functions
Adding copyout0 other functions, ExtractedOnly mode uses other functions
Adding copyout1 other functions, ExtractedOnly mode uses other functions
Adding skipoverword0 other functions, ExtractedOnly mode uses other functions
Adding skipoverword1 other functions, ExtractedOnly mode uses other functions
Adding skipoverword2 other functions, ExtractedOnly mode uses other functions
Adding skipoverword3 other functions, ExtractedOnly mode uses other functions
Adding skipoverword4 other functions, ExtractedOnly mode uses other functions
Adding checkline0 other functions, ExtractedOnly mode uses other functions
Adding checkline1 other functions, ExtractedOnly mode uses other functions
Adding checkline2 other functions, ExtractedOnly mode uses other functions
Adding checkline3 other functions, ExtractedOnly mode uses other functions
Adding checkline4 other functions, ExtractedOnly mode uses other functions
Adding checkline5 other functions, ExtractedOnly mode uses other functions
Adding checkline6 other functions, ExtractedOnly mode uses other functions
Adding checkline7 other functions, ExtractedOnly mode uses other functions
Adding checkline8 other functions, ExtractedOnly mode uses other functions
Adding checkline9 other functions, ExtractedOnly mode uses other functions
Adding checkline10 other functions, ExtractedOnly mode uses other functions
Adding checkline11 other functions, ExtractedOnly mode uses other functions
Adding checkline12 other functions, ExtractedOnly mode uses other functions
Adding checkline13 other functions, ExtractedOnly mode uses other functions
Adding checkline14 other functions, ExtractedOnly mode uses other functions
Adding checkline15 other functions, ExtractedOnly mode uses other functions
Adding checkline16 other functions, ExtractedOnly mode uses other functions
Adding checkline17 other functions, ExtractedOnly mode uses other functions
Adding checkline18 other functions, ExtractedOnly mode uses other functions
Adding checkline19 other functions, ExtractedOnly mode uses other functions
Adding checkline20 other functions, ExtractedOnly mode uses other functions
Adding skiptoword0 other functions, ExtractedOnly mode uses other functions
Adding skiptoword1 other functions, ExtractedOnly mode uses other functions
Adding skiptoword2 other functions, ExtractedOnly mode uses other functions
Adding skiptoword3 other functions, ExtractedOnly mode uses other functions
Adding skiptoword4 other functions, ExtractedOnly mode uses other functions
Adding skiptoword5 other functions, ExtractedOnly mode uses other functions
Adding skiptoword6 other functions, ExtractedOnly mode uses other functions
Adding skiptoword7 other functions, ExtractedOnly mode uses other functions
Adding skiptoword8 other functions, ExtractedOnly mode uses other functions
Adding skiptoword9 other functions, ExtractedOnly mode uses other functions
Adding skiptoword10 other functions, ExtractedOnly mode uses other functions
Adding skiptoword11 other functions, ExtractedOnly mode uses other functions
Adding skiptoword12 other functions, ExtractedOnly mode uses other functions
Adding skiptoword13 other functions, ExtractedOnly mode uses other functions
Adding skiptoword14 other functions, ExtractedOnly mode uses other functions
Adding skiptoword15 other functions, ExtractedOnly mode uses other functions
Adding skiptoword16 other functions, ExtractedOnly mode uses other functions
Adding skiptoword17 other functions, ExtractedOnly mode uses other functions
Adding skiptoword18 other functions, ExtractedOnly mode uses other functions
Adding skiptoword19 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check0 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check1 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check2 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_check3 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check0 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check1 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check2 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check3 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_check4 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_end0 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_end1 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_end2 other functions, ExtractedOnly mode uses other functions
Adding TeX_strncmp0 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_parens0 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin0 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin1 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin2 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin3 other functions, ExtractedOnly mode uses other functions
Adding TeX_math_begin4 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check0 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check1 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check2 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_check3 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_begin0 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_begin1 other functions, ExtractedOnly mode uses other functions
Adding TeX_LR_begin2 other functions, ExtractedOnly mode uses other functions
Adding TeX_open_paren0 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args0 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args1 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args2 other functions, ExtractedOnly mode uses other functions
Adding TeX_skip_args3 other functions, ExtractedOnly mode uses other functions
Adding dumpmode0 other functions, ExtractedOnly mode uses other functions
Adding dumpmode1 other functions, ExtractedOnly mode uses other functions
Adding dumpmode2 other functions, ExtractedOnly mode uses other functions
Adding dumpmode3 other functions, ExtractedOnly mode uses other functions
Adding dumpmode4 other functions, ExtractedOnly mode uses other functions
Adding tbldump0 other functions, ExtractedOnly mode uses other functions
Adding entdump0 other functions, ExtractedOnly mode uses other functions
Adding entdump1 other functions, ExtractedOnly mode uses other functions
Adding entdump2 other functions, ExtractedOnly mode uses other functions
Adding entdump3 other functions, ExtractedOnly mode uses other functions
Adding entdump4 other functions, ExtractedOnly mode uses other functions
Adding setdump0 other functions, ExtractedOnly mode uses other functions
Adding setdump1 other functions, ExtractedOnly mode uses other functions
Adding setdump2 other functions, ExtractedOnly mode uses other functions
Adding setdump3 other functions, ExtractedOnly mode uses other functions
Adding setdump4 other functions, ExtractedOnly mode uses other functions
Adding subsetdump0 other functions, ExtractedOnly mode uses other functions
Adding subsetdump1 other functions, ExtractedOnly mode uses other functions
Adding subsetdump2 other functions, ExtractedOnly mode uses other functions
Adding subsetdump3 other functions, ExtractedOnly mode uses other functions
Adding subsetdump4 other functions, ExtractedOnly mode uses other functions
Adding subsetdump5 other functions, ExtractedOnly mode uses other functions
Adding good0 other functions, ExtractedOnly mode uses other functions
Adding good1 other functions, ExtractedOnly mode uses other functions
Adding good2 other functions, ExtractedOnly mode uses other functions
Adding good3 other functions, ExtractedOnly mode uses other functions
Adding good4 other functions, ExtractedOnly mode uses other functions
Adding cap_ok0 other functions, ExtractedOnly mode uses other functions
Adding cap_ok1 other functions, ExtractedOnly mode uses other functions
Adding cap_ok2 other functions, ExtractedOnly mode uses other functions
Adding cap_ok3 other functions, ExtractedOnly mode uses other functions
Adding cap_ok4 other functions, ExtractedOnly mode uses other functions
Adding cap_ok5 other functions, ExtractedOnly mode uses other functions
Adding cap_ok6 other functions, ExtractedOnly mode uses other functions
Adding cap_ok7 other functions, ExtractedOnly mode uses other functions
Adding cap_ok8 other functions, ExtractedOnly mode uses other functions
Adding cap_ok9 other functions, ExtractedOnly mode uses other functions
Adding cap_ok10 other functions, ExtractedOnly mode uses other functions
Adding flagpr0 other functions, ExtractedOnly mode uses other functions
Adding flagpr1 other functions, ExtractedOnly mode uses other functions
Adding flagpr2 other functions, ExtractedOnly mode uses other functions
Adding flagpr3 other functions, ExtractedOnly mode uses other functions
Adding flagpr4 other functions, ExtractedOnly mode uses other functions
Adding flagpr5 other functions, ExtractedOnly mode uses other functions
Adding flagpr6 other functions, ExtractedOnly mode uses other functions
Adding flagpr7 other functions, ExtractedOnly mode uses other functions
Adding flagpr8 other functions, ExtractedOnly mode uses other functions
Adding flagpr9 other functions, ExtractedOnly mode uses other functions
Adding flagpr10 other functions, ExtractedOnly mode uses other functions
Adding flagpr11 other functions, ExtractedOnly mode uses other functions
Adding flagpr12 other functions, ExtractedOnly mode uses other functions
Adding flagpr13 other functions, ExtractedOnly mode uses other functions
Adding flagpr14 other functions, ExtractedOnly mode uses other functions
Adding flagpr15 other functions, ExtractedOnly mode uses other functions
Adding flagpr16 other functions, ExtractedOnly mode uses other functions
Adding linit0 other functions, ExtractedOnly mode uses other functions
Adding linit1 other functions, ExtractedOnly mode uses other functions
Adding linit2 other functions, ExtractedOnly mode uses other functions
Adding linit3 other functions, ExtractedOnly mode uses other functions
Adding linit4 other functions, ExtractedOnly mode uses other functions
Adding linit5 other functions, ExtractedOnly mode uses other functions
Adding linit6 other functions, ExtractedOnly mode uses other functions
Adding linit7 other functions, ExtractedOnly mode uses other functions
Adding linit8 other functions, ExtractedOnly mode uses other functions
Adding linit9 other functions, ExtractedOnly mode uses other functions
Adding linit10 other functions, ExtractedOnly mode uses other functions
Adding linit11 other functions, ExtractedOnly mode uses other functions
Adding linit12 other functions, ExtractedOnly mode uses other functions
Adding linit13 other functions, ExtractedOnly mode uses other functions
Adding linit14 other functions, ExtractedOnly mode uses other functions
Adding linit15 other functions, ExtractedOnly mode uses other functions
Adding linit16 other functions, ExtractedOnly mode uses other functions
Adding linit17 other functions, ExtractedOnly mode uses other functions
Adding linit18 other functions, ExtractedOnly mode uses other functions
Adding linit19 other functions, ExtractedOnly mode uses other functions
Adding linit20 other functions, ExtractedOnly mode uses other functions
Adding linit21 other functions, ExtractedOnly mode uses other functions
Adding linit22 other functions, ExtractedOnly mode uses other functions
Adding linit23 other functions, ExtractedOnly mode uses other functions
Adding linit24 other functions, ExtractedOnly mode uses other functions
Adding linit25 other functions, ExtractedOnly mode uses other functions
Adding linit26 other functions, ExtractedOnly mode uses other functions
Adding linit27 other functions, ExtractedOnly mode uses other functions
Adding linit28 other functions, ExtractedOnly mode uses other functions
Adding linit29 other functions, ExtractedOnly mode uses other functions
Adding linit30 other functions, ExtractedOnly mode uses other functions
Adding linit31 other functions, ExtractedOnly mode uses other functions
Adding linit32 other functions, ExtractedOnly mode uses other functions
Adding linit33 other functions, ExtractedOnly mode uses other functions
Adding linit34 other functions, ExtractedOnly mode uses other functions
Adding linit35 other functions, ExtractedOnly mode uses other functions
Adding linit36 other functions, ExtractedOnly mode uses other functions
Adding linit37 other functions, ExtractedOnly mode uses other functions
Adding linit38 other functions, ExtractedOnly mode uses other functions
Adding linit39 other functions, ExtractedOnly mode uses other functions
Adding linit40 other functions, ExtractedOnly mode uses other functions
Adding linit41 other functions, ExtractedOnly mode uses other functions
Adding linit42 other functions, ExtractedOnly mode uses other functions
Adding linit43 other functions, ExtractedOnly mode uses other functions
Adding linit44 other functions, ExtractedOnly mode uses other functions
Adding linit45 other functions, ExtractedOnly mode uses other functions
Adding linit46 other functions, ExtractedOnly mode uses other functions
Adding linit47 other functions, ExtractedOnly mode uses other functions
Adding linit48 other functions, ExtractedOnly mode uses other functions
Adding linit49 other functions, ExtractedOnly mode uses other functions
Adding lookup0 other functions, ExtractedOnly mode uses other functions
Adding lookup1 other functions, ExtractedOnly mode uses other functions
Adding lookup2 other functions, ExtractedOnly mode uses other functions
Adding lookup3 other functions, ExtractedOnly mode uses other functions
Adding hash0 other functions, ExtractedOnly mode uses other functions
Adding hash1 other functions, ExtractedOnly mode uses other functions
Adding makedent0 other functions, ExtractedOnly mode uses other functions
Adding makedent1 other functions, ExtractedOnly mode uses other functions
Adding makedent2 other functions, ExtractedOnly mode uses other functions
Adding makedent3 other functions, ExtractedOnly mode uses other functions
Adding makedent4 other functions, ExtractedOnly mode uses other functions
Adding makedent5 other functions, ExtractedOnly mode uses other functions
Adding makedent6 other functions, ExtractedOnly mode uses other functions
Adding makedent7 other functions, ExtractedOnly mode uses other functions
Adding makedent8 other functions, ExtractedOnly mode uses other functions
Adding makedent9 other functions, ExtractedOnly mode uses other functions
Adding makedent10 other functions, ExtractedOnly mode uses other functions
Adding strtoichar0 other functions, ExtractedOnly mode uses other functions
Adding strtoichar1 other functions, ExtractedOnly mode uses other functions
Adding strtoichar2 other functions, ExtractedOnly mode uses other functions
Adding strtoichar3 other functions, ExtractedOnly mode uses other functions
Adding ichartostr0 other functions, ExtractedOnly mode uses other functions
Adding ichartostr1 other functions, ExtractedOnly mode uses other functions
Adding ichartostr2 other functions, ExtractedOnly mode uses other functions
Adding ichartostr3 other functions, ExtractedOnly mode uses other functions
Adding ichartostr4 other functions, ExtractedOnly mode uses other functions
Adding whatcap0 other functions, ExtractedOnly mode uses other functions
Adding whatcap1 other functions, ExtractedOnly mode uses other functions
Adding whatcap2 other functions, ExtractedOnly mode uses other functions
Adding whatcap3 other functions, ExtractedOnly mode uses other functions
Adding whatcap4 other functions, ExtractedOnly mode uses other functions
Adding chupcase0 other functions, ExtractedOnly mode uses other functions
Adding strtosichar0 other functions, ExtractedOnly mode uses other functions
Adding upcase0 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen0 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen1 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen2 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen3 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen4 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen5 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen6 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen7 other functions, ExtractedOnly mode uses other functions
Adding stringcharlen8 other functions, ExtractedOnly mode uses other functions
Adding addvheader0 other functions, ExtractedOnly mode uses other functions
Adding addvheader1 other functions, ExtractedOnly mode uses other functions
Adding addvheader2 other functions, ExtractedOnly mode uses other functions
Adding addvheader3 other functions, ExtractedOnly mode uses other functions
Adding addvheader4 other functions, ExtractedOnly mode uses other functions
Adding combinecaps0 other functions, ExtractedOnly mode uses other functions
Adding combinecaps1 other functions, ExtractedOnly mode uses other functions
Adding combinecaps2 other functions, ExtractedOnly mode uses other functions
Adding combinecaps3 other functions, ExtractedOnly mode uses other functions
Adding combine_two_entries0 other functions, ExtractedOnly mode uses other functions
Adding combine_two_entries1 other functions, ExtractedOnly mode uses other functions
Adding combine_two_entries2 other functions, ExtractedOnly mode uses other functions
Adding forcevheader0 other functions, ExtractedOnly mode uses other functions
Adding combineaffixes0 other functions, ExtractedOnly mode uses other functions
Adding lowcase0 other functions, ExtractedOnly mode uses other functions
Adding toutent0 other functions, ExtractedOnly mode uses other functions
Adding toutent1 other functions, ExtractedOnly mode uses other functions
Adding toutent2 other functions, ExtractedOnly mode uses other functions
Adding ichartosstr0 other functions, ExtractedOnly mode uses other functions
Adding toutword0 other functions, ExtractedOnly mode uses other functions
Adding toutword1 other functions, ExtractedOnly mode uses other functions
Adding toutword2 other functions, ExtractedOnly mode uses other functions
Adding flagout0 other functions, ExtractedOnly mode uses other functions
Adding flagout1 other functions, ExtractedOnly mode uses other functions
Adding printichar0 other functions, ExtractedOnly mode uses other functions
Adding printichar1 other functions, ExtractedOnly mode uses other functions
Adding findfiletype0 other functions, ExtractedOnly mode uses other functions
Adding findfiletype1 other functions, ExtractedOnly mode uses other functions
Adding findfiletype2 other functions, ExtractedOnly mode uses other functions
Adding findfiletype3 other functions, ExtractedOnly mode uses other functions
Adding findfiletype4 other functions, ExtractedOnly mode uses other functions
Adding findfiletype5 other functions, ExtractedOnly mode uses other functions
Adding findfiletype6 other functions, ExtractedOnly mode uses other functions
Adding findfiletype7 other functions, ExtractedOnly mode uses other functions
Adding chk_aff0 other functions, ExtractedOnly mode uses other functions
Adding chk_aff1 other functions, ExtractedOnly mode uses other functions
Adding chk_aff2 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk0 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk1 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk2 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk3 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk4 other functions, ExtractedOnly mode uses other functions
Adding pfx_list_chk5 other functions, ExtractedOnly mode uses other functions
Adding chk_suf0 other functions, ExtractedOnly mode uses other functions
Adding chk_suf1 other functions, ExtractedOnly mode uses other functions
Adding chk_suf2 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk0 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk1 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk2 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk3 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk4 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk5 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk6 other functions, ExtractedOnly mode uses other functions
Adding suf_list_chk7 other functions, ExtractedOnly mode uses other functions
Adding expand_pre0 other functions, ExtractedOnly mode uses other functions
Adding expand_pre1 other functions, ExtractedOnly mode uses other functions
Adding expand_pre2 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion0 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion1 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion2 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion3 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion4 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion5 other functions, ExtractedOnly mode uses other functions
Adding pr_pre_expansion6 other functions, ExtractedOnly mode uses other functions
Adding forcelc0 other functions, ExtractedOnly mode uses other functions
Adding forcelc1 other functions, ExtractedOnly mode uses other functions
Adding expand_suf0 other functions, ExtractedOnly mode uses other functions
Adding expand_suf1 other functions, ExtractedOnly mode uses other functions
Adding expand_suf2 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion0 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion1 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion2 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion3 other functions, ExtractedOnly mode uses other functions
Adding pr_suf_expansion4 other functions, ExtractedOnly mode uses other functions
Adding treeinit0 other functions, ExtractedOnly mode uses other functions
Adding treeinit1 other functions, ExtractedOnly mode uses other functions
Adding treeinit2 other functions, ExtractedOnly mode uses other functions
Adding treeinit3 other functions, ExtractedOnly mode uses other functions
Adding treeinit4 other functions, ExtractedOnly mode uses other functions
Adding treeinit5 other functions, ExtractedOnly mode uses other functions
Adding treeinit6 other functions, ExtractedOnly mode uses other functions
Adding treeinit7 other functions, ExtractedOnly mode uses other functions
Adding treeinit8 other functions, ExtractedOnly mode uses other functions
Adding trydict0 other functions, ExtractedOnly mode uses other functions
Adding trydict1 other functions, ExtractedOnly mode uses other functions
Adding trydict2 other functions, ExtractedOnly mode uses other functions
Adding treeinsert0 other functions, ExtractedOnly mode uses other functions
Adding treeinsert1 other functions, ExtractedOnly mode uses other functions
Adding treeinsert2 other functions, ExtractedOnly mode uses other functions
Adding treeinsert3 other functions, ExtractedOnly mode uses other functions
Adding treeinsert4 other functions, ExtractedOnly mode uses other functions
Adding treeinsert5 other functions, ExtractedOnly mode uses other functions
Adding treeinsert6 other functions, ExtractedOnly mode uses other functions
Adding treeinsert7 other functions, ExtractedOnly mode uses other functions
Adding treeinsert8 other functions, ExtractedOnly mode uses other functions
Adding treeinsert9 other functions, ExtractedOnly mode uses other functions
Adding treeinsert10 other functions, ExtractedOnly mode uses other functions
Adding treeinsert11 other functions, ExtractedOnly mode uses other functions
Adding treeinsert12 other functions, ExtractedOnly mode uses other functions
Adding treeinsert13 other functions, ExtractedOnly mode uses other functions
Adding tinsert0 other functions, ExtractedOnly mode uses other functions
Adding tinsert1 other functions, ExtractedOnly mode uses other functions
Adding tinsert2 other functions, ExtractedOnly mode uses other functions
Adding tinsert3 other functions, ExtractedOnly mode uses other functions
Adding treelookup0 other functions, ExtractedOnly mode uses other functions
Adding treelookup1 other functions, ExtractedOnly mode uses other functions
Adding treelookup2 other functions, ExtractedOnly mode uses other functions
Adding treeoutput0 other functions, ExtractedOnly mode uses other functions
Adding treeoutput1 other functions, ExtractedOnly mode uses other functions
Adding treeoutput2 other functions, ExtractedOnly mode uses other functions
Adding treeoutput3 other functions, ExtractedOnly mode uses other functions
Adding treeoutput4 other functions, ExtractedOnly mode uses other functions
Adding treeoutput5 other functions, ExtractedOnly mode uses other functions
Adding treeoutput6 other functions, ExtractedOnly mode uses other functions
Adding treeoutput7 other functions, ExtractedOnly mode uses other functions
Adding treeoutput8 other functions, ExtractedOnly mode uses other functions
Adding treeoutput9 other functions, ExtractedOnly mode uses other functions
Adding treeoutput10 other functions, ExtractedOnly mode uses other functions
Adding treeoutput11 other functions, ExtractedOnly mode uses other functions
Adding treeoutput12 other functions, ExtractedOnly mode uses other functions
Adding treeoutput13 other functions, ExtractedOnly mode uses other functions
Adding treeoutput14 other functions, ExtractedOnly mode uses other functions
Adding treeoutput15 other functions, ExtractedOnly mode uses other functions
Adding treeoutput16 other functions, ExtractedOnly mode uses other functions
Adding treeoutput17 other functions, ExtractedOnly mode uses other functions
Adding treeoutput18 other functions, ExtractedOnly mode uses other functions
Adding treeoutput19 other functions, ExtractedOnly mode uses other functions
Adding treeoutput20 other functions, ExtractedOnly mode uses other functions
Adding treeoutput21 other functions, ExtractedOnly mode uses other functions
Adding treeoutput22 other functions, ExtractedOnly mode uses other functions
Adding treeoutput23 other functions, ExtractedOnly mode uses other functions
Adding treeoutput24 other functions, ExtractedOnly mode uses other functions
Adding treeoutput25 other functions, ExtractedOnly mode uses other functions
Adding treeoutput26 other functions, ExtractedOnly mode uses other functions
Adding treeoutput27 other functions, ExtractedOnly mode uses other functions
Adding treeoutput28 other functions, ExtractedOnly mode uses other functions
Adding treeoutput29 other functions, ExtractedOnly mode uses other functions
Adding treeoutput30 other functions, ExtractedOnly mode uses other functions
Adding treeoutput31 other functions, ExtractedOnly mode uses other functions
Adding treeoutput32 other functions, ExtractedOnly mode uses other functions
Adding myfree0 other functions, ExtractedOnly mode uses other functions
Adding xgets0 other functions, ExtractedOnly mode uses other functions
Adding xgets1 other functions, ExtractedOnly mode uses other functions
Adding xgets2 other functions, ExtractedOnly mode uses other functions
Adding xgets3 other functions, ExtractedOnly mode uses other functions
Adding xgets4 other functions, ExtractedOnly mode uses other functions
Sensitive functions:0 other functions:696
DesiredConnectivity is :1
Other functions to be fed to the network of checkers
cap_ok7
findfiletype4
linit16
entdump3
correct26
skiptoword11
makedent
compoundgood
TeX_math_check3
makedent3
issubset
shellescape4
cap_ok9
TeX_strncmp
treeoutput1
treeoutput8
dofile0
treeoutput19
linit39
treeinit2
main34
treeinit0
expandmode0
setdump3
suf_list_chk6
shellescape1
tinsert3
suf_list_chk5
dofile1
setdump4
insert1
TeX_math_begin3
show_line0
main41
strtoichar0
addvheader
ins_cap0
expand_pre1
linit27
linit20
checkfile0
main7
entdump4
TeX_math_end
treeoutput12
askmode5
printichar1
checkfile3
treeinsert
main32
lookharder
askmode6
treeoutput23
linit14
pr_pre_expansion3
terminit0
pr_pre_expansion
stringcharlen1
xgets
toutent0
TeX_LR_check0
pdictcmp
combineaffixes
treelookup2
good2
insert2
chupcase0
subsetdump0
main14
save_root_cap9
initckch2
usage0
treelookup1
main27
transposedletter0
save_cap4
my_getline
main39
chk_aff2
missingspace1
main20
lookup1
update_file5
linit17
linit49
checkline1
upcase0
correct16
flagout
my_getline6
checkfile5
ichartostr4
suf_list_chk7
dofile
treeoutput13
treeinsert4
askmode
checkfile6
linit13
skiptoword12
pfx_list_chk2
tinsert2
copyout1
treeinsert13
askmode3
show_char14
missingletter2
TeX_strncmp0
combine_two_entries
chk_aff0
linit41
xgets1
checkline19
treeoutput18
linit40
linit2
checkfile7
compoundgood1
linit47
main17
main4
givehelp2
toutent1
expand_suf1
pr_pre_expansion2
subsetdump2
skipoverword
entdump2
treeoutput9
main37
checkline6
checkline3
mymalloc
strtosichar
pr_pre_expansion1
entdump
whatcap3
upcase
main10
toutword2
update_file2
pr_suf_expansion
skiptoword2
expand_suf2
pfx_list_chk
chk_aff
treeinit7
main29
correct1
treeoutput15
main43
flagout1
entdump0
expandmode1
findfiletype5
TeX_skip_args3
makepossibilities3
inserttoken3
flagpr9
checkline5
forcelc0
checkline20
flagpr15
lowcase0
askmode0
TeX_LR_check3
cap_ok10
transposedletter
show_char10
TeX_math_check1
skipoverword4
TeX_skip_check3
skipoverword1
chk_suf0
ichartostr0
correct11
linit32
save_root_cap
stringcharlen5
askmode10
linit22
main40
skiptoword0
save_root_cap8
inverse
askmode2
linit45
correct21
skiptoword9
save_root_cap0
xgets4
transposedletter1
TeX_math_begin2
subsetdump5
casecmp
linit3
lookharder0
suf_list_chk2
whatcap0
treeinsert3
stringcharlen3
combinecaps1
subsetdump4
save_root_cap5
givehelp0
TeX_LR_begin2
pfx_list_chk5
treeinit6
save_root_cap1
main21
save_root_cap3
linit9
main38
my_getline2
onstop0
addvheader3
save_root_cap11
TeX_skip_args0
dumpmode3
terminit3
printichar0
TeX_LR_check4
askmode4
main35
combine_two_entries0
treelookup0
done
main15
save_root_cap4
checkline11
makedent8
treeoutput11
strtoichar1
expand_suf0
skiptoword13
casecmp3
ichartostr1
forcevheader0
flagpr4
skiptoword6
linit28
save_cap1
line_size0
expand_pre
TeX_skip_parens
linit34
strtoichar3
inserttoken1
findfiletype7
cap_ok1
flagpr13
checkline14
dumpmode0
compoundgood0
combinecaps3
missingletter
treeoutput16
printichar
makedent6
main13
main5
askmode9
chk_suf
update_file1
correct15
findfiletype0
combineaffixes0
TeX_LR_check2
show_char11
show_char8
pr_suf_expansion0
makedent9
missingletter0
trydict0
flagpr11
main3
flagpr10
pr_suf_expansion4
show_char4
TeX_skip_check
stringcharlen0
linit42
main2
missingspace2
findfiletype3
linit18
TeX_math_end0
dumpmode2
tbldump
correct23
TeX_skip_parens0
pr_suf_expansion1
terminit
TeX_skip_check2
treeoutput27
casecmp2
main31
linit
givehelp
cap_ok0
ichartosstr0
treeinsert7
correct20
pr_pre_expansion6
posscmp
TeX_math_check2
TeX_skip_check1
makedent4
main33
linit44
whatcap
main1
linit11
skiptoword19
show_char5
expand_pre2
stringcharlen7
makepossibilities4
save_cap0
makedent1
subsetdump
setdump1
initckch
linit8
terminit4
erase
linit43
treeinit1
checkline18
linit21
linit48
linit36
tbldump0
treelookup
onstop
correct0
combinecaps0
linit37
lookup3
xgets0
main9
treeoutput0
treeoutput4
show_char2
main0
main24
toutword
treeoutput28
save_root_cap6
missingspace
treeinsert11
skiptoword4
checkfile1
linit7
wrongletter0
update_file3
show_char3
good4
myfree0
correct10
correct3
show_char
ichartostr
main36
show_line2
TeX_skip_args
trydict
save_root_cap10
copyout0
linit35
treeoutput2
treeinsert12
treeinit4
shellescape
makedent5
linit38
insert
linit33
lookup0
suf_list_chk4
show_line
toutword0
TeX_LR_check1
flagpr16
save_cap3
strtoichar
addvheader2
findfiletype6
cap_ok
update_file4
checkline0
stringcharlen6
show_line3
checkfile2
ichartostr2
treeoutput17
TeX_LR_begin
checkline8
show_char6
xgets3
checkline10
TeX_skip_args1
treeoutput24
TeX_math_end2
makedent10
wrongletter1
my_getline4
flagout0
makepossibilities2
treeload
makepossibilities8
treeinsert6
copyout
skiptoword3
treeoutput31
linit5
main6
addvheader0
acoversb
show_char9
checkline9
show_char13
save_cap
skipoverword3
main42
shellescape5
dofile3
correct17
pr_pre_expansion4
cap_ok5
checkline15
my_getline0
main22
pr_pre_expansion5
suf_list_chk1
suf_list_chk
flagpr7
main23
forcelc1
combinecaps
setdump0
expandmode
checkline16
correct5
show_line1
shellescape3
treeinsert9
treeoutput5
treeoutput10
skiptoword
askmode8
ichartosstr
show_char12
correct24
terminit1
toutent2
show_char0
stringcharlen2
missingspace0
casecmp5
findfiletype2
addvheader1
skiptoword18
checkline
treeoutput7
save_root_cap2
makepossibilities5
pfx_list_chk0
treeoutput20
flagpr6
linit25
makedent2
treeinit3
TeX_LR_begin0
main18
entryhasaffixes
line_size
casecmp4
main28
stringcharlen8
inserttoken5
suf_list_chk3
skiptoword16
compoundgood3
inserttoken2
treeoutput22
hash1
flagpr
good3
treeoutput6
update_file
findfiletype
chk_suf2
toutword1
correct19
linit4
shellescape0
dumpmode4
suf_list_chk0
treeoutput32
givehelp1
move
whatcap1
linit6
linit1
correct8
flagpr8
TeX_math_end1
lookharder2
cap_ok4
treeinit
TeX_math_begin4
tryveryhard
wrongletter
strtoichar2
skiptoword5
dumpmode
treeoutput21
treeinit5
addvheader4
backup
lookup
show_char1
TeX_math_begin
makepossibilities
setdump
correct22
treeinsert10
casecmp6
cap_ok6
wrongcapital
toutent
setdump2
myfree
correct18
tinsert1
main19
main26
TeX_math_begin0
TeX_math_check
TeX_skip_args2
casecmp1
treeinsert1
casecmp0
makepossibilities6
TeX_LR_begin1
initckch0
terminit2
main8
main16
tinsert
cap_ok8
lowcase
flagpr0
treeinsert2
skiptoword15
correct9
pfx_list_chk1
flagpr1
ins_root_cap
extraletter
save_cap2
ins_root_cap0
dumpmode1
pr_pre_expansion0
linit24
treeoutput3
linit30
skiptoword10
correct6
shellescape2
treeoutput29
correct
normal
good0
combine_two_entries2
forcelc
combine_two_entries1
skiptoword8
strtosichar0
TeX_math_begin1
inserttoken4
stringcharlen
makedent0
ichartostr3
correct25
extraletter0
skiptoword7
flagpr3
main
checkline2
whatcap4
linit19
askmode1
subsetdump1
correct2
makepossibilities1
flagpr14
my_getline5
correct12
main11
treeinsert8
lookup2
chupcase
TeX_skip_check0
pfx_list_chk4
hash
chk_aff1
pr_suf_expansion3
my_getline1
linit12
skiptoword17
show_char7
chk_suf1
checkline17
tinsert0
skiptoword1
linit10
treeoutput14
stop
checkfile
insert0
findfiletype1
TeX_open_paren
subsetdump3
flagpr2
main30
trydict2
expand_suf
linit29
makepossibilities7
forcevheader
treeoutput30
my_getline3
correct14
treeoutput26
dofile2
flagpr12
linit15
skiptoword14
treeinsert5
good
tryveryhard0
combinecaps2
makedent7
linit0
main12
makepossibilities0
missingletter1
compoundgood2
treeinsert0
pr_suf_expansion2
skipoverword2
TeX_open_paren0
initckch1
terminit5
hash0
update_file0
linit26
treeoutput
linit31
usage
inserttoken6
checkline13
expand_pre0
flagpr5
TeX_LR_check
main25
stringcharlen4
skipoverword0
checkline7
cap_ok3
checkline4
trydict1
checkline12
linit46
save_root_cap7
xgets2
whatcap2
ins_cap
inserttoken0
linit23
correct4
TeX_math_check0
cap_ok2
inserttoken
correct7
treeoutput25
lookharder1
entdump1
pfx_list_chk3
treeinit8
correct13
checkfile4
askmode7
good1
***
Sensitive functions to be fed to the network of checkers
***
Sensitive functions only checked:0
DAGCheckersNetwork::getReverseTopologicalSort freed visited
Constructed the network of checkers!
Sensitive functions are never checkers as SensitiveOnlyChecked is set to:0
Dumping checkers network info
{
    "allCheckees": [],
    "topologicalsort": []
}
SC stats is requested, dumping stat file...
{
    "avgConnectivity": -nan.0,
    "desiredConnectivity": 1,
    "numberOfGuardInstructions": 0,
    "numberOfGuards": 0,
    "numberOfProtectedFunctions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveInstructions": 0,
    "stdConnectivity": -nan.0
}
Recieved marked functions 0
ERR. processed 696 function, while filter count is 348
Functions called in loop
Function call numbers
main5 -- 1
main0 -- 1
main -- 0
Insert hash computation
Pointer Subgraph is broken!
Invalid number of operands for PSNodeType::PHI with ID 14317
  - operands: []
No reaching definition for: @stdout = external global %struct._IO_FILE*, align 8 off: 0
No reaching definition for: @stderr = external global %struct._IO_FILE*, align 8 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
DEF-USE: no information for: pdictcmp
DEF-USE: no information for: onstop
DEF-USE: no information for: done
No reaching definition for:   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %cp.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %p.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %6 = alloca [8192 x i8], align 16, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 in:   store i8* %incdec.ptr16, i8** %q, align 8, !control_dep_instr !7, !data_dep_instr !8 off: 18446744073709551615
No reaching definition for:   %ew = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %ew.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %helpout = alloca %struct._IO_FILE*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %helpout.el = alloca %struct._IO_FILE*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca %struct.dent*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca %struct.dent*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %p.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %ichar = alloca i8, align 1, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %ichar.el = alloca i8, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
DEF-USE: no information for: posscmp
No reaching definition for:   %realword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %realword.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %skip_ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %skip_ch.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
IntToPtr with constant:   <badref> = inttoptr i64 1 to void (i32)*
No reaching definition for: @stdin = external global %struct._IO_FILE*, align 8 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i8*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %retval.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %nextchar = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %nextchar.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %entry1.el = alloca %struct.flagent*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %dp.el = alloca %struct.dent*, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 in:   %i.el = alloca i32, !input_dep_instr !7, !control_dep_instr !8, !data_dep_instr !9 off: 0
No reaching definition for:   %call57 = call noalias i8* @calloc(i64 1, i64 24) #8, !control_dep_instr !7, !data_indep_instr !10, !global_dep_instr !9 in:   store %struct.dent* null, %struct.dent** %5, align 8, !control_dep_instr !8, !input_indep_instr !11, !data_indep_instr !12 off: 16
No tags were supplied to be skipped! 
'guard' metadata was found in the input bitcode
Recieved marked functions 0
Recieved filter functions 348
 Skipping function per FilterFunctionPass:erase
Collecting defining blocks for move
 Skipping function per FilterFunctionPass:inverse
 Skipping function per FilterFunctionPass:normal
Collecting defining blocks for backup
 Skipping function per FilterFunctionPass:terminit
 Skipping function per FilterFunctionPass:done
Collecting defining blocks for onstop
Collecting defining blocks for stop
 Skipping function per FilterFunctionPass:shellescape
 Skipping function per FilterFunctionPass:main
 Skipping function per FilterFunctionPass:usage
Collecting defining blocks for initckch
 Skipping function per FilterFunctionPass:expandmode
Collecting defining blocks for dofile
 Skipping function per FilterFunctionPass:update_file
Collecting defining blocks for givehelp
 Skipping function per FilterFunctionPass:checkfile
Collecting defining blocks for correct
Collecting defining blocks for compoundgood
Collecting defining blocks for makepossibilities
Collecting defining blocks for show_line
Collecting defining blocks for line_size
 Skipping function per FilterFunctionPass:my_getline
Collecting defining blocks for inserttoken
 Skipping function per FilterFunctionPass:lookharder
 Skipping function per FilterFunctionPass:show_char
Collecting defining blocks for wrongcapital
Collecting defining blocks for missingletter
 Skipping function per FilterFunctionPass:transposedletter
Collecting defining blocks for extraletter
Collecting defining blocks for wrongletter
Collecting defining blocks for missingspace
Collecting defining blocks for tryveryhard
Skip. No dependence graph for function posscmp
Skip. No dependence graph for function casecmp
Collecting defining blocks for save_cap
 Skipping function per FilterFunctionPass:insert
Collecting defining blocks for save_root_cap
 Skipping function per FilterFunctionPass:ins_cap
 Skipping function per FilterFunctionPass:ins_root_cap
Collecting defining blocks for askmode
Collecting defining blocks for copyout
 Skipping function per FilterFunctionPass:skipoverword
 Skipping function per FilterFunctionPass:checkline
Collecting defining blocks for skiptoword
Collecting defining blocks for TeX_math_check
 Skipping function per FilterFunctionPass:TeX_LR_check
Collecting defining blocks for TeX_math_end
 Skipping function per FilterFunctionPass:TeX_strncmp
 Skipping function per FilterFunctionPass:TeX_skip_parens
Collecting defining blocks for TeX_math_begin
 Skipping function per FilterFunctionPass:TeX_skip_check
Collecting defining blocks for TeX_LR_begin
 Skipping function per FilterFunctionPass:TeX_open_paren
 Skipping function per FilterFunctionPass:TeX_skip_args
Collecting defining blocks for dumpmode
Collecting defining blocks for tbldump
Collecting defining blocks for entdump
 Skipping function per FilterFunctionPass:setdump
 Skipping function per FilterFunctionPass:subsetdump
 Skipping function per FilterFunctionPass:good
Collecting defining blocks for cap_ok
Collecting defining blocks for entryhasaffixes
Collecting defining blocks for flagpr
Collecting defining blocks for linit
Collecting defining blocks for lookup
 Skipping function per FilterFunctionPass:hash
Collecting defining blocks for makedent
 Skipping function per FilterFunctionPass:strtoichar
Collecting defining blocks for ichartostr
 Skipping function per FilterFunctionPass:whatcap
 Skipping function per FilterFunctionPass:chupcase
 Skipping function per FilterFunctionPass:strtosichar
 Skipping function per FilterFunctionPass:upcase
Collecting defining blocks for stringcharlen
 Skipping function per FilterFunctionPass:addvheader
Collecting defining blocks for combinecaps
Collecting defining blocks for combine_two_entries
Collecting defining blocks for forcevheader
Collecting defining blocks for combineaffixes
 Skipping function per FilterFunctionPass:acoversb
 Skipping function per FilterFunctionPass:issubset
 Skipping function per FilterFunctionPass:lowcase
 Skipping function per FilterFunctionPass:toutent
Collecting defining blocks for ichartosstr
 Skipping function per FilterFunctionPass:toutword
 Skipping function per FilterFunctionPass:flagout
Collecting defining blocks for printichar
 Skipping function per FilterFunctionPass:findfiletype
 Skipping function per FilterFunctionPass:chk_aff
Collecting defining blocks for pfx_list_chk
Collecting defining blocks for chk_suf
 Skipping function per FilterFunctionPass:suf_list_chk
Collecting defining blocks for expand_pre
Collecting defining blocks for pr_pre_expansion
 Skipping function per FilterFunctionPass:forcelc
Collecting defining blocks for expand_suf
 Skipping function per FilterFunctionPass:pr_suf_expansion
 Skipping function per FilterFunctionPass:treeinit
 Skipping function per FilterFunctionPass:trydict
Collecting defining blocks for treeload
Collecting defining blocks for treeinsert
 Skipping function per FilterFunctionPass:tinsert
 Skipping function per FilterFunctionPass:treelookup
 Skipping function per FilterFunctionPass:treeoutput
Skip. No dependence graph for function pdictcmp
 Skipping function per FilterFunctionPass:mymalloc
Collecting defining blocks for myfree
 Skipping function per FilterFunctionPass:xgets
 Skipping function per FilterFunctionPass:erase
 Processing function:move
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
 Skipping function per FilterFunctionPass:inverse
 Skipping function per FilterFunctionPass:normal
 Processing function:backup
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
 Skipping function per FilterFunctionPass:terminit
 Skipping function per FilterFunctionPass:done
 Processing function:onstop
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %signo.addr = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @onstop0(i32* %signo.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
 Processing function:stop
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
***Handling a call instruction***
 Skipping function per FilterFunctionPass:shellescape
 Skipping function per FilterFunctionPass:main
 Skipping function per FilterFunctionPass:usage
 Processing function:initckch
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  if.end  
After path modifications process path
for.body  if.then  if.end  
Hash path invariants only
Invariants are
  br label %if.end18, !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.then  if.then7  
After path modifications process path
for.body  if.then  if.then7  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end18  for.inc  
After path modifications process path
for.body  if.end18  
Hash path invariants only
Invariants are
  br label %for.inc, !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.else  if.then13  
After path modifications process path
for.body  if.else  if.then13  
Hash path invariants only
Invariants are
  br label %if.end17, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.else  if.end17  
After path modifications process path
for.body  if.else  if.end17  
Hash path invariants only
Invariants are
  br label %if.end18, !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.end  if.then22  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  land.lhs.true  if.then34  
After path modifications process path
while.body  land.lhs.true  if.then34  
Hash path invariants only
Invariants are
  br label %if.end121, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  call void @initckch1(i8* %c, i8** %wchars.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !13
Processing call instruction..
Can't handle this operand   %c = alloca i8, align 1, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @initckch1(i8* %c, i8** %wchars.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !13
Can't handle this operand   %wchars.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @initckch1(i8* %c, i8** %wchars.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.end121  if.end138  
After path modifications process path
while.body  if.end121  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.end121  if.then128  
After path modifications process path
while.body  if.end121  if.then128  
Hash path invariants only
Invariants are
  br label %if.end138, !control_dep_instr !7, !data_indep_instr !11
  call void @initckch2(i8* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %c = alloca i8, align 1, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @initckch2(i8* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.then47  if.then58  if.then69  
After path modifications process path
while.body  if.else35  if.then47  if.then58  if.then69  
Hash path invariants only
Invariants are
  %arrayidx60 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %96 = load i16*, i16** %call53, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx49 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %102 = load i16*, i16** %call64, align 8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %call64 = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx71 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %call53 = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end72, !control_dep_instr !7, !data_indep_instr !11
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  %90 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.then47  if.then58  if.end72  
After path modifications process path
while.body  if.else35  if.then47  if.then58  if.end72  
Hash path invariants only
Invariants are
  %arrayidx60 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx49 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %111 = load i16*, i16** %call53, align 8, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end73, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %104 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %call53 = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %call64 = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  %118 = load i16*, i16** %call64, align 8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.then47  if.end73  
After path modifications process path
while.body  if.else35  if.then47  if.end73  
Hash path invariants only
Invariants are
  br label %if.end74, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %arrayidx49 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %126 = load i16*, i16** %call53, align 8, !control_dep_instr !7, !data_dep_instr !8
  %118 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %call53 = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.end74  if.then79  
After path modifications process path
while.body  if.else35  if.end74  if.then79  
Hash path invariants only
Invariants are
  %arraydecay81 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end120, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %num, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %132 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.end74  if.end120  
After path modifications process path
while.body  if.else35  if.end74  if.end120  
Hash path invariants only
Invariants are
  %146 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end121, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.end74  if.else84  if.then90  
After path modifications process path
while.body  if.else35  if.end74  if.else84  if.then90  
Hash path invariants only
Invariants are
  %arrayidx91 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  store i8 0, i8* %c, align 1, !control_dep_instr !7, !data_indep_instr !11
  %160 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay85 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  br label %if.end94, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx88 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.end74  if.else84  if.end94  if.then97  
After path modifications process path
while.body  if.else35  if.end74  if.else84  if.end94  if.then97  
Hash path invariants only
Invariants are
  %arrayidx95 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  store i8 0, i8* %c, align 1, !control_dep_instr !7, !data_indep_instr !11
  %174 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx100 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end106, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay85 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx88 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.end74  if.else84  if.end94  if.end106  if.then109  
After path modifications process path
while.body  if.else35  if.end74  if.else84  if.end94  if.end106  if.then109  
Hash path invariants only
Invariants are
  %arrayidx107 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %arrayidx95 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  store i8 0, i8* %c, align 1, !control_dep_instr !7, !data_indep_instr !11
  %188 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay85 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx113 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end119, !control_dep_instr !7, !data_indep_instr !11
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx88 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.body  if.else35  if.end74  if.else84  if.end94  if.end106  if.end119  
After path modifications process path
while.body  if.else35  if.end74  if.else84  if.end94  if.end106  if.end119  
Hash path invariants only
Invariants are
  br label %if.end120, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %arrayidx107 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %arrayidx95 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  store i8 0, i8* %c, align 1, !control_dep_instr !7, !data_indep_instr !11
  %202 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx40, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  store i8 0, i8* %arrayidx39, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay85 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 2, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx37, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 1, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 3, !control_dep_instr !7, !data_dep_instr !8
  %arrayidx88 = getelementptr inbounds [4 x i8], [4 x i8]* %num, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
  store i8 0, i8* %arrayidx38, align 1, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
Processing path: entry  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  
After path modifications process path
entry  for.end  if.then22  
Processing path: entry  for.end  if.then22  while.cond  land.end  while.end  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  if.then22  while.end  
After path modifications process path is empty
Processing path: entry  for.end  if.then22  while.end  
After path modifications process path
entry  for.end  if.then22  while.end  
Processing path: entry  for.cond  for.end  if.end139  
After path modifications process path is empty
Processing path: entry  for.end  if.end139  
After path modifications process path
entry  for.end  if.end139  
 Skipping function per FilterFunctionPass:expandmode
 Processing function:dofile
Short range hashing enabled.
Processing path: entry  if.then  land.rhs  
After path modifications process path
entry  if.then  land.rhs  
Processing path: entry  if.then  land.end  
After path modifications process path
entry  if.then  land.end  
Processing path: entry  if.end  if.then5  if.then9  
After path modifications process path
entry  if.end  if.then5  if.then9  
Processing path: entry  if.end  if.then5  if.end10  
After path modifications process path
entry  if.end  if.then5  if.end10  
Processing path: entry  if.end  if.end11  if.then14  
After path modifications process path
entry  if.end  if.end11  if.then14  
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @dofile0(i8** %filename.addr), !control_dep_instr !7, !data_indep_instr !13, !input_dep_block !11
Processing path: entry  if.end  if.end11  return  
After path modifications process path
entry  if.end  if.end11  return  
Processing path: entry  if.end  if.end11  if.end17  if.then20  
After path modifications process path
entry  if.end  if.end11  if.end17  if.then20  
Processing call instruction..
Can't handle this operand   %filename.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @dofile1(i8** %filename.addr), !control_dep_instr !7, !data_indep_instr !13, !input_dep_block !11
Processing path: entry  if.end  if.end11  if.end17  if.end23  if.then37  
After path modifications process path
entry  if.end  if.end11  if.end17  if.end23  if.then37  
Processing path: entry  if.end  if.end11  if.end17  if.end23  lor.lhs.false  lor.lhs.false33  if.end44  if.end50  land.lhs.true  if.then53  
After path modifications process path
entry  if.end  if.end11  if.end17  if.end23  lor.lhs.false  lor.lhs.false33  if.end44  if.end50  land.lhs.true  if.then53  
Processing path: entry  if.end  if.end11  if.end17  if.end23  lor.lhs.false  lor.lhs.false33  if.end44  if.end50  if.end54  
After path modifications process path
entry  if.end  if.end11  if.end17  if.end23  lor.lhs.false  lor.lhs.false33  if.end44  if.end50  if.end54  
Processing path: entry  if.end  if.end11  if.end17  if.end23  lor.lhs.false  lor.lhs.false33  if.end44  if.then49  
After path modifications process path
entry  if.end  if.end11  if.end17  if.end23  lor.lhs.false  lor.lhs.false33  if.end44  if.then49  
 Skipping function per FilterFunctionPass:update_file
 Processing function:givehelp
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  if.then24  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.end  if.then24  
After path modifications process path
entry  if.end  if.then24  
Processing path: entry  if.end  if.then24  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  if.end  if.then24  while.end  
After path modifications process path
entry  if.end  if.then24  while.end  
Processing path: entry  if.end  if.end29  
After path modifications process path
entry  if.end  if.end29  
Processing path: entry  if.else  
After path modifications process path
entry  if.else  
 Skipping function per FilterFunctionPass:checkfile
 Processing function:correct
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  checkagain  if.then6  
After path modifications process path is empty
Processing path: entry  if.end  if.then6  
After path modifications process path
entry  if.end  if.then6  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.then10  
After path modifications process path
if.end7  if.then10  
Hash path invariants only
Invariants are
  br label %if.end12, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  call void @correct0(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !12
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.then14  
After path modifications process path
if.end7  if.end12  if.then14  
Hash path invariants only
Invariants are
  br label %if.end16, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.then22  
After path modifications process path
if.end7  if.end12  if.end16  if.then22  
Hash path invariants only
Invariants are
  call void @correct1(i32* %col_ht, i32* %ncols), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
Can't handle this operand   %col_ht = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct1(i32* %col_ht, i32* %ncols), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %ncols = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct1(i32* %col_ht, i32* %ncols), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  for.cond  for.body  if.then34  
After path modifications process path
for.body  if.then34  
Hash path invariants only
Invariants are
  br label %if.end51, !control_dep_instr !7, !data_indep_instr !11
  call void @correct2(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct2(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  for.cond  for.body  if.end51  for.inc  
After path modifications process path
for.body  if.end51  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  for.cond  for.body  if.else  land.lhs.true  if.then40  
After path modifications process path
for.body  if.else  land.lhs.true  if.then40  
Hash path invariants only
Invariants are
  br label %if.end50, !control_dep_instr !7, !data_indep_instr !11
  call void @correct3(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct3(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  for.cond  for.body  if.else  if.end50  
After path modifications process path
for.body  if.else  if.end50  
Hash path invariants only
Invariants are
  br label %if.end51, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing path: entry  if.end  for.cond  for.body  if.else  if.else45  
After path modifications process path
for.body  if.else  if.else45  
Hash path invariants only
Invariants are
  br label %if.end50, !control_dep_instr !7, !data_indep_instr !11
  call void @correct4(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct4(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond52  for.body55  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  
Hash path invariants only
Invariants are
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  if.then80  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  if.then80  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  while.body  if.end81  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.then87  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.then87  
Hash path invariants only
Invariants are
  br label %if.end88, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @correct10(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct10(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct10(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.end88  if.then91  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.end88  if.then91  
Hash path invariants only
Invariants are
  br label %if.end92, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  while.cond  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.end88  if.end92  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.then68  while.end  if.end88  if.end92  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end93, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct8(i8** %start_l2, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.then98  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.then98  
Hash path invariants only
Invariants are
  call void @correct11(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %if.end101, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond102  sw.default  
After path modifications process path
sw.default  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  %call242 = call i32 @putchar(i32 7), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.epilog  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb105  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb105  
After path modifications process path
entry  if.end  sw.bb105  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  for.cond  sw.bb105  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb105  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  sw.bb105  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.then109  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.then109  
Hash path invariants only
Invariants are
  call void @correct13(i32* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  br label %if.end115, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %c = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct13(i32* %c), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  if.then121  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  if.then121  
Hash path invariants only
Invariants are
  br label %if.end123, !control_dep_instr !7, !data_indep_instr !11
  call void @done(i32 0), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct14(), !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  if.end123  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  lor.lhs.false118  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.end115  lor.lhs.false118  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.else114  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb107  if.else114  
Hash path invariants only
Invariants are
  br label %if.end115, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i32 121, i32* %c, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb124  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb124  
After path modifications process path
entry  if.end  sw.bb124  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  for.cond  sw.bb124  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb124  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  sw.bb124  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb128  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb128  
After path modifications process path
entry  if.end  sw.bb128  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  for.cond  sw.bb128  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb128  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  sw.bb128  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb132  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb132  
After path modifications process path
entry  if.end  sw.bb132  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  for.cond  sw.bb132  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb132  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  sw.bb132  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb136  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb137  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb138  if.then145  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb138  
Hash path invariants only
Invariants are
  %arraydecay141 = getelementptr inbounds [200 x i8], [200 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  %call140 = call i32 @putchar(i32 33), !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb138  if.end148  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb138  
Hash path invariants only
Invariants are
  %arraydecay141 = getelementptr inbounds [200 x i8], [200 x i8]* %buf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  %call140 = call i32 @putchar(i32 33), !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.then156  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.then156  
Hash path invariants only
Invariants are
  br label %if.end159, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  call void @correct19(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14, !global_dep_instr !12
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.then164  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.then164  
Hash path invariants only
Invariants are
  br label %if.end174, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct20(i32* %ctokl.addr, i8** %itok.addr, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %ctokl.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct20(i32* %ctokl.addr, i8** %itok.addr, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %itok.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct20(i32* %ctokl.addr, i8** %itok.addr, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %ctok.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct20(i32* %ctokl.addr, i8** %itok.addr, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  if.then179  
After path modifications process path is empty
Processing path: entry  if.end  if.then179  
After path modifications process path
entry  if.end  if.then179  
Processing path: entry  if.end  for.cond  if.then179  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.end174  if.then179  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  if.then179  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.end174  if.end180  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.else167  if.then170  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.else167  if.then170  
Hash path invariants only
Invariants are
  br label %if.end173, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @correct21(i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %ctok.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct21(i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.else167  if.end173  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb153  if.end159  if.else167  if.end173  
Hash path invariants only
Invariants are
  br label %if.end174, !control_dep_instr !7, !data_indep_instr !11
  store i32 1, i32* @changes, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.then185  land.lhs.true190  if.then193  
After path modifications process path
sw.bb181  if.then185  land.lhs.true190  if.then193  
Hash path invariants only
Invariants are
  %call186 = call i32 @getchar(), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  br label %if.end206, !control_dep_instr !7, !data_indep_instr !11
  store i32 %and187, i32* %c, align 4, !control_dep_instr !7, !data_dep_instr !8
  %and187 = and i32 %call186, 127, !control_dep_instr !7, !data_dep_instr !8
  call void @correct22(i32* %c, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %c = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct22(i32* %c, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct22(i32* %c, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.then185  if.end206  
After path modifications process path
sw.bb181  if.then185  if.end206  
Hash path invariants only
Invariants are
  %call186 = call i32 @getchar(), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  br label %if.end207, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %and187 = and i32 %call186, 127, !control_dep_instr !7, !data_dep_instr !8
  store i32 %and187, i32* %c, align 4, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.then185  if.else197  land.lhs.true200  if.then203  
After path modifications process path
sw.bb181  if.then185  if.else197  land.lhs.true200  if.then203  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11
  store i32 %and187, i32* %c, align 4, !control_dep_instr !7, !data_dep_instr !8
  %and187 = and i32 %call186, 127, !control_dep_instr !7, !data_dep_instr !8
  %call186 = call i32 @getchar(), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %call204 = call i32 @putchar(i32 7), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.then185  if.else197  if.end205  
After path modifications process path
sw.bb181  if.then185  if.else197  if.end205  
Hash path invariants only
Invariants are
  br label %if.end206, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %call186 = call i32 @getchar(), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
  %and187 = and i32 %call186, 127, !control_dep_instr !7, !data_dep_instr !8
  store i32 %and187, i32* %c, align 4, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.end207  if.then210  if.then216  
After path modifications process path
sw.bb181  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.then210  if.then216  
After path modifications process path
entry  if.end  if.then210  if.then216  
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct23(i32* %i, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %ctok.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct23(i32* %i, i8** %ctok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %curchar.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct24(i8*** %curchar.addr, i8** %ctok.addr, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11
Can't handle this operand   %ctok.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct24(i8*** %curchar.addr, i8** %ctok.addr, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11
Can't handle this operand   %begintoken = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct24(i8*** %curchar.addr, i8** %ctok.addr, i8** %begintoken), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing path: entry  if.end  for.cond  if.then210  if.then216  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  if.then210  if.then216  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  if.then210  if.then216  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.end207  if.then210  if.end222  
After path modifications process path
sw.bb181  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.then210  if.end222  
After path modifications process path
entry  if.end  if.then210  if.end222  
Processing path: entry  if.end  for.cond  if.then210  if.end222  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  if.then210  if.end222  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  if.then210  if.end222  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb181  if.end207  if.end223  
After path modifications process path
sw.bb181  if.end223  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  %call224 = call i32 @putchar(i32 7), !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb225  
After path modifications process path
sw.bb225  
Hash path invariants only
Invariants are
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb226  if.then234  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb226  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %arraydecay230 = getelementptr inbounds [100 x i8], [100 x i8]* %buf227, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  
After path modifications process path is empty
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb226  if.end236  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb226  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  %arraydecay230 = getelementptr inbounds [100 x i8], [100 x i8]* %buf227, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  
After path modifications process path is empty
Processing path: entry  if.end  for.cond102  sw.bb240  
After path modifications process path is empty
Processing path: entry  if.end  sw.bb240  
After path modifications process path
entry  if.end  sw.bb240  
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end  for.cond  sw.bb240  
After path modifications process path is empty
Processing path: entry  if.end  checkagain  lor.lhs.false  if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  sw.bb240  
After path modifications process path
if.end7  if.end12  if.end16  if.end24  for.end  for.end62  if.end93  if.end101  
Hash path invariants only
Invariants are
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %start_l2, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @move(i32 2, i32 0), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond102, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @erase(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing call instruction..
***Handling a call instruction***
***Handling a call instruction***
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @correct6(i32* %i), !control_dep_instr !7, !data_indep_instr !11
Non numeric pointers (int and float) are skipped:  %start_l2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end  for.cond52  sw.bb240  
After path modifications process path is empty
 Processing function:compoundgood
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then4  
After path modifications process path
entry  if.end  if.then4  
Processing path: entry  if.end  if.end5  for.cond  for.body  if.then15  if.then20  sw.epilog  
After path modifications process path
for.body  if.then15  sw.epilog  
Hash path invariants only
Invariants are
  br label %if.end29, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  
After path modifications process path
entry  if.end  if.end5  
Processing path: entry  if.end  if.end5  for.cond  for.body  if.then15  if.then20  sw.bb  
After path modifications process path
for.body  if.then15  
Hash path invariants only
Invariants are
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  sw.bb  
After path modifications process path
entry  if.end  if.end5  sw.bb  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood0(i32* %retval, i64* %secondcap), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %secondcap = alloca i64, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood0(i32* %retval, i64* %secondcap), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end5  for.cond  for.body  if.then15  if.then20  sw.bb26  
After path modifications process path
for.body  if.then15  
Hash path invariants only
Invariants are
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  sw.bb26  
After path modifications process path
entry  if.end  if.end5  sw.bb26  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood1(i32* %retval, i64* %secondcap), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %secondcap = alloca i64, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood1(i32* %retval, i64* %secondcap), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end  if.end5  for.cond  for.body  if.then15  if.end29  
After path modifications process path
for.body  if.then15  if.end29  
Hash path invariants only
Invariants are
  br label %if.end30, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  
After path modifications process path
entry  if.end  if.end5  
Processing path: entry  if.end  if.end5  for.cond  for.body  if.then15  lor.lhs.false  
After path modifications process path
for.body  if.then15  lor.lhs.false  
Hash path invariants only
Invariants are
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  
After path modifications process path
entry  if.end  if.end5  
Processing path: entry  if.end  if.end5  for.cond  for.body  if.end30  for.inc  
After path modifications process path
for.body  if.end30  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end5  
After path modifications process path
entry  if.end  if.end5  
Processing path: entry  if.end  if.end5  for.cond  for.body  if.else  
After path modifications process path
for.body  if.else  
Hash path invariants only
Invariants are
  br label %if.end30, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !12
  call void @compoundgood2(i8** %p, i8* %savech), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !12
  %arraydecay13 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood2(i8** %p, i8* %savech), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !12
Can't handle this operand   %savech = alloca i8, align 1, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @compoundgood2(i8** %p, i8* %savech), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !12
Processing path: entry  if.end  if.end5  
After path modifications process path
entry  if.end  if.end5  
Processing path: entry  if.end  if.end5  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end5  for.end  
After path modifications process path
entry  if.end  if.end5  for.end  
 Processing function:makepossibilities
Short range hashing enabled.
Processing path: entry  for.cond  for.body  for.inc  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makepossibilities0(i32* %i), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  if.then  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.then  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.then  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makepossibilities1(i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.end  if.then  
After path modifications process path
entry  for.end  if.then  
Processing path: entry  for.cond  for.end  if.end  if.then4  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.then4  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.then4  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makepossibilities2(i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.end  if.end  if.then4  
After path modifications process path
entry  for.end  if.end  if.then4  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.then7  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.then7  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.then7  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makepossibilities3(i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.end  if.end  if.end5  if.then7  
After path modifications process path
entry  for.end  if.end  if.end5  if.then7  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.then10  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.then10  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.then10  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makepossibilities4(i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.end  if.end  if.end5  if.end8  if.then10  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.then10  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.end11  land.lhs.true  if.then14  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  land.lhs.true  if.then14  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  land.lhs.true  if.then14  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makepossibilities5(i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.end  if.end  if.end5  if.end8  if.end11  land.lhs.true  if.then14  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.end11  land.lhs.true  if.then14  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.then17  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.then17  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.then17  
Processing path: entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.then17  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.then17  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  land.lhs.true26  if.then28  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  land.lhs.true26  if.then28  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  land.lhs.true26  if.then28  
Processing path: entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  land.lhs.true26  if.then28  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  land.lhs.true26  if.then28  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.then32  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.then32  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.then32  
Processing path: entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.then32  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.then32  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.end37  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.end37  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.end37  
Processing path: entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.end37  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  land.lhs.true22  if.then24  if.end29  if.end37  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  if.end38  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  if.end38  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  if.end38  
Processing path: entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  if.end38  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  if.end38  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  lor.lhs.false20  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  lor.lhs.false20  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  lor.lhs.false20  
Processing path: entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  lor.lhs.false20  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  if.end18  lor.lhs.false20  
Processing path: entry  for.cond  for.end  if.end  if.end5  if.end8  if.end11  if.end15  lor.lhs.false  
Extended path is 
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  lor.lhs.false  
After path modifications process path
entry  for.cond  for.body  for.inc  for.end  if.end  if.end5  if.end8  if.end11  if.end15  lor.lhs.false  
Processing path: entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  lor.lhs.false  
After path modifications process path
entry  for.end  if.end  if.end5  if.end8  if.end11  if.end15  lor.lhs.false  
 Processing function:show_line
Short range hashing enabled.
Processing path: entry  cond.true  
After path modifications process path
entry  cond.true  
Processing path: entry  cond.end  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond  land.end  while.body  
After path modifications process path is empty
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.end  if.then  while.cond3  land.rhs6  
After path modifications process path
land.rhs6  
Hash path invariants only
Invariants are
  br label %land.end10, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  cond.end  while.cond  land.end  while.end  if.then  
After path modifications process path is empty
Processing path: entry  cond.end  while.end  if.then  
After path modifications process path
entry  cond.end  while.end  if.then  
Processing path: entry  cond.end  while.end  if.then  while.cond3  land.end10  while.body11  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  land.end  while.end  if.then  
After path modifications process path is empty
Processing path: entry  cond.end  while.end  if.then  
After path modifications process path
entry  cond.end  while.end  if.then  
Processing path: entry  cond.end  while.end  if.then  while.cond3  land.end10  while.end18  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  land.end  while.end  if.then  while.end18  
After path modifications process path is empty
Processing path: entry  cond.end  while.end  if.then  while.end18  
After path modifications process path
entry  cond.end  while.end  if.then  while.end18  
Processing call instruction..
Processing path: entry  cond.end  while.end  if.end  while.cond19  land.rhs22  
After path modifications process path
land.rhs22  
Hash path invariants only
Invariants are
  br label %land.end26, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  cond.end  while.cond  land.end  while.end  if.end  
After path modifications process path is empty
Processing path: entry  cond.end  while.end  if.end  
After path modifications process path
entry  cond.end  while.end  if.end  
Processing path: entry  cond.end  while.end  if.end  while.cond19  land.end26  while.body27  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  land.end  while.end  if.end  
After path modifications process path is empty
Processing path: entry  cond.end  while.end  if.end  
After path modifications process path
entry  cond.end  while.end  if.end  
Processing path: entry  cond.end  while.end  if.end  while.cond19  land.end26  while.end30  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  land.end  while.end  if.end  while.end30  
After path modifications process path is empty
Processing path: entry  cond.end  while.end  if.end  while.end30  
After path modifications process path
entry  cond.end  while.end  if.end  while.end30  
Processing path: entry  cond.false  
After path modifications process path
entry  cond.false  
 Processing function:line_size
Short range hashing enabled.
Processing path: entry  for.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  land.end  for.body  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  land.end  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
 Skipping function per FilterFunctionPass:my_getline
 Processing function:inserttoken
Short range hashing enabled.
Processing path: entry  for.cond  for.body  for.inc  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11
  call void @inserttoken1(i8** %p, i8** %q), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken1(i8** %p, i8** %q), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %q = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken1(i8** %p, i8** %q), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %q = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken0(i8** %q, i8** %p, i8** %buf.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken0(i8** %q, i8** %p, i8** %buf.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %buf.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken0(i8** %q, i8** %p, i8** %buf.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  for.end  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing call instruction..
Can't handle this operand   %ew = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %curchar.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %start.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %q = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %tok.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken3(i8** %ew, i8*** %curchar.addr, i8** %start.addr, i8** %q, i8** %tok.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  for.end  while.end  if.then  while.cond9  while.body11  
After path modifications process path is empty
Processing path: entry  for.end  while.cond  while.end  if.then  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  while.end  if.then  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.then  
After path modifications process path
entry  for.end  while.end  if.then  
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken5(i8** %p, i8** %tok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %tok.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @inserttoken5(i8** %p, i8** %tok.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.end  while.end  if.then  while.cond9  while.end14  
After path modifications process path is empty
Processing path: entry  for.end  while.cond  while.end  if.then  while.end14  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  while.end  if.then  while.end14  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.then  while.end14  
After path modifications process path
entry  for.end  while.end  if.then  while.end14  
Processing path: entry  for.end  while.end  if.end  while.cond15  while.body20  
After path modifications process path is empty
Processing path: entry  for.end  while.cond  while.end  if.end  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  while.end  if.end  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.end  
After path modifications process path
entry  for.end  while.end  if.end  
Processing path: entry  for.end  while.end  if.end  while.cond15  while.end21  
After path modifications process path is empty
Processing path: entry  for.end  while.cond  while.end  if.end  while.end21  
After path modifications process path is empty
Processing path: entry  for.cond  for.end  while.end  if.end  while.end21  
After path modifications process path is empty
Processing path: entry  for.end  while.end  if.end  while.end21  
After path modifications process path
entry  for.end  while.end  if.end  while.end21  
 Skipping function per FilterFunctionPass:lookharder
 Skipping function per FilterFunctionPass:show_char
 Processing function:wrongcapital
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
 Processing function:missingletter
Short range hashing enabled.
Processing path: entry  for.cond3  for.body6  land.lhs.true  if.then  
After path modifications process path
for.body6  land.lhs.true  if.then  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay10 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond3  for.body6  for.inc  
After path modifications process path
for.body6  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond3  for.body6  if.end  if.then18  if.then23  
After path modifications process path
for.body6  if.end  
Hash path invariants only
Invariants are
  %arraydecay15 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  for.cond  for.body  if.then23  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.then23  
After path modifications process path
entry  if.then23  
No oh has been applied in the path
Processing path: entry  for.cond3  for.body6  if.end  if.then18  if.end24  
After path modifications process path
for.body6  if.end  if.end24  
Hash path invariants only
Invariants are
  br label %if.end25, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay15 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond3  for.body6  if.end  if.end25  
After path modifications process path
for.body6  if.end  if.end25  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay15 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond3  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  for.end  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond3, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.end54  
After path modifications process path is empty
Processing path: entry  for.end54  
After path modifications process path
entry  for.end54  
No oh has been applied in the path
Processing path: entry  for.end27  for.cond28  for.body31  if.then37  
After path modifications process path
for.body31  if.then37  
Hash path invariants only
Invariants are
  br label %for.inc52, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.cond  for.end27  
After path modifications process path is empty
Processing path: entry  for.end27  
After path modifications process path
entry  for.end27  
Processing path: entry  for.end27  for.cond28  for.body31  for.inc52  
After path modifications process path
for.body31  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.cond  for.end27  
After path modifications process path is empty
Processing path: entry  for.end27  
After path modifications process path
entry  for.end27  
Processing path: entry  for.end27  for.cond28  for.body31  if.end38  if.then44  if.then49  
After path modifications process path
for.body31  if.end38  
Hash path invariants only
Invariants are
  %arraydecay41 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  for.cond  for.end27  if.then49  
After path modifications process path is empty
Processing path: entry  for.end27  if.then49  
After path modifications process path
entry  for.end27  if.then49  
Processing path: entry  for.end27  for.cond28  for.body31  if.end38  if.then44  if.end50  
After path modifications process path
for.body31  if.end38  if.end50  
Hash path invariants only
Invariants are
  br label %if.end51, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay41 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  for.cond  for.end27  
After path modifications process path is empty
Processing path: entry  for.end27  
After path modifications process path
entry  for.end27  
Processing path: entry  for.end27  for.cond28  for.body31  if.end38  if.end51  
After path modifications process path
for.body31  if.end38  if.end51  
Hash path invariants only
Invariants are
  br label %for.inc52, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay41 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  for.cond  for.end27  
After path modifications process path is empty
Processing path: entry  for.end27  
After path modifications process path
entry  for.end27  
 Skipping function per FilterFunctionPass:transposedletter
 Processing function:extraletter
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
Processing path: entry  if.end  for.cond  for.body  if.then7  if.then12  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  %arraydecay5 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  if.end  if.then12  
After path modifications process path
entry  if.end  if.then12  
Processing path: entry  if.end  for.cond  for.body  if.then7  if.end13  
After path modifications process path
for.body  if.end13  
Hash path invariants only
Invariants are
  br label %if.end14, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay5 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  for.body  if.end14  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  %arraydecay5 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
 Processing function:wrongletter
Short range hashing enabled.
Processing path: entry  for.cond4  for.body7  if.then  
After path modifications process path
for.body7  if.then  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  for.body7  for.inc  
After path modifications process path
for.body7  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  for.body7  if.else  land.lhs.true  if.then23  
After path modifications process path
for.body7  if.else  land.lhs.true  if.then23  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  for.body7  if.else  land.lhs.true  lor.lhs.false  
After path modifications process path
for.body7  if.else  land.lhs.true  lor.lhs.false  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  for.body7  if.else  if.end  if.end24  if.then32  if.then37  
After path modifications process path
for.body7  if.else  if.end  if.end24  
Hash path invariants only
Invariants are
  %arraydecay29 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond  for.body  if.then37  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.then37  
After path modifications process path
entry  if.then37  
Processing path: entry  for.cond4  for.body7  if.else  if.end  if.end24  if.then32  if.end38  
After path modifications process path
for.body7  if.else  if.end  if.end24  if.end38  
Hash path invariants only
Invariants are
  br label %if.end39, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay29 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  for.body7  if.else  if.end  if.end24  if.end39  
After path modifications process path
for.body7  if.else  if.end  if.end24  if.end39  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay29 = getelementptr inbounds [120 x i8], [120 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end24, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond  for.body  
After path modifications process path
for.body  
Hash path invariants only
Invariants are
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond4  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  for.end  for.inc42  
After path modifications process path
for.body  for.end  
Hash path invariants only
Invariants are
  br label %for.inc42, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond4, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %j, align 4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end44  
After path modifications process path is empty
Processing path: entry  for.end44  
After path modifications process path
entry  for.end44  
 Processing function:missingspace
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  for.end63  
After path modifications process path
entry  for.end63  
Processing path: entry  lor.lhs.false  if.end  for.cond32  for.body35  if.then47  
After path modifications process path is empty
Processing path: entry  lor.lhs.false  if.end  for.cond25  for.body28  if.then47  
After path modifications process path
for.body28  
Hash path invariants only
Invariants are
  br label %for.cond32, !control_dep_instr !7, !data_indep_instr !12
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay29 to i64, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %secondno, align 4, !control_dep_instr !7, !data_indep_instr !12
  %arraydecay29 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  for.cond  for.body  if.then13  if.then20  if.then47  
After path modifications process path
for.body  if.then13  if.then20  
Hash path invariants only
Invariants are
  br label %for.cond25, !control_dep_instr !7, !data_indep_instr !12
  %arraydecay11 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay14 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !10
  %arraydecay15 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %firsthalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %firstno, align 4, !control_dep_instr !7, !data_indep_instr !12
  %arraydecay23 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %secondhalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  if.then47  
After path modifications process path
entry  lor.lhs.false  if.end  if.then47  
Processing path: entry  lor.lhs.false  if.end  for.cond32  for.body35  if.end48  if.then55  
After path modifications process path is empty
Processing path: entry  lor.lhs.false  if.end  for.cond25  for.body28  if.then55  
After path modifications process path
for.body28  
Hash path invariants only
Invariants are
  %arraydecay29 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %secondno, align 4, !control_dep_instr !7, !data_indep_instr !12
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay29 to i64, !control_dep_instr !7, !data_dep_instr !8
  br label %for.cond32, !control_dep_instr !7, !data_indep_instr !12
Processing path: entry  lor.lhs.false  if.end  for.cond  for.body  if.then13  if.then20  if.then55  
After path modifications process path
for.body  if.then13  if.then20  
Hash path invariants only
Invariants are
  %arraydecay23 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %secondhalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %firstno, align 4, !control_dep_instr !7, !data_indep_instr !12
  br label %for.cond25, !control_dep_instr !7, !data_indep_instr !12
  %arraydecay11 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay14 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !10
  %arraydecay15 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %firsthalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  if.then55  
After path modifications process path
entry  lor.lhs.false  if.end  if.then55  
Processing path: entry  lor.lhs.false  if.end  for.cond32  for.body35  if.end48  if.end56  for.inc  
After path modifications process path
if.end56  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !10
Processing path: entry  lor.lhs.false  if.end  for.cond25  for.body28  
After path modifications process path
for.body28  
Hash path invariants only
Invariants are
  %arraydecay29 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %secondno, align 4, !control_dep_instr !7, !data_indep_instr !12
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay29 to i64, !control_dep_instr !7, !data_dep_instr !8
  br label %for.cond32, !control_dep_instr !7, !data_indep_instr !12
Processing path: entry  lor.lhs.false  if.end  for.cond  for.body  if.then13  if.then20  
After path modifications process path
for.body  if.then13  if.then20  
Hash path invariants only
Invariants are
  %arraydecay23 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %secondhalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %firstno, align 4, !control_dep_instr !7, !data_indep_instr !12
  br label %for.cond25, !control_dep_instr !7, !data_indep_instr !12
  %arraydecay11 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay14 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !10
  %arraydecay15 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %firsthalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  
After path modifications process path
entry  lor.lhs.false  if.end  
Processing path: entry  lor.lhs.false  if.end  for.cond32  
After path modifications process path is empty
Processing path: entry  lor.lhs.false  if.end  for.cond25  for.body28  for.end  for.inc57  
After path modifications process path
for.body28  for.end  
Hash path invariants only
Invariants are
  br label %for.inc57, !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !10
  br label %for.cond32, !control_dep_instr !7, !data_indep_instr !12
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay29 to i64, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %secondno, align 4, !control_dep_instr !7, !data_indep_instr !12
  %arraydecay29 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  for.cond  for.body  if.then13  if.then20  
After path modifications process path
for.body  if.then13  if.then20  
Hash path invariants only
Invariants are
  %arraydecay23 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %secondhalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %firstno, align 4, !control_dep_instr !7, !data_indep_instr !12
  br label %for.cond25, !control_dep_instr !7, !data_indep_instr !12
  %arraydecay11 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay14 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !10
  %arraydecay15 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %firsthalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  
After path modifications process path
entry  lor.lhs.false  if.end  
Processing path: entry  lor.lhs.false  if.end  for.cond25  
After path modifications process path is empty
Processing path: entry  lor.lhs.false  if.end  for.cond  for.body  if.then13  if.then20  for.end59  
After path modifications process path
for.body  if.then13  if.then20  for.end59  
Hash path invariants only
Invariants are
  %arraydecay23 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %secondhalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %firstno, align 4, !control_dep_instr !7, !data_indep_instr !12
  br label %for.cond25, !control_dep_instr !7, !data_indep_instr !12
  %arraydecay11 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end60, !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !10
  %arraydecay14 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !10
  %arraydecay15 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %firsthalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  
After path modifications process path
entry  lor.lhs.false  if.end  
Processing path: entry  lor.lhs.false  if.end  for.cond  for.body  if.then13  if.end60  
After path modifications process path
for.body  if.then13  if.end60  
Hash path invariants only
Invariants are
  br label %if.end61, !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !10
  %arraydecay15 = getelementptr inbounds [10 x [120 x i8]], [10 x [120 x i8]]* %firsthalf, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay14 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !10
  %arraydecay11 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  
After path modifications process path
entry  lor.lhs.false  if.end  
Processing path: entry  lor.lhs.false  if.end  for.cond  for.body  if.end61  for.inc62  
After path modifications process path
for.body  if.end61  
Hash path invariants only
Invariants are
  br label %for.inc62, !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !10
  %arraydecay11 = getelementptr inbounds [121 x i8], [121 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  lor.lhs.false  if.end  
After path modifications process path
entry  lor.lhs.false  if.end  
 Processing function:tryveryhard
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @tryveryhard0(i8** %word.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Skip. No dependence graph for function posscmp
Skip. No dependence graph for function casecmp
 Processing function:save_cap
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  for.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  land.end  for.body  if.then6  
After path modifications process path
for.body  if.then6  
Hash path invariants only
Invariants are
  br label %if.end15, !control_dep_instr !7, !data_indep_instr !10
  call void @save_cap1(i32* %prestrip, i32* %preadd, i32* %hitno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_cap1(i32* %prestrip, i32* %preadd, i32* %hitno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_cap1(i32* %prestrip, i32* %preadd, i32* %hitno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %hitno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_cap1(i32* %prestrip, i32* %preadd, i32* %hitno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  land.end  for.body  if.end15  if.then19  
After path modifications process path
for.body  if.end15  if.then19  
Hash path invariants only
Invariants are
  br label %if.end31, !control_dep_instr !7, !data_indep_instr !10
  call void @save_cap2(i32* %sufadd, i32* %sufstrip, i32* %hitno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_cap2(i32* %sufadd, i32* %sufstrip, i32* %hitno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %sufstrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_cap2(i32* %sufadd, i32* %sufstrip, i32* %hitno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %hitno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_cap2(i32* %sufadd, i32* %sufstrip, i32* %hitno), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  land.end  for.body  if.end15  if.end31  
After path modifications process path
for.body  if.end15  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  land.end  for.body  if.end15  if.else30  
After path modifications process path
for.body  if.end15  if.else30  
Hash path invariants only
Invariants are
  br label %if.end31, !control_dep_instr !7, !data_indep_instr !10
  store i32 0, i32* %sufadd, align 4, !control_dep_instr !7, !data_indep_instr !10
  store i32 0, i32* %sufstrip, align 4, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  land.end  for.body  if.else  
After path modifications process path
for.body  if.else  
Hash path invariants only
Invariants are
  br label %if.end15, !control_dep_instr !7, !data_indep_instr !10
  store i32 0, i32* %prestrip, align 4, !control_dep_instr !7, !data_indep_instr !10
  store i32 0, i32* %preadd, align 4, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  land.end  for.end  
After path modifications process path is empty
Processing path: entry  if.end  for.end  
After path modifications process path
entry  if.end  for.end  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_cap4(i32* %retval, i32* %nsaved), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %nsaved = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_cap4(i32* %retval, i32* %nsaved), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
 Skipping function per FilterFunctionPass:insert
 Processing function:save_root_cap
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then5  
After path modifications process path
entry  if.end  if.then5  
Processing path: entry  if.end  if.end12  for.cond  for.body  if.then16  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  if.then16  
After path modifications process path
entry  if.end  if.end12  if.then16  
Processing path: entry  if.end  if.end12  for.cond  for.body  if.end17  for.inc  
After path modifications process path
if.end17  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  
After path modifications process path
entry  if.end  if.end12  
Processing path: entry  if.end  if.end12  for.cond  for.end  if.then21  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.then21  
After path modifications process path
entry  if.end  if.end12  for.end  if.then21  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.body32  if.then36  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  if.then36  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  if.then36  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  if.then36  
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_root_cap2(i8** %p, i8** %pattern.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %pattern.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_root_cap2(i8** %p, i8** %pattern.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.body32  if.end37  for.inc38  
After path modifications process path
if.end37  
Hash path invariants only
Invariants are
  br label %for.inc38, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.then46  if.then57  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.then46  if.then57  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.then46  if.then57  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.then46  if.then57  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.then46  lor.lhs.false  if.end69  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.then46  lor.lhs.false  if.end69  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.then46  lor.lhs.false  if.end69  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.then46  lor.lhs.false  if.end69  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.body  if.then114  
After path modifications process path
while.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.body  lor.lhs.false94  land.lhs.true  if.end115  if.then117  if.then123  
After path modifications process path
while.body  lor.lhs.false94  land.lhs.true  if.end115  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  if.then123  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  if.then123  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  if.then123  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  if.then123  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.body  lor.lhs.false94  land.lhs.true  if.end115  if.then117  if.end135  
After path modifications process path
while.body  lor.lhs.false94  land.lhs.true  if.end115  if.end135  
Hash path invariants only
Invariants are
  br label %if.end151, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.body  lor.lhs.false94  land.lhs.true  if.end115  if.end151  
After path modifications process path
while.body  lor.lhs.false94  land.lhs.true  if.end115  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.body  lor.lhs.false94  land.lhs.true  if.end115  if.else136  if.then142  
After path modifications process path
while.body  lor.lhs.false94  land.lhs.true  if.end115  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  if.then142  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  if.then142  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  if.then142  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  if.then142  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.body  lor.lhs.false94  land.lhs.true  if.end115  if.else136  if.end150  
After path modifications process path
while.body  lor.lhs.false94  land.lhs.true  if.end115  if.end150  
Hash path invariants only
Invariants are
  br label %if.end151, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.body  lor.lhs.false94  land.lhs.true  lor.lhs.false105  
After path modifications process path
while.body  lor.lhs.false94  land.lhs.true  lor.lhs.false105  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.body  lor.lhs.false94  lor.lhs.false97  
After path modifications process path
while.body  lor.lhs.false94  lor.lhs.false97  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.end84  while.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.end84  while.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.end  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.end84  while.end  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.else  if.then75  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.else  if.then75  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.else  if.then75  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.else  if.then75  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.then44  if.else  if.end83  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.then44  if.else  if.end83  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.else  if.end83  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.then44  if.else  if.end83  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.then161  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.then161  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.then161  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.then161  
Processing call instruction..
Can't handle this operand   %dent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_root_cap4(%struct.dent** %dent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.then194  if.then203  
After path modifications process path
land.lhs.true176  if.then188  if.then194  if.then203  
Hash path invariants only
Invariants are
  br label %if.end208, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay195 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arrayidx204 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  call void @lowcase(i8* %arraydecay195), !control_dep_instr !7, !data_indep_instr !11
  %arrayidx207 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
Processing call instruction..
Can't handle this operand   %arraydecay195 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12 of the call   call void @lowcase(i8* %arraydecay195), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.then194  if.end208  if.then217  
After path modifications process path
land.lhs.true176  if.then188  if.then194  
Hash path invariants only
Invariants are
  %arraydecay195 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  call void @lowcase(i8* %arraydecay195), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %arraydecay195 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12 of the call   call void @lowcase(i8* %arraydecay195), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  if.then217  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  if.then217  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  if.then217  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  if.then217  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.then194  if.end208  if.end218  
After path modifications process path
land.lhs.true176  if.then188  if.then194  if.end218  
Hash path invariants only
Invariants are
  br label %if.end314, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  call void @lowcase(i8* %arraydecay195), !control_dep_instr !7, !data_indep_instr !11
  %arraydecay195 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %arraydecay195 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12 of the call   call void @lowcase(i8* %arraydecay195), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.then194  lor.lhs.false197  
After path modifications process path
land.lhs.true176  if.then188  if.then194  lor.lhs.false197  
Hash path invariants only
Invariants are
  %arraydecay195 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  call void @lowcase(i8* %arraydecay195), !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %arraydecay195 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12 of the call   call void @lowcase(i8* %arraydecay195), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.end314  
After path modifications process path
land.lhs.true176  if.then188  if.end314  
Hash path invariants only
Invariants are
  br label %if.end315, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond234  for.body237  for.inc244  
After path modifications process path
for.body237  
Hash path invariants only
Invariants are
  br label %for.inc244, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.then233  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.then233  
Hash path invariants only
Invariants are
  br label %for.cond234, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond234  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.then233  for.end246  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.then233  for.end246  
Hash path invariants only
Invariants are
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond234, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end261, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond279  for.body282  for.inc285  
After path modifications process path
for.body282  
Hash path invariants only
Invariants are
  br label %for.inc285, !control_dep_instr !7, !data_indep_instr !11
  call void @save_root_cap7(i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_root_cap7(i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.end261  if.then275  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.end261  if.then275  
Hash path invariants only
Invariants are
  br label %for.cond279, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay276 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond279  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.end261  if.then275  for.end288  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.end261  if.then275  for.end288  
Hash path invariants only
Invariants are
  br label %if.end303, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay276 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %for.cond279, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.end261  if.end303  if.then312  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.end261  
Hash path invariants only
Invariants are
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  if.then312  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  if.then312  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  if.then312  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  if.then312  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.end261  if.end303  if.end313  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.end261  if.end313  
Hash path invariants only
Invariants are
  br label %if.end314, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond293  for.body296  for.inc299  
After path modifications process path
for.body296  
Hash path invariants only
Invariants are
  br label %for.inc299, !control_dep_instr !7, !data_indep_instr !11
  call void @save_root_cap9(i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @save_root_cap9(i8** %p), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.end261  if.else289  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.end261  if.else289  
Hash path invariants only
Invariants are
  br label %for.cond293, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay290 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond293  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.end261  if.else289  for.end302  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.end261  if.else289  for.end302  
Hash path invariants only
Invariants are
  br label %if.end303, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay290 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %for.cond293, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond248  for.body251  for.inc258  
After path modifications process path
for.body251  
Hash path invariants only
Invariants are
  br label %for.inc258, !control_dep_instr !7, !argument_dep_instr !9, !data_indep_instr !11
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.else247  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.else247  
Hash path invariants only
Invariants are
  br label %for.cond248, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond248  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  if.then188  if.else219  if.else247  for.end260  
After path modifications process path
land.lhs.true176  if.then188  if.else219  if.else247  for.end260  
Hash path invariants only
Invariants are
  br label %if.end261, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond248, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %i, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay223 = getelementptr inbounds [184 x i8], [184 x i8]* %newword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  land.lhs.true176  lor.lhs.false179  
After path modifications process path
land.lhs.true176  lor.lhs.false179  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  if.end315  if.then321  for.end324  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  if.then321  for.end324  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  if.then321  for.end324  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  if.then321  for.end324  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  if.then321  for.end324  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  if.end315  if.end322  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  for.cond164  lor.lhs.false167  
After path modifications process path
lor.lhs.false167  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end12  for.end  if.end29  for.cond30  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.cond  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path is empty
Processing path: entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
After path modifications process path
entry  if.end  if.end12  for.end  if.end29  for.end40  if.end152  if.end163  
 Skipping function per FilterFunctionPass:ins_cap
 Skipping function per FilterFunctionPass:ins_root_cap
 Processing function:askmode
Short range hashing enabled.
Processing path: entry  if.then  if.then1  
After path modifications process path
entry  if.then  if.then1  
Processing path: entry  if.then  if.end  
After path modifications process path
entry  if.then  if.end  
Processing path: entry  if.end3  while.body  if.then7  if.then10  
After path modifications process path is empty
Processing path: entry  if.end3  if.then10  
After path modifications process path
entry  if.end3  if.then10  
Processing path: entry  if.end3  while.body  if.then7  if.end11  
After path modifications process path
if.end11  
Hash path invariants only
Invariants are
  br label %if.end16, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  while.end164  
After path modifications process path is empty
Processing path: entry  if.end3  while.end164  
After path modifications process path
entry  if.end3  while.end164  
Processing path: entry  if.end3  while.body  if.end16  if.then21  
After path modifications process path
if.end16  if.then21  
Hash path invariants only
Invariants are
  br label %if.end25, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode2(i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11
  store i32 1, i32* %hadnl, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %bufsize = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode2(i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.cond34  land.rhs  lor.end  
After path modifications process path
land.rhs  lor.end  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.then29  
After path modifications process path
if.end16  if.end25  if.then29  
Hash path invariants only
Invariants are
  br label %while.cond34, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Can't handle this operand   %bufsize = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.cond34  land.rhs  lor.lhs.false  lor.rhs  
After path modifications process path
land.rhs  lor.lhs.false  lor.rhs  
Hash path invariants only
Invariants are
  br label %lor.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.then29  
After path modifications process path
if.end16  if.end25  if.then29  
Hash path invariants only
Invariants are
  call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
  br label %while.cond34, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Can't handle this operand   %bufsize = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.cond34  land.end  while.body53  
After path modifications process path is empty
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.then29  if.then57  
After path modifications process path
if.end16  if.end25  if.then29  if.then57  
Hash path invariants only
Invariants are
  br label %while.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
  br label %while.cond34, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Can't handle this operand   %bufsize = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.cond34  land.end  while.body53  if.end58  
After path modifications process path is empty
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.then29  
After path modifications process path
if.end16  if.end25  if.then29  
Hash path invariants only
Invariants are
  call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
  br label %while.cond34, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Can't handle this operand   %bufsize = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.cond34  land.end  
After path modifications process path is empty
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.then29  while.end  
After path modifications process path
if.end16  if.end25  if.then29  while.end  
Hash path invariants only
Invariants are
  br label %if.end64, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
  br label %while.cond34, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Can't handle this operand   %bufsize = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode3(i32* %ch, i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.then67  
After path modifications process path
if.end16  if.end25  if.end64  if.then67  
Hash path invariants only
Invariants are
  br label %if.end152, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode5(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.end152  if.then154  
After path modifications process path
if.end16  if.end25  if.end64  if.end152  if.then154  
Hash path invariants only
Invariants are
  br label %if.end156, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @contextoffset, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.end152  if.end156  if.then158  if.then160  
After path modifications process path
if.end16  if.end25  if.end64  if.end152  if.end156  if.then158  if.then160  
Hash path invariants only
Invariants are
  br label %if.end162, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode10(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
  call void @stop(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Processing call instruction..
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.end152  if.end156  if.then158  if.end162  
After path modifications process path
if.end16  if.end25  if.end64  if.end152  if.end156  if.then158  if.end162  
Hash path invariants only
Invariants are
  br label %if.end163, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
  call void @stop(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.end152  if.end156  if.end163  
After path modifications process path
if.end16  if.end25  if.end64  if.end152  if.end156  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.end152  if.else155  
After path modifications process path
if.end16  if.end25  if.end64  if.end152  if.else155  
Hash path invariants only
Invariants are
  br label %if.end156, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode9(i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Can't handle this operand   %bufsize = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode9(i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  if.then76  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  if.then76  
Hash path invariants only
Invariants are
  br label %if.end151, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode6(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  if.end151  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  if.end151  
Hash path invariants only
Invariants are
  br label %if.end152, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.then86  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.then86  
Hash path invariants only
Invariants are
  br label %if.end150, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.end150  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.end150  
Hash path invariants only
Invariants are
  br label %if.end151, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.then93  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.then93  
Hash path invariants only
Invariants are
  br label %if.end149, !control_dep_instr !7, !data_indep_instr !11
  store i8 80, i8* @LaTeX_Mode, align 1, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @math_mode, align 4, !control_dep_instr !7, !data_indep_instr !11
  call void @treeoutput(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.end149  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.end149  
Hash path invariants only
Invariants are
  br label %if.end150, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.then98  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.then98  
Hash path invariants only
Invariants are
  br label %if.end148, !control_dep_instr !7, !data_indep_instr !11
  store i32 1, i32* @terse, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.end148  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.end148  
Hash path invariants only
Invariants are
  br label %if.end149, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.then103  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.then103  
Hash path invariants only
Invariants are
  br label %if.end147, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @terse, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.end147  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.end147  
Hash path invariants only
Invariants are
  br label %if.end148, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.then108  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.then108  
Hash path invariants only
Invariants are
  store i32 0, i32* @tflag, align 4, !control_dep_instr !7, !data_indep_instr !11
  store i8 80, i8* @LaTeX_Mode, align 1, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end146, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @math_mode, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.end146  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.end146  
Hash path invariants only
Invariants are
  br label %if.end147, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.then113  land.rhs117  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.then113  land.rhs117  
Hash path invariants only
Invariants are
  store i8 80, i8* @LaTeX_Mode, align 1, !control_dep_instr !7, !data_indep_instr !11
  br label %land.end121, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @math_mode, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.then113  land.end121  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.then113  land.end121  
Hash path invariants only
Invariants are
  store i8 80, i8* @LaTeX_Mode, align 1, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end145, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @math_mode, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.end145  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.end145  
Hash path invariants only
Invariants are
  br label %if.end146, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.then126  if.then130  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.then126  if.then130  
Hash path invariants only
Invariants are
  br label %if.end131, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @defdupchar, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.then126  if.end131  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.then126  if.end131  
Hash path invariants only
Invariants are
  br label %if.end144, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.end144  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.end144  
Hash path invariants only
Invariants are
  br label %if.end145, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  for.cond  for.body  
After path modifications process path is empty
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.else132  if.then136  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.else132  if.then136  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i64 1), i8** %cp2, align 8, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %cp1, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Non numeric pointers (int and float) are skipped:  %cp1 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Non numeric pointers (int and float) are skipped:  %cp2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  for.cond  
After path modifications process path is empty
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.else132  if.then136  for.end  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.else132  if.then136  for.end  
Hash path invariants only
Invariants are
  br label %if.end143, !control_dep_instr !7, !data_indep_instr !11
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i64 1), i8** %cp2, align 8, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode7(i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
  store i8* getelementptr inbounds ([10 x [8192 x i8]], [10 x [8192 x i8]]* @contextbufs, i64 0, i64 0, i32 0), i8** %cp1, align 8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Non numeric pointers (int and float) are skipped:  %cp1 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Non numeric pointers (int and float) are skipped:  %cp2 = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Processing call instruction..
Can't handle this operand   %bufsize = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @askmode7(i32* %bufsize), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.else132  if.end143  
After path modifications process path
if.end16  if.end25  if.end64  if.else68  lor.lhs.false72  if.else82  if.else89  if.else94  if.else99  if.else104  if.else109  if.else122  if.else132  if.end143  
Hash path invariants only
Invariants are
  br label %if.end144, !control_dep_instr !7, !data_indep_instr !11
  call void @askmode8(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing call instruction..
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.end16  if.else24  
After path modifications process path
if.end16  if.else24  
Hash path invariants only
Invariants are
  br label %if.end25, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* %hadnl, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
Processing path: entry  if.end3  while.body  if.else  if.then14  
After path modifications process path is empty
Processing path: entry  if.end3  if.then14  
After path modifications process path
entry  if.end3  if.then14  
Processing path: entry  if.end3  while.body  if.else  if.end15  
After path modifications process path
if.end15  
Hash path invariants only
Invariants are
  br label %if.end16, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  if.end3  
After path modifications process path
entry  if.end3  
 Processing function:copyout
Short range hashing enabled.
Processing path: entry  while.cond  while.body  if.then  
After path modifications process path is empty
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
No oh has been applied in the path
Processing path: entry  while.cond  while.body  if.end  if.end6  
After path modifications process path
if.end  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.body  if.end  land.lhs.true  if.then4  
After path modifications process path
if.end  land.lhs.true  if.then4  
Hash path invariants only
Invariants are
  br label %if.end6, !control_dep_instr !7, !data_indep_instr !11, !global_dep_instr !13
  call void @copyout0(i8*** %cc.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !13
Processing call instruction..
Can't handle this operand   %cc.addr = alloca i8**, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @copyout0(i8*** %cc.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !13
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
No oh has been applied in the path
 Skipping function per FilterFunctionPass:skipoverword
 Skipping function per FilterFunctionPass:checkline
 Processing function:skiptoword
Short range hashing enabled.
Processing path: entry  while.cond  land.rhs  land.lhs.true  
After path modifications process path
land.rhs  land.lhs.true  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.rhs  lor.lhs.false  lor.rhs  land.rhs13  
After path modifications process path
land.rhs  lor.lhs.false  lor.rhs  land.rhs13  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.rhs  lor.lhs.false  lor.rhs  land.end  
After path modifications process path
land.rhs  lor.lhs.false  lor.rhs  land.end  
Hash path invariants only
Invariants are
  br label %lor.end, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.rhs  lor.end  
After path modifications process path
land.rhs  lor.end  
Hash path invariants only
Invariants are
  br label %land.end15, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.rhs  land.lhs.true4  
After path modifications process path
land.rhs  land.lhs.true4  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.then21  if.end  
After path modifications process path
while.body  if.then  if.then21  if.end  
Hash path invariants only
Invariants are
  br label %if.end138, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.then21  if.then23  
After path modifications process path
while.body  if.then  if.then21  if.then23  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @math_mode, align 4, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword0(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i8 80, i8* @LaTeX_Mode, align 1, !control_dep_instr !7, !data_indep_instr !11
  store i32 1, i32* @TeX_comment, align 4, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.end138  if.then142  
After path modifications process path
while.body  if.then  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.then142  
After path modifications process path
entry  if.then142  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.end138  if.end143  
After path modifications process path
while.body  if.then  if.end143  
Hash path invariants only
Invariants are
  br label %if.end211, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  land.lhs.true30  
After path modifications process path
while.body  if.then  if.else  if.then26  land.lhs.true30  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  if.then40  
After path modifications process path
while.body  if.then  if.else  if.then26  if.then40  
Hash path invariants only
Invariants are
  br label %if.end73, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword1(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  if.end73  if.then76  
After path modifications process path
while.body  if.then  if.else  if.then26  if.end73  if.then76  
Hash path invariants only
Invariants are
  store i32 0, i32* @math_mode, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end78, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword4(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  if.end73  if.end78  
After path modifications process path
while.body  if.then  if.else  if.then26  if.end73  if.end78  
Hash path invariants only
Invariants are
  br label %if.end137, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  land.lhs.true37  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  land.lhs.true37  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond42  land.rhs45  lor.end60  
After path modifications process path
land.rhs45  lor.end60  
Hash path invariants only
Invariants are
  br label %land.end61, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
Hash path invariants only
Invariants are
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond42  land.rhs45  lor.lhs.false50  lor.rhs55  
After path modifications process path
land.rhs45  lor.lhs.false50  lor.rhs55  
Hash path invariants only
Invariants are
  br label %lor.end60, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
Hash path invariants only
Invariants are
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond42  land.end61  while.body62  
After path modifications process path is empty
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
Hash path invariants only
Invariants are
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond42  land.end61  if.then66  
After path modifications process path is empty
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  while.end  if.then66  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  
Hash path invariants only
Invariants are
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.then66  
After path modifications process path
entry  if.then66  
No oh has been applied in the path
Processing path: entry  while.cond42  land.end61  
After path modifications process path is empty
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  while.end  if.end67  if.then70  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  if.end67  if.then70  
Hash path invariants only
Invariants are
  br label %if.end72, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword3(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond42  land.end61  
After path modifications process path is empty
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  while.end  if.end67  if.end72  
After path modifications process path
while.body  if.then  if.else  if.then26  lor.lhs.false33  if.else41  if.end67  if.end72  
Hash path invariants only
Invariants are
  br label %if.end73, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
  br label %while.cond42, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.end137  
After path modifications process path
while.body  if.then  if.else  if.end137  
Hash path invariants only
Invariants are
  br label %if.end138, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  land.lhs.true82  land.lhs.true87  if.then91  
After path modifications process path
while.body  if.then  if.else  if.else79  land.lhs.true82  land.lhs.true87  if.then91  
Hash path invariants only
Invariants are
  br label %if.end136, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword5(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.end136  
After path modifications process path
while.body  if.then  if.else  if.else79  if.end136  
Hash path invariants only
Invariants are
  br label %if.end137, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  if.then108  if.then111  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  if.then108  if.then111  
Hash path invariants only
Invariants are
  br label %if.end113, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword6(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  if.then108  if.end113  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  if.then108  if.end113  
Hash path invariants only
Invariants are
  br label %if.end135, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  if.end135  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  if.end135  
Hash path invariants only
Invariants are
  br label %if.end136, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  land.lhs.true99  land.lhs.true104  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  land.lhs.true99  land.lhs.true104  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  land.lhs.true118  if.then121  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  land.lhs.true118  if.then121  
Hash path invariants only
Invariants are
  br label %if.end134, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword7(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.end134  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.end134  
Hash path invariants only
Invariants are
  br label %if.end135, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.then126  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.then126  
Hash path invariants only
Invariants are
  br label %if.end133, !control_dep_instr !7, !data_indep_instr !11
  store i8 80, i8* @LaTeX_Mode, align 1, !control_dep_instr !7, !data_indep_instr !11
  call void @TeX_skip_parens(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_skip_parens(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.end133  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.end133  
Hash path invariants only
Invariants are
  br label %if.end134, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.else127  if.then130  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.else127  if.then130  
Hash path invariants only
Invariants are
  br label %if.end132, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword8(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.else127  if.end132  
After path modifications process path
while.body  if.then  if.else  if.else79  if.else93  lor.lhs.false97  if.else114  if.else122  if.else127  if.end132  
Hash path invariants only
Invariants are
  br label %if.end133, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond231  while.body239  
After path modifications process path is empty
Processing path: entry  while.cond  land.end15  while.body  if.end211  land.lhs.true215  land.lhs.true225  if.then229  
After path modifications process path
while.body  if.end211  land.lhs.true215  land.lhs.true225  if.then229  
Hash path invariants only
Invariants are
  br label %while.cond231, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword16(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword16(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond231  
After path modifications process path is empty
Processing path: entry  while.cond  land.end15  while.body  if.end211  land.lhs.true215  land.lhs.true225  if.then229  while.end241  
After path modifications process path
while.body  if.end211  land.lhs.true215  land.lhs.true225  if.then229  while.end241  
Hash path invariants only
Invariants are
  br label %if.end244, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
  br label %while.cond231, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword16(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword16(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.end211  land.lhs.true215  land.lhs.true225  lor.lhs.false227  
After path modifications process path
while.body  if.end211  land.lhs.true215  land.lhs.true225  lor.lhs.false227  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.end211  land.lhs.true215  lor.lhs.false220  
After path modifications process path
while.body  if.end211  land.lhs.true215  lor.lhs.false220  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.end211  if.end244  
After path modifications process path
while.body  if.end211  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.end211  if.else242  
After path modifications process path
while.body  if.end211  if.else242  
Hash path invariants only
Invariants are
  br label %if.end244, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword18(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword18(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.default  if.then189  
After path modifications process path
while.body  if.else144  if.then149  sw.default  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.default  if.else191  if.then197  if.then203  
After path modifications process path
while.body  if.else144  if.then149  sw.default  if.else191  if.then197  if.then203  
Hash path invariants only
Invariants are
  br label %if.end207, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword14(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword14(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.default  if.else191  if.then197  if.end207  
After path modifications process path
while.body  if.else144  if.then149  sw.default  if.else191  if.then197  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.default  if.else191  if.then197  if.else205  
After path modifications process path
while.body  if.else144  if.then149  sw.default  if.else191  if.then197  if.else205  
Hash path invariants only
Invariants are
  br label %if.end207, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword15(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword15(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.default  if.else191  if.end208  if.end209  sw.epilog  
After path modifications process path
while.body  if.else144  if.then149  sw.default  if.else191  if.end208  if.end209  sw.epilog  
Hash path invariants only
Invariants are
  br label %if.end210, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
  br label %sw.epilog, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12, !global_dep_instr !14
  br label %if.end209, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb  if.then157  
After path modifications process path
while.body  if.else144  if.then149  sw.bb  if.then157  
Hash path invariants only
Invariants are
  br label %if.end160, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword9(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword9(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb  if.end160  
After path modifications process path
while.body  if.else144  if.then149  sw.bb  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb  if.else158  
After path modifications process path
while.body  if.else144  if.then149  sw.bb  if.else158  
Hash path invariants only
Invariants are
  br label %if.end160, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword10(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword10(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb161  if.then170  
After path modifications process path
while.body  if.else144  if.then149  sw.bb161  if.then170  
Hash path invariants only
Invariants are
  br label %if.end172, !control_dep_instr !7, !data_indep_instr !11
  call void @skiptoword11(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword11(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb161  if.end172  if.then181  
After path modifications process path
while.body  if.else144  if.then149  sw.bb161  if.end172  if.then181  
Hash path invariants only
Invariants are
  br label %if.end183, !control_dep_instr !7, !data_indep_instr !11
  %307 = load i16*, i16** %call176, align 8, !control_dep_instr !7, !data_dep_instr !8
  call void @skiptoword12(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %call176 = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @skiptoword12(i8** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb161  if.end172  if.end183  
After path modifications process path
while.body  if.else144  if.then149  sw.bb161  if.end172  
Hash path invariants only
Invariants are
  %call176 = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  %310 = load i16*, i16** %call176, align 8, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.then149  sw.bb161  lor.lhs.false166  
After path modifications process path
while.body  if.else144  if.then149  sw.bb161  lor.lhs.false166  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.body  if.else144  if.end210  
After path modifications process path
while.body  if.else144  if.end210  
Hash path invariants only
Invariants are
  br label %if.end211, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end15  while.end245  if.then249  if.then251  
After path modifications process path is empty
Processing path: entry  while.end245  if.then249  if.then251  
After path modifications process path
entry  while.end245  if.then249  if.then251  
Processing call instruction..
Processing path: entry  while.cond  land.end15  while.end245  if.then249  if.end252  
After path modifications process path is empty
Processing path: entry  while.end245  if.then249  if.end252  
After path modifications process path
entry  while.end245  if.then249  if.end252  
Processing path: entry  while.cond  land.end15  while.end245  if.end253  
After path modifications process path is empty
Processing path: entry  while.end245  if.end253  
After path modifications process path
entry  while.end245  if.end253  
 Processing function:TeX_math_check
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.else  if.end  if.then20  
After path modifications process path
entry  if.else  if.end  if.then20  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_math_check1(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.then25  
After path modifications process path
entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.then25  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_math_check2(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.end27  
After path modifications process path
entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.end27  
Processing path: entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.else26  
After path modifications process path
entry  if.else  if.end  lor.lhs.false  lor.lhs.false8  lor.lhs.false12  lor.lhs.false16  if.end22  if.else26  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_math_check3(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
 Skipping function per FilterFunctionPass:TeX_LR_check
 Processing function:TeX_math_end
Short range hashing enabled.
Processing path: entry  if.then  if.then7  
After path modifications process path
entry  if.then  if.then7  
Processing path: entry  if.then  if.end  
After path modifications process path
entry  if.then  if.end  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.else  if.then12  if.end14  
After path modifications process path
entry  if.else  if.then12  if.end14  
Processing path: entry  if.else  if.then12  if.then13  
After path modifications process path
entry  if.else  if.then12  if.then13  
Processing path: entry  if.else  if.end15  if.end16  if.then26  
After path modifications process path
entry  if.else  if.end15  if.end16  if.then26  
Processing path: entry  if.else  if.end15  if.end16  lor.lhs.false  if.end27  if.then29  
After path modifications process path
entry  if.else  if.end15  if.end16  lor.lhs.false  if.end27  if.then29  
Processing path: entry  if.else  if.end15  if.end16  lor.lhs.false  if.end27  if.end30  if.then34  
After path modifications process path
entry  if.else  if.end15  if.end16  lor.lhs.false  if.end27  if.end30  if.then34  
Processing path: entry  if.else  if.end15  if.end16  lor.lhs.false  if.end27  if.end30  if.else36  
After path modifications process path
entry  if.else  if.end15  if.end16  lor.lhs.false  if.end27  if.end30  if.else36  
 Skipping function per FilterFunctionPass:TeX_strncmp
 Skipping function per FilterFunctionPass:TeX_skip_parens
 Processing function:TeX_math_begin
Short range hashing enabled.
Processing path: entry  if.then  if.then7  
After path modifications process path
entry  if.then  if.then7  
Processing path: entry  if.then  if.end  
After path modifications process path
entry  if.then  if.end  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end8  while.cond  while.body  if.then22  
After path modifications process path is empty
Processing path: entry  if.end8  if.then22  
After path modifications process path
entry  if.end8  if.then22  
Processing path: entry  if.end8  while.cond  while.body  lor.lhs.false  if.else  if.else31  if.then35  if.then38  
After path modifications process path
if.else  
Hash path invariants only
Invariants are
  %39 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end8  if.then38  
After path modifications process path
entry  if.end8  if.then38  
Processing path: entry  if.end8  while.cond  while.body  lor.lhs.false  if.else  if.else31  if.then35  if.else39  if.end41  if.end43  if.end44  if.end45  
After path modifications process path
if.else  if.else39  if.end41  if.end43  if.end44  
Hash path invariants only
Invariants are
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  %41 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
  call void @TeX_math_begin2(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !11
  br label %if.end45, !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !11
  br label %if.end43, !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !11
  br label %if.end41, !control_dep_instr !7, !data_indep_instr !12
  br label %if.end44, !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_math_begin2(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !11
Processing path: entry  if.end8  
After path modifications process path
entry  if.end8  
Processing path: entry  if.end8  while.cond  while.body  lor.lhs.false  if.else  if.else31  if.else42  
After path modifications process path
if.else  
Hash path invariants only
Invariants are
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  %45 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end8  if.else42  
After path modifications process path
entry  if.end8  if.else42  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_math_begin3(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !12, !input_dep_block !11
Processing path: entry  if.end8  while.cond  while.body  lor.lhs.false  if.else  land.lhs.true  if.then29  
After path modifications process path
if.else  land.lhs.true  
Hash path invariants only
Invariants are
  %call = call i16** @__ctype_b_loc() #8, !control_dep_instr !7, !data_dep_instr !8
  %47 = load i16*, i16** %call, align 8, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end8  
After path modifications process path
entry  if.end8  
Processing path: entry  if.end8  while.end  land.lhs.true55  if.then61  while.cond63  while.body65  land.lhs.true71  if.then81  
After path modifications process path
while.body65  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end8  while.cond  while.end  land.lhs.true55  if.then61  if.then81  
After path modifications process path is empty
Processing path: entry  if.end8  while.end  land.lhs.true55  if.then61  if.then81  
After path modifications process path
entry  if.end8  while.end  land.lhs.true55  if.then61  if.then81  
Processing path: entry  if.end8  while.end  land.lhs.true55  if.then61  while.cond63  while.body65  land.lhs.true71  lor.lhs.false76  
After path modifications process path
while.body65  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end8  while.cond  while.end  land.lhs.true55  if.then61  
After path modifications process path is empty
Processing path: entry  if.end8  while.end  land.lhs.true55  if.then61  
After path modifications process path
entry  if.end8  while.end  land.lhs.true55  if.then61  
Processing path: entry  if.end8  while.end  land.lhs.true55  if.then61  while.cond63  while.body65  if.end83  
After path modifications process path
while.body65  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end8  while.cond  while.end  land.lhs.true55  if.then61  
After path modifications process path is empty
Processing path: entry  if.end8  while.end  land.lhs.true55  if.then61  
After path modifications process path
entry  if.end8  while.end  land.lhs.true55  if.then61  
Processing path: entry  if.end8  while.end  land.lhs.true55  if.then61  while.cond63  while.end84  
After path modifications process path is empty
Processing path: entry  if.end8  while.cond  while.end  land.lhs.true55  if.then61  while.end84  
After path modifications process path is empty
Processing path: entry  if.end8  while.end  land.lhs.true55  if.then61  while.end84  
After path modifications process path
entry  if.end8  while.end  land.lhs.true55  if.then61  while.end84  
Processing path: entry  if.end8  while.cond  while.end  if.else85  
After path modifications process path is empty
Processing path: entry  if.end8  while.end  if.else85  
After path modifications process path
entry  if.end8  while.end  if.else85  
Processing path: entry  if.end8  while.cond  while.end  lor.lhs.false50  
After path modifications process path is empty
Processing path: entry  if.end8  while.end  lor.lhs.false50  
After path modifications process path
entry  if.end8  while.end  lor.lhs.false50  
 Skipping function per FilterFunctionPass:TeX_skip_check
 Processing function:TeX_LR_begin
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Processing path: entry  if.end25  
After path modifications process path
entry  if.end25  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_LR_begin2(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  if.then14  if.then16  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  if.then14  if.then16  
Processing call instruction..
Can't handle this operand   %bufp.addr = alloca i8**, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @TeX_LR_begin1(i8*** %bufp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !10
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  if.then14  if.end  if.end24  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  if.then14  if.end  if.end24  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  if.then14  if.else17  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  if.then14  if.else17  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  lor.lhs.false11  if.else18  if.then21  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  lor.lhs.false11  if.else18  if.then21  
Processing path: entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  lor.lhs.false11  if.else18  if.else23  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false3  lor.lhs.false6  if.else  lor.lhs.false11  if.else18  if.else23  
 Skipping function per FilterFunctionPass:TeX_open_paren
 Skipping function per FilterFunctionPass:TeX_skip_args
 Processing function:dumpmode
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end39  if.then40  
After path modifications process path
entry  if.end39  if.then40  
Processing path: entry  if.end39  if.end42  if.then44  
After path modifications process path
entry  if.end39  if.end42  if.then44  
Processing path: entry  if.end39  if.end42  if.end46  
After path modifications process path
entry  if.end39  if.end42  if.end46  
Processing path: entry  lor.lhs.false  lor.lhs.false5  lor.lhs.false9  lor.lhs.false13  lor.lhs.false17  lor.lhs.false21  if.else  if.then33  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false5  lor.lhs.false9  lor.lhs.false13  lor.lhs.false17  lor.lhs.false21  if.else  if.then33  
Processing path: entry  lor.lhs.false  lor.lhs.false5  lor.lhs.false9  lor.lhs.false13  lor.lhs.false17  lor.lhs.false21  if.else  if.end  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false5  lor.lhs.false9  lor.lhs.false13  lor.lhs.false17  lor.lhs.false21  if.else  if.end  
Processing path: entry  lor.lhs.false  lor.lhs.false5  lor.lhs.false9  lor.lhs.false13  lor.lhs.false17  lor.lhs.false21  if.else  lor.lhs.false29  if.else36  
After path modifications process path
entry  lor.lhs.false  lor.lhs.false5  lor.lhs.false9  lor.lhs.false13  lor.lhs.false17  lor.lhs.false21  if.else  lor.lhs.false29  if.else36  
 Processing function:tbldump
Short range hashing enabled.
Processing path: entry  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
No oh has been applied in the path
 Processing function:entdump
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  
After path modifications process path
for.body  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
  call void @entdump1(), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %flagp.addr = alloca %struct.flagent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @entdump0(%struct.flagent** %flagp.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  for.cond  for.body  if.end  for.inc  
After path modifications process path
for.body  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  if.then12  
After path modifications process path is empty
Processing path: entry  for.end  if.then12  
After path modifications process path
entry  for.end  if.then12  
Processing call instruction..
Processing path: entry  for.cond  for.end  if.end14  if.then18  
After path modifications process path is empty
Processing path: entry  for.end  if.end14  if.then18  
After path modifications process path
entry  for.end  if.end14  if.then18  
Processing call instruction..
Can't handle this operand   %flagp.addr = alloca %struct.flagent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @entdump4(%struct.flagent** %flagp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  for.cond  for.end  if.end14  if.end21  cond.true  
After path modifications process path is empty
Processing path: entry  for.end  if.end14  if.end21  cond.true  
After path modifications process path
entry  for.end  if.end14  if.end21  cond.true  
Processing path: entry  for.cond  for.end  if.end14  if.end21  cond.end  
After path modifications process path is empty
Processing path: entry  for.end  if.end14  if.end21  cond.end  
After path modifications process path
entry  for.end  if.end14  if.end21  cond.end  
Processing path: entry  for.cond  for.end  if.end14  if.end21  cond.false  
After path modifications process path is empty
Processing path: entry  for.end  if.end14  if.end21  cond.false  
After path modifications process path
entry  for.end  if.end14  if.end21  cond.false  
 Skipping function per FilterFunctionPass:setdump
 Skipping function per FilterFunctionPass:subsetdump
 Skipping function per FilterFunctionPass:good
 Processing function:cap_ok
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.else  if.then2  if.then3  
After path modifications process path
entry  if.else  if.then2  if.then3  
Processing path: entry  if.else  if.then2  if.end  cond.true  
After path modifications process path
entry  if.else  if.then2  if.end  cond.true  
Processing path: entry  if.else  if.then2  if.end  cond.end  
After path modifications process path
entry  if.else  if.then2  if.end  cond.end  
Processing path: entry  if.else  if.then2  if.end  cond.false  
After path modifications process path
entry  if.else  if.then2  if.end  cond.false  
Processing path: entry  if.else  if.then2  if.else7  
After path modifications process path
entry  if.else  if.then2  if.else7  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.then16  land.lhs.true  land.lhs.true21  if.then24  
After path modifications process path
if.then16  land.lhs.true  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.else  if.end12  if.end13  if.then24  
After path modifications process path
entry  if.else  if.end12  if.end13  if.then24  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.then16  if.end25  
After path modifications process path
if.then16  if.end25  
Hash path invariants only
Invariants are
  br label %if.end118, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.end118  if.then124  for.end126  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  if.then124  for.end126  
After path modifications process path
entry  if.else  if.end12  if.end13  if.then124  for.end126  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.end118  if.end125  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.then29  if.then32  
After path modifications process path
if.else26  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.else  if.end12  if.end13  if.then32  
After path modifications process path
entry  if.else  if.end12  if.end13  if.then32  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.then29  if.end33  
After path modifications process path
if.else26  if.end33  
Hash path invariants only
Invariants are
  br label %if.end117, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.end117  
After path modifications process path
if.else26  if.end117  
Hash path invariants only
Invariants are
  br label %if.end118, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond43  for.body  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.then42  if.then49  
After path modifications process path
if.else26  if.else34  if.then42  if.then49  
Hash path invariants only
Invariants are
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond43, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond43  for.body  if.end50  for.inc  
After path modifications process path
if.end50  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.then42  
After path modifications process path
if.else26  if.else34  if.then42  
Hash path invariants only
Invariants are
  call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond43, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond43  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.then42  for.end  
After path modifications process path
if.else26  if.else34  if.then42  for.end  
Hash path invariants only
Invariants are
  call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %if.end64, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond43, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok3(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  doublecontinue  
After path modifications process path
if.else26  if.else34  doublecontinue  
Hash path invariants only
Invariants are
  br label %if.end117, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  if.then82  
After path modifications process path
if.else26  if.else34  if.end64  if.then82  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  
After path modifications process path
if.else26  if.else34  if.end64  
Hash path invariants only
Invariants are
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  while.cond  while.body  if.end83  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond89  for.body91  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.then88  if.then95  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.then88  if.then95  
Hash path invariants only
Invariants are
  br label %for.cond89, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond89  for.body91  if.end96  for.inc97  
After path modifications process path
if.end96  
Hash path invariants only
Invariants are
  br label %for.inc97, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.then88  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.then88  
Hash path invariants only
Invariants are
  br label %for.cond89, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond89  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.then88  for.end99  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.then88  for.end99  
Hash path invariants only
Invariants are
  br label %if.end112, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond89, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.end112  if.then115  
After path modifications process path
if.else26  if.else34  if.end64  while.end  
Hash path invariants only
Invariants are
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  while.cond  if.then115  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  if.then115  
After path modifications process path
entry  if.else  if.end12  if.end13  if.then115  
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.end112  if.end116  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.end116  
Hash path invariants only
Invariants are
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond101  for.body103  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.else100  if.then107  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.else100  if.then107  
Hash path invariants only
Invariants are
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond101, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond101  for.body103  if.end108  for.inc109  
After path modifications process path
if.end108  
Hash path invariants only
Invariants are
  br label %for.inc109, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.else100  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.else100  
Hash path invariants only
Invariants are
  br label %for.cond101, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond101  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.end64  while.end  if.else100  for.end111  
After path modifications process path
if.else26  if.else34  if.end64  while.end  if.else100  for.end111  
Hash path invariants only
Invariants are
  br label %if.end112, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond101, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %prestrip = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %limit = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dword = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %preadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %sufadd = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok7(i32* %prestrip, i8** %limit, i8** %dword, i32* %preadd, i32* %sufadd, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  while.cond  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond52  for.body55  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.else51  if.then59  
After path modifications process path
if.else26  if.else34  if.else51  if.then59  
Hash path invariants only
Invariants are
  br label %doublecontinue, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
  call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond52  for.body55  if.end60  for.inc61  
After path modifications process path
if.end60  
Hash path invariants only
Invariants are
  br label %for.inc61, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.else51  
After path modifications process path
if.else26  if.else34  if.else51  
Hash path invariants only
Invariants are
  call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
Processing path: entry  if.else  if.end12  if.end13  for.cond52  
After path modifications process path is empty
Processing path: entry  if.else  if.end12  if.end13  for.cond  if.else26  if.else34  if.else51  for.end63  
After path modifications process path
if.else26  if.else34  if.else51  for.end63  
Hash path invariants only
Invariants are
  call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %if.end64, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %for.cond52, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay37, i8** %dword, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay37 = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay = getelementptr inbounds [120 x i8], [120 x i8]* %dentword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %w = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @cap_ok5(i8** %w, i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.else  if.end12  if.end13  
After path modifications process path
entry  if.else  if.end12  if.end13  
 Processing function:entryhasaffixes
Short range hashing enabled.
Processing path: entry  land.lhs.true  if.then  
After path modifications process path
entry  land.lhs.true  if.then  
Processing path: entry  if.end  land.lhs.true4  if.then14  
After path modifications process path
entry  if.end  land.lhs.true4  if.then14  
Processing path: entry  if.end  if.end15  
After path modifications process path
entry  if.end  if.end15  
Processing path: entry  return  
After path modifications process path
entry  return  
 Processing function:flagpr
Short range hashing enabled.
Processing path: entry  if.then  if.then2  for.cond  for.body  if.then10  
After path modifications process path is empty
Processing path: entry  if.then  if.then2  if.then10  
After path modifications process path
entry  if.then  if.then2  if.then10  
Processing path: entry  if.then  if.then2  for.cond  for.body  if.end  for.inc  
After path modifications process path
if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.then  if.then2  
After path modifications process path
entry  if.then  if.then2  
Processing path: entry  if.then  if.then2  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.then  if.then2  for.end  
After path modifications process path
entry  if.then  if.then2  for.end  
Processing path: entry  if.then  if.end25  
After path modifications process path
entry  if.then  if.end25  
Processing path: entry  if.then  if.else  for.cond11  for.body16  if.then20  
After path modifications process path is empty
Processing path: entry  if.then  if.else  if.then20  
After path modifications process path
entry  if.then  if.else  if.then20  
Processing path: entry  if.then  if.else  for.cond11  for.body16  if.end21  for.inc22  
After path modifications process path
if.end21  
Hash path invariants only
Invariants are
  br label %for.inc22, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.then  if.else  
After path modifications process path
entry  if.then  if.else  
Processing path: entry  if.then  if.else  for.cond11  for.end24  
After path modifications process path is empty
Processing path: entry  if.then  if.else  for.end24  
After path modifications process path
entry  if.then  if.else  for.end24  
Processing path: entry  if.end147  
After path modifications process path
entry  if.end147  
Processing path: entry  if.end26  if.then29  if.then38  for.cond39  for.body43  if.then47  
After path modifications process path is empty
Processing path: entry  if.end26  if.then29  if.then38  if.then47  
After path modifications process path
entry  if.end26  if.then29  if.then38  if.then47  
Processing path: entry  if.end26  if.then29  if.then38  for.cond39  for.body43  if.end48  for.inc49  
After path modifications process path
if.end48  
Hash path invariants only
Invariants are
  br label %for.inc49, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.then29  if.then38  
After path modifications process path
entry  if.end26  if.then29  if.then38  
Processing path: entry  if.end26  if.then29  if.then38  for.cond39  for.end51  
After path modifications process path is empty
Processing path: entry  if.end26  if.then29  if.then38  for.end51  
After path modifications process path
entry  if.end26  if.then29  if.then38  for.end51  
Processing path: entry  if.end26  if.then29  if.end71  
After path modifications process path
entry  if.end26  if.then29  if.end71  
Processing path: entry  if.end26  if.then29  if.else52  for.cond58  for.body62  if.then66  
After path modifications process path is empty
Processing path: entry  if.end26  if.then29  if.else52  if.then66  
After path modifications process path
entry  if.end26  if.then29  if.else52  if.then66  
Processing path: entry  if.end26  if.then29  if.else52  for.cond58  for.body62  if.end67  for.inc68  
After path modifications process path
if.end67  
Hash path invariants only
Invariants are
  br label %for.inc68, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.then29  if.else52  
After path modifications process path
entry  if.end26  if.then29  if.else52  
Processing path: entry  if.end26  if.then29  if.else52  for.cond58  for.end70  
After path modifications process path is empty
Processing path: entry  if.end26  if.then29  if.else52  for.end70  
After path modifications process path
entry  if.end26  if.then29  if.else52  for.end70  
Processing path: entry  if.end26  if.end72  if.then79  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.then79  
After path modifications process path
entry  if.end26  if.end72  if.then79  
Processing path: entry  if.end26  if.end72  if.then79  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.then79  while.end  
After path modifications process path
entry  if.end26  if.end72  if.then79  while.end  
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.body105  for.inc110  
After path modifications process path
for.body105  
Hash path invariants only
Invariants are
  br label %for.inc110, !control_dep_instr !7, !data_indep_instr !11
  call void @flagpr10(i8** %origp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %origp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr10(i8** %origp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  
After path modifications process path
entry  if.end26  if.end72  if.end99  
Processing call instruction..
Can't handle this operand   %prestrip.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr9(i32* %prestrip.addr, i32* %sufadd.addr, i32* %preadd.addr, i32* %orig_len), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %sufadd.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr9(i32* %prestrip.addr, i32* %sufadd.addr, i32* %preadd.addr, i32* %orig_len), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %preadd.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr9(i32* %prestrip.addr, i32* %sufadd.addr, i32* %preadd.addr, i32* %orig_len), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %orig_len = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr9(i32* %prestrip.addr, i32* %sufadd.addr, i32* %preadd.addr, i32* %orig_len), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.then115  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.then115  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.then115  
Processing call instruction..
Can't handle this operand   %origp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr12(i8** %origp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.end117  if.then121  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.then121  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.then121  
Processing call instruction..
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr13(i8** %word.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.end117  if.end135  if.then140  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.end135  if.then140  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.end135  if.then140  
Processing call instruction..
Can't handle this operand   %preflag.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr15(i32* %preflag.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.end117  if.end135  if.end142  if.then145  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.end135  if.end142  if.then145  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.end135  if.end142  if.then145  
Processing call instruction..
Can't handle this operand   %sufflag.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @flagpr16(i32* %sufflag.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  while.cond125  while.body127  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.end117  if.else124  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  while.cond125  while.end134  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.cond101  for.end112  if.end117  if.else124  while.end134  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  while.end134  
After path modifications process path
entry  if.end26  if.end72  if.end99  for.end112  if.end117  if.else124  while.end134  
Processing path: entry  if.end26  if.end72  if.else86  while.cond87  while.body91  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.else86  
After path modifications process path
entry  if.end26  if.end72  if.else86  
Processing path: entry  if.end26  if.end72  if.else86  while.cond87  while.end98  
After path modifications process path is empty
Processing path: entry  if.end26  if.end72  if.else86  while.end98  
After path modifications process path
entry  if.end26  if.end72  if.else86  while.end98  
 Processing function:linit
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then2  
After path modifications process path
entry  if.end  if.then2  
Processing path: entry  if.end  if.end4  if.then8  if.then11  
After path modifications process path
entry  if.end  if.end4  if.then8  if.then11  
Processing path: entry  if.end  if.end4  if.then8  if.end20  
After path modifications process path
entry  if.end  if.end4  if.then8  if.end20  
Processing path: entry  if.end  if.end4  if.then8  if.else  if.then15  
After path modifications process path
entry  if.end  if.end4  if.then8  if.else  if.then15  
Processing path: entry  if.end  if.end4  if.then8  if.else  if.end19  
After path modifications process path
entry  if.end  if.end4  if.then8  if.else  if.end19  
Processing path: entry  if.end  if.end4  if.then8  if.else  if.else17  
After path modifications process path
entry  if.end  if.end4  if.then8  if.else  if.else17  
Processing path: entry  if.end  if.end4  if.else21  if.then25  
After path modifications process path
entry  if.end  if.end4  if.else21  if.then25  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.then32  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.then32  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  if.then46  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  if.then46  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.then56  if.then60  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.then56  if.then60  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.then56  if.end62  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.then56  if.end62  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  if.then85  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  if.then85  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.then89  if.then93  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.then89  if.then93  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.then89  if.end95  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.then89  if.end95  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.then129  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.then129  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.body164  if.then166  
After path modifications process path
for.body164  if.then166  
Hash path invariants only
Invariants are
  br label %if.end172, !control_dep_instr !7, !data_indep_instr !10
  call void @linit22(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit22(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.body164  if.end172  if.then174  
After path modifications process path
for.body164  if.end172  if.then174  
Hash path invariants only
Invariants are
  br label %if.end180, !control_dep_instr !7, !data_indep_instr !10
  call void @linit24(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit24(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.body164  if.end172  if.end180  for.inc181  
After path modifications process path
for.body164  if.end172  if.end180  
Hash path invariants only
Invariants are
  br label %for.inc181, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.body164  if.end172  if.else178  
After path modifications process path
for.body164  if.end172  if.else178  
Hash path invariants only
Invariants are
  br label %if.end180, !control_dep_instr !7, !data_indep_instr !10
  call void @linit25(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit25(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.body164  if.else170  
After path modifications process path
for.body164  if.else170  
Hash path invariants only
Invariants are
  br label %if.end172, !control_dep_instr !7, !data_indep_instr !10
  call void @linit23(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit23(%struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.then192  
After path modifications process path
for.body187  if.then192  
Hash path invariants only
Invariants are
  store i32 1, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  store %struct.flagptr* getelementptr inbounds ([228 x %struct.flagptr], [228 x %struct.flagptr]* @sflagindex, i64 0, i64 0), %struct.flagptr** %ind, align 8, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end220, !control_dep_instr !7, !data_indep_instr !10
  store i8* null, i8** %cp, align 8, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Non numeric pointers (int and float) are skipped:  %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Non numeric pointers (int and float) are skipped:  %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 %struct.flagptr*
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit27(%struct.flagent** %entry1, i32* %i), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit27(%struct.flagent** %entry1, i32* %i), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.end220  if.then224  
After path modifications process path
for.body187  if.end220  if.then224  
Hash path invariants only
Invariants are
  br label %if.end226, !control_dep_instr !7, !data_indep_instr !10
  call void @linit31(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit31(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit31(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.end220  if.end226  if.end260  for.inc261  
After path modifications process path
for.body187  if.end220  if.end226  if.end260  
Hash path invariants only
Invariants are
  br label %for.inc261, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.end220  if.end226  land.lhs.true  land.lhs.true232  if.then240  if.then256  
After path modifications process path
for.body187  if.end220  if.end226  land.lhs.true  land.lhs.true232  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  if.then256  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  if.then256  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  if.then256  
Processing call instruction..
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.end220  if.end226  land.lhs.true  land.lhs.true232  if.then240  if.end258  
After path modifications process path
for.body187  if.end220  if.end226  land.lhs.true  land.lhs.true232  if.end258  
Hash path invariants only
Invariants are
  br label %if.end260, !control_dep_instr !7, !data_indep_instr !10
  call void @linit33(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit33(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.else193  
After path modifications process path
for.body187  if.else193  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !10
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  while.cond  land.end  while.body  if.then209  
After path modifications process path
while.body  if.then209  
Hash path invariants only
Invariants are
  br label %if.end219, !control_dep_instr !7, !data_indep_instr !10
  store i32 1, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  call void @linit29(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit29(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.else193  
After path modifications process path
for.body187  if.else193  
Hash path invariants only
Invariants are
  call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  while.cond  land.end  while.body  if.end219  
After path modifications process path
while.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.else193  
After path modifications process path
for.body187  if.else193  
Hash path invariants only
Invariants are
  call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  while.cond  land.end  while.body  if.else213  
After path modifications process path
while.body  if.else213  
Hash path invariants only
Invariants are
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end219, !control_dep_instr !7, !data_indep_instr !10
  call void @linit30(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit30(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit30(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.else193  
After path modifications process path
for.body187  if.else193  
Hash path invariants only
Invariants are
  call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  while.cond  land.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.body187  if.else193  while.end  
After path modifications process path
for.body187  if.else193  while.end  
Hash path invariants only
Invariants are
  call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end220, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit28(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.then273  
After path modifications process path
for.body268  if.then273  
Hash path invariants only
Invariants are
  store i32 1, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  store %struct.flagptr* getelementptr inbounds ([228 x %struct.flagptr], [228 x %struct.flagptr]* @pflagindex, i64 0, i64 0), %struct.flagptr** %ind, align 8, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end305, !control_dep_instr !7, !data_indep_instr !10
  store i8* null, i8** %cp, align 8, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Non numeric pointers (int and float) are skipped:  %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 i8*
Non numeric pointers (int and float) are skipped:  %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 %struct.flagptr*
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing call instruction..
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit35(%struct.flagent** %entry1, i32* %i), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit35(%struct.flagent** %entry1, i32* %i), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.end305  if.then309  
After path modifications process path
for.body268  if.end305  if.then309  
Hash path invariants only
Invariants are
  br label %if.end312, !control_dep_instr !7, !data_indep_instr !10
  call void @linit39(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit39(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit39(%struct.flagptr** %ind, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.end305  if.end312  if.end352  for.inc353  
After path modifications process path
for.body268  if.end305  if.end312  if.end352  
Hash path invariants only
Invariants are
  br label %for.inc353, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.end305  if.end312  land.lhs.true316  land.lhs.true320  if.then328  if.then348  
After path modifications process path
for.body268  if.end305  if.end312  land.lhs.true316  land.lhs.true320  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  if.then348  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  if.then348  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  if.then348  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  if.then348  
Processing call instruction..
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.end305  if.end312  land.lhs.true316  land.lhs.true320  if.then328  if.end350  
After path modifications process path
for.body268  if.end305  if.end312  land.lhs.true316  land.lhs.true320  if.end350  
Hash path invariants only
Invariants are
  br label %if.end352, !control_dep_instr !7, !data_indep_instr !10
  call void @linit41(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit41(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  while.cond279  land.rhs283  
After path modifications process path
land.rhs283  
Hash path invariants only
Invariants are
  br label %land.end288, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.else274  
After path modifications process path
for.body268  if.else274  
Hash path invariants only
Invariants are
  br label %while.cond279, !control_dep_instr !7, !data_indep_instr !10
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  while.cond279  land.end288  while.body289  if.then293  
After path modifications process path
while.body289  if.then293  
Hash path invariants only
Invariants are
  br label %if.end303, !control_dep_instr !7, !data_indep_instr !10
  store i32 1, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  call void @linit37(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit37(%struct.flagptr** %ind), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.else274  
After path modifications process path
for.body268  if.else274  
Hash path invariants only
Invariants are
  call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond279, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  while.cond279  land.end288  while.body289  if.end303  
After path modifications process path
while.body289  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.else274  
After path modifications process path
for.body268  if.else274  
Hash path invariants only
Invariants are
  call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond279, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  while.cond279  land.end288  while.body289  if.else297  
After path modifications process path
while.body289  if.else297  
Hash path invariants only
Invariants are
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end303, !control_dep_instr !7, !data_indep_instr !10
  call void @linit38(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit38(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit38(%struct.flagptr** %ind, i8** %cp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.else274  
After path modifications process path
for.body268  if.else274  
Hash path invariants only
Invariants are
  call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %while.cond279, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  while.cond279  land.end288  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.body268  if.else274  while.end304  
After path modifications process path
for.body268  if.else274  while.end304  
Hash path invariants only
Invariants are
  call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  store i32 0, i32* %viazero, align 4, !control_dep_instr !7, !data_indep_instr !10
  br label %if.end305, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  br label %while.cond279, !control_dep_instr !7, !data_indep_instr !10
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %entry1 = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit36(%struct.flagptr** %ind, i8** %cp, %struct.flagent** %entry1), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.then359  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.then359  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.then359  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.then359  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.then359  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.end420  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.end420  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.end420  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.end420  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.end420  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.else360  if.then366  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.else360  if.then366  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.else360  if.then366  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.then366  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.then366  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  while.cond401  while.body407  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  for.cond369  for.body372  
After path modifications process path
for.body372  
Hash path invariants only
Invariants are
  br label %while.cond401, !control_dep_instr !7, !data_indep_instr !10
  call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %nextchar = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  while.cond401  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  for.cond369  for.body372  while.end415  for.inc417  
After path modifications process path
for.body372  while.end415  
Hash path invariants only
Invariants are
  br label %for.inc417, !control_dep_instr !7, !data_indep_instr !10
  call void @linit47(i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
  br label %while.cond401, !control_dep_instr !7, !data_indep_instr !10
  call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %nextchar = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit45(i32* %i, i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %nextchar = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit47(i32* %nextchar), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.else360  if.end368  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  for.cond369  for.end419  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  for.end419  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.end356  if.else360  if.end368  for.end419  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.cond160  for.end183  for.end264  for.end356  if.else360  if.end368  for.end419  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.cond184  for.end264  for.end356  if.else360  if.end368  for.end419  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.end158  for.end183  for.end264  for.cond265  for.end356  if.else360  if.end368  for.end419  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.body  if.then140  
After path modifications process path
for.body  if.then140  
Hash path invariants only
Invariants are
  br label %if.end146, !control_dep_instr !7, !data_indep_instr !10
  call void @linit16(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit16(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.body  if.end146  if.then150  
After path modifications process path
for.body  if.end146  if.then150  
Hash path invariants only
Invariants are
  br label %if.end157, !control_dep_instr !7, !data_indep_instr !10
  call void @linit18(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit18(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.body  if.end146  if.end157  for.inc  
After path modifications process path
for.body  if.end146  if.end157  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.body  if.end146  if.else152  
After path modifications process path
for.body  if.end146  if.else152  
Hash path invariants only
Invariants are
  br label %if.end157, !control_dep_instr !7, !data_indep_instr !10
  call void @linit19(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit19(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.body  if.else142  
After path modifications process path
for.body  if.else142  
Hash path invariants only
Invariants are
  br label %if.end146, !control_dep_instr !7, !data_indep_instr !10
  call void @linit17(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @linit17(%struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.end  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.end118  if.end131  if.then134  for.end  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.else102  if.then115  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.else102  if.then115  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.else102  lor.lhs.false106  if.end117  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.end73  lor.lhs.false79  lor.lhs.false82  if.end87  if.else102  lor.lhs.false106  if.end117  
Processing path: entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.else68  
After path modifications process path
entry  if.end  if.end4  if.else21  if.else28  if.else35  lor.lhs.false  lor.lhs.false42  if.end51  if.end52  if.end53  if.end54  if.else68  
 Processing function:lookup
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  for.cond  for.body  land.lhs.true  land.lhs.true10  if.then16  
After path modifications process path
for.body  land.lhs.true  
Hash path invariants only
Invariants are
  %arrayidx6 = getelementptr inbounds [120 x i8], [120 x i8]* %schar, i64 0, i64 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  if.end  if.then16  
After path modifications process path
entry  if.end  if.then16  
Processing call instruction..
Can't handle this operand   %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookup0(%struct.dent** %retval, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookup0(%struct.dent** %retval, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  if.end  for.cond  for.body  if.end17  
After path modifications process path
for.body  if.end17  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  while.cond  
After path modifications process path is empty
Processing path: entry  if.end  for.cond  for.body  if.end17  while.end  for.inc  
After path modifications process path
for.body  if.end17  while.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.end  for.cond  return  
After path modifications process path is empty
Processing path: entry  if.end  return  
After path modifications process path
entry  if.end  return  
Processing path: entry  if.end  for.cond  for.end  if.then22  
After path modifications process path is empty
Processing path: entry  if.end  for.end  if.then22  
After path modifications process path
entry  if.end  for.end  if.then22  
Processing call instruction..
Can't handle this operand   %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookup3(%struct.dent** %retval, %struct.dent** %dp, i8** %s.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookup3(%struct.dent** %retval, %struct.dent** %dp, i8** %s.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %s.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @lookup3(%struct.dent** %retval, %struct.dent** %dp, i8** %s.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  if.end  for.cond  for.end  if.else  
After path modifications process path is empty
Processing path: entry  if.end  for.end  if.else  
After path modifications process path
entry  if.end  for.end  if.else  
Non numeric pointers (int and float) are skipped:  %retval = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 %struct.dent*
 Skipping function per FilterFunctionPass:hash
 Processing function:makedent
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  if.then15  
After path modifications process path
entry  if.end  if.then15  
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makedent1(i8** %p), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end16  if.then22  
After path modifications process path
entry  if.end  if.end16  if.then22  
Processing call instruction..
Can't handle this operand   %lbuf.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makedent2(i8** %lbuf.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end16  return  
After path modifications process path
entry  if.end  if.end16  return  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.body  if.end48  for.inc  
After path modifications process path
for.body  if.end48  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.body  if.then32  lor.lhs.false36  lor.lhs.false40  if.end47  
After path modifications process path
for.body  if.end47  
Hash path invariants only
Invariants are
  br label %if.end48, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.body  if.then32  if.then45  
After path modifications process path
for.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  if.then45  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  if.then45  
Processing call instruction..
Can't handle this operand   %lbuf.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makedent3(i8** %lbuf.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.then58  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.then58  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.then58  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.then65  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.then65  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.then65  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.end67  if.then75  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.then75  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.then75  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.end67  if.end77  if.then80  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.then80  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.then80  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !10
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  while.cond  land.end  while.body  land.lhs.true  if.then95  
After path modifications process path
while.body  land.lhs.true  if.then95  
Hash path invariants only
Invariants are
  br label %if.end101, !control_dep_instr !7, !data_indep_instr !10
  call void @makedent8(%struct.dent** %d.addr, i32* %bit), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %d.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makedent8(%struct.dent** %d.addr, i32* %bit), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %bit = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makedent8(%struct.dent** %d.addr, i32* %bit), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  while.cond  land.end  while.body  if.end101  if.then107  
After path modifications process path
while.body  if.end101  if.then107  
Hash path invariants only
Invariants are
  br label %if.end109, !control_dep_instr !7, !data_indep_instr !10
  call void @makedent10(i8** %p), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makedent10(i8** %p), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  while.cond  land.end  while.body  if.end101  if.end109  
After path modifications process path
while.body  if.end101  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  while.cond  land.end  while.body  if.else  
After path modifications process path
while.body  if.else  
Hash path invariants only
Invariants are
  br label %if.end101, !control_dep_instr !7, !data_indep_instr !10
  call void @makedent9(i8** %p), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing call instruction..
Can't handle this operand   %p = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @makedent9(i8** %p), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  while.cond  land.end  while.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.cond  for.end  if.end60  if.end67  if.end77  if.end81  while.end  
After path modifications process path is empty
Processing path: entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  while.end  
After path modifications process path
entry  if.end  if.end16  lor.lhs.false  if.end24  for.end  if.end60  if.end67  if.end77  if.end81  while.end  
 Skipping function per FilterFunctionPass:strtoichar
 Processing function:ichartostr
Short range hashing enabled.
Processing path: entry  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.then  
After path modifications process path
while.body  if.then  
Hash path invariants only
Invariants are
  br label %if.end29, !control_dep_instr !7, !data_indep_instr !11
  call void @ichartostr0(i8** %out.addr, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %out.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr0(i8** %out.addr, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr0(i8** %out.addr, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.end29  
After path modifications process path
while.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond21  while.body27  
After path modifications process path is empty
Processing path: entry  while.cond  land.end  while.body  if.else  if.end18  
After path modifications process path
while.body  if.else  if.end18  
Hash path invariants only
Invariants are
  br label %while.cond21, !control_dep_instr !7, !data_indep_instr !11
  call void @ichartostr3(i8** %scharp, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %scharp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr3(i8** %scharp, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr3(i8** %scharp, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond21  
After path modifications process path is empty
Processing path: entry  while.cond  land.end  while.body  if.else  if.end18  while.end  
After path modifications process path
while.body  if.else  if.end18  while.end  
Hash path invariants only
Invariants are
  br label %if.end29, !control_dep_instr !7, !data_indep_instr !11
  call void @ichartostr4(i8** %out.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %while.cond21, !control_dep_instr !7, !data_indep_instr !11
  call void @ichartostr3(i8** %scharp, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %scharp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr3(i8** %scharp, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr3(i8** %scharp, i32* %ch), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %out.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr4(i8** %out.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  land.lhs.true  
After path modifications process path
for.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  while.cond  land.end  while.body  if.else  if.then7  if.then17  
After path modifications process path
while.body  if.else  if.then7  if.then17  
Hash path invariants only
Invariants are
  br label %for.end, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @ichartostr2(i32* %ch, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  call void @ichartostr1(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr1(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %ch = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr2(i32* %ch, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr2(i32* %ch, i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  
After path modifications process path
for.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  while.cond  land.end  while.body  if.else  if.then7  
After path modifications process path
while.body  if.else  if.then7  
Hash path invariants only
Invariants are
  call void @ichartostr1(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr1(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  
After path modifications process path is empty
Processing path: entry  while.cond  land.end  while.body  if.else  if.then7  for.end  
After path modifications process path
while.body  if.else  if.then7  for.end  
Hash path invariants only
Invariants are
  br label %for.cond, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end18, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  call void @ichartostr1(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %i = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @ichartostr1(i32* %i), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.end30  
After path modifications process path is empty
Processing path: entry  while.end30  
After path modifications process path
entry  while.end30  
No oh has been applied in the path
 Skipping function per FilterFunctionPass:whatcap
 Skipping function per FilterFunctionPass:chupcase
 Skipping function per FilterFunctionPass:strtosichar
 Skipping function per FilterFunctionPass:upcase
 Processing function:stringcharlen
Short range hashing enabled.
Processing path: entry  cond.true  
After path modifications process path
entry  cond.true  
Processing path: entry  cond.end  while.cond2  while.body4  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  if.then  
After path modifications process path
while.body  if.then  
Hash path invariants only
Invariants are
  br label %while.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  while.body4  if.end  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  
After path modifications process path
while.body  
Hash path invariants only
Invariants are
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  if.then17  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.then12  if.then17  
After path modifications process path
while.body  while.end  
Hash path invariants only
Invariants are
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  if.then17  
After path modifications process path
entry  cond.end  if.then17  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen2(i32* %retval, i8** %stringcur, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen2(i32* %retval, i8** %stringcur, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen2(i32* %retval, i8** %stringcur, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  while.cond2  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.then12  if.else  if.end25  
After path modifications process path
while.body  while.end  if.else  if.end25  
Hash path invariants only
Invariants are
  br label %if.end26, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  call void @stringcharlen3(i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %if.end25, !control_dep_instr !7, !data_indep_instr !11
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen3(i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.end26  if.then34  
After path modifications process path
while.body  while.end  if.end26  if.then34  
Hash path invariants only
Invariants are
  br label %if.end56, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen4(i32* %highstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen4(i32* %highstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen4(i32* %highstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.end26  if.end56  
After path modifications process path
while.body  while.end  if.end26  
Hash path invariants only
Invariants are
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.end26  if.else36  if.then43  
After path modifications process path
while.body  while.end  if.end26  if.else36  if.then43  
Hash path invariants only
Invariants are
  br label %if.end55, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen5(i32* %lowstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen5(i32* %lowstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen5(i32* %lowstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.end26  if.else36  if.end55  
After path modifications process path
while.body  while.end  if.end26  if.else36  if.end55  
Hash path invariants only
Invariants are
  br label %if.end56, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.end26  if.else36  if.else45  if.then50  
After path modifications process path
while.body  while.end  if.end26  if.else36  if.else45  if.then50  
Hash path invariants only
Invariants are
  br label %if.end54, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen6(i32* %highstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen6(i32* %highstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen6(i32* %highstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.end26  if.else36  if.else45  if.end54  
After path modifications process path
while.body  while.end  if.end26  if.else36  if.else45  if.end54  
Hash path invariants only
Invariants are
  br label %if.end55, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond2  
After path modifications process path is empty
Processing path: entry  cond.end  while.cond  while.body  while.end  if.end26  if.else36  if.else45  if.else52  
After path modifications process path
while.body  while.end  if.end26  if.else36  if.else45  if.else52  
Hash path invariants only
Invariants are
  br label %if.end54, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen7(i32* %lowstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
  br label %while.cond2, !control_dep_instr !7, !data_indep_instr !11
  call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %bufcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %bufp.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %highstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringcur = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen0(i8** %bufcur, i8** %bufp.addr, i32* %lowstringno, i32* %highstringno, i32* %stringno, i8** %stringcur), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing call instruction..
Can't handle this operand   %lowstringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen7(i32* %lowstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Can't handle this operand   %stringno = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @stringcharlen7(i32* %lowstringno, i32* %stringno), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !14
Processing path: entry  cond.end  
After path modifications process path
entry  cond.end  
Processing path: entry  cond.end  while.cond  return  
After path modifications process path is empty
Processing path: entry  cond.end  return  
After path modifications process path
entry  cond.end  return  
Processing path: entry  cond.end  while.cond  while.end57  
After path modifications process path is empty
Processing path: entry  cond.end  while.end57  
After path modifications process path
entry  cond.end  while.end57  
Processing path: entry  cond.false  
After path modifications process path
entry  cond.false  
 Skipping function per FilterFunctionPass:addvheader
 Processing function:combinecaps
Short range hashing enabled.
Processing path: entry  if.then  while.cond  while.body  if.then6  
After path modifications process path is empty
Processing path: entry  if.then  if.then6  
After path modifications process path
entry  if.then  if.then6  
Processing path: entry  if.then  while.cond  while.body  if.end  
After path modifications process path is empty
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.then  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  if.then  while.end  
After path modifications process path
entry  if.then  while.end  
Processing path: entry  if.end8  if.then10  if.then13  
After path modifications process path
entry  if.end8  if.then10  if.then13  
Processing call instruction..
Can't handle this operand   %newp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combinecaps1(%struct.dent** %newp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end8  if.then10  if.end15  if.then37  
After path modifications process path
entry  if.end8  if.then10  if.end15  if.then37  
Processing call instruction..
Can't handle this operand   %tdent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combinecaps2(%struct.dent** %tdent, %struct.dent** %newp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combinecaps2(%struct.dent** %tdent, %struct.dent** %newp.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end8  if.then10  if.end15  if.end43  
After path modifications process path
entry  if.end8  if.then10  if.end15  if.end43  
Processing path: entry  if.end8  if.then10  if.end15  if.else40  
After path modifications process path
entry  if.end8  if.then10  if.end15  if.else40  
Processing call instruction..
Can't handle this operand   %newp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combinecaps3(%struct.dent** %newp.addr, %struct.dent** %tdent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %tdent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combinecaps3(%struct.dent** %newp.addr, %struct.dent** %tdent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  if.end8  return  
After path modifications process path
entry  if.end8  return  
Processing path: entry  if.end8  if.end44  
After path modifications process path
entry  if.end8  if.end44  
Processing path: entry  if.else  
After path modifications process path
entry  if.else  
 Processing function:combine_two_entries
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Can't handle this operand   %hdrp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combine_two_entries0(%struct.dent** %hdrp.addr, %struct.dent** %newp.addr, %struct.dent** %oldp.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %newp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combine_two_entries0(%struct.dent** %hdrp.addr, %struct.dent** %newp.addr, %struct.dent** %oldp.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %oldp.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combine_two_entries0(%struct.dent** %hdrp.addr, %struct.dent** %newp.addr, %struct.dent** %oldp.addr), !input_indep_block !5, !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.else  if.then11  if.then26  
After path modifications process path
entry  if.else  if.then11  if.then26  
Processing path: entry  if.else  if.then11  if.end  land.lhs.true  if.then41  
After path modifications process path
entry  if.else  if.then11  if.end  land.lhs.true  if.then41  
Processing path: entry  if.else  if.then11  if.end  if.end43  
After path modifications process path
entry  if.else  if.then11  if.end  if.end43  
Processing path: entry  if.else  if.else44  
After path modifications process path
entry  if.else  if.else44  
 Processing function:forcevheader
Short range hashing enabled.
Processing path: entry  land.lhs.true  if.then  
After path modifications process path
entry  land.lhs.true  if.then  
Processing path: entry  if.end12  
After path modifications process path
entry  if.end12  
Processing path: entry  if.else  if.then11  
After path modifications process path
entry  if.else  if.then11  
Processing path: entry  if.else  if.end  
After path modifications process path
entry  if.else  if.end  
 Processing function:combineaffixes
Short range hashing enabled.
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %ent1.addr = alloca %struct.dent*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combineaffixes0(%struct.dent** %ent1.addr, %struct.dent** %ent2.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %ent2.addr = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @combineaffixes0(%struct.dent** %ent1.addr, %struct.dent** %ent2.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
 Skipping function per FilterFunctionPass:acoversb
 Skipping function per FilterFunctionPass:issubset
 Skipping function per FilterFunctionPass:lowcase
 Skipping function per FilterFunctionPass:toutent
 Processing function:ichartosstr
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing call instruction..
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
 Skipping function per FilterFunctionPass:toutword
 Skipping function per FilterFunctionPass:flagout
 Processing function:printichar
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
Processing path: entry  if.else  
After path modifications process path
entry  if.else  
 Skipping function per FilterFunctionPass:findfiletype
 Skipping function per FilterFunctionPass:chk_aff
 Processing function:pfx_list_chk
Short range hashing enabled.
Processing path: entry  for.cond  for.body  land.lhs.true  if.then  
After path modifications process path
for.body  land.lhs.true  if.then  
Hash path invariants only
Invariants are
  br label %for.inc165, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %entcount = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk0(i32* %entcount, %struct.flagent** %flent, %struct.flagptr** %ind.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk0(i32* %entcount, %struct.flagent** %flent, %struct.flagptr** %ind.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %ind.addr = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk0(i32* %entcount, %struct.flagent** %flent, %struct.flagptr** %ind.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  for.cond  for.body  for.inc165  
After path modifications process path
for.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  land.lhs.true8  if.then14  
After path modifications process path
for.body  if.end  land.lhs.true8  if.then14  
Hash path invariants only
Invariants are
  br label %for.inc165, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.then35  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.then35  
Hash path invariants only
Invariants are
  br label %if.end37, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  for.body52  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  if.then57  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  if.then57  
Hash path invariants only
Invariants are
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  br label %for.end, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  for.body52  if.end58  for.inc  
After path modifications process path
if.end58  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  
Hash path invariants only
Invariants are
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.then68  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.then68  
Hash path invariants only
Invariants are
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  br label %if.end155, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay69 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.end155  if.then160  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.end155  if.then160  
Hash path invariants only
Invariants are
  br label %if.end162, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay161 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.end155  if.end162  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.end155  if.end162  
Hash path invariants only
Invariants are
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end163, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.then77  if.then82  if.then86  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.then77  if.then82  if.then86  
Hash path invariants only
Invariants are
  br label %if.end94, !control_dep_instr !7, !data_indep_instr !11
  call void @pfx_list_chk2(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i8* %arraydecay83, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay83 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay78 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk2(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk2(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.then77  if.then82  if.end94  if.then103  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.then77  if.then82  if.end94  if.then103  
Hash path invariants only
Invariants are
  br label %if.end107, !control_dep_instr !7, !data_indep_instr !11
  call void @pfx_list_chk3(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay97 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay95 to i64, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay83 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay83, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay95 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay78 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk3(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk3(%struct.flagent** %flent, i8** %cp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.then77  if.then82  if.end94  if.end107  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.then77  if.then82  if.end94  if.end107  
Hash path invariants only
Invariants are
  %sub.ptr.rhs.cast113 = ptrtoint i8* %arraydecay111 to i64, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end121, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay111 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay108 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay95 to i64, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay97 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay83 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay83, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay95 = getelementptr inbounds [184 x i8], [184 x i8]* %tword2, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay78 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.then77  if.end121  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.then77  if.end121  
Hash path invariants only
Invariants are
  br label %if.end154, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay78 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.end154  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.end154  
Hash path invariants only
Invariants are
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  br label %if.end155, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  land.lhs.true127  if.then134  if.then137  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  land.lhs.true127  if.then134  if.then137  
Hash path invariants only
Invariants are
  br label %if.end145, !control_dep_instr !7, !data_indep_instr !11
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  call void @pfx_list_chk4(%struct.flagent** %flent, %struct.dent** %dent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay123 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk4(%struct.flagent** %flent, %struct.dent** %dent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %dent = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pfx_list_chk4(%struct.flagent** %flent, %struct.dent** %dent), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  land.lhs.true127  if.then134  if.end145  if.end152  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  land.lhs.true127  if.then134  if.end145  if.end152  
Hash path invariants only
Invariants are
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %if.end153, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay123 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  if.then150  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  land.lhs.true127  if.then134  if.end145  if.then147  if.then150  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  land.lhs.true127  if.then134  if.end145  
Hash path invariants only
Invariants are
  %arraydecay123 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  if.then150  
After path modifications process path
entry  if.then150  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  land.lhs.true127  if.then134  if.end145  if.then147  if.end151  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  land.lhs.true127  if.then134  if.end145  if.end151  
Hash path invariants only
Invariants are
  br label %if.end152, !control_dep_instr !7, !data_indep_instr !11
  store i32 0, i32* @numhits, align 4, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay123 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  if.end153  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.then63  if.else  if.else122  if.end153  
Hash path invariants only
Invariants are
  br label %if.end154, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay123 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond47  
After path modifications process path is empty
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.end163  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  land.lhs.true28  if.then33  if.end37  for.end  if.end163  
Hash path invariants only
Invariants are
  br label %if.end164, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
  store i32 0, i32* %cond, align 4, !control_dep_instr !7, !data_indep_instr !11
  %arraydecay46 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8
  store i8* %arraydecay46, i8** %cp, align 8, !control_dep_instr !7, !data_dep_instr !8
  %arraydecay38 = getelementptr inbounds [184 x i8], [184 x i8]* %tword, i32 0, i32 0, !control_dep_instr !7, !data_dep_instr !8, !input_dep_block !12
  br label %for.cond47, !control_dep_instr !7, !data_indep_instr !11
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  if.end15  land.lhs.true19  lor.lhs.false  
After path modifications process path
for.body  if.end  if.end15  land.lhs.true19  lor.lhs.false  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.body  if.end  if.end15  if.end164  
After path modifications process path
for.body  if.end  if.end15  if.end164  
Hash path invariants only
Invariants are
  br label %for.inc165, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  for.cond  for.end167  
After path modifications process path is empty
Processing path: entry  for.end167  
After path modifications process path
entry  for.end167  
No oh has been applied in the path
 Processing function:chk_suf
Short range hashing enabled.
Processing path: entry  while.cond  land.rhs  
After path modifications process path
land.rhs  
Hash path invariants only
Invariants are
  br label %land.end, !control_dep_instr !7, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %cp = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %allhits.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %ignoreflagbits.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %pfxent.addr = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %ucword.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %optflags.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf0(%struct.flagptr** %ind, i8** %cp, i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i8** %word.addr, i8** %ucword.addr, i32* %len.addr, i32* %optflags.addr), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.then  
After path modifications process path is empty
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.end  if.then8  land.lhs.true  land.lhs.true14  land.lhs.true16  if.then18  
After path modifications process path
if.end  if.then8  land.lhs.true  land.lhs.true14  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  if.then18  
After path modifications process path
entry  if.then18  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.end  if.then8  if.end19  
After path modifications process path
if.end  if.then8  if.end19  
Hash path invariants only
Invariants are
  br label %if.end20, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.body  if.end  if.end20  
After path modifications process path
if.end  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  return  
After path modifications process path is empty
Processing path: entry  return  
After path modifications process path
entry  return  
No oh has been applied in the path
Processing path: entry  while.cond  land.end  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
Processing call instruction..
Can't handle this operand   %allhits.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf2(i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i32* %optflags.addr, i8** %word.addr, i8** %ucword.addr, %struct.flagptr** %ind, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ignoreflagbits.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf2(i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i32* %optflags.addr, i8** %word.addr, i8** %ucword.addr, %struct.flagptr** %ind, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %pfxent.addr = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf2(i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i32* %optflags.addr, i8** %word.addr, i8** %ucword.addr, %struct.flagptr** %ind, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %optflags.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf2(i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i32* %optflags.addr, i8** %word.addr, i8** %ucword.addr, %struct.flagptr** %ind, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %word.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf2(i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i32* %optflags.addr, i8** %word.addr, i8** %ucword.addr, %struct.flagptr** %ind, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ucword.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf2(i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i32* %optflags.addr, i8** %word.addr, i8** %ucword.addr, %struct.flagptr** %ind, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %ind = alloca %struct.flagptr*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf2(i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i32* %optflags.addr, i8** %word.addr, i8** %ucword.addr, %struct.flagptr** %ind, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %len.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @chk_suf2(i32* %allhits.addr, i32* %ignoreflagbits.addr, %struct.flagent** %pfxent.addr, i32* %optflags.addr, i8** %word.addr, i8** %ucword.addr, %struct.flagptr** %ind, i32* %len.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
No oh has been applied in the path
 Skipping function per FilterFunctionPass:suf_list_chk
 Processing function:expand_pre
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  
After path modifications process path
for.body  if.then  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
  call void @expand_pre1(i32* %explength, i8** %extra.addr, i32* %option.addr, i8** %croot.addr, i8** %rootword.addr, %struct.flagent** %flent, i64** %mask.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %explength = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre1(i32* %explength, i8** %extra.addr, i32* %option.addr, i8** %croot.addr, i8** %rootword.addr, %struct.flagent** %flent, i64** %mask.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %extra.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre1(i32* %explength, i8** %extra.addr, i32* %option.addr, i8** %croot.addr, i8** %rootword.addr, %struct.flagent** %flent, i64** %mask.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %option.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre1(i32* %explength, i8** %extra.addr, i32* %option.addr, i8** %croot.addr, i8** %rootword.addr, %struct.flagent** %flent, i64** %mask.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %croot.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre1(i32* %explength, i8** %extra.addr, i32* %option.addr, i8** %croot.addr, i8** %rootword.addr, %struct.flagent** %flent, i64** %mask.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %rootword.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre1(i32* %explength, i8** %extra.addr, i32* %option.addr, i8** %croot.addr, i8** %rootword.addr, %struct.flagent** %flent, i64** %mask.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre1(i32* %explength, i8** %extra.addr, i32* %option.addr, i8** %croot.addr, i8** %rootword.addr, %struct.flagent** %flent, i64** %mask.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %mask.addr = alloca i64*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre1(i32* %explength, i8** %extra.addr, i32* %option.addr, i8** %croot.addr, i8** %rootword.addr, %struct.flagent** %flent, i64** %mask.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %entcount = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre0(i32* %entcount, %struct.flagent** %flent), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_pre0(i32* %entcount, %struct.flagent** %flent), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  for.cond  for.body  if.end  for.inc  
After path modifications process path
for.body  if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
 Processing function:pr_pre_expansion
Short range hashing enabled.
Processing path: entry  if.then  
After path modifications process path
entry  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  if.then6  
After path modifications process path
entry  if.end  if.then6  
Processing path: entry  if.end  if.end7  for.cond  for.body  if.then18  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  if.then18  
After path modifications process path
entry  if.end  if.end7  if.then18  
Processing path: entry  if.end  if.end7  for.cond  for.body  if.end19  for.inc  
After path modifications process path
if.end19  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  
After path modifications process path
entry  if.end  if.end7  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.then21  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.then21  
After path modifications process path
entry  if.end  if.end7  for.end  if.then21  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.body40  if.end45  for.inc46  
After path modifications process path
if.end45  
Hash path invariants only
Invariants are
  br label %for.inc46, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  
Processing call instruction..
Can't handle this operand   %nextc = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion2(i8** %nextc, i8** %rootword.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %rootword.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion2(i8** %nextc, i8** %rootword.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.body40  if.then44  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  if.then44  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  if.then44  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  if.then44  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.body53  if.then57  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  if.then57  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  if.then57  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  if.then57  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  if.then57  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.body53  if.end58  for.inc59  
After path modifications process path
if.end58  
Hash path invariants only
Invariants are
  br label %for.inc59, !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.end61  if.then63  if.end74  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  for.end61  if.then63  if.end74  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.end74  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.end74  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.end74  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.end61  if.then63  if.then70  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  for.end61  if.then63  if.then70  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.then70  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.then70  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.then63  if.then70  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.end61  if.end78  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  for.end61  if.end78  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.end78  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.end78  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.end78  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.cond51  for.end61  if.else  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.then50  for.end61  if.else  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.else  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.else  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.then50  for.end61  if.else  
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.cond38  for.end48  if.end79  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.then36  for.end48  if.end79  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.end79  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.then36  for.end48  if.end79  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.end89  if.then92  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.end89  if.then92  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.end89  if.then92  
Processing call instruction..
Can't handle this operand   %croot.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion5(i8** %croot.addr), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.end89  if.end94  if.then97  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.then97  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.then97  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.end89  if.end94  if.end101  if.then105  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.end101  if.then105  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.end101  if.then105  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.end89  if.end94  if.end101  if.else109  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.end101  if.else109  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.end89  if.end94  if.end101  if.else109  
Processing call instruction..
Can't handle this operand   %retval = alloca i32, align 4, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion6(i32* %retval, i32* %tlen), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Can't handle this operand   %tlen = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @pr_pre_expansion6(i32* %retval, i32* %tlen), !control_dep_instr !7, !data_indep_instr !10, !input_dep_block !11
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.else80  if.end88  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.else80  if.end88  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.else80  if.end88  
Processing path: entry  if.end  if.end7  for.cond  for.end  if.end26  if.else80  if.then84  
After path modifications process path is empty
Processing path: entry  if.end  if.end7  for.end  if.end26  if.else80  if.then84  
After path modifications process path
entry  if.end  if.end7  for.end  if.end26  if.else80  if.then84  
 Skipping function per FilterFunctionPass:forcelc
 Processing function:expand_suf
Short range hashing enabled.
Processing path: entry  for.cond  for.body  if.then  if.then7  
After path modifications process path
for.body  if.then  if.then7  
Hash path invariants only
Invariants are
  br label %if.end, !control_dep_instr !7, !data_indep_instr !11
  call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing call instruction..
Can't handle this operand   %explength = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %croot.addr = alloca i8*, align 8, !input_indep_block !5, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %extra.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %rootword.addr = alloca i8*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Can't handle this operand   %option.addr = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf1(i32* %explength, i8** %croot.addr, i8** %extra.addr, i8** %rootword.addr, %struct.flagent** %flent, i32* %option.addr), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !12
Processing path: entry  
After path modifications process path
entry  
Processing call instruction..
Can't handle this operand   %entcount = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf0(i32* %entcount, %struct.flagent** %flent), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Can't handle this operand   %flent = alloca %struct.flagent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @expand_suf0(i32* %entcount, %struct.flagent** %flent), !control_dep_instr !7, !input_indep_instr !10, !data_indep_instr !11
Processing path: entry  for.cond  for.body  if.then  if.end  
After path modifications process path
for.body  if.then  if.end  
Hash path invariants only
Invariants are
  br label %if.end8, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.then  lor.lhs.false  
After path modifications process path
for.body  if.then  lor.lhs.false  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.body  if.end8  for.inc  
After path modifications process path
for.body  if.end8  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  
After path modifications process path
entry  
Processing path: entry  for.cond  for.end  
After path modifications process path is empty
Processing path: entry  for.end  
After path modifications process path
entry  for.end  
 Skipping function per FilterFunctionPass:pr_suf_expansion
 Skipping function per FilterFunctionPass:treeinit
 Skipping function per FilterFunctionPass:trydict
 Processing function:treeload
Short range hashing enabled.
Processing path: entry  while.cond  while.body  
After path modifications process path is empty
Processing path: entry  
After path modifications process path
entry  
No oh has been applied in the path
Processing path: entry  while.cond  while.end  
After path modifications process path is empty
Processing path: entry  while.end  
After path modifications process path
entry  while.end  
No oh has been applied in the path
 Processing function:treeinsert
Short range hashing enabled.
Processing path: entry  if.end68  if.then72  
After path modifications process path
entry  if.end68  if.then72  
Processing path: entry  if.end68  return  
After path modifications process path
entry  if.end68  return  
Processing path: entry  if.end68  if.end73  if.then75  
After path modifications process path
entry  if.end68  if.end73  if.then75  
Processing path: entry  if.end68  if.end73  if.end78  if.then85  if.then89  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.then85  if.then89  
Processing path: entry  if.end68  if.end73  if.end78  if.then85  if.end91  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.then85  if.end91  
Processing path: entry  if.end68  if.end73  if.end78  if.end102  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.end102  
Processing path: entry  if.end68  if.end73  if.end78  if.else92  if.then99  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.else92  if.then99  
Processing path: entry  if.end68  if.end73  if.end78  if.else92  if.end101  
After path modifications process path
entry  if.end68  if.end73  if.end78  if.else92  if.end101  
Processing path: entry  land.lhs.true  if.then  for.cond  for.body  if.then5  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  if.then5  
After path modifications process path
entry  land.lhs.true  if.then  if.then5  
Processing path: entry  land.lhs.true  if.then  for.cond  for.body  if.end  for.inc  
After path modifications process path
if.end  
Hash path invariants only
Invariants are
  br label %for.inc, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13, !global_dep_instr !12
Processing path: entry  land.lhs.true  if.then  
After path modifications process path
entry  land.lhs.true  if.then  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.then9  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.then9  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.then9  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.then17  if.then21  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.then17  if.then21  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.then17  if.then21  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.then17  if.end22  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.then17  if.end22  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.then17  if.end22  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.end67  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.end67  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.end67  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  while.cond  while.body  if.then42  
After path modifications process path
while.body  if.then42  
Hash path invariants only
Invariants are
  br label %if.end58, !control_dep_instr !7, !data_indep_instr !11
  call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %olddp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert6(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.then33  
After path modifications process path
for.body28  if.then33  
Hash path invariants only
Invariants are
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  while.cond  while.body  if.end58  
After path modifications process path
while.body  
Hash path invariants only
No invariant in the path. Skip path
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.then33  
After path modifications process path
for.body28  if.then33  
Hash path invariants only
Invariants are
  call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  while.cond  while.body  if.else51  
After path modifications process path
while.body  if.else51  
Hash path invariants only
Invariants are
  br label %if.end58, !control_dep_instr !7, !data_indep_instr !11
  call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %olddp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert7(%struct.dent** %newdp, %struct.dent** %olddp, i32* %isvariant, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.then33  
After path modifications process path
for.body28  if.then33  
Hash path invariants only
Invariants are
  call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
Processing call instruction..
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  while.cond  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.then33  while.end  
After path modifications process path
for.body28  if.then33  while.end  
Hash path invariants only
Invariants are
  br label %if.end59, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
  br label %while.cond, !control_dep_instr !7, !data_indep_instr !11
  call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing call instruction..
Can't handle this operand   %isvariant = alloca i32, align 4, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %newdp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Can't handle this operand   %dp = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert5(i32* %isvariant, %struct.dent** %newdp, %struct.dent** %dp), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.body28  if.end59  for.inc60  
After path modifications process path
for.body28  if.end59  
Hash path invariants only
Invariants are
  br label %for.inc60, !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.end62  if.then65  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  for.end62  if.then65  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.end62  if.then65  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.end62  if.then65  
Processing call instruction..
Can't handle this operand   %oldhtab = alloca %struct.dent*, align 8, !input_dep_instr !6, !control_dep_instr !7, !data_dep_instr !8 of the call   call void @treeinsert9(%struct.dent** %oldhtab), !control_dep_instr !7, !data_indep_instr !11, !input_dep_block !13
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.cond25  for.end62  if.end66  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.end13  if.else24  for.end62  if.end66  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.end62  if.end66  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.end13  if.else24  for.end62  if.end66  
Processing path: entry  land.lhs.true  if.then  for.cond  for.end  if.else  
After path modifications process path is empty
Processing path: entry  land.lhs.true  if.then  for.end  if.else  
After path modifications process path
entry  land.lhs.true  if.then  for.end  if.else  
 Skipping function per FilterFunctionPass:tinsert
 Skipping function per FilterFunctionPass:treelookup
 Skipping function per FilterFunctionPass:treeoutput
Skip. No dependence graph for function pdictcmp
 Skipping function per FilterFunctionPass:mymalloc
 Processing function:myfree
Short range hashing enabled.
Processing path: entry  land.lhs.true  land.lhs.true2  if.then  
After path modifications process path
entry  land.lhs.true  land.lhs.true2  if.then  
Processing path: entry  return  
After path modifications process path
entry  return  
Processing path: entry  if.end  
After path modifications process path
entry  if.end  
 Skipping function per FilterFunctionPass:xgets
Extract path function for assertion assert_myfree_path_0
Extract path function for assertion assert_myfree_path_1
Extract path function for assertion assert_myfree_path_2
Extract path function for assertion assert_treeinsert_path_0
Extract path function for assertion assert_treeinsert_path_1
Extract path function for assertion assert_treeinsert_path_2
Extract path function for assertion assert_treeinsert_path_3
Extract path function for assertion assert_treeinsert_path_4
Extract path function for assertion assert_treeinsert_path_5
Extract path function for assertion assert_treeinsert_path_6
Extract path function for assertion assert_treeinsert_path_7
Extract path function for assertion assert_treeinsert_path_9
Extract path function for assertion assert_treeinsert_path_10
Extract path function for assertion assert_treeinsert_path_11
Extract path function for assertion assert_treeinsert_path_13
Extract path function for assertion assert_treeinsert_path_15
Extract path function for assertion assert_treeinsert_path_17
Extract path function for assertion assert_treeinsert_path_19
Extract path function for assertion assert_treeinsert_path_20
Extract path function for assertion assert_treeinsert_path_21
Extract path function for assertion assert_treeinsert_path_23
Extract path function for assertion assert_treeinsert_path_25
Extract path function for assertion assert_treeinsert_path_27
Extract path function for assertion assert_treeinsert_path_28
Extract path function for assertion assert_treeinsert_path_29
Extract path function for assertion assert_treeinsert_path_31
Extract path function for assertion assert_treeinsert_path_33
Extract path function for assertion assert_treeinsert_path_35
Extract path function for assertion assert_treeinsert_path_36
Extract path function for assertion assert_treeinsert_path_38
Extract path function for assertion assert_treeinsert_path_41
Extract path function for assertion assert_treeinsert_path_44
Extract path function for assertion assert_treeinsert_path_46
Extract path function for assertion assert_expand_suf_path_0
Extract path function for assertion assert_expand_suf_path_1
Extract path function for assertion assert_expand_suf_path_2
Extract path function for assertion assert_expand_suf_path_3
Extract path function for assertion assert_expand_suf_path_5
Extract path function for assertion assert_expand_suf_path_6
Extract path function for assertion assert_expand_suf_path_7
Extract path function for assertion assert_expand_suf_path_9
Extract path function for assertion assert_chk_suf_path_6
Extract path function for assertion assert_flagpr_path_1
Extract path function for assertion assert_flagpr_path_2
Extract path function for assertion assert_flagpr_path_3
Extract path function for assertion assert_flagpr_path_5
Extract path function for assertion assert_flagpr_path_6
Extract path function for assertion assert_flagpr_path_8
Extract path function for assertion assert_flagpr_path_9
Extract path function for assertion assert_flagpr_path_10
Extract path function for assertion assert_flagpr_path_12
Extract path function for assertion assert_flagpr_path_13
Extract path function for assertion assert_flagpr_path_15
Extract path function for assertion assert_flagpr_path_16
Extract path function for assertion assert_flagpr_path_17
Extract path function for assertion assert_flagpr_path_19
Extract path function for assertion assert_flagpr_path_20
Extract path function for assertion assert_flagpr_path_22
Extract path function for assertion assert_flagpr_path_23
Extract path function for assertion assert_flagpr_path_24
Extract path function for assertion assert_flagpr_path_26
Extract path function for assertion assert_flagpr_path_28
Extract path function for assertion assert_flagpr_path_30
Extract path function for assertion assert_flagpr_path_31
Extract path function for assertion assert_flagpr_path_32
Extract path function for assertion assert_flagpr_path_34
Extract path function for assertion assert_flagpr_path_36
Extract path function for assertion assert_flagpr_path_38
Extract path function for assertion assert_flagpr_path_40
Extract path function for assertion assert_flagpr_path_43
Extract path function for assertion assert_flagpr_path_46
Extract path function for assertion assert_flagpr_path_48
Extract path function for assertion assert_flagpr_path_50
Extract path function for assertion assert_ichartosstr_path_0
Extract path function for assertion assert_ichartosstr_path_1
Extract path function for assertion assert_missingspace_path_0
Extract path function for assertion assert_missingspace_path_1
Extract path function for assertion assert_missingspace_path_3
Extract path function for assertion assert_missingspace_path_4
Extract path function for assertion assert_missingspace_path_5
Extract path function for assertion assert_missingspace_path_7
Extract path function for assertion assert_missingspace_path_8
Extract path function for assertion assert_missingspace_path_9
Extract path function for assertion assert_missingspace_path_10
Extract path function for assertion assert_missingspace_path_11
Extract path function for assertion assert_missingspace_path_12
Extract path function for assertion assert_missingspace_path_13
Extract path function for assertion assert_missingspace_path_15
Extract path function for assertion assert_missingspace_path_16
Extract path function for assertion assert_missingspace_path_17
Extract path function for assertion assert_missingspace_path_19
Extract path function for assertion assert_missingspace_path_20
Extract path function for assertion assert_missingspace_path_21
Extract path function for assertion assert_missingspace_path_22
Extract path function for assertion assert_missingspace_path_23
Extract path function for assertion assert_missingspace_path_24
Extract path function for assertion assert_expand_pre_path_0
Extract path function for assertion assert_expand_pre_path_1
Extract path function for assertion assert_expand_pre_path_2
Extract path function for assertion assert_expand_pre_path_3
Extract path function for assertion assert_expand_pre_path_5
Extract path function for assertion assert_missingletter_path_0
Extract path function for assertion assert_missingletter_path_1
Extract path function for assertion assert_missingletter_path_4
Extract path function for assertion assert_missingletter_path_6
Extract path function for assertion assert_missingletter_path_7
Extract path function for assertion assert_missingletter_path_9
Extract path function for assertion assert_missingletter_path_10
Extract path function for assertion assert_missingletter_path_12
Extract path function for assertion assert_missingletter_path_13
Extract path function for assertion assert_missingletter_path_16
Extract path function for assertion assert_missingletter_path_20
Extract path function for assertion assert_missingletter_path_22
Extract path function for assertion assert_missingletter_path_25
Extract path function for assertion assert_missingletter_path_26
Extract path function for assertion assert_missingletter_path_28
Extract path function for assertion assert_missingletter_path_29
Extract path function for assertion assert_missingletter_path_31
Extract path function for assertion assert_missingletter_path_32
Extract path function for assertion assert_missingletter_path_34
Extract path function for assertion assert_line_size_path_1
Extract path function for assertion assert_line_size_path_3
Extract path function for assertion assert_line_size_path_5
Extract path function for assertion assert_show_line_path_0
Extract path function for assertion assert_show_line_path_1
Extract path function for assertion assert_show_line_path_2
Extract path function for assertion assert_show_line_path_4
Extract path function for assertion assert_show_line_path_5
Extract path function for assertion assert_show_line_path_7
Extract path function for assertion assert_show_line_path_10
Extract path function for assertion assert_show_line_path_13
Extract path function for assertion assert_show_line_path_14
Extract path function for assertion assert_show_line_path_16
Extract path function for assertion assert_show_line_path_19
Extract path function for assertion assert_show_line_path_22
Extract path function for assertion assert_show_line_path_23
Extract path function for assertion assert_dofile_path_0
Extract path function for assertion assert_dofile_path_1
Extract path function for assertion assert_dofile_path_2
Extract path function for assertion assert_dofile_path_3
Extract path function for assertion assert_dofile_path_4
Extract path function for assertion assert_dofile_path_5
Extract path function for assertion assert_dofile_path_6
Extract path function for assertion assert_dofile_path_7
Extract path function for assertion assert_dofile_path_8
Extract path function for assertion assert_dofile_path_9
Extract path function for assertion assert_dofile_path_10
Extract path function for assertion assert_save_cap_path_0
Extract path function for assertion assert_save_cap_path_1
Extract path function for assertion assert_save_cap_path_2
Extract path function for assertion assert_save_cap_path_3
Extract path function for assertion assert_save_cap_path_4
Extract path function for assertion assert_save_cap_path_5
Extract path function for assertion assert_save_cap_path_6
Extract path function for assertion assert_save_cap_path_7
Extract path function for assertion assert_save_cap_path_9
Extract path function for assertion assert_save_cap_path_10
Extract path function for assertion assert_save_cap_path_11
Extract path function for assertion assert_save_cap_path_12
Extract path function for assertion assert_save_cap_path_13
Extract path function for assertion assert_save_cap_path_15
Extract path function for assertion assert_combine_two_entries_path_0
Extract path function for assertion assert_combine_two_entries_path_1
Extract path function for assertion assert_combine_two_entries_path_2
Extract path function for assertion assert_combine_two_entries_path_3
Extract path function for assertion assert_combine_two_entries_path_4
Extract path function for assertion assert_combine_two_entries_path_5
Extract path function for assertion assert_givehelp_path_0
Extract path function for assertion assert_givehelp_path_2
Extract path function for assertion assert_givehelp_path_4
Extract path function for assertion assert_givehelp_path_5
Extract path function for assertion assert_givehelp_path_6
Extract path function for assertion assert_inserttoken_path_8
Extract path function for assertion assert_inserttoken_path_12
Extract path function for assertion assert_inserttoken_path_16
Extract path function for assertion assert_inserttoken_path_20
Extract path function for assertion assert_TeX_LR_begin_path_0
Extract path function for assertion assert_TeX_LR_begin_path_1
Extract path function for assertion assert_TeX_LR_begin_path_2
Extract path function for assertion assert_TeX_LR_begin_path_3
Extract path function for assertion assert_TeX_LR_begin_path_4
Extract path function for assertion assert_TeX_LR_begin_path_5
Extract path function for assertion assert_TeX_LR_begin_path_6
Extract path function for assertion assert_TeX_LR_begin_path_7
Extract path function for assertion assert_compoundgood_path_0
Extract path function for assertion assert_compoundgood_path_1
Extract path function for assertion assert_compoundgood_path_2
Extract path function for assertion assert_compoundgood_path_3
Extract path function for assertion assert_compoundgood_path_4
Extract path function for assertion assert_compoundgood_path_5
Extract path function for assertion assert_compoundgood_path_6
Extract path function for assertion assert_compoundgood_path_7
Extract path function for assertion assert_compoundgood_path_8
Extract path function for assertion assert_compoundgood_path_9
Extract path function for assertion assert_compoundgood_path_10
Extract path function for assertion assert_compoundgood_path_11
Extract path function for assertion assert_compoundgood_path_12
Extract path function for assertion assert_compoundgood_path_13
Extract path function for assertion assert_compoundgood_path_14
Extract path function for assertion assert_compoundgood_path_15
Extract path function for assertion assert_compoundgood_path_16
Extract path function for assertion assert_compoundgood_path_18
Extract path function for assertion assert_wrongcapital_path_0
Extract path function for assertion assert_wrongcapital_path_1
Extract path function for assertion assert_dumpmode_path_0
Extract path function for assertion assert_dumpmode_path_1
Extract path function for assertion assert_dumpmode_path_2
Extract path function for assertion assert_dumpmode_path_3
Extract path function for assertion assert_dumpmode_path_4
Extract path function for assertion assert_dumpmode_path_5
Extract path function for assertion assert_dumpmode_path_6
Extract path function for assertion assert_pfx_list_chk_path_0
Extract path function for assertion assert_pfx_list_chk_path_4
Extract path function for assertion assert_pfx_list_chk_path_6
Extract path function for assertion assert_pfx_list_chk_path_9
Extract path function for assertion assert_pfx_list_chk_path_12
Extract path function for assertion assert_pfx_list_chk_path_15
Extract path function for assertion assert_pfx_list_chk_path_18
Extract path function for assertion assert_pfx_list_chk_path_21
Extract path function for assertion assert_pfx_list_chk_path_24
Extract path function for assertion assert_pfx_list_chk_path_27
Extract path function for assertion assert_pfx_list_chk_path_30
Extract path function for assertion assert_pfx_list_chk_path_33
Extract path function for assertion assert_pfx_list_chk_path_36
Extract path function for assertion assert_pfx_list_chk_path_39
Extract path function for assertion assert_pfx_list_chk_path_42
Extract path function for assertion assert_pfx_list_chk_path_45
Extract path function for assertion assert_pfx_list_chk_path_48
Extract path function for assertion assert_pfx_list_chk_path_51
Extract path function for assertion assert_pfx_list_chk_path_54
Extract path function for assertion assert_pfx_list_chk_path_58
Extract path function for assertion assert_askmode_path_0
Extract path function for assertion assert_askmode_path_1
Extract path function for assertion assert_askmode_path_3
Extract path function for assertion assert_askmode_path_4
Extract path function for assertion assert_askmode_path_5
Extract path function for assertion assert_askmode_path_7
Extract path function for assertion assert_askmode_path_8
Extract path function for assertion assert_askmode_path_9
Extract path function for assertion assert_askmode_path_10
Extract path function for assertion assert_askmode_path_11
Extract path function for assertion assert_askmode_path_12
Extract path function for assertion assert_askmode_path_13
Extract path function for assertion assert_askmode_path_14
Extract path function for assertion assert_askmode_path_15
Extract path function for assertion assert_askmode_path_17
Extract path function for assertion assert_askmode_path_18
Extract path function for assertion assert_askmode_path_20
Extract path function for assertion assert_askmode_path_21
Extract path function for assertion assert_askmode_path_23
Extract path function for assertion assert_askmode_path_24
Extract path function for assertion assert_askmode_path_25
Extract path function for assertion assert_askmode_path_26
Extract path function for assertion assert_askmode_path_27
Extract path function for assertion assert_askmode_path_28
Extract path function for assertion assert_askmode_path_29
Extract path function for assertion assert_askmode_path_30
Extract path function for assertion assert_askmode_path_31
Extract path function for assertion assert_askmode_path_32
Extract path function for assertion assert_askmode_path_34
Extract path function for assertion assert_askmode_path_35
Extract path function for assertion assert_askmode_path_36
Extract path function for assertion assert_askmode_path_37
Extract path function for assertion assert_askmode_path_38
Extract path function for assertion assert_askmode_path_39
Extract path function for assertion assert_askmode_path_40
Extract path function for assertion assert_askmode_path_41
Extract path function for assertion assert_askmode_path_42
Extract path function for assertion assert_askmode_path_43
Extract path function for assertion assert_askmode_path_44
Extract path function for assertion assert_askmode_path_45
Extract path function for assertion assert_askmode_path_46
Extract path function for assertion assert_askmode_path_47
Extract path function for assertion assert_askmode_path_48
Extract path function for assertion assert_askmode_path_49
Extract path function for assertion assert_askmode_path_50
Extract path function for assertion assert_askmode_path_51
Extract path function for assertion assert_askmode_path_52
Extract path function for assertion assert_askmode_path_53
Extract path function for assertion assert_askmode_path_54
Extract path function for assertion assert_askmode_path_55
Extract path function for assertion assert_askmode_path_56
Extract path function for assertion assert_askmode_path_57
Extract path function for assertion assert_askmode_path_58
Extract path function for assertion assert_askmode_path_59
Extract path function for assertion assert_askmode_path_60
Extract path function for assertion assert_askmode_path_61
Extract path function for assertion assert_askmode_path_62
Extract path function for assertion assert_askmode_path_63
Extract path function for assertion assert_askmode_path_64
Extract path function for assertion assert_askmode_path_65
Extract path function for assertion assert_askmode_path_66
Extract path function for assertion assert_askmode_path_67
Extract path function for assertion assert_askmode_path_68
Extract path function for assertion assert_askmode_path_69
Extract path function for assertion assert_askmode_path_70
Extract path function for assertion assert_askmode_path_71
Extract path function for assertion assert_askmode_path_72
Extract path function for assertion assert_askmode_path_74
Extract path function for assertion assert_askmode_path_75
Extract path function for assertion assert_askmode_path_77
Extract path function for assertion assert_askmode_path_78
Extract path function for assertion assert_askmode_path_79
Extract path function for assertion assert_askmode_path_80
Extract path function for assertion assert_askmode_path_81
Extract path function for assertion assert_askmode_path_82
Extract path function for assertion assert_askmode_path_84
Extract path function for assertion assert_askmode_path_85
Extract path function for assertion assert_askmode_path_86
Extract path function for assertion assert_makedent_path_0
Extract path function for assertion assert_makedent_path_1
Extract path function for assertion assert_makedent_path_2
Extract path function for assertion assert_makedent_path_3
Extract path function for assertion assert_makedent_path_4
Extract path function for assertion assert_makedent_path_5
Extract path function for assertion assert_makedent_path_6
Extract path function for assertion assert_makedent_path_7
Extract path function for assertion assert_makedent_path_9
Extract path function for assertion assert_makedent_path_11
Extract path function for assertion assert_makedent_path_13
Extract path function for assertion assert_makedent_path_15
Extract path function for assertion assert_makedent_path_17
Extract path function for assertion assert_makedent_path_18
Extract path function for assertion assert_makedent_path_20
Extract path function for assertion assert_makedent_path_21
Extract path function for assertion assert_makedent_path_23
Extract path function for assertion assert_makedent_path_24
Extract path function for assertion assert_makedent_path_26
Extract path function for assertion assert_makedent_path_29
Extract path function for assertion assert_makedent_path_30
Extract path function for assertion assert_makedent_path_32
Extract path function for assertion assert_makedent_path_35
Extract path function for assertion assert_extraletter_path_0
Extract path function for assertion assert_extraletter_path_1
Extract path function for assertion assert_extraletter_path_2
Extract path function for assertion assert_extraletter_path_3
Extract path function for assertion assert_extraletter_path_4
Extract path function for assertion assert_extraletter_path_5
Extract path function for assertion assert_extraletter_path_6
Extract path function for assertion assert_extraletter_path_7
Extract path function for assertion assert_wrongletter_path_0
Extract path function for assertion assert_wrongletter_path_1
Extract path function for assertion assert_wrongletter_path_2
Extract path function for assertion assert_wrongletter_path_4
Extract path function for assertion assert_wrongletter_path_5
Extract path function for assertion assert_wrongletter_path_6
Extract path function for assertion assert_wrongletter_path_7
Extract path function for assertion assert_wrongletter_path_8
Extract path function for assertion assert_wrongletter_path_10
Extract path function for assertion assert_wrongletter_path_11
Extract path function for assertion assert_wrongletter_path_12
Extract path function for assertion assert_wrongletter_path_13
Extract path function for assertion assert_wrongletter_path_14
Extract path function for assertion assert_wrongletter_path_15
Extract path function for assertion assert_wrongletter_path_16
Extract path function for assertion assert_wrongletter_path_17
Extract path function for assertion assert_wrongletter_path_18
Extract path function for assertion assert_wrongletter_path_19
Extract path function for assertion assert_wrongletter_path_20
Extract path function for assertion assert_wrongletter_path_22
Extract path function for assertion assert_wrongletter_path_23
Extract path function for assertion assert_wrongletter_path_25
Extract path function for assertion assert_correct_path_0
Extract path function for assertion assert_correct_path_1
Extract path function for assertion assert_correct_path_3
Extract path function for assertion assert_correct_path_4
Extract path function for assertion assert_correct_path_5
Extract path function for assertion assert_correct_path_6
Extract path function for assertion assert_correct_path_7
Extract path function for assertion assert_correct_path_8
Extract path function for assertion assert_correct_path_9
Extract path function for assertion assert_correct_path_10
Extract path function for assertion assert_correct_path_11
Extract path function for assertion assert_correct_path_12
Extract path function for assertion assert_correct_path_13
Extract path function for assertion assert_correct_path_14
Extract path function for assertion assert_correct_path_15
Extract path function for assertion assert_correct_path_16
Extract path function for assertion assert_correct_path_17
Extract path function for assertion assert_correct_path_18
Extract path function for assertion assert_correct_path_19
Extract path function for assertion assert_correct_path_20
Extract path function for assertion assert_correct_path_21
Extract path function for assertion assert_correct_path_22
Extract path function for assertion assert_correct_path_23
Extract path function for assertion assert_correct_path_24
Extract path function for assertion assert_correct_path_26
Extract path function for assertion assert_correct_path_28
Extract path function for assertion assert_correct_path_30
Extract path function for assertion assert_correct_path_32
Extract path function for assertion assert_correct_path_35
Extract path function for assertion assert_correct_path_37
Extract path function for assertion assert_correct_path_40
Extract path function for assertion assert_correct_path_42
Extract path function for assertion assert_correct_path_45
Extract path function for assertion assert_correct_path_47
Extract path function for assertion assert_correct_path_50
Extract path function for assertion assert_correct_path_52
Extract path function for assertion assert_correct_path_55
Extract path function for assertion assert_correct_path_57
Extract path function for assertion assert_correct_path_58
Extract path function for assertion assert_correct_path_59
Extract path function for assertion assert_correct_path_61
Extract path function for assertion assert_correct_path_64
Extract path function for assertion assert_correct_path_66
Extract path function for assertion assert_correct_path_69
Extract path function for assertion assert_correct_path_71
Extract path function for assertion assert_correct_path_74
Extract path function for assertion assert_correct_path_76
Extract path function for assertion assert_correct_path_79
Extract path function for assertion assert_correct_path_81
Extract path function for assertion assert_correct_path_84
Extract path function for assertion assert_correct_path_86
Extract path function for assertion assert_correct_path_89
Extract path function for assertion assert_correct_path_91
Extract path function for assertion assert_correct_path_94
Extract path function for assertion assert_correct_path_96
Extract path function for assertion assert_correct_path_99
Extract path function for assertion assert_correct_path_101
Extract path function for assertion assert_correct_path_104
Extract path function for assertion assert_correct_path_106
Extract path function for assertion assert_correct_path_109
Extract path function for assertion assert_correct_path_111
Extract path function for assertion assert_correct_path_114
Extract path function for assertion assert_correct_path_116
Extract path function for assertion assert_correct_path_119
Extract path function for assertion assert_correct_path_121
Extract path function for assertion assert_correct_path_124
Extract path function for assertion assert_correct_path_126
Extract path function for assertion assert_correct_path_129
Extract path function for assertion assert_correct_path_131
Extract path function for assertion assert_correct_path_134
Extract path function for assertion assert_correct_path_136
Extract path function for assertion assert_correct_path_139
Extract path function for assertion assert_correct_path_141
Extract path function for assertion assert_correct_path_144
Extract path function for assertion assert_correct_path_146
Extract path function for assertion assert_correct_path_149
Extract path function for assertion assert_correct_path_151
Extract path function for assertion assert_correct_path_154
Extract path function for assertion assert_correct_path_156
Extract path function for assertion assert_correct_path_159
Extract path function for assertion assert_correct_path_161
Extract path function for assertion assert_correct_path_164
Extract path function for assertion assert_correct_path_166
Extract path function for assertion assert_correct_path_168
Extract path function for assertion assert_correct_path_169
Extract path function for assertion assert_correct_path_171
Extract path function for assertion assert_correct_path_173
Extract path function for assertion assert_correct_path_174
Extract path function for assertion assert_correct_path_176
Extract path function for assertion assert_correct_path_178
Extract path function for assertion assert_correct_path_179
Extract path function for assertion assert_correct_path_181
Extract path function for assertion assert_correct_path_183
Extract path function for assertion assert_correct_path_184
Extract path function for assertion assert_correct_path_186
Extract path function for assertion assert_correct_path_189
Extract path function for assertion assert_correct_path_191
Extract path function for assertion assert_correct_path_194
Extract path function for assertion assert_correct_path_196
Extract path function for assertion assert_correct_path_198
Extract path function for assertion assert_correct_path_199
Extract path function for assertion assert_correct_path_201
Extract path function for assertion assert_correct_path_203
Extract path function for assertion assert_correct_path_204
Extract path function for assertion assert_correct_path_206
Extract path function for assertion assert_correct_path_209
Extract path function for assertion assert_correct_path_211
Extract path function for assertion assert_correct_path_214
Extract path function for assertion assert_correct_path_216
Extract path function for assertion assert_correct_path_219
Extract path function for assertion assert_correct_path_221
Extract path function for assertion assert_skiptoword_path_2
Extract path function for assertion assert_skiptoword_path_4
Extract path function for assertion assert_skiptoword_path_6
Extract path function for assertion assert_skiptoword_path_10
Extract path function for assertion assert_skiptoword_path_12
Extract path function for assertion assert_skiptoword_path_16
Extract path function for assertion assert_skiptoword_path_20
Extract path function for assertion assert_skiptoword_path_22
Extract path function for assertion assert_skiptoword_path_24
Extract path function for assertion assert_skiptoword_path_28
Extract path function for assertion assert_skiptoword_path_29
Extract path function for assertion assert_skiptoword_path_31
Extract path function for assertion assert_skiptoword_path_32
Extract path function for assertion assert_skiptoword_path_35
Extract path function for assertion assert_skiptoword_path_38
Extract path function for assertion assert_skiptoword_path_41
Extract path function for assertion assert_skiptoword_path_44
Extract path function for assertion assert_skiptoword_path_46
Extract path function for assertion assert_skiptoword_path_48
Extract path function for assertion assert_skiptoword_path_50
Extract path function for assertion assert_skiptoword_path_52
Extract path function for assertion assert_skiptoword_path_54
Extract path function for assertion assert_skiptoword_path_56
Extract path function for assertion assert_skiptoword_path_60
Extract path function for assertion assert_skiptoword_path_62
Extract path function for assertion assert_skiptoword_path_64
Extract path function for assertion assert_skiptoword_path_66
Extract path function for assertion assert_skiptoword_path_68
Extract path function for assertion assert_skiptoword_path_70
Extract path function for assertion assert_skiptoword_path_73
Extract path function for assertion assert_skiptoword_path_76
Extract path function for assertion assert_skiptoword_path_84
Extract path function for assertion assert_skiptoword_path_88
Extract path function for assertion assert_skiptoword_path_92
Extract path function for assertion assert_skiptoword_path_94
Extract path function for assertion assert_skiptoword_path_96
Extract path function for assertion assert_skiptoword_path_100
Extract path function for assertion assert_skiptoword_path_102
Extract path function for assertion assert_skiptoword_path_104
Extract path function for assertion assert_skiptoword_path_106
Extract path function for assertion assert_skiptoword_path_110
Extract path function for assertion assert_skiptoword_path_113
Extract path function for assertion assert_skiptoword_path_115
Extract path function for assertion assert_skiptoword_path_117
Extract path function for assertion assert_pr_pre_expansion_path_0
Extract path function for assertion assert_pr_pre_expansion_path_1
Extract path function for assertion assert_pr_pre_expansion_path_2
Extract path function for assertion assert_pr_pre_expansion_path_4
Extract path function for assertion assert_pr_pre_expansion_path_5
Extract path function for assertion assert_pr_pre_expansion_path_6
Extract path function for assertion assert_pr_pre_expansion_path_8
Extract path function for assertion assert_pr_pre_expansion_path_9
Extract path function for assertion assert_pr_pre_expansion_path_11
Extract path function for assertion assert_pr_pre_expansion_path_14
Extract path function for assertion assert_pr_pre_expansion_path_18
Extract path function for assertion assert_pr_pre_expansion_path_19
Extract path function for assertion assert_pr_pre_expansion_path_22
Extract path function for assertion assert_pr_pre_expansion_path_26
Extract path function for assertion assert_pr_pre_expansion_path_30
Extract path function for assertion assert_pr_pre_expansion_path_34
Extract path function for assertion assert_pr_pre_expansion_path_38
Extract path function for assertion assert_pr_pre_expansion_path_41
Extract path function for assertion assert_pr_pre_expansion_path_43
Extract path function for assertion assert_pr_pre_expansion_path_45
Extract path function for assertion assert_pr_pre_expansion_path_47
Extract path function for assertion assert_pr_pre_expansion_path_49
Extract path function for assertion assert_pr_pre_expansion_path_51
Extract path function for assertion assert_pr_pre_expansion_path_53
Extract path function for assertion assert_save_root_cap_path_0
Extract path function for assertion assert_save_root_cap_path_1
Extract path function for assertion assert_save_root_cap_path_2
Extract path function for assertion assert_save_root_cap_path_4
Extract path function for assertion assert_save_root_cap_path_5
Extract path function for assertion assert_save_root_cap_path_6
Extract path function for assertion assert_save_root_cap_path_8
Extract path function for assertion assert_save_root_cap_path_11
Extract path function for assertion assert_save_root_cap_path_12
Extract path function for assertion assert_save_root_cap_path_14
Extract path function for assertion assert_save_root_cap_path_17
Extract path function for assertion assert_save_root_cap_path_20
Extract path function for assertion assert_save_root_cap_path_24
Extract path function for assertion assert_save_root_cap_path_28
Extract path function for assertion assert_save_root_cap_path_29
Extract path function for assertion assert_save_root_cap_path_32
Extract path function for assertion assert_save_root_cap_path_36
Extract path function for assertion assert_save_root_cap_path_40
Extract path function for assertion assert_save_root_cap_path_41
Extract path function for assertion assert_save_root_cap_path_44
Extract path function for assertion assert_save_root_cap_path_48
Extract path function for assertion assert_save_root_cap_path_52
Extract path function for assertion assert_save_root_cap_path_56
Extract path function for assertion assert_save_root_cap_path_59
Extract path function for assertion assert_save_root_cap_path_62
Extract path function for assertion assert_save_root_cap_path_65
Extract path function for assertion assert_save_root_cap_path_66
Extract path function for assertion assert_save_root_cap_path_69
Extract path function for assertion assert_save_root_cap_path_70
Extract path function for assertion assert_save_root_cap_path_73
Extract path function for assertion assert_save_root_cap_path_74
Extract path function for assertion assert_save_root_cap_path_77
Extract path function for assertion assert_save_root_cap_path_78
Extract path function for assertion assert_save_root_cap_path_81
Extract path function for assertion assert_save_root_cap_path_82
Extract path function for assertion assert_save_root_cap_path_85
Extract path function for assertion assert_save_root_cap_path_86
Extract path function for assertion assert_save_root_cap_path_87
Extract path function for assertion assert_save_root_cap_path_90
Extract path function for assertion assert_save_root_cap_path_92
Extract path function for assertion assert_save_root_cap_path_95
Extract path function for assertion assert_save_root_cap_path_96
Extract path function for assertion assert_save_root_cap_path_97
Extract path function for assertion assert_save_root_cap_path_100
Extract path function for assertion assert_save_root_cap_path_102
Extract path function for assertion assert_save_root_cap_path_105
Extract path function for assertion assert_save_root_cap_path_106
Extract path function for assertion assert_save_root_cap_path_109
Extract path function for assertion assert_save_root_cap_path_110
Extract path function for assertion assert_save_root_cap_path_113
Extract path function for assertion assert_save_root_cap_path_114
Extract path function for assertion assert_save_root_cap_path_115
Extract path function for assertion assert_save_root_cap_path_118
Extract path function for assertion assert_save_root_cap_path_120
Extract path function for assertion assert_save_root_cap_path_123
Extract path function for assertion assert_save_root_cap_path_124
Extract path function for assertion assert_save_root_cap_path_125
Extract path function for assertion assert_save_root_cap_path_128
Extract path function for assertion assert_save_root_cap_path_130
Extract path function for assertion assert_save_root_cap_path_133
Extract path function for assertion assert_save_root_cap_path_137
Extract path function for assertion assert_save_root_cap_path_141
Extract path function for assertion assert_save_root_cap_path_145
Extract path function for assertion assert_save_root_cap_path_149
Extract path function for assertion assert_entryhasaffixes_path_0
Extract path function for assertion assert_entryhasaffixes_path_1
Extract path function for assertion assert_entryhasaffixes_path_2
Extract path function for assertion assert_entryhasaffixes_path_3
Extract path function for assertion assert_stop_path_0
Extract path function for assertion assert_copyout_path_4
Extract path function for assertion assert_initckch_path_0
Extract path function for assertion assert_initckch_path_1
Extract path function for assertion assert_initckch_path_2
Extract path function for assertion assert_initckch_path_3
Extract path function for assertion assert_initckch_path_4
Extract path function for assertion assert_initckch_path_5
Extract path function for assertion assert_initckch_path_6
Extract path function for assertion assert_initckch_path_7
Extract path function for assertion assert_initckch_path_8
Extract path function for assertion assert_initckch_path_9
Extract path function for assertion assert_initckch_path_12
Extract path function for assertion assert_initckch_path_13
Extract path function for assertion assert_initckch_path_15
Extract path function for assertion assert_initckch_path_18
Extract path function for assertion assert_initckch_path_19
Extract path function for assertion assert_initckch_path_21
Extract path function for assertion assert_initckch_path_22
Extract path function for assertion assert_initckch_path_24
Extract path function for assertion assert_initckch_path_25
Extract path function for assertion assert_initckch_path_27
Extract path function for assertion assert_initckch_path_28
Extract path function for assertion assert_initckch_path_30
Extract path function for assertion assert_initckch_path_31
Extract path function for assertion assert_initckch_path_33
Extract path function for assertion assert_initckch_path_34
Extract path function for assertion assert_initckch_path_36
Extract path function for assertion assert_initckch_path_37
Extract path function for assertion assert_initckch_path_39
Extract path function for assertion assert_initckch_path_40
Extract path function for assertion assert_initckch_path_42
Extract path function for assertion assert_initckch_path_43
Extract path function for assertion assert_initckch_path_45
Extract path function for assertion assert_initckch_path_46
Extract path function for assertion assert_initckch_path_48
Extract path function for assertion assert_initckch_path_51
Extract path function for assertion assert_initckch_path_53
Extract path function for assertion assert_stringcharlen_path_0
Extract path function for assertion assert_stringcharlen_path_2
Extract path function for assertion assert_stringcharlen_path_3
Extract path function for assertion assert_stringcharlen_path_5
Extract path function for assertion assert_stringcharlen_path_6
Extract path function for assertion assert_stringcharlen_path_8
Extract path function for assertion assert_stringcharlen_path_9
Extract path function for assertion assert_stringcharlen_path_11
Extract path function for assertion assert_stringcharlen_path_12
Extract path function for assertion assert_stringcharlen_path_14
Extract path function for assertion assert_stringcharlen_path_15
Extract path function for assertion assert_stringcharlen_path_17
Extract path function for assertion assert_stringcharlen_path_18
Extract path function for assertion assert_stringcharlen_path_20
Extract path function for assertion assert_stringcharlen_path_21
Extract path function for assertion assert_stringcharlen_path_23
Extract path function for assertion assert_stringcharlen_path_24
Extract path function for assertion assert_stringcharlen_path_26
Extract path function for assertion assert_stringcharlen_path_27
Extract path function for assertion assert_stringcharlen_path_29
Extract path function for assertion assert_stringcharlen_path_30
Extract path function for assertion assert_stringcharlen_path_32
Extract path function for assertion assert_stringcharlen_path_33
Extract path function for assertion assert_stringcharlen_path_35
Extract path function for assertion assert_stringcharlen_path_37
Extract path function for assertion assert_stringcharlen_path_38
Extract path function for assertion assert_TeX_math_check_path_0
Extract path function for assertion assert_TeX_math_check_path_1
Extract path function for assertion assert_TeX_math_check_path_2
Extract path function for assertion assert_TeX_math_check_path_3
Extract path function for assertion assert_TeX_math_check_path_4
Extract path function for assertion assert_TeX_math_check_path_5
Extract path function for assertion assert_TeX_math_begin_path_0
Extract path function for assertion assert_TeX_math_begin_path_1
Extract path function for assertion assert_TeX_math_begin_path_2
Extract path function for assertion assert_TeX_math_begin_path_4
Extract path function for assertion assert_TeX_math_begin_path_5
Extract path function for assertion assert_TeX_math_begin_path_6
Extract path function for assertion assert_TeX_math_begin_path_7
Extract path function for assertion assert_TeX_math_begin_path_8
Extract path function for assertion assert_TeX_math_begin_path_9
Extract path function for assertion assert_TeX_math_begin_path_10
Extract path function for assertion assert_TeX_math_begin_path_11
Extract path function for assertion assert_TeX_math_begin_path_12
Extract path function for assertion assert_TeX_math_begin_path_15
Extract path function for assertion assert_TeX_math_begin_path_18
Extract path function for assertion assert_TeX_math_begin_path_21
Extract path function for assertion assert_TeX_math_begin_path_24
Extract path function for assertion assert_TeX_math_begin_path_26
Extract path function for assertion assert_TeX_math_begin_path_28
Extract path function for assertion assert_entdump_path_0
Extract path function for assertion assert_entdump_path_1
Extract path function for assertion assert_entdump_path_2
Extract path function for assertion assert_entdump_path_3
Extract path function for assertion assert_entdump_path_5
Extract path function for assertion assert_entdump_path_7
Extract path function for assertion assert_entdump_path_9
Extract path function for assertion assert_entdump_path_11
Extract path function for assertion assert_entdump_path_13
Extract path function for assertion assert_cap_ok_path_0
Extract path function for assertion assert_cap_ok_path_1
Extract path function for assertion assert_cap_ok_path_2
Extract path function for assertion assert_cap_ok_path_3
Extract path function for assertion assert_cap_ok_path_4
Extract path function for assertion assert_cap_ok_path_5
Extract path function for assertion assert_cap_ok_path_6
Extract path function for assertion assert_cap_ok_path_8
Extract path function for assertion assert_cap_ok_path_9
Extract path function for assertion assert_cap_ok_path_10
Extract path function for assertion assert_cap_ok_path_12
Extract path function for assertion assert_cap_ok_path_14
Extract path function for assertion assert_cap_ok_path_16
Extract path function for assertion assert_cap_ok_path_17
Extract path function for assertion assert_cap_ok_path_18
Extract path function for assertion assert_cap_ok_path_19
Extract path function for assertion assert_cap_ok_path_20
Extract path function for assertion assert_cap_ok_path_22
Extract path function for assertion assert_cap_ok_path_23
Extract path function for assertion assert_cap_ok_path_24
Extract path function for assertion assert_cap_ok_path_25
Extract path function for assertion assert_cap_ok_path_26
Extract path function for assertion assert_cap_ok_path_28
Extract path function for assertion assert_cap_ok_path_29
Extract path function for assertion assert_cap_ok_path_30
Extract path function for assertion assert_cap_ok_path_31
Extract path function for assertion assert_cap_ok_path_32
Extract path function for assertion assert_cap_ok_path_34
Extract path function for assertion assert_cap_ok_path_35
Extract path function for assertion assert_cap_ok_path_37
Extract path function for assertion assert_cap_ok_path_39
Extract path function for assertion assert_cap_ok_path_41
Extract path function for assertion assert_cap_ok_path_42
Extract path function for assertion assert_cap_ok_path_43
Extract path function for assertion assert_cap_ok_path_45
Extract path function for assertion assert_cap_ok_path_47
Extract path function for assertion assert_cap_ok_path_49
Extract path function for assertion assert_cap_ok_path_50
Extract path function for assertion assert_cap_ok_path_52
Extract path function for assertion assert_cap_ok_path_53
Extract path function for assertion assert_cap_ok_path_55
Extract path function for assertion assert_cap_ok_path_57
Extract path function for assertion assert_cap_ok_path_59
Extract path function for assertion assert_cap_ok_path_60
Extract path function for assertion assert_cap_ok_path_61
Extract path function for assertion assert_cap_ok_path_63
Extract path function for assertion assert_cap_ok_path_65
Extract path function for assertion assert_cap_ok_path_67
Extract path function for assertion assert_cap_ok_path_69
Extract path function for assertion assert_cap_ok_path_70
Extract path function for assertion assert_cap_ok_path_71
Extract path function for assertion assert_cap_ok_path_72
Extract path function for assertion assert_cap_ok_path_73
Extract path function for assertion assert_cap_ok_path_75
Extract path function for assertion assert_cap_ok_path_76
Extract path function for assertion assert_TeX_math_end_path_0
Extract path function for assertion assert_TeX_math_end_path_1
Extract path function for assertion assert_TeX_math_end_path_2
Extract path function for assertion assert_TeX_math_end_path_3
Extract path function for assertion assert_TeX_math_end_path_4
Extract path function for assertion assert_TeX_math_end_path_5
Extract path function for assertion assert_TeX_math_end_path_6
Extract path function for assertion assert_TeX_math_end_path_7
Extract path function for assertion assert_TeX_math_end_path_8
Extract path function for assertion assert_linit_path_0
Extract path function for assertion assert_linit_path_1
Extract path function for assertion assert_linit_path_2
Extract path function for assertion assert_linit_path_3
Extract path function for assertion assert_linit_path_4
Extract path function for assertion assert_linit_path_5
Extract path function for assertion assert_linit_path_6
Extract path function for assertion assert_linit_path_7
Extract path function for assertion assert_linit_path_8
Extract path function for assertion assert_linit_path_9
Extract path function for assertion assert_linit_path_10
Extract path function for assertion assert_linit_path_11
Extract path function for assertion assert_linit_path_12
Extract path function for assertion assert_linit_path_13
Extract path function for assertion assert_linit_path_14
Extract path function for assertion assert_linit_path_15
Extract path function for assertion assert_linit_path_16
Extract path function for assertion assert_linit_path_17
Extract path function for assertion assert_linit_path_18
Extract path function for assertion assert_linit_path_19
Extract path function for assertion assert_linit_path_20
Extract path function for assertion assert_linit_path_21
Extract path function for assertion assert_linit_path_22
Extract path function for assertion assert_linit_path_23
Extract path function for assertion assert_linit_path_24
Extract path function for assertion assert_linit_path_25
Extract path function for assertion assert_linit_path_26
Extract path function for assertion assert_linit_path_27
Extract path function for assertion assert_linit_path_29
Extract path function for assertion assert_linit_path_30
Extract path function for assertion assert_linit_path_32
Extract path function for assertion assert_linit_path_33
Extract path function for assertion assert_linit_path_35
Extract path function for assertion assert_linit_path_38
Extract path function for assertion assert_linit_path_39
Extract path function for assertion assert_linit_path_41
Extract path function for assertion assert_linit_path_42
Extract path function for assertion assert_linit_path_43
Extract path function for assertion assert_linit_path_45
Extract path function for assertion assert_linit_path_46
Extract path function for assertion assert_linit_path_47
Extract path function for assertion assert_linit_path_49
Extract path function for assertion assert_linit_path_51
Extract path function for assertion assert_linit_path_53
Extract path function for assertion assert_linit_path_54
Extract path function for assertion assert_linit_path_55
Extract path function for assertion assert_linit_path_57
Extract path function for assertion assert_linit_path_59
Extract path function for assertion assert_linit_path_61
Extract path function for assertion assert_linit_path_62
Extract path function for assertion assert_linit_path_65
Extract path function for assertion assert_linit_path_66
Extract path function for assertion assert_linit_path_69
Extract path function for assertion assert_linit_path_70
Extract path function for assertion assert_linit_path_73
Extract path function for assertion assert_linit_path_77
Extract path function for assertion assert_linit_path_78
Extract path function for assertion assert_linit_path_81
Extract path function for assertion assert_linit_path_82
Extract path function for assertion assert_linit_path_83
Extract path function for assertion assert_linit_path_86
Extract path function for assertion assert_linit_path_87
Extract path function for assertion assert_linit_path_88
Extract path function for assertion assert_linit_path_91
Extract path function for assertion assert_linit_path_93
Extract path function for assertion assert_linit_path_96
Extract path function for assertion assert_linit_path_97
Extract path function for assertion assert_linit_path_98
Extract path function for assertion assert_linit_path_101
Extract path function for assertion assert_linit_path_103
Extract path function for assertion assert_linit_path_106
Extract path function for assertion assert_linit_path_110
Extract path function for assertion assert_linit_path_114
Extract path function for assertion assert_linit_path_118
Extract path function for assertion assert_linit_path_120
Extract path function for assertion assert_linit_path_121
Extract path function for assertion assert_linit_path_126
Extract path function for assertion assert_linit_path_127
Extract path function for assertion assert_linit_path_132
Extract path function for assertion assert_linit_path_136
Extract path function for assertion assert_linit_path_137
Extract path function for assertion assert_linit_path_138
Extract path function for assertion assert_linit_path_139
Extract path function for assertion assert_linit_path_140
Extract path function for assertion assert_linit_path_141
Extract path function for assertion assert_linit_path_142
Extract path function for assertion assert_linit_path_143
Extract path function for assertion assert_linit_path_144
Extract path function for assertion assert_linit_path_145
Extract path function for assertion assert_linit_path_147
Extract path function for assertion assert_linit_path_148
Extract path function for assertion assert_linit_path_149
Extract path function for assertion assert_linit_path_150
Extract path function for assertion assert_makepossibilities_path_0
Extract path function for assertion assert_makepossibilities_path_1
Extract path function for assertion assert_makepossibilities_path_2
Extract path function for assertion assert_makepossibilities_path_3
Extract path function for assertion assert_makepossibilities_path_4
Extract path function for assertion assert_makepossibilities_path_5
Extract path function for assertion assert_makepossibilities_path_6
Extract path function for assertion assert_makepossibilities_path_7
Extract path function for assertion assert_makepossibilities_path_8
Extract path function for assertion assert_makepossibilities_path_9
Extract path function for assertion assert_makepossibilities_path_10
Extract path function for assertion assert_makepossibilities_path_11
Extract path function for assertion assert_makepossibilities_path_12
Extract path function for assertion assert_makepossibilities_path_13
Extract path function for assertion assert_makepossibilities_path_14
Extract path function for assertion assert_makepossibilities_path_15
Extract path function for assertion assert_makepossibilities_path_16
Extract path function for assertion assert_makepossibilities_path_17
Extract path function for assertion assert_makepossibilities_path_18
Extract path function for assertion assert_makepossibilities_path_19
Extract path function for assertion assert_makepossibilities_path_20
Extract path function for assertion assert_makepossibilities_path_21
Extract path function for assertion assert_makepossibilities_path_22
Extract path function for assertion assert_makepossibilities_path_23
Extract path function for assertion assert_makepossibilities_path_24
Extract path function for assertion assert_makepossibilities_path_25
Extract path function for assertion assert_lookup_path_0
Extract path function for assertion assert_lookup_path_1
Extract path function for assertion assert_lookup_path_2
Extract path function for assertion assert_lookup_path_4
Extract path function for assertion assert_lookup_path_5
Extract path function for assertion assert_lookup_path_7
Extract path function for assertion assert_lookup_path_8
Extract path function for assertion assert_lookup_path_10
Extract path function for assertion assert_lookup_path_12
Extract path function for assertion assert_lookup_path_14
Extract path function for assertion assert_ichartostr_path_2
Extract path function for assertion assert_ichartostr_path_7
Extract path function for assertion assert_ichartostr_path_10
Extract path function for assertion assert_ichartostr_path_13
Extract path function for assertion assert_ichartostr_path_16
Extract path function for assertion assert_ichartostr_path_19
Extract path function for assertion assert_combinecaps_path_1
Extract path function for assertion assert_combinecaps_path_3
Extract path function for assertion assert_combinecaps_path_5
Extract path function for assertion assert_combinecaps_path_6
Extract path function for assertion assert_combinecaps_path_7
Extract path function for assertion assert_combinecaps_path_8
Extract path function for assertion assert_combinecaps_path_9
Extract path function for assertion assert_combinecaps_path_10
Extract path function for assertion assert_combinecaps_path_11
Extract path function for assertion assert_combinecaps_path_12
Extract path function for assertion assert_forcevheader_path_0
Extract path function for assertion assert_forcevheader_path_1
Extract path function for assertion assert_forcevheader_path_2
Extract path function for assertion assert_forcevheader_path_3
Extract path function for assertion assert_printichar_path_0
Extract path function for assertion assert_printichar_path_1
Extract path function for assertion assert_printichar_path_2
OH stats is requested, dumping stat file...
Processed instructions number 11014
{
    "numberOfAssertCalls": 0,
    "numberOfBlocksInFunctionsWithNoDG": 30,
    "numberOfDataDependentInstructions": 2687,
    "numberOfHashVariables": 1,
    "numberOfImplicitlyProtectedInstructions": 0,
    "numberOfInstructionsInFilteredFunctions": 4960,
    "numberOfInstructionsInFunctionsWithNoDG": 155,
    "numberOfNonHashableBlocks": 58,
    "numberOfNonHashableInstructions": 695,
    "numberOfOHProcessedInstr": 5899,
    "numberOfOtherUnprotectedInstructions": 22,
    "numberOfOtherUnprotectedLoopVariantInstructions": 80,
    "numberOfProtectedArguments": 0,
    "numberOfProtectedBlocks": 0,
    "numberOfProtectedFunctions": 46,
    "numberOfProtectedGuardArguments": 0,
    "numberOfProtectedGuardInstructions": 0,
    "numberOfProtectedInstructions": 0,
    "numberOfSensitiveBlocks": 1332,
    "numberOfSensitiveFunctions": 53,
    "numberOfShortRangeAssertCalls": 922,
    "numberOfShortRangeImplicitlyProtectedInstructions": 0,
    "numberOfShortRangeProtectedArguments": 82,
    "numberOfShortRangeProtectedBlocks": 984,
    "numberOfShortRangeProtectedGuardArguments": 0,
    "numberOfShortRangeProtectedGuardInstructions": 0,
    "numberOfShortRangeProtectedInstructions": 750,
    "numberOfUnprotectedArgumentReachableInstructions": 120,
    "numberOfUnprotectedArgumentReachableLoopBlocks": 0,
    "numberOfUnprotectedDataDependentBlocks": 0,
    "numberOfUnprotectedDataDependentLoopBlocks": 290,
    "numberOfUnprotectedGlobalReachableInstructions": 217,
    "numberOfUnprotectedGlobalReachableLoopBlocks": 0,
    "numberOfUnprotectedInputDependentInstructions": 0,
    "numberOfUnprotectedLoopInstructions": 1328
}
ERR. processed 53 function, while filter count is 348
===-------------------------------------------------------------------------===
                      ... Pass execution timing report ...
===-------------------------------------------------------------------------===
  Total Execution Time: 200.9349 seconds (201.4175 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
  178.2093 ( 89.5%)   1.3877 ( 78.0%)  179.5970 ( 89.4%)  179.9828 ( 89.4%)  Instruments bitcode with hashing and logging functions
  19.1576 (  9.6%)   0.3478 ( 19.6%)  19.5055 (  9.7%)  19.5057 (  9.7%)  runs input dependency analysis
   1.2813 (  0.6%)   0.0164 (  0.9%)   1.2978 (  0.6%)   1.3162 (  0.7%)  Memory SSA
   0.1647 (  0.1%)   0.0120 (  0.7%)   0.1767 (  0.1%)   0.1851 (  0.1%)  Bitcode Writer
   0.1493 (  0.1%)   0.0015 (  0.1%)   0.1508 (  0.1%)   0.1527 (  0.1%)  Dominator Tree Construction
   0.0998 (  0.1%)   0.0012 (  0.1%)   0.1010 (  0.1%)   0.1007 (  0.0%)  Natural Loop Information
   0.0035 (  0.0%)   0.0040 (  0.2%)   0.0075 (  0.0%)   0.0691 (  0.0%)  Include functions in a given file in any transformation
   0.0354 (  0.0%)   0.0035 (  0.2%)   0.0389 (  0.0%)   0.0438 (  0.0%)  Module Verifier
   0.0119 (  0.0%)   0.0004 (  0.0%)   0.0123 (  0.0%)   0.0121 (  0.0%)  Post-Dominator Tree Construction
   0.0109 (  0.0%)   0.0003 (  0.0%)   0.0112 (  0.0%)   0.0115 (  0.0%)  Dominator Tree Construction
   0.0069 (  0.0%)   0.0001 (  0.0%)   0.0070 (  0.0%)   0.0080 (  0.0%)  Function Alias Analysis Results
   0.0076 (  0.0%)   0.0002 (  0.0%)   0.0078 (  0.0%)   0.0078 (  0.0%)  Natural Loop Information
   0.0072 (  0.0%)   0.0000 (  0.0%)   0.0072 (  0.0%)   0.0072 (  0.0%)  Instruments bitcode with guards
   0.0063 (  0.0%)   0.0001 (  0.0%)   0.0063 (  0.0%)   0.0069 (  0.0%)  Basic Alias Analysis (stateless AA impl)
   0.0039 (  0.0%)   0.0000 (  0.0%)   0.0039 (  0.0%)   0.0039 (  0.0%)  Call site information
   0.0005 (  0.0%)   0.0007 (  0.0%)   0.0012 (  0.0%)   0.0012 (  0.0%)  Remove unreachable blocks from the CFG
   0.0002 (  0.0%)   0.0007 (  0.0%)   0.0009 (  0.0%)   0.0009 (  0.0%)  CallGraph Construction
   0.0000 (  0.0%)   0.0008 (  0.0%)   0.0008 (  0.0%)   0.0008 (  0.0%)  runs indirect and virtual calls analysis
   0.0000 (  0.0%)   0.0007 (  0.0%)   0.0007 (  0.0%)   0.0007 (  0.0%)  Dead Global Elimination
   0.0003 (  0.0%)   0.0000 (  0.0%)   0.0003 (  0.0%)   0.0003 (  0.0%)  Dominator Tree Construction
   0.0001 (  0.0%)   0.0000 (  0.0%)   0.0001 (  0.0%)   0.0001 (  0.0%)  Natural Loop Information
   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)   0.0000 (  0.0%)  Marks functions in a given file as assert functions
  199.1567 (100.0%)   1.7782 (100.0%)  200.9349 (100.0%)  201.4175 (100.0%)  Total

===-------------------------------------------------------------------------===
                                LLVM IR Parsing
===-------------------------------------------------------------------------===
  Total Execution Time: 0.0392 seconds (0.0392 wall clock)

   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---
   0.0385 (100.0%)   0.0007 (100.0%)   0.0392 (100.0%)   0.0392 (100.0%)  Parse IR
   0.0385 (100.0%)   0.0007 (100.0%)   0.0392 (100.0%)   0.0392 (100.0%)  Total

